{
  "openapi": "3.0.3",
  "info": {
    "title": "Omnistrate Registration API",
    "description": "REST API for Omnistrate Service Registration",
    "version": "2022-09-01-00"
  },
  "servers": [
    {
      "url": "https://api.omnistrate.cloud"
    }
  ],
  "paths": {
    "/2022-09-01-00/accountconfig": {
      "post": {
        "tags": ["account-config-api"],
        "summary": "CreateAccountConfig account-config-api",
        "operationId": "account-config-api#CreateAccountConfig",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountConfigRequest2"
              },
              "example": {
                "awsAccessKey": "Tenetur numquam.",
                "awsAccountID": "123456789012",
                "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                "awsSecretKey": "Et nostrum harum eos suscipit iusto.",
                "byoaInstanceID": "instance-12345678",
                "cloudProviderId": "infra-12345678",
                "description": "An AWS account hosting multiple dev environments",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                "gcpServiceAccountKey": "Totam quisquam nostrum.",
                "name": "Dev AWS account"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The ID of the registered account config",
                  "example": "ac-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "ac-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create an account config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/accountconfig/{id}": {
      "delete": {
        "tags": ["account-config-api"],
        "summary": "DeleteAccountConfig account-config-api",
        "operationId": "account-config-api#DeleteAccountConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Account Config",
              "example": "Corrupti doloremque qui."
            },
            "example": "ac-12345678"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete an account config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["account-config-api"],
        "summary": "DescribeAccountConfig account-config-api",
        "operationId": "account-config-api#DescribeAccountConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Account Config",
              "example": "Consequatur explicabo."
            },
            "example": "ac-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeAccountConfigResult"
                },
                "example": {
                  "awsAccountID": "123456789012",
                  "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                  "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                  "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                  "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                  "cloudProviderId": "infra-12345678",
                  "description": "An AWS account hosting multiple dev environments",
                  "gcpProjectID": "my-project",
                  "gcpProjectNumber": "123456789012",
                  "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                  "id": "ac-12345678",
                  "name": "Dev AWS account",
                  "status": "READY",
                  "statusMessage": "Account is ready"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe an account config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/accountconfig/aws/{awsAccountID}": {
      "get": {
        "tags": ["account-config-api"],
        "summary": "DescribeAccountConfigByAWSAccountID account-config-api",
        "operationId": "account-config-api#DescribeAccountConfigByAWSAccountID",
        "parameters": [
          {
            "name": "awsAccountID",
            "in": "path",
            "description": "The AWS account ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The AWS account ID",
              "example": "123456789012"
            },
            "example": "123456789012"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeAccountConfigByAWSAccountIDResult"
                },
                "example": {
                  "awsAccountID": "123456789012",
                  "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                  "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                  "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                  "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                  "cloudProviderId": "infra-12345678",
                  "description": "An AWS account hosting multiple dev environments",
                  "id": "ac-12345678",
                  "name": "Dev AWS account",
                  "status": "READY",
                  "statusMessage": "Account is ready"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe an account config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/accountconfig/byoa": {
      "get": {
        "tags": ["account-config-api"],
        "summary": "ListBYOAConfig account-config-api",
        "operationId": "account-config-api#ListBYOAConfig",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListBYOAConfigRequest2"
              },
              "example": {
                "cloudProviderName": "aws"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBYOAConfigResult"
                },
                "example": {
                  "accountConfigs": [
                    {
                      "awsAccountID": "123456789012",
                      "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                      "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                      "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                      "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                      "cloudProviderId": "infra-12345678",
                      "description": "An AWS account hosting multiple dev environments",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                      "id": "ac-12345678",
                      "name": "Dev AWS account",
                      "status": "READY",
                      "statusMessage": "Account is ready"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                      "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                      "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                      "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                      "cloudProviderId": "infra-12345678",
                      "description": "An AWS account hosting multiple dev environments",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                      "id": "ac-12345678",
                      "name": "Dev AWS account",
                      "status": "READY",
                      "statusMessage": "Account is ready"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                      "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                      "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                      "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                      "cloudProviderId": "infra-12345678",
                      "description": "An AWS account hosting multiple dev environments",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                      "id": "ac-12345678",
                      "name": "Dev AWS account",
                      "status": "READY",
                      "statusMessage": "Account is ready"
                    }
                  ],
                  "ids": ["ac-12345678", "ac-abcdefgh", "ac-1234efgh"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list account configs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/accountconfig/cloudprovider/{cloudProviderName}": {
      "get": {
        "tags": ["account-config-api"],
        "summary": "ListAccountConfig account-config-api",
        "operationId": "account-config-api#ListAccountConfig",
        "parameters": [
          {
            "name": "cloudProviderName",
            "in": "path",
            "description": "Cloud Provider name to filter on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the Infra Provider",
              "example": "aws|azure|gcp|all"
            },
            "example": "aws"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAccountConfigResult"
                },
                "example": {
                  "accountConfigs": [
                    {
                      "awsAccountID": "123456789012",
                      "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                      "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                      "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                      "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                      "cloudProviderId": "infra-12345678",
                      "description": "An AWS account hosting multiple dev environments",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                      "id": "ac-12345678",
                      "name": "Dev AWS account",
                      "status": "READY",
                      "statusMessage": "Account is ready"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                      "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                      "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                      "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                      "cloudProviderId": "infra-12345678",
                      "description": "An AWS account hosting multiple dev environments",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                      "id": "ac-12345678",
                      "name": "Dev AWS account",
                      "status": "READY",
                      "statusMessage": "Account is ready"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                      "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                      "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                      "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                      "cloudProviderId": "infra-12345678",
                      "description": "An AWS account hosting multiple dev environments",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                      "id": "ac-12345678",
                      "name": "Dev AWS account",
                      "status": "READY",
                      "statusMessage": "Account is ready"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                      "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                      "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                      "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                      "cloudProviderId": "infra-12345678",
                      "description": "An AWS account hosting multiple dev environments",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                      "id": "ac-12345678",
                      "name": "Dev AWS account",
                      "status": "READY",
                      "statusMessage": "Account is ready"
                    }
                  ],
                  "ids": ["ac-12345678", "ac-abcdefgh", "ac-1234efgh"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list account configs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/accountconfig/gcp/{gcpProjectID}": {
      "get": {
        "tags": ["account-config-api"],
        "summary": "DescribeAccountConfigByGCPProjectID account-config-api",
        "operationId": "account-config-api#DescribeAccountConfigByGCPProjectID",
        "parameters": [
          {
            "name": "gcpProjectID",
            "in": "path",
            "description": "The GCP project ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The GCP project ID",
              "example": "my-project"
            },
            "example": "my-project"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeAccountConfigByGCPProjectIDResult"
                },
                "example": {
                  "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                  "cloudProviderId": "infra-12345678",
                  "description": "An AWS account hosting multiple dev environments",
                  "gcpProjectID": "my-project",
                  "gcpProjectNumber": "123456789012",
                  "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                  "id": "ac-12345678",
                  "name": "Dev AWS account",
                  "status": "READY",
                  "statusMessage": "Account is ready"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe an account config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/accountconfig/identityid": {
      "get": {
        "tags": ["account-config-api"],
        "summary": "AccountConfigIdentityID account-config-api",
        "description": "Returns the identity id of the account config to be used in the trust policy of the account",
        "operationId": "account-config-api#AccountConfigIdentityID",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountConfigIdentityIDResult"
                },
                "example": {
                  "id": "org-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to get an account config identity id",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/accountconfig/verify/{id}": {
      "post": {
        "tags": ["account-config-api"],
        "summary": "VerifyAccountConfig account-config-api",
        "operationId": "account-config-api#VerifyAccountConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Account Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Account Config",
              "example": "Dolorum fugiat perspiciatis iure similique enim nemo."
            },
            "example": "ac-12345678"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list account configs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/availability-zone/{id}": {
      "get": {
        "tags": ["availability-zone-api"],
        "summary": "DescribeAvailabilityZone availability-zone-api",
        "operationId": "availability-zone-api#DescribeAvailabilityZone",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an AZ",
              "example": "Sed sit et ut incidunt accusamus."
            },
            "example": "az-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeAvailabilityZoneResult"
                },
                "example": {
                  "cloudProviderName": "aws",
                  "code": "us-east-1a",
                  "description": "US East (N. Virginia) Availability Zone A",
                  "id": "az-12345678",
                  "regionCode": "us-east-1"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe an availability zone",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/availability-zone/cloud-provider/{cloudProviderName}": {
      "get": {
        "tags": ["availability-zone-api"],
        "summary": "ListAvailabilityZone availability-zone-api",
        "operationId": "availability-zone-api#ListAvailabilityZone",
        "parameters": [
          {
            "name": "cloudProviderName",
            "in": "path",
            "description": "The cloud provider for this compute instance type config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the Infra Provider",
              "example": "aws|azure|gcp|all"
            },
            "example": "aws"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAvailabilityZonesResult"
                },
                "example": {
                  "ids": ["az-12345678", "az-87654321"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list availability zones",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/availability-zone/code/{code}/cloud-provider/{cloudProviderName}": {
      "get": {
        "tags": ["availability-zone-api"],
        "summary": "GetAvailabilityZoneByCode availability-zone-api",
        "operationId": "availability-zone-api#GetAvailabilityZoneByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Cloud-provider native availability zone code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Cloud-provider native availability zone code",
              "example": "us-east-1a"
            },
            "example": "us-east-1a"
          },
          {
            "name": "cloudProviderName",
            "in": "path",
            "description": "The cloud provider for this compute instance type config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the Infra Provider",
              "example": "aws|azure|gcp|all"
            },
            "example": "aws"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Assumenda maiores ad."
                },
                "example": "Similique delectus perferendis animi et."
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to get an availability zone by code",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/availability-zone/region/code/{regionCode}/cloud-provider/{cloudProviderName}": {
      "get": {
        "tags": ["availability-zone-api"],
        "summary": "ListAvailabilityZonesByRegionCode availability-zone-api",
        "operationId": "availability-zone-api#ListAvailabilityZonesByRegionCode",
        "parameters": [
          {
            "name": "regionCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "us-east-1"
            },
            "example": "us-east-1"
          },
          {
            "name": "cloudProviderName",
            "in": "path",
            "description": "The cloud provider for this compute instance type config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the Infra Provider",
              "example": "aws|azure|gcp|all"
            },
            "example": "aws"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAvailabilityZonesByRegionCodeResult"
                },
                "example": {
                  "ids": ["az-12345678", "az-87654321"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list availability zones by region code",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/change-password": {
      "post": {
        "tags": ["signup-api"],
        "summary": "ChangePassword signup-api",
        "operationId": "signup-api#ChangePassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              },
              "example": {
                "email": "abc@gmail.com",
                "password": "password",
                "token": "fc7b8dea-a50b-4c9a-8864-fc3d845a2be6"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to change password",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/cloud-provider": {
      "get": {
        "tags": ["cloud-provider-api"],
        "summary": "ListCloudProvider cloud-provider-api",
        "operationId": "cloud-provider-api#ListCloudProvider",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "description": "Service ID. If specified together with serviceModelId,list the cloud provider of the service model. Otherwise list all cloud provider.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "serviceModelId",
            "in": "query",
            "description": "Service model ID. If specified together with serviceId,list the cloud provider of the service model. Otherwise list all cloud provider.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Omnis modi rerum dolore rerum delectus cumque."
            },
            "example": "sm-12345678"
          },
          {
            "name": "productTierId",
            "in": "query",
            "description": "Product tier ID. If specified together with serviceId,list the cloud provider of the product tier. Otherwise list all cloud provider.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Illum ipsam inventore."
            },
            "example": "pt-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCloudProvidersResult"
                },
                "example": {
                  "ids": ["infra-12345678", "infra-87654321"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list cloud providers",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/cloud-provider/{id}": {
      "get": {
        "tags": ["cloud-provider-api"],
        "summary": "DescribeCloudProvider cloud-provider-api",
        "operationId": "cloud-provider-api#DescribeCloudProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the CloudProvider",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an CloudProvider",
              "example": "Et qui laudantium voluptatem error alias."
            },
            "example": "infra-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeCloudProviderResult"
                },
                "example": {
                  "description": "Amazon Web Services",
                  "id": "infra-12345678",
                  "name": "aws"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe an cloud provider",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/cloud-provider/name/{name}": {
      "get": {
        "tags": ["cloud-provider-api"],
        "summary": "GetCloudProviderByName cloud-provider-api",
        "operationId": "cloud-provider-api#GetCloudProviderByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the CloudProvider",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the CloudProvider",
              "example": "aws",
              "minLength": 1
            },
            "example": "aws"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Quas harum doloremque."
                },
                "example": "Non sit reprehenderit culpa qui ipsum fuga."
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to get an cloud provider by name",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/compose-gen/image": {
      "get": {
        "tags": ["compose-gen-api"],
        "summary": "CheckIfContainerImageAccessible compose-gen-api",
        "operationId": "compose-gen-api#CheckIfContainerImageAccessible",
        "parameters": [
          {
            "name": "imageRegistry",
            "in": "query",
            "description": "Registry where the image is stored",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Registry where the image is stored",
              "example": "docker.io"
            },
            "example": "docker.io"
          },
          {
            "name": "username",
            "in": "query",
            "description": "Username to access the image registry",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Username to access the image registry",
              "example": "username"
            },
            "example": "username"
          },
          {
            "name": "password",
            "in": "query",
            "description": "Password to access the image registry",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Password to access the image registry",
              "example": "password"
            },
            "example": "password"
          },
          {
            "name": "image",
            "in": "query",
            "description": "Name of the image along with the tag. Include the repository name if the image is not from the official repository",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the image along with the tag. Include the repository name if the image is not from the official repository",
              "example": "library/mysql:5.7"
            },
            "example": "library/mysql:5.7"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckIfContainerImageAccessibleResult"
                },
                "example": {
                  "errorMsg": "Omnis quas nihil magni odio accusamus.",
                  "imageAccessible": true
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to build a service from compose spec",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["compose-gen-api"],
        "summary": "GenerateComposeSpecFromContainerImage compose-gen-api",
        "operationId": "compose-gen-api#GenerateComposeSpecFromContainerImage",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateComposeSpecFromContainerImageRequest2"
              },
              "example": {
                "environmentVariables": [
                  {
                    "key": "MYSQL_ROOT_PASSWORD",
                    "value": "password"
                  }
                ],
                "image": "library/mysql:5.7",
                "imageRegistry": "docker.io",
                "password": "password",
                "username": "username"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateComposeSpecFromContainerImageResult"
                },
                "example": {
                  "fileContent": "Rem nesciunt id."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to build a service from compose spec",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/contactus": {
      "post": {
        "tags": ["contactus-api"],
        "summary": "Contactus contactus-api",
        "operationId": "contactus-api#Contactus",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactusRequest"
              },
              "example": {
                "company": "ABC",
                "email": "abc@gmail.com",
                "message": "this is a test",
                "name": "John Doe"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to contactus",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/customdomain": {
      "get": {
        "tags": ["custom-domain-api"],
        "summary": "ListCustomDomain custom-domain-api",
        "operationId": "custom-domain-api#ListCustomDomain",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCustomDomainResult"
                },
                "example": {
                  "CustomDomains": [
                    {
                      "customDomain": "mydomain.dev",
                      "description": "Description of the domain",
                      "id": "cd-12345678",
                      "name": "Dev domain",
                      "route53Configuration": {
                        "awsAccountID": "123456789012",
                        "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
                      },
                      "status": "READY",
                      "statusMessage": "Account is ready"
                    },
                    {
                      "customDomain": "mydomain.dev",
                      "description": "Description of the domain",
                      "id": "cd-12345678",
                      "name": "Dev domain",
                      "route53Configuration": {
                        "awsAccountID": "123456789012",
                        "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
                      },
                      "status": "READY",
                      "statusMessage": "Account is ready"
                    },
                    {
                      "customDomain": "mydomain.dev",
                      "description": "Description of the domain",
                      "id": "cd-12345678",
                      "name": "Dev domain",
                      "route53Configuration": {
                        "awsAccountID": "123456789012",
                        "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
                      },
                      "status": "READY",
                      "statusMessage": "Account is ready"
                    }
                  ],
                  "ids": ["cd-12345678", "cd-abcdefgh", "cd-1234efgh"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list Custom Domains",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["custom-domain-api"],
        "summary": "CreateCustomDomain custom-domain-api",
        "operationId": "custom-domain-api#CreateCustomDomain",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomDomainRequest2"
              },
              "example": {
                "customDomain": "mydomain.dev",
                "description": "Description of the domain",
                "name": "Dev domain",
                "route53Configuration": {
                  "awsAccountID": "123456789012"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The ID of the registered Custom Domain",
                  "example": "cd-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "cd-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create an Custom Domain",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/customdomain/{id}": {
      "delete": {
        "tags": ["custom-domain-api"],
        "summary": "DeleteCustomDomain custom-domain-api",
        "operationId": "custom-domain-api#DeleteCustomDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "custom domain ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Custom Domain",
              "example": "Ad error."
            },
            "example": "cd-12345678"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete an Custom Domain",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["custom-domain-api"],
        "summary": "DescribeCustomDomain custom-domain-api",
        "operationId": "custom-domain-api#DescribeCustomDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "custom domain ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Custom Domain",
              "example": "Repellat dolorem quam."
            },
            "example": "cd-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeCustomDomainResult"
                },
                "example": {
                  "customDomain": "mydomain.dev",
                  "description": "Description of the domain",
                  "id": "cd-12345678",
                  "name": "Dev domain",
                  "route53Configuration": {
                    "awsAccountID": "123456789012",
                    "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
                  },
                  "status": "READY",
                  "statusMessage": "Account is ready"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe an Custom Domain",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/customdomain/identityid": {
      "get": {
        "tags": ["custom-domain-api"],
        "summary": "CustomDomainIdentityID custom-domain-api",
        "description": "Returns the identity id of the Custom Domain to be used in the trust policy of the account",
        "operationId": "custom-domain-api#CustomDomainIdentityID",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomDomainIdentityIDResult"
                },
                "example": {
                  "id": "org-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to get an Custom Domain identity id",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/customdomain/verify/{id}": {
      "post": {
        "tags": ["custom-domain-api"],
        "summary": "VerifyCustomDomain custom-domain-api",
        "operationId": "custom-domain-api#VerifyCustomDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "custom domain ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Custom Domain",
              "example": "Error veritatis suscipit sapiente cupiditate."
            },
            "example": "cd-12345678"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list Custom Domains",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/customer-invite-user": {
      "post": {
        "tags": ["users-api"],
        "summary": "CustomerInviteUser users-api",
        "operationId": "users-api#CustomerInviteUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerInviteUserRequest2"
              },
              "example": {
                "email": "abc@example.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to invite user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/customer-login-with-identity-provider": {
      "post": {
        "tags": ["users-api"],
        "summary": "CustomerLoginWithIdentityProvider users-api",
        "operationId": "users-api#CustomerLoginWithIdentityProvider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerLoginWithIdentityProviderRequest2"
              },
              "example": {
                "authorizationCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
                "companyDescription": "We sell xyz database software",
                "companyUrl": "https://www.mywebsite.com",
                "environmentType": "DEV",
                "identityProviderName": "Google",
                "invitedEmail": "abc@gmail.com",
                "legalCompanyName": "mywebsite",
                "redirectUri": "https://www.example/redirect"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerLoginWithIdentityProviderResult"
                },
                "example": {
                  "jwtToken": ""
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to signin",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/customer-reset-password": {
      "post": {
        "tags": ["users-api"],
        "summary": "CustomerResetPassword users-api",
        "operationId": "users-api#CustomerResetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerResetPasswordRequest2"
              },
              "example": {
                "email": "abc@example.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to signin",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/customer-user-signin": {
      "post": {
        "tags": ["users-api"],
        "summary": "CustomerSignin users-api",
        "operationId": "users-api#CustomerSignin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSigninRequest2"
              },
              "example": {
                "email": "abc@gmail.com",
                "environmentType": "DEV",
                "hashedPassword": "deprecated",
                "password": "password"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSigninResult"
                },
                "example": {
                  "jwtToken": ""
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to signin",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/customer-user-signup": {
      "post": {
        "tags": ["users-api"],
        "summary": "CustomerSignup users-api",
        "operationId": "users-api#CustomerSignup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSignupRequest2"
              },
              "example": {
                "companyDescription": "We sell xyz database software",
                "companyUrl": "https://www.mywebsite.com",
                "email": "abc@gmail.com",
                "legalCompanyName": "mywebsite",
                "name": "John Doe",
                "password": "password"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/demo": {
      "post": {
        "tags": ["demo-api"],
        "summary": "Demo demo-api",
        "operationId": "demo-api#Demo",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DemoRequest"
              },
              "example": {
                "company": "ABC",
                "email": "abc@gmail.com",
                "name": "John Doe",
                "phone": "+1-234567890"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to demo",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/deployment-config": {
      "get": {
        "tags": ["deployment-config-api"],
        "summary": "ListDeploymentConfigs deployment-config-api",
        "operationId": "deployment-config-api#ListDeploymentConfigs",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDeploymentConfigsResult"
                },
                "example": {
                  "ids": ["dc-12345678"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list deployment configs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["deployment-config-api"],
        "summary": "CreateDeploymentConfig deployment-config-api",
        "operationId": "deployment-config-api#CreateDeploymentConfig",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeploymentConfigRequest2"
              },
              "example": {
                "description": "A production deployment config",
                "infraRollConfiguration": {
                  "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
                  "maximumNumberOfResourceInstancesPerBatch": 1,
                  "maximumUnavailableReplicas": 1
                },
                "name": "Production",
                "rolloutPriorityList": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Deployment Config ID created",
                  "example": "dc-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "dc-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create the deployment config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/deployment-config/{id}": {
      "delete": {
        "tags": ["deployment-config-api"],
        "summary": "DeleteDeploymentConfig deployment-config-api",
        "operationId": "deployment-config-api#DeleteDeploymentConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The deployment configuration ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Deployment Config",
              "example": "Sit enim quasi."
            },
            "example": "dc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete the deployment config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["deployment-config-api"],
        "summary": "DescribeDeploymentConfig deployment-config-api",
        "operationId": "deployment-config-api#DescribeDeploymentConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The deployment configuration ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The deployment configuration ID",
              "example": "default"
            },
            "examples": {
              "default": {
                "summary": "default",
                "value": "default"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeDeploymentConfigResult"
                },
                "example": {
                  "description": "A production deployment config",
                  "id": "dc-12345678",
                  "infraRollConfiguration": {
                    "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
                    "maximumNumberOfResourceInstancesPerBatch": 1,
                    "maximumUnavailableReplicas": 1
                  },
                  "name": "Production",
                  "rolloutPriorityList": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe the deployment config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["deployment-config-api"],
        "summary": "UpdateDeploymentConfig deployment-config-api",
        "operationId": "deployment-config-api#UpdateDeploymentConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The deployment configuration ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Deployment Config",
              "example": "Quaerat illo hic suscipit."
            },
            "example": "dc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDeploymentConfigRequest2"
              },
              "example": {
                "description": "A production deployment config",
                "infraRollConfiguration": {
                  "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
                  "maximumNumberOfResourceInstancesPerBatch": 1,
                  "maximumUnavailableReplicas": 1
                },
                "name": "Production",
                "rolloutPriorityList": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update the deployment config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/health": {
      "get": {
        "tags": ["global-api"],
        "summary": "registrationServiceHealth global-api",
        "description": "Registration service health check endpoint",
        "operationId": "global-api#registrationServiceHealth",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OmnistrateServiceHealthResult"
                },
                "example": {
                  "status": "RUNNING"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/helm-package": {
      "get": {
        "tags": ["helm-package-api"],
        "summary": "ListHelmPackages helm-package-api",
        "operationId": "helm-package-api#ListHelmPackages",
        "parameters": [
          {
            "name": "chartName",
            "in": "query",
            "description": "The chart name to filter by",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The chart name to filter by",
              "example": "my-chart"
            },
            "example": "my-chart"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListHelmPackagesResult"
                },
                "example": {
                  "helmPackages": [
                    {
                      "chartName": "my-chart",
                      "chartRepoName": "my-repo",
                      "chartRepoUrl": "https://my-repo.com",
                      "chartValues": {
                        "key1": "value1",
                        "key2": 3,
                        "key3": {
                          "key4": "value4"
                        }
                      },
                      "chartVersion": "1.0.0",
                      "namespace": "default",
                      "password": "my-password",
                      "username": "my-user"
                    },
                    {
                      "chartName": "my-chart",
                      "chartRepoName": "my-repo",
                      "chartRepoUrl": "https://my-repo.com",
                      "chartValues": {
                        "key1": "value1",
                        "key2": 3,
                        "key3": {
                          "key4": "value4"
                        }
                      },
                      "chartVersion": "1.0.0",
                      "namespace": "default",
                      "password": "my-password",
                      "username": "my-user"
                    },
                    {
                      "chartName": "my-chart",
                      "chartRepoName": "my-repo",
                      "chartRepoUrl": "https://my-repo.com",
                      "chartValues": {
                        "key1": "value1",
                        "key2": 3,
                        "key3": {
                          "key4": "value4"
                        }
                      },
                      "chartVersion": "1.0.0",
                      "namespace": "default",
                      "password": "my-password",
                      "username": "my-user"
                    },
                    {
                      "chartName": "my-chart",
                      "chartRepoName": "my-repo",
                      "chartRepoUrl": "https://my-repo.com",
                      "chartValues": {
                        "key1": "value1",
                        "key2": 3,
                        "key3": {
                          "key4": "value4"
                        }
                      },
                      "chartVersion": "1.0.0",
                      "namespace": "default",
                      "password": "my-password",
                      "username": "my-user"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list helm packages",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "put": {
        "tags": ["helm-package-api"],
        "summary": "SaveHelmPackage helm-package-api",
        "operationId": "helm-package-api#SaveHelmPackage",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SaveHelmPackageRequest2"
              },
              "example": {
                "helmPackage": {
                  "chartName": "my-chart",
                  "chartRepoName": "my-repo",
                  "chartRepoUrl": "https://my-repo.com",
                  "chartValues": {
                    "key1": "value1",
                    "key2": 3,
                    "key3": {
                      "key4": "value4"
                    }
                  },
                  "chartVersion": "1.0.0",
                  "namespace": "default",
                  "password": "my-password",
                  "username": "my-user"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a helm package",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/helm-package/{chartName}/{chartVersion}": {
      "delete": {
        "tags": ["helm-package-api"],
        "summary": "DeleteHelmPackage helm-package-api",
        "operationId": "helm-package-api#DeleteHelmPackage",
        "parameters": [
          {
            "name": "chartName",
            "in": "path",
            "description": "The chart name of the Helm package to delete",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The chart name of the Helm package to delete",
              "example": "my-chart"
            },
            "example": "my-chart"
          },
          {
            "name": "chartVersion",
            "in": "path",
            "description": "The chart version of the Helm package to delete",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The chart version of the Helm package to delete",
              "example": "1.0.0"
            },
            "example": "1.0.0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request to delete a helm package",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a helm package",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["helm-package-api"],
        "summary": "DescribeHelmPackage helm-package-api",
        "operationId": "helm-package-api#DescribeHelmPackage",
        "parameters": [
          {
            "name": "chartName",
            "in": "path",
            "description": "The chart name of the Helm package to describe",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The chart name of the Helm package to describe",
              "example": "my-chart"
            },
            "example": "my-chart"
          },
          {
            "name": "chartVersion",
            "in": "path",
            "description": "The chart version of the Helm package to describe",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The chart version of the Helm package to describe",
              "example": "1.0.0"
            },
            "example": "1.0.0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HelmPackage"
                },
                "example": {
                  "chartName": "my-chart",
                  "chartRepoName": "my-repo",
                  "chartRepoUrl": "https://my-repo.com",
                  "chartValues": {
                    "key1": "value1",
                    "key2": 3,
                    "key3": {
                      "key4": "value4"
                    }
                  },
                  "chartVersion": "1.0.0",
                  "namespace": "default",
                  "password": "my-password",
                  "username": "my-user"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request to describe a helm package",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a helm package",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/identity-provider": {
      "get": {
        "tags": ["identity-provider-api"],
        "summary": "ListIdentityProviders identity-provider-api",
        "operationId": "identity-provider-api#ListIdentityProviders",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListIdentityProvidersResult"
                },
                "example": {
                  "identityProviders": [
                    {
                      "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
                      "clientSecret": "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",
                      "id": "idp-12345678",
                      "identityProviderName": "Google",
                      "status": "Ready"
                    },
                    {
                      "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
                      "clientSecret": "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",
                      "id": "idp-12345678",
                      "identityProviderName": "Google",
                      "status": "Ready"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list identity providers",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["identity-provider-api"],
        "summary": "CreateIdentityProvider identity-provider-api",
        "operationId": "identity-provider-api#CreateIdentityProvider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIdentityProviderRequest2"
              },
              "example": {
                "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
                "clientSecret": "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",
                "identityProviderName": "Google"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Identity Provider ID created",
                  "example": "idp-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "idp-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create an identity provider",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/identity-provider/{id}": {
      "delete": {
        "tags": ["identity-provider-api"],
        "summary": "DeleteIdentityProvider identity-provider-api",
        "operationId": "identity-provider-api#DeleteIdentityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Identity Provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Identity Provider",
              "example": "Odit aliquid sunt."
            },
            "example": "idp-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list identity providers",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["identity-provider-api"],
        "summary": "DescribeIdentityProvider identity-provider-api",
        "operationId": "identity-provider-api#DescribeIdentityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Identity Provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Identity Provider",
              "example": "Vero illum ipsum minus voluptas et."
            },
            "example": "idp-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeIdentityProviderResult"
                },
                "example": {
                  "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
                  "clientSecret": "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",
                  "id": "idp-12345678",
                  "identityProviderName": "Google",
                  "status": "Ready"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list identity providers",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["identity-provider-api"],
        "summary": "UpdateIdentityProvider identity-provider-api",
        "operationId": "identity-provider-api#UpdateIdentityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Identity Provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Identity Provider",
              "example": "Alias sed qui aut excepturi."
            },
            "example": "idp-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIdentityProviderRequest2"
              },
              "example": {
                "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
                "clientSecret": "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"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list identity providers",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["identity-provider-api"],
        "summary": "VerifyIdentityProvider identity-provider-api",
        "operationId": "identity-provider-api#VerifyIdentityProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Identity Provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Identity Provider",
              "example": "Quo autem quia."
            },
            "example": "idp-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyIdentityProviderResult"
                },
                "example": {
                  "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
                  "clientSecret": "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",
                  "id": "idp-12345678",
                  "identityProviderName": "Google",
                  "status": "Ready"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to verify identity provider",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/image-registry": {
      "get": {
        "tags": ["image-registry-api"],
        "summary": "ListImageRegistry image-registry-api",
        "operationId": "image-registry-api#ListImageRegistry",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListImageRegistryResult"
                },
                "example": {
                  "ids": ["ir-12345678", "ir-abcdefgh", "ir-abcd5678"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list image registries",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["image-registry-api"],
        "summary": "CreateImageRegistry image-registry-api",
        "operationId": "image-registry-api#CreateImageRegistry",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateImageRegistryRequest2"
              },
              "example": {
                "description": "DockerHub is a public Docker Image Registry",
                "host": "docker.io",
                "name": "DockerHub",
                "password": "mypassword",
                "username": "myusername"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Image Registry ID created",
                  "example": "ir-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "ir-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create an image registry",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/image-registry/{id}": {
      "delete": {
        "tags": ["image-registry-api"],
        "summary": "DeleteImageRegistry image-registry-api",
        "operationId": "image-registry-api#DeleteImageRegistry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Image Registry",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Image Registry",
              "example": "Qui rerum sed cum sapiente tenetur tenetur."
            },
            "example": "ir-12345678"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete an image registry",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["image-registry-api"],
        "summary": "DescribeImageRegistry image-registry-api",
        "operationId": "image-registry-api#DescribeImageRegistry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Image Registry",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Image Registry",
              "example": "Mollitia eos harum quo non."
            },
            "example": "ir-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeImageRegistryResult"
                },
                "example": {
                  "description": "DockerHub is a public Docker Image Registry",
                  "host": "docker.io",
                  "id": "ir-12345678",
                  "name": "DockerHub",
                  "password": "mypassword",
                  "username": "myusername"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe an image registry",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["image-registry-api"],
        "summary": "UpdateImageRegistry image-registry-api",
        "operationId": "image-registry-api#UpdateImageRegistry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the Image Registry",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Image Registry",
              "example": "Optio ratione placeat sunt minima porro."
            },
            "example": "ir-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateImageRegistryRequest2"
              },
              "example": {
                "description": "DockerHub is a public Docker Image Registry",
                "host": "docker.io",
                "name": "DockerHub",
                "password": "mypassword",
                "username": "myusername"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update an image registry",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/invite-user": {
      "post": {
        "tags": ["users-api"],
        "summary": "InviteUser users-api",
        "operationId": "users-api#InviteUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserRequest2"
              },
              "example": {
                "email": "abc@gmail.com",
                "roleType": "reader"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to invite user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/invoice": {
      "get": {
        "tags": ["invoice-api"],
        "summary": "ListInvoices invoice-api",
        "operationId": "invoice-api#ListInvoices",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInvoicesResult"
                },
                "example": {
                  "invoices": [
                    {
                      "currency": "USD",
                      "invoiceDate": "2021-01-01T00:00:00.000Z",
                      "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
                      "invoicePaymentTerm": "30",
                      "invoiceStatus": "Open",
                      "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
                      "taxAmount": 10,
                      "totalAmount": 110,
                      "totalAmountWithoutTax": 100
                    },
                    {
                      "currency": "USD",
                      "invoiceDate": "2021-01-01T00:00:00.000Z",
                      "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
                      "invoicePaymentTerm": "30",
                      "invoiceStatus": "Open",
                      "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
                      "taxAmount": 10,
                      "totalAmount": 110,
                      "totalAmountWithoutTax": 100
                    },
                    {
                      "currency": "USD",
                      "invoiceDate": "2021-01-01T00:00:00.000Z",
                      "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
                      "invoicePaymentTerm": "30",
                      "invoiceStatus": "Open",
                      "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
                      "taxAmount": 10,
                      "totalAmount": 110,
                      "totalAmountWithoutTax": 100
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list invoices",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/limit": {
      "get": {
        "tags": ["limit-api"],
        "summary": "ListLimit limit-api",
        "operationId": "limit-api#ListLimit",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListLimitRequest2"
              },
              "example": {
                "family": "COMPUTE_INFRA"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListLimitResult"
                },
                "example": {
                  "keys": ["MAX_VIRTUAL_CORES_PER_RESOURCE"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list limit",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/limit/family/{family}/key/{key}": {
      "delete": {
        "tags": ["limit-api"],
        "summary": "DeleteLimit limit-api",
        "operationId": "limit-api#DeleteLimit",
        "parameters": [
          {
            "name": "family",
            "in": "path",
            "description": "Limit family",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The limit family",
              "example": "SERVICE"
            },
            "example": "COMPUTE_INFRA"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Unique key to identify the limit",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique key to identify the limit",
              "example": "MAX_VIRTUAL_CORES_PER_RESOURCE"
            },
            "example": "MAX_VIRTUAL_CORES_PER_RESOURCE"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete limit",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["limit-api"],
        "summary": "DescribeLimit limit-api",
        "operationId": "limit-api#DescribeLimit",
        "parameters": [
          {
            "name": "family",
            "in": "path",
            "description": "Limit family",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The limit family",
              "example": "SERVICE"
            },
            "example": "COMPUTE_INFRA"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Unique key to identify the limit",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique key to identify the limit",
              "example": "MAX_VIRTUAL_CORES_PER_RESOURCE"
            },
            "example": "MAX_VIRTUAL_CORES_PER_RESOURCE"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeLimitResult"
                },
                "example": {
                  "description": "A premium limit",
                  "family": "COMPUTE_INFRA",
                  "key": "MAX_VIRTUAL_CORES_PER_RESOURCE",
                  "modifiable": true,
                  "name": "Premium Tier",
                  "value": 4
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe limit",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["limit-api"],
        "summary": "UpdateLimit limit-api",
        "operationId": "limit-api#UpdateLimit",
        "parameters": [
          {
            "name": "family",
            "in": "path",
            "description": "Limit family",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The limit family",
              "example": "SERVICE"
            },
            "example": "COMPUTE_INFRA"
          },
          {
            "name": "key",
            "in": "path",
            "description": "Unique key to identify the limit",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique key to identify the limit",
              "example": "MAX_VIRTUAL_CORES_PER_RESOURCE"
            },
            "example": "MAX_VIRTUAL_CORES_PER_RESOURCE"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLimitRequest2"
              },
              "example": {
                "description": "A premium limit",
                "name": "Premium Tier",
                "value": 4
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update limit",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/login-with-identity-provider": {
      "post": {
        "tags": ["signin-api"],
        "summary": "LoginWithIdentityProvider signin-api",
        "operationId": "signin-api#LoginWithIdentityProvider",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginWithIdentityProviderRequest"
              },
              "example": {
                "authorizationCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
                "companyDescription": "We sell xyz database software",
                "companyUrl": "https://www.mywebsite.com",
                "deviceCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
                "identityProviderName": "Google",
                "invitedEmail": "abc@gmail.com",
                "legalCompanyName": "mywebsite",
                "redirectUri": "https://www.example/redirect"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginWithIdentityProviderResult"
                },
                "example": {
                  "jwtToken": ""
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to login with identity provider",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/logout": {
      "post": {
        "tags": ["users-api"],
        "summary": "Logout users-api",
        "operationId": "users-api#Logout",
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to logout",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/org-users": {
      "get": {
        "tags": ["users-api"],
        "summary": "DescribeUsersByOrg users-api",
        "operationId": "users-api#DescribeUsersByOrg",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeUsersByOrgResult"
                },
                "example": {
                  "Id": "org-aKQ8G13QeR",
                  "orgUsers": [
                    {
                      "email": "abc@gmail.com",
                      "invitedAt": "2023-01-10T00:00:00Z",
                      "name": "John Doe",
                      "roleType": "reader",
                      "userId": "user-abcd1234"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/plan": {
      "get": {
        "tags": ["plan-api"],
        "summary": "DescribePlan plan-api",
        "operationId": "plan-api#DescribePlan",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribePlanResult"
                },
                "example": {
                  "modifiedAt": "2023-01-01T00:00:00Z",
                  "nextChargeDate": "2023-02-01",
                  "paymentConfigured": true,
                  "paymentInfoPortalURL": "https://billing.paigo.com/stripe-portal?customerId=cus_xxxxxxxxxxxxxx",
                  "planCoreHourCost": 0.05,
                  "planDescription": "The starter plan is priced at 'X' units",
                  "planFrequency": "MONTHLY",
                  "planMonthlyCost": 49,
                  "planName": "STARTER",
                  "remainingCredits": "100",
                  "startDate": "2023-01-01"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to add plan",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["plan-api"],
        "summary": "ChangePlan plan-api",
        "operationId": "plan-api#ChangePlan",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePlanRequest2"
              },
              "example": {
                "planName": "STARTER"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to add plan",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/region/{id}": {
      "get": {
        "tags": ["region-api"],
        "summary": "DescribeRegion region-api",
        "operationId": "region-api#DescribeRegion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Region",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Region",
              "example": "Recusandae delectus distinctio rerum impedit."
            },
            "example": "region-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeRegionResult"
                },
                "example": {
                  "cloudProviderId": "infra-12345678",
                  "cloudProviderName": "aws",
                  "code": "us-east-1",
                  "description": "US East (N. Virginia)",
                  "id": "region-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a region",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/region/cloudprovider/{cloudProviderName}": {
      "get": {
        "tags": ["region-api"],
        "summary": "ListRegion region-api",
        "operationId": "region-api#ListRegion",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "description": "Service ID. If specified together with serviceModelId,list the regions of the service model. Otherwise list all regions.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "serviceModelId",
            "in": "query",
            "description": "Service model ID. If specified together with serviceId,list the regions of the service model. Otherwise list all regions.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Quasi odit facilis eveniet."
            },
            "example": "sm-12345678"
          },
          {
            "name": "productTierId",
            "in": "query",
            "description": "Product tier ID. If specified together with serviceId,list the regions of the product tier. Otherwise list all regions.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Et aut."
            },
            "example": "pt-12345678"
          },
          {
            "name": "modelType",
            "in": "query",
            "description": "Model type. If specified, list regions for the specified model type.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The model type encapsulating this service",
              "example": "OMNISTRATE_HOSTED|CUSTOMER_HOSTED|BYOA"
            },
            "example": "CUSTOMER_HOSTED"
          },
          {
            "name": "cloudProviderName",
            "in": "path",
            "description": "The cloud provider for this compute instance type config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the Infra Provider",
              "example": "aws|azure|gcp|all"
            },
            "example": "aws"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListRegionsResult"
                },
                "example": {
                  "ids": ["region-12345678", "region-87654321"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list regions",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/region/code/{code}/cloud-provider/{cloudProviderName}": {
      "get": {
        "tags": ["region-api"],
        "summary": "GetRegionByCode region-api",
        "operationId": "region-api#GetRegionByCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Cloud-provider native region code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Cloud-provider native region code",
              "example": "us-east-1",
              "minLength": 1
            },
            "example": "us-east-1"
          },
          {
            "name": "cloudProviderName",
            "in": "path",
            "description": "The cloud provider for this compute instance type config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the Infra Provider",
              "example": "aws|azure|gcp|all"
            },
            "example": "aws"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Ut saepe."
                },
                "example": "Aliquid soluta."
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to get a region by code",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/reset-password": {
      "post": {
        "tags": ["signup-api"],
        "summary": "ResetPassword signup-api",
        "operationId": "signup-api#ResetPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              },
              "example": {
                "email": "abc@gmail.com"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to reset password",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/resource-instance": {
      "get": {
        "tags": ["resource-instance-api"],
        "summary": "ListAllResourceInstances resource-instance-api",
        "operationId": "resource-instance-api#ListAllResourceInstances",
        "parameters": [
          {
            "name": "environmentType",
            "in": "query",
            "description": "The environment type to filter by",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The type of service environment",
              "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
            },
            "example": "DEV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAllResourceInstancesResult"
                },
                "example": {
                  "nextPageToken": "next-token",
                  "resourceInstances": [
                    {
                      "active": true,
                      "autoscalingEnabled": true,
                      "awsAccountID": "123456789012",
                      "backupStatus": {
                        "backupPeriodInHours": 2,
                        "backupRetentionInDays": 7,
                        "earliestRestoreTime": "2021-09-01T00:00:00Z",
                        "lastBackupTime": "2021-09-01T00:00:00Z"
                      },
                      "cloud_provider": "aws",
                      "created_at": "2023-01-10T00:00:00Z",
                      "createdByUserId": "user-12345678",
                      "createdByUserName": "John Doe",
                      "currentReplicas": "2",
                      "customNetworkDetail": {
                        "cidr": "10.177.0.0/16",
                        "id": "n-12345678",
                        "name": "Prod us-east-1"
                      },
                      "detailedNetworkTopology": {
                        "r-abcd1234": {
                          "allowedIPRanges": ["0.0.0.0/0"],
                          "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                          "clusterPorts": [3306],
                          "main": true,
                          "networkingType": "PUBLIC",
                          "nodes": [
                            {
                              "availabilityZone": "us-east-2a",
                              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                              "healthStatus": "healthy",
                              "id": "primary-0",
                              "ports": [3306],
                              "status": "RUNNING"
                            }
                          ],
                          "privateNetworkCIDR": "10.0.0.2/24",
                          "privateNetworkID": "n-1234abcd",
                          "publiclyAccessible": true,
                          "resourceKey": "primary",
                          "resourceName": "Primary MySQL Instance"
                        }
                      },
                      "externalPayerId": "external-payer-id-1234",
                      "gcpProjectID": "my-project",
                      "highAvailability": true,
                      "id": "instance-abcd1234",
                      "instanceLoadStatus": "Quaerat id.",
                      "kubernetesDashboardEndpoint": {
                        "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
                        "deploymentCellID": "hc-12345678"
                      },
                      "last_modified_at": "2023-01-20T00:00:00Z",
                      "maxReplicas": "1",
                      "minReplicas": "1",
                      "network_type": "PUBLIC",
                      "productTierFeatures": {
                        "BILLING": {
                          "enabled": false
                        },
                        "LOGS": {
                          "auth": {
                            "password": "px3c4d5f6g7h8i",
                            "username": "abcd1234"
                          },
                          "enabled": true,
                          "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
                        },
                        "METRICS": {
                          "enabled": false
                        }
                      },
                      "region": "us-east-1",
                      "result_params": {
                        "param1": "value1",
                        "param2": "value2"
                      },
                      "serverlessEnabled": true,
                      "status": "RUNNING",
                      "subscriptionId": "sub-abcd1234"
                    },
                    {
                      "active": true,
                      "autoscalingEnabled": true,
                      "awsAccountID": "123456789012",
                      "backupStatus": {
                        "backupPeriodInHours": 2,
                        "backupRetentionInDays": 7,
                        "earliestRestoreTime": "2021-09-01T00:00:00Z",
                        "lastBackupTime": "2021-09-01T00:00:00Z"
                      },
                      "cloud_provider": "aws",
                      "created_at": "2023-01-10T00:00:00Z",
                      "createdByUserId": "user-12345678",
                      "createdByUserName": "John Doe",
                      "currentReplicas": "2",
                      "customNetworkDetail": {
                        "cidr": "10.177.0.0/16",
                        "id": "n-12345678",
                        "name": "Prod us-east-1"
                      },
                      "detailedNetworkTopology": {
                        "r-abcd1234": {
                          "allowedIPRanges": ["0.0.0.0/0"],
                          "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                          "clusterPorts": [3306],
                          "main": true,
                          "networkingType": "PUBLIC",
                          "nodes": [
                            {
                              "availabilityZone": "us-east-2a",
                              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                              "healthStatus": "healthy",
                              "id": "primary-0",
                              "ports": [3306],
                              "status": "RUNNING"
                            }
                          ],
                          "privateNetworkCIDR": "10.0.0.2/24",
                          "privateNetworkID": "n-1234abcd",
                          "publiclyAccessible": true,
                          "resourceKey": "primary",
                          "resourceName": "Primary MySQL Instance"
                        }
                      },
                      "externalPayerId": "external-payer-id-1234",
                      "gcpProjectID": "my-project",
                      "highAvailability": true,
                      "id": "instance-abcd1234",
                      "instanceLoadStatus": "Quaerat id.",
                      "kubernetesDashboardEndpoint": {
                        "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
                        "deploymentCellID": "hc-12345678"
                      },
                      "last_modified_at": "2023-01-20T00:00:00Z",
                      "maxReplicas": "1",
                      "minReplicas": "1",
                      "network_type": "PUBLIC",
                      "productTierFeatures": {
                        "BILLING": {
                          "enabled": false
                        },
                        "LOGS": {
                          "auth": {
                            "password": "px3c4d5f6g7h8i",
                            "username": "abcd1234"
                          },
                          "enabled": true,
                          "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
                        },
                        "METRICS": {
                          "enabled": false
                        }
                      },
                      "region": "us-east-1",
                      "result_params": {
                        "param1": "value1",
                        "param2": "value2"
                      },
                      "serverlessEnabled": true,
                      "status": "RUNNING",
                      "subscriptionId": "sub-abcd1234"
                    },
                    {
                      "active": true,
                      "autoscalingEnabled": true,
                      "awsAccountID": "123456789012",
                      "backupStatus": {
                        "backupPeriodInHours": 2,
                        "backupRetentionInDays": 7,
                        "earliestRestoreTime": "2021-09-01T00:00:00Z",
                        "lastBackupTime": "2021-09-01T00:00:00Z"
                      },
                      "cloud_provider": "aws",
                      "created_at": "2023-01-10T00:00:00Z",
                      "createdByUserId": "user-12345678",
                      "createdByUserName": "John Doe",
                      "currentReplicas": "2",
                      "customNetworkDetail": {
                        "cidr": "10.177.0.0/16",
                        "id": "n-12345678",
                        "name": "Prod us-east-1"
                      },
                      "detailedNetworkTopology": {
                        "r-abcd1234": {
                          "allowedIPRanges": ["0.0.0.0/0"],
                          "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                          "clusterPorts": [3306],
                          "main": true,
                          "networkingType": "PUBLIC",
                          "nodes": [
                            {
                              "availabilityZone": "us-east-2a",
                              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                              "healthStatus": "healthy",
                              "id": "primary-0",
                              "ports": [3306],
                              "status": "RUNNING"
                            }
                          ],
                          "privateNetworkCIDR": "10.0.0.2/24",
                          "privateNetworkID": "n-1234abcd",
                          "publiclyAccessible": true,
                          "resourceKey": "primary",
                          "resourceName": "Primary MySQL Instance"
                        }
                      },
                      "externalPayerId": "external-payer-id-1234",
                      "gcpProjectID": "my-project",
                      "highAvailability": true,
                      "id": "instance-abcd1234",
                      "instanceLoadStatus": "Quaerat id.",
                      "kubernetesDashboardEndpoint": {
                        "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
                        "deploymentCellID": "hc-12345678"
                      },
                      "last_modified_at": "2023-01-20T00:00:00Z",
                      "maxReplicas": "1",
                      "minReplicas": "1",
                      "network_type": "PUBLIC",
                      "productTierFeatures": {
                        "BILLING": {
                          "enabled": false
                        },
                        "LOGS": {
                          "auth": {
                            "password": "px3c4d5f6g7h8i",
                            "username": "abcd1234"
                          },
                          "enabled": true,
                          "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
                        },
                        "METRICS": {
                          "enabled": false
                        }
                      },
                      "region": "us-east-1",
                      "result_params": {
                        "param1": "value1",
                        "param2": "value2"
                      },
                      "serverlessEnabled": true,
                      "status": "RUNNING",
                      "subscriptionId": "sub-abcd1234"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list all resource instances",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{id}/deployment-cell-dashboard/token": {
      "post": {
        "tags": ["resource-instance-api"],
        "summary": "GenerateTokenForDeploymentCellDashboard resource-instance-api",
        "operationId": "resource-instance-api#GenerateTokenForDeploymentCellDashboard",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID whose deployment cell dashboard token is to be generated",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Resource Instance",
              "example": "instance-12345678"
            },
            "example": "instance-abcd1234"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateTokenForDeploymentCellDashboardResult"
                },
                "example": {
                  "deploymentCellID": "hc-12345678",
                  "expirationTimestamp": "2021-01-01T00:00:00Z",
                  "token": "token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to generate a kubernetes dashboard token.",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{instanceId}/audit-events": {
      "get": {
        "tags": ["audit-events-api"],
        "summary": "ListAuditEventsForInstance audit-events-api",
        "operationId": "audit-events-api#ListAuditEventsForInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "instanceId",
            "in": "path",
            "description": "The ID of the resource instance",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the resource instance",
              "example": "instance-12345678"
            },
            "example": "instance-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAuditEventsResult"
                },
                "example": {
                  "events": [
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    },
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    },
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    }
                  ],
                  "ids": ["event-12345678"],
                  "nextPageToken": "Qui laboriosam."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list event",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{instanceId}/event": {
      "get": {
        "tags": ["audit-events-api"],
        "summary": "DeprecatedListAuditEventsForInstance audit-events-api",
        "operationId": "audit-events-api#DeprecatedListAuditEventsForInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "instanceId",
            "in": "path",
            "description": "The ID of the resource instance",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The ID of the resource instance",
              "example": "instance-12345678"
            },
            "example": "instance-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAuditEventsResult"
                },
                "example": {
                  "events": [
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    },
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    },
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    }
                  ],
                  "ids": ["event-12345678"],
                  "nextPageToken": "Qui dolores consectetur et atque."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list event",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}": {
      "get": {
        "tags": ["resource-instance-api"],
        "summary": "ListResourceInstances resource-instance-api",
        "operationId": "resource-instance-api#ListResourceInstances",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Laboriosam et architecto ad voluptas."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service key",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResourceInstancesResult"
                },
                "example": {
                  "ids": ["instance-abcd1234", "instance-abcd1235"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list resource instances",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["resource-instance-api"],
        "summary": "CreateResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#CreateResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Atque sint expedita consequatur sunt."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceInstanceRequest2"
              },
              "example": {
                "cloud_provider": "aws",
                "custom_network_id": "n-1234567890",
                "externalBillingId": "external-billing-id-1234",
                "network_type": "PUBLIC",
                "region": "us-east-1",
                "requestParams": {
                  "param1": "value1",
                  "param2": "value2"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateServicesOrchestrationResponseBody"
                },
                "example": {
                  "id": "Enim accusantium quia voluptas excepturi itaque."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}": {
      "delete": {
        "tags": ["resource-instance-api"],
        "summary": "DeleteResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#DeleteResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Laboriosam autem eos."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["resource-instance-api"],
        "summary": "DescribeResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#DescribeResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Ut accusamus itaque rerum unde in repellat."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeResourceInstanceResult"
                },
                "example": {
                  "active": true,
                  "autoscalingEnabled": true,
                  "awsAccountID": "123456789012",
                  "backupStatus": {
                    "backupPeriodInHours": 2,
                    "backupRetentionInDays": 7,
                    "earliestRestoreTime": "2021-09-01T00:00:00Z",
                    "lastBackupTime": "2021-09-01T00:00:00Z"
                  },
                  "cloud_provider": "aws",
                  "created_at": "2023-01-10T00:00:00Z",
                  "createdByUserId": "user-12345678",
                  "createdByUserName": "John Doe",
                  "currentReplicas": "2",
                  "customNetworkDetail": {
                    "cidr": "10.177.0.0/16",
                    "id": "n-12345678",
                    "name": "Prod us-east-1"
                  },
                  "detailedNetworkTopology": {
                    "r-abcd1234": {
                      "allowedIPRanges": ["0.0.0.0/0"],
                      "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "clusterPorts": [3306],
                      "main": true,
                      "networkingType": "PUBLIC",
                      "nodes": [
                        {
                          "availabilityZone": "us-east-2a",
                          "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                          "healthStatus": "healthy",
                          "id": "primary-0",
                          "ports": [3306],
                          "status": "RUNNING"
                        }
                      ],
                      "privateNetworkCIDR": "10.0.0.2/24",
                      "privateNetworkID": "n-1234abcd",
                      "publiclyAccessible": true,
                      "resourceKey": "primary",
                      "resourceName": "Primary MySQL Instance"
                    }
                  },
                  "externalPayerId": "external-payer-id-1234",
                  "gcpProjectID": "my-project",
                  "highAvailability": true,
                  "id": "instance-abcd1234",
                  "instanceLoadStatus": "Maiores ipsam velit et.",
                  "kubernetesDashboardEndpoint": {
                    "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
                    "deploymentCellID": "hc-12345678"
                  },
                  "last_modified_at": "2023-01-20T00:00:00Z",
                  "maxReplicas": "1",
                  "minReplicas": "1",
                  "network_type": "PUBLIC",
                  "productTierFeatures": {
                    "BILLING": {
                      "enabled": false
                    },
                    "LOGS": {
                      "auth": {
                        "password": "px3c4d5f6g7h8i",
                        "username": "abcd1234"
                      },
                      "enabled": true,
                      "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
                    },
                    "METRICS": {
                      "enabled": false
                    }
                  },
                  "region": "us-east-1",
                  "result_params": {
                    "param1": "value1",
                    "param2": "value2"
                  },
                  "serverlessEnabled": true,
                  "status": "RUNNING",
                  "subscriptionId": "sub-abcd1234"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["resource-instance-api"],
        "summary": "UpdateResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#UpdateResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Quos maxime distinctio sapiente omnis."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResourceInstanceRequest2"
              },
              "example": {
                "requestParams": {
                  "param1": "value1",
                  "param2": "value2"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/add-capacity": {
      "post": {
        "tags": ["resource-instance-api"],
        "summary": "AddCapacityToResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#AddCapacityToResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "In voluptate."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCapacityToResourceInstanceRequest2"
              },
              "example": {
                "capacityToBeAdded": 3
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to add capacity to a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/custom-dns": {
      "delete": {
        "tags": ["resource-instance-api"],
        "summary": "RemoveCustomDNSFromResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#RemoveCustomDNSFromResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Quaerat itaque sed fugit quam."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "http-service"
            },
            "example": "http-service"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["resource-instance-api"],
        "summary": "AddCustomDNSToResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#AddCustomDNSToResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Recusandae aut magni."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "http-service"
            },
            "example": "http-service"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCustomDNSToResourceInstanceRequest2"
              },
              "example": {
                "customDNS": "my-custom-dns.com",
                "targetPort": 8080
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/failover": {
      "post": {
        "tags": ["resource-instance-api"],
        "summary": "FailoverResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#FailoverResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Nihil rerum error et consequatur et."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FailoverResourceInstanceRequest2"
              },
              "example": {
                "failedReplicaAction": "FAILOVER_AND_RESTART",
                "failedReplicaID": "db-0"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to failover a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/remove-capacity": {
      "post": {
        "tags": ["resource-instance-api"],
        "summary": "RemoveCapacityFromResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#RemoveCapacityFromResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Quia eligendi."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveCapacityFromResourceInstanceRequest2"
              },
              "example": {
                "capacityToBeRemoved": 3
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to remove capacity from a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/restart": {
      "post": {
        "tags": ["resource-instance-api"],
        "summary": "RestartResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#RestartResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Fuga iure aspernatur porro enim."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to restart a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/restore": {
      "post": {
        "tags": ["resource-instance-api"],
        "summary": "RestoreResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#RestoreResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Inventore nobis sint minima quo rerum."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResourceInstanceRequest2"
              },
              "example": {
                "network_type": "PUBLIC",
                "targetRestoreTime": "2021-09-01T00:00:00Z"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateServicesOrchestrationResponseBody"
                },
                "example": {
                  "id": "Minus amet."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/snapshot": {
      "get": {
        "tags": ["resource-instance-api"],
        "summary": "ListResourceInstanceSnapshots resource-instance-api",
        "operationId": "resource-instance-api#ListResourceInstanceSnapshots",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Molestias quia dolorem."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service key",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResourceInstanceSnapshotsResult"
                },
                "example": {
                  "snapshots": [
                    {
                      "completeTime": "2021-09-01T00:00:00Z",
                      "createdTime": "2021-09-01T00:00:00Z",
                      "encrypted": true,
                      "progress": 100,
                      "snapshotId": "instance-ss-12345678",
                      "status": "completed"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list snapshots of a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/start": {
      "post": {
        "tags": ["resource-instance-api"],
        "summary": "StartResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#StartResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Placeat ea est nostrum."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to start a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/stop": {
      "post": {
        "tags": ["resource-instance-api"],
        "summary": "StopResourceInstance resource-instance-api",
        "operationId": "resource-instance-api#StopResourceInstance",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Fugit et voluptatibus nam distinctio velit."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "example": "instance-abcd1234"
            },
            "example": "instance-abcd1234"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to stop a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/snapshot/{snapshotId}/restore": {
      "post": {
        "tags": ["resource-instance-api"],
        "summary": "RestoreResourceInstanceFromSnapshot resource-instance-api",
        "operationId": "resource-instance-api#RestoreResourceInstanceFromSnapshot",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Harum magni dolorum id aut et."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          },
          {
            "name": "resourceKey",
            "in": "path",
            "description": "The resource key",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The resource key",
              "example": "mysql"
            },
            "example": "mysql"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "The snapshot ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Resource Instance Snapshot",
              "example": "Ducimus occaecati."
            },
            "example": "instance-ss-abcd1234"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreResourceInstanceFromSnapshotRequest2"
              },
              "example": {
                "network_type": "PUBLIC"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateServicesOrchestrationResponseBody"
                },
                "example": {
                  "id": "Adipisci nemo dolorum modi."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/audit-events": {
      "get": {
        "tags": ["audit-events-api"],
        "summary": "ListAuditEventsForServicePlan audit-events-api",
        "operationId": "audit-events-api#ListAuditEventsForServicePlan",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Qui aut optio animi ea deserunt qui."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAuditEventsResult"
                },
                "example": {
                  "events": [
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    },
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    }
                  ],
                  "ids": ["event-12345678"],
                  "nextPageToken": "Non illum ea."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list event",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/event": {
      "get": {
        "tags": ["audit-events-api"],
        "summary": "DeprecatedListAuditEventsForServicePlan audit-events-api",
        "operationId": "audit-events-api#DeprecatedListAuditEventsForServicePlan",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Consequatur vitae alias sed dolor."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          },
          {
            "name": "productTierKey",
            "in": "path",
            "description": "The product tier name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The product tier name",
              "example": "premium"
            },
            "example": "premium"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAuditEventsResult"
                },
                "example": {
                  "events": [
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    },
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    },
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    },
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    }
                  ],
                  "ids": ["event-12345678"],
                  "nextPageToken": "Aut ea sit."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list event",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/setup-kit": {
      "get": {
        "tags": ["resource-instance-api"],
        "summary": "ResourceInstanceProvisionerSetupKit resource-instance-api",
        "operationId": "resource-instance-api#ResourceInstanceProvisionerSetupKit",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "serviceProviderId",
            "in": "path",
            "description": "The service provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Provider",
              "example": "Et atque facilis consequatur exercitationem possimus iste."
            },
            "example": "omnistrate"
          },
          {
            "name": "serviceKey",
            "in": "path",
            "description": "The service name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service name",
              "example": "service-orchestration"
            },
            "example": "service-orchestration"
          },
          {
            "name": "serviceAPIVersion",
            "in": "path",
            "description": "The service API version",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service API version",
              "example": "v1"
            },
            "example": "v1"
          },
          {
            "name": "serviceEnvironmentKey",
            "in": "path",
            "description": "The service environment name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service environment name",
              "example": "dev"
            },
            "example": "dev"
          },
          {
            "name": "serviceModelKey",
            "in": "path",
            "description": "The service model name",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The service model name",
              "example": "hosted"
            },
            "example": "hosted"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to setup kit for a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/audit-events": {
      "get": {
        "tags": ["audit-events-api"],
        "summary": "ListAllAuditEvents audit-events-api",
        "operationId": "audit-events-api#ListAllAuditEvents",
        "parameters": [
          {
            "name": "serviceID",
            "in": "query",
            "description": "The service ID to list events for",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-123456"
          },
          {
            "name": "environmentType",
            "in": "query",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The type of service environment",
              "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
            },
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          {
            "name": "eventSourceTypes",
            "in": "query",
            "description": "The event types to filter by",
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "example": "Enim et inventore."
              },
              "description": "The event types to filter by",
              "example": ["Non et dolorem.", "Molestias voluptas."]
            },
            "example": [
              "Atque rerum quae nobis eaque.",
              "Sed alias qui.",
              "Facere nam.",
              "Omnis sed aut consequatur nobis."
            ]
          },
          {
            "name": "instanceID",
            "in": "query",
            "description": "The instance ID to list events for",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Resource Instance",
              "example": "instance-12345678"
            },
            "example": "instance-12345678"
          },
          {
            "name": "nextPageToken",
            "in": "query",
            "description": "The next token to use for pagination",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The next token to use for pagination",
              "example": "token"
            },
            "example": "token"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of events to return per page",
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "description": "The number of resources to return per page",
              "example": 10,
              "format": "int64"
            },
            "example": 10
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date of the events",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Start time of the window in ISO 8601 format. If omitted, the filter is open-ended at the start.",
              "example": "2023-01-01T10:00:00Z",
              "format": "date-time"
            },
            "example": "2023-01-01T10:00:00Z"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date of the events",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "End time of the window in ISO 8601 format. If omitted, the filter is open-ended at the start.",
              "example": "2024-01-01T10:00:00Z",
              "format": "date-time"
            },
            "example": "2024-01-01T10:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAuditEventsResult"
                },
                "example": {
                  "events": [
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    },
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    },
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    },
                    {
                      "eventSource": "Customer, Infra or Maintenance",
                      "id": "event-12345678",
                      "message": "instance-abcd1234 created",
                      "orgId": "org-12345678",
                      "orgName": "Acme Corporation",
                      "resourceInstanceId": "instance-abcd1234",
                      "resourceName": "Galera",
                      "subscriptionId": "sub-abcd1234",
                      "time": "2023-01-10T00:00:00Z",
                      "userId": "user-12345678",
                      "userName": "John Doe",
                      "workflowFailures": [
                        {
                          "eventTime": "2020-01-01T00:00:00Z",
                          "message": "Bootstrap failed for reason X"
                        },
                        {
                          "eventTime": "2020-01-01T00:01:00Z",
                          "message": "Compute failed for reason Y"
                        }
                      ]
                    }
                  ],
                  "ids": ["event-12345678"],
                  "nextPageToken": "Est pariatur quia facilis adipisci ducimus."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list all events",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/audit-events/{id}": {
      "get": {
        "tags": ["audit-events-api"],
        "summary": "DescribeAuditEvent audit-events-api",
        "operationId": "audit-events-api#DescribeAuditEvent",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Event",
              "example": "Quidem laboriosam voluptatem."
            },
            "example": "event-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeAuditEventResult"
                },
                "example": {
                  "eventSource": "Customer, Infra or Maintenance",
                  "id": "event-12345678",
                  "message": "instance-abcd1234 created",
                  "orgId": "org-12345678",
                  "orgName": "Acme Corporation",
                  "resourceInstanceId": "instance-abcd1234",
                  "resourceName": "Galera",
                  "subscriptionId": "sub-abcd1234",
                  "time": "2023-01-10T00:00:00Z",
                  "userId": "user-12345678",
                  "userName": "John Doe",
                  "workflowFailures": [
                    {
                      "eventTime": "2020-01-01T00:00:00Z",
                      "message": "Bootstrap failed for reason X"
                    },
                    {
                      "eventTime": "2020-01-01T00:01:00Z",
                      "message": "Compute failed for reason Y"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe event",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/custom-network": {
      "get": {
        "tags": ["custom-network-api"],
        "summary": "ListCustomNetworks custom-network-api",
        "operationId": "custom-network-api#ListCustomNetworks",
        "parameters": [
          {
            "name": "cloudProviderName",
            "in": "query",
            "description": "The name of the cloud provider that custom network should be created in",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Name of the Infra Provider",
              "example": "aws|azure|gcp|all"
            },
            "example": "aws"
          },
          {
            "name": "cloudProviderRegion",
            "in": "query",
            "description": "The region of the cloud provider that the network should be created in",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The region of the cloud provider that the network should be created in",
              "example": "us-east-1"
            },
            "example": "us-east-1"
          },
          {
            "name": "customNetworksOnly",
            "in": "query",
            "description": "Flag indicating whether to return only custom networks, or to include default and imported networks as well",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "description": "Flag indicating whether to return only custom networks, or to include default and imported networks as well",
              "example": false
            },
            "example": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCustomNetworksResult"
                },
                "example": {
                  "customNetworks": [
                    {
                      "cidr": "10.0.0.0/16",
                      "cloudProviderName": "aws",
                      "cloudProviderRegion": "us-east-1",
                      "id": "n-12345678",
                      "name": "Prod us-east-1",
                      "networkDefinitionType": "Custom",
                      "networkFeaturesConfiguration": {
                        "isPrivateLinkEnabled": true
                      },
                      "networkInstances": [
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        }
                      ],
                      "owningUserId": "user-12345678",
                      "owningUserName": "John Doe"
                    },
                    {
                      "cidr": "10.0.0.0/16",
                      "cloudProviderName": "aws",
                      "cloudProviderRegion": "us-east-1",
                      "id": "n-12345678",
                      "name": "Prod us-east-1",
                      "networkDefinitionType": "Custom",
                      "networkFeaturesConfiguration": {
                        "isPrivateLinkEnabled": true
                      },
                      "networkInstances": [
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        }
                      ],
                      "owningUserId": "user-12345678",
                      "owningUserName": "John Doe"
                    },
                    {
                      "cidr": "10.0.0.0/16",
                      "cloudProviderName": "aws",
                      "cloudProviderRegion": "us-east-1",
                      "id": "n-12345678",
                      "name": "Prod us-east-1",
                      "networkDefinitionType": "Custom",
                      "networkFeaturesConfiguration": {
                        "isPrivateLinkEnabled": true
                      },
                      "networkInstances": [
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        }
                      ],
                      "owningUserId": "user-12345678",
                      "owningUserName": "John Doe"
                    },
                    {
                      "cidr": "10.0.0.0/16",
                      "cloudProviderName": "aws",
                      "cloudProviderRegion": "us-east-1",
                      "id": "n-12345678",
                      "name": "Prod us-east-1",
                      "networkDefinitionType": "Custom",
                      "networkFeaturesConfiguration": {
                        "isPrivateLinkEnabled": true
                      },
                      "networkInstances": [
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        },
                        {
                          "awsAccountID": "123456789012",
                          "cloudProviderNativeNetworkId": "vpc-12345678",
                          "gcpProjectID": "my-project",
                          "gcpProjectNumber": "123456789012",
                          "hostClusterID": "hc-12345678"
                        }
                      ],
                      "owningUserId": "user-12345678",
                      "owningUserName": "John Doe"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list custom networks",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["custom-network-api"],
        "summary": "CreateCustomNetwork custom-network-api",
        "operationId": "custom-network-api#CreateCustomNetwork",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomNetworkRequest2"
              },
              "example": {
                "cidr": "10.0.0.0/16",
                "cloudProviderName": "aws",
                "cloudProviderRegion": "us-east-1",
                "name": "Prod us-east-1",
                "networkFeaturesConfiguration": {
                  "isPrivateLinkEnabled": false
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomNetwork"
                },
                "example": {
                  "cidr": "10.0.0.0/16",
                  "cloudProviderName": "aws",
                  "cloudProviderRegion": "us-east-1",
                  "id": "n-12345678",
                  "name": "Prod us-east-1",
                  "networkDefinitionType": "Custom",
                  "networkFeaturesConfiguration": {
                    "isPrivateLinkEnabled": true
                  },
                  "networkInstances": [
                    {
                      "awsAccountID": "123456789012",
                      "cloudProviderNativeNetworkId": "vpc-12345678",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "hostClusterID": "hc-12345678"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "cloudProviderNativeNetworkId": "vpc-12345678",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "hostClusterID": "hc-12345678"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "cloudProviderNativeNetworkId": "vpc-12345678",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "hostClusterID": "hc-12345678"
                    }
                  ],
                  "owningUserId": "user-12345678",
                  "owningUserName": "John Doe"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a custom network",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/custom-network/{id}": {
      "delete": {
        "tags": ["custom-network-api"],
        "summary": "DeleteCustomNetwork custom-network-api",
        "operationId": "custom-network-api#DeleteCustomNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of a custom network",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a custom network",
              "example": "Et voluptatem necessitatibus culpa maiores."
            },
            "example": "n-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request to delete a custom network",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested custom network is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a custom network",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["custom-network-api"],
        "summary": "DescribeCustomNetwork custom-network-api",
        "operationId": "custom-network-api#DescribeCustomNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of a custom network",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a custom network",
              "example": "Culpa alias doloribus voluptatem."
            },
            "example": "n-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomNetwork"
                },
                "example": {
                  "cidr": "10.0.0.0/16",
                  "cloudProviderName": "aws",
                  "cloudProviderRegion": "us-east-1",
                  "id": "n-12345678",
                  "name": "Prod us-east-1",
                  "networkDefinitionType": "Custom",
                  "networkFeaturesConfiguration": {
                    "isPrivateLinkEnabled": true
                  },
                  "networkInstances": [
                    {
                      "awsAccountID": "123456789012",
                      "cloudProviderNativeNetworkId": "vpc-12345678",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "hostClusterID": "hc-12345678"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "cloudProviderNativeNetworkId": "vpc-12345678",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "hostClusterID": "hc-12345678"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "cloudProviderNativeNetworkId": "vpc-12345678",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "hostClusterID": "hc-12345678"
                    }
                  ],
                  "owningUserId": "user-12345678",
                  "owningUserName": "John Doe"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request to describe a custom network",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested custom network is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a custom network",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["custom-network-api"],
        "summary": "UpdateCustomNetwork custom-network-api",
        "operationId": "custom-network-api#UpdateCustomNetwork",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of a custom network",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a custom network",
              "example": "Omnis laborum ratione cupiditate quod voluptate."
            },
            "example": "n-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomNetworkRequest2"
              },
              "example": {
                "name": "Dev us-east-1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomNetwork"
                },
                "example": {
                  "cidr": "10.0.0.0/16",
                  "cloudProviderName": "aws",
                  "cloudProviderRegion": "us-east-1",
                  "id": "n-12345678",
                  "name": "Prod us-east-1",
                  "networkDefinitionType": "Custom",
                  "networkFeaturesConfiguration": {
                    "isPrivateLinkEnabled": true
                  },
                  "networkInstances": [
                    {
                      "awsAccountID": "123456789012",
                      "cloudProviderNativeNetworkId": "vpc-12345678",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "hostClusterID": "hc-12345678"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "cloudProviderNativeNetworkId": "vpc-12345678",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "hostClusterID": "hc-12345678"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "cloudProviderNativeNetworkId": "vpc-12345678",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "hostClusterID": "hc-12345678"
                    },
                    {
                      "awsAccountID": "123456789012",
                      "cloudProviderNativeNetworkId": "vpc-12345678",
                      "gcpProjectID": "my-project",
                      "gcpProjectNumber": "123456789012",
                      "hostClusterID": "hc-12345678"
                    }
                  ],
                  "owningUserId": "user-12345678",
                  "owningUserName": "John Doe"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested custom network is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a custom network",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/event/{id}": {
      "get": {
        "tags": ["audit-events-api"],
        "summary": "DeprecatedDescribeAuditEvent audit-events-api",
        "operationId": "audit-events-api#DeprecatedDescribeAuditEvent",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "query",
            "description": "Subscription Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Subscription Id",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Event",
              "example": "Necessitatibus ullam et tenetur vel laboriosam."
            },
            "example": "event-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeAuditEventResult"
                },
                "example": {
                  "eventSource": "Customer, Infra or Maintenance",
                  "id": "event-12345678",
                  "message": "instance-abcd1234 created",
                  "orgId": "org-12345678",
                  "orgName": "Acme Corporation",
                  "resourceInstanceId": "instance-abcd1234",
                  "resourceName": "Galera",
                  "subscriptionId": "sub-abcd1234",
                  "time": "2023-01-10T00:00:00Z",
                  "userId": "user-12345678",
                  "userName": "John Doe",
                  "workflowFailures": [
                    {
                      "eventTime": "2020-01-01T00:00:00Z",
                      "message": "Bootstrap failed for reason X"
                    },
                    {
                      "eventTime": "2020-01-01T00:01:00Z",
                      "message": "Compute failed for reason Y"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe event",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/health": {
      "get": {
        "tags": ["global-api"],
        "summary": "consumptionServiceHealth global-api",
        "description": "Consumption service health check endpoint",
        "operationId": "global-api#consumptionServiceHealth",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OmnistrateServiceHealthResult"
                },
                "example": {
                  "status": "RUNNING"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/resource-instance/services-orchestration": {
      "get": {
        "tags": ["services-orchestration-api"],
        "summary": "ListServicesOrchestrations services-orchestration-api",
        "operationId": "services-orchestration-api#ListServicesOrchestrations",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DescribeServicesOrchestrationResult"
                  },
                  "example": [
                    {
                      "ServicesTopology": [
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        }
                      ],
                      "createdAt": "2021-01-01T00:00:00Z",
                      "id": "so-12345678",
                      "orchestrationFailedReason": "Invalid DSL",
                      "resultParams": {
                        "param1": "value1",
                        "param2": "value2"
                      },
                      "status": "PENDING",
                      "updatedAt": "2021-01-01T00:00:00Z"
                    },
                    {
                      "ServicesTopology": [
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        }
                      ],
                      "createdAt": "2021-01-01T00:00:00Z",
                      "id": "so-12345678",
                      "orchestrationFailedReason": "Invalid DSL",
                      "resultParams": {
                        "param1": "value1",
                        "param2": "value2"
                      },
                      "status": "PENDING",
                      "updatedAt": "2021-01-01T00:00:00Z"
                    },
                    {
                      "ServicesTopology": [
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        }
                      ],
                      "createdAt": "2021-01-01T00:00:00Z",
                      "id": "so-12345678",
                      "orchestrationFailedReason": "Invalid DSL",
                      "resultParams": {
                        "param1": "value1",
                        "param2": "value2"
                      },
                      "status": "PENDING",
                      "updatedAt": "2021-01-01T00:00:00Z"
                    },
                    {
                      "ServicesTopology": [
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        },
                        {
                          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                          "instanceDeploymentAlias": "instanceDeploymentAlias",
                          "instanceId": "i-12345678",
                          "serviceId": "s-12345678",
                          "status": "PENDING",
                          "statusMessage": "Creating deployment",
                          "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                        }
                      ],
                      "createdAt": "2021-01-01T00:00:00Z",
                      "id": "so-12345678",
                      "orchestrationFailedReason": "Invalid DSL",
                      "resultParams": {
                        "param1": "value1",
                        "param2": "value2"
                      },
                      "status": "PENDING",
                      "updatedAt": "2021-01-01T00:00:00Z"
                    }
                  ]
                },
                "example": [
                  {
                    "ServicesTopology": [
                      {
                        "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                        "instanceDeploymentAlias": "instanceDeploymentAlias",
                        "instanceId": "i-12345678",
                        "serviceId": "s-12345678",
                        "status": "PENDING",
                        "statusMessage": "Creating deployment",
                        "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                      },
                      {
                        "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                        "instanceDeploymentAlias": "instanceDeploymentAlias",
                        "instanceId": "i-12345678",
                        "serviceId": "s-12345678",
                        "status": "PENDING",
                        "statusMessage": "Creating deployment",
                        "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                      },
                      {
                        "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                        "instanceDeploymentAlias": "instanceDeploymentAlias",
                        "instanceId": "i-12345678",
                        "serviceId": "s-12345678",
                        "status": "PENDING",
                        "statusMessage": "Creating deployment",
                        "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                      },
                      {
                        "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                        "instanceDeploymentAlias": "instanceDeploymentAlias",
                        "instanceId": "i-12345678",
                        "serviceId": "s-12345678",
                        "status": "PENDING",
                        "statusMessage": "Creating deployment",
                        "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                      }
                    ],
                    "createdAt": "2021-01-01T00:00:00Z",
                    "id": "so-12345678",
                    "orchestrationFailedReason": "Invalid DSL",
                    "resultParams": {
                      "param1": "value1",
                      "param2": "value2"
                    },
                    "status": "PENDING",
                    "updatedAt": "2021-01-01T00:00:00Z"
                  },
                  {
                    "ServicesTopology": [
                      {
                        "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                        "instanceDeploymentAlias": "instanceDeploymentAlias",
                        "instanceId": "i-12345678",
                        "serviceId": "s-12345678",
                        "status": "PENDING",
                        "statusMessage": "Creating deployment",
                        "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                      },
                      {
                        "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                        "instanceDeploymentAlias": "instanceDeploymentAlias",
                        "instanceId": "i-12345678",
                        "serviceId": "s-12345678",
                        "status": "PENDING",
                        "statusMessage": "Creating deployment",
                        "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                      },
                      {
                        "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                        "instanceDeploymentAlias": "instanceDeploymentAlias",
                        "instanceId": "i-12345678",
                        "serviceId": "s-12345678",
                        "status": "PENDING",
                        "statusMessage": "Creating deployment",
                        "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                      },
                      {
                        "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                        "instanceDeploymentAlias": "instanceDeploymentAlias",
                        "instanceId": "i-12345678",
                        "serviceId": "s-12345678",
                        "status": "PENDING",
                        "statusMessage": "Creating deployment",
                        "subscriptionId": "Corrupti eligendi quia laborum tenetur."
                      }
                    ],
                    "createdAt": "2021-01-01T00:00:00Z",
                    "id": "so-12345678",
                    "orchestrationFailedReason": "Invalid DSL",
                    "resultParams": {
                      "param1": "value1",
                      "param2": "value2"
                    },
                    "status": "PENDING",
                    "updatedAt": "2021-01-01T00:00:00Z"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list resource instances",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["services-orchestration-api"],
        "summary": "CreateServicesOrchestration services-orchestration-api",
        "operationId": "services-orchestration-api#CreateServicesOrchestration",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServicesOrchestrationRequest2"
              },
              "example": {
                "orchestrationCreateDSL": "Nesciunt harum."
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateServicesOrchestrationResponseBody"
                },
                "example": {
                  "id": "Sint voluptatem vitae sint laborum alias id."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/services-orchestration/{id}": {
      "delete": {
        "tags": ["services-orchestration-api"],
        "summary": "DeleteServicesOrchestration services-orchestration-api",
        "operationId": "services-orchestration-api#DeleteServicesOrchestration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the services orchestration",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Services Orchestration",
              "example": "Qui non autem omnis quaerat."
            },
            "example": "so-12345678"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["services-orchestration-api"],
        "summary": "DescribeServicesOrchestration services-orchestration-api",
        "operationId": "services-orchestration-api#DescribeServicesOrchestration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the services orchestration",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Services Orchestration",
              "example": "Eum doloremque veritatis cum inventore."
            },
            "example": "so-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeServicesOrchestrationResult"
                },
                "example": {
                  "ServicesTopology": [
                    {
                      "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                      "instanceDeploymentAlias": "instanceDeploymentAlias",
                      "instanceId": "i-12345678",
                      "serviceId": "s-12345678",
                      "status": "PENDING",
                      "statusMessage": "Creating deployment",
                      "subscriptionId": "Officia adipisci mollitia et."
                    },
                    {
                      "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                      "instanceDeploymentAlias": "instanceDeploymentAlias",
                      "instanceId": "i-12345678",
                      "serviceId": "s-12345678",
                      "status": "PENDING",
                      "statusMessage": "Creating deployment",
                      "subscriptionId": "Officia adipisci mollitia et."
                    }
                  ],
                  "createdAt": "2021-01-01T00:00:00Z",
                  "id": "so-12345678",
                  "orchestrationFailedReason": "Invalid DSL",
                  "resultParams": {
                    "param1": "value1",
                    "param2": "value2"
                  },
                  "status": "PENDING",
                  "updatedAt": "2021-01-01T00:00:00Z"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["services-orchestration-api"],
        "summary": "ModifyServicesOrchestration services-orchestration-api",
        "operationId": "services-orchestration-api#ModifyServicesOrchestration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the services orchestration",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Services Orchestration",
              "example": "Fugiat dolor in."
            },
            "example": "so-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifyServicesOrchestrationRequest2"
              },
              "example": {
                "orchestrationModifyDSL": "Doloremque nobis eveniet animi."
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update a resource instance",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/subscription-users": {
      "get": {
        "tags": ["consumption-user-api"],
        "summary": "ListAllSubscriptionUsers consumption-user-api",
        "operationId": "consumption-user-api#ListAllSubscriptionUsers",
        "parameters": [
          {
            "name": "environmentType",
            "in": "query",
            "description": "The environment type to filter by",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The type of service environment",
              "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
            },
            "example": "DEV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAllSubscriptionUsersResult"
                },
                "example": {
                  "subscriptionUsers": [
                    {
                      "email": "abc@gmail.com",
                      "name": "John Doe",
                      "roleType": "reader",
                      "userId": "user-abcd1234"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list all subscription users",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/subscription/{subscriptionId}/invite-user": {
      "post": {
        "tags": ["consumption-user-api"],
        "summary": "InviteUser consumption-user-api",
        "operationId": "consumption-user-api#InviteUser",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The subscription ID",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteConsumptionUserRequest2"
              },
              "example": {
                "email": "abc@gmail.com",
                "roleType": "reader"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to invite user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/subscription/{subscriptionId}/revoke-user-role": {
      "delete": {
        "tags": ["consumption-user-api"],
        "summary": "RevokeUserRole consumption-user-api",
        "operationId": "consumption-user-api#RevokeUserRole",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The subscription ID",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeConsumptionUserRoleRequest2"
              },
              "example": {
                "email": "abc@gmail.com",
                "roleType": "reader"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/subscription/{subscriptionId}/subscription-users": {
      "get": {
        "tags": ["consumption-user-api"],
        "summary": "DescribeUsersBySubscription consumption-user-api",
        "operationId": "consumption-user-api#DescribeUsersBySubscription",
        "parameters": [
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "The subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The subscription ID",
              "example": "sub-abcd1234"
            },
            "example": "sub-abcd1234"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeUsersBySubscriptionResult"
                },
                "example": {
                  "Id": "sub-abcd1234",
                  "subscriptionUsers": [
                    {
                      "email": "abc@gmail.com",
                      "name": "John Doe",
                      "roleType": "reader",
                      "subscriptionId": "sub-abcd1234",
                      "userId": "user-abcd1234"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/user/{id}/billing-details": {
      "get": {
        "tags": ["consumption-user-api"],
        "summary": "DescribeUserBillingDetails consumption-user-api",
        "operationId": "consumption-user-api#DescribeUserBillingDetails",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a User",
              "example": "Libero ullam officia nam non maiores fugit."
            },
            "example": "user-abcd1234"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeUserBillingDetailsResult"
                },
                "example": {
                  "billingEmbedURL": "https://billing.provider.com/embed?customerId=cus_xxxxxxxxxxxxxx",
                  "name": "John Dae",
                  "paymentConfigured": true,
                  "paymentInfoPortalURL": "https://billing.provider.com/stripe-portal?customerId=cus_xxxxxxxxxxxxxx",
                  "userId": "user-abcd1234"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/user/signin": {
      "post": {
        "tags": ["consumption-user-api"],
        "summary": "Signin consumption-user-api",
        "operationId": "consumption-user-api#Signin",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumptionServiceAuthResult"
                },
                "example": {
                  "token": "m"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to signin",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "basic_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/resource-instance/version": {
      "get": {
        "tags": ["global-api"],
        "summary": "consumptionServiceVersion global-api",
        "description": "Consumption service version endpoint",
        "operationId": "global-api#consumptionServiceVersion",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OmnistrateServiceVersionResult"
                },
                "example": {
                  "apiVersion": "klb",
                  "buildCommitSHA": "1234567890abcdef1234567890abcdef12345678",
                  "buildTimestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/revoke-user-role": {
      "delete": {
        "tags": ["users-api"],
        "summary": "RevokeUserRole users-api",
        "operationId": "users-api#RevokeUserRole",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RevokeUserRoleRequest2"
              },
              "example": {
                "email": "abc@gmail.com",
                "roleType": "reader"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/saas-portal": {
      "get": {
        "tags": ["saas-portal-api"],
        "summary": "ListSaaSPortals saas-portal-api",
        "operationId": "saas-portal-api#ListSaaSPortals",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSaaSPortalsResult"
                },
                "example": {
                  "saasPortals": [
                    {
                      "customDomain": "mycustomdomain.com",
                      "customDomainStatus": "READY",
                      "detailedNetworkTopology": {
                        "r-abcd1234": {
                          "allowedIPRanges": ["0.0.0.0/0"],
                          "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                          "clusterPorts": [3306],
                          "main": true,
                          "networkingType": "PUBLIC",
                          "nodes": [
                            {
                              "availabilityZone": "us-east-2a",
                              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                              "healthStatus": "healthy",
                              "id": "primary-0",
                              "ports": [3306],
                              "status": "RUNNING"
                            }
                          ],
                          "privateNetworkCIDR": "10.0.0.2/24",
                          "privateNetworkID": "n-1234abcd",
                          "publiclyAccessible": true,
                          "resourceKey": "saasportal",
                          "resourceName": "SaaS Portal"
                        }
                      },
                      "emailConfig": {
                        "smtpFromEmail": "example@gmail.com",
                        "smtpHost": "smtp.gmail.com",
                        "smtpPassword": "password",
                        "smtpPort": 587,
                        "smtpUsername": "username"
                      },
                      "endpoint": "https://saas-portal.example.com",
                      "environmentType": "DEV",
                      "googleAnalyticsTagID": "G-123456789",
                      "imageConfig": {
                        "imageName": "myimage",
                        "imageRegistry": "ghcr.io",
                        "imageTag": "latest"
                      },
                      "status": "READY"
                    },
                    {
                      "customDomain": "mycustomdomain.com",
                      "customDomainStatus": "READY",
                      "detailedNetworkTopology": {
                        "r-abcd1234": {
                          "allowedIPRanges": ["0.0.0.0/0"],
                          "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                          "clusterPorts": [3306],
                          "main": true,
                          "networkingType": "PUBLIC",
                          "nodes": [
                            {
                              "availabilityZone": "us-east-2a",
                              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                              "healthStatus": "healthy",
                              "id": "primary-0",
                              "ports": [3306],
                              "status": "RUNNING"
                            }
                          ],
                          "privateNetworkCIDR": "10.0.0.2/24",
                          "privateNetworkID": "n-1234abcd",
                          "publiclyAccessible": true,
                          "resourceKey": "saasportal",
                          "resourceName": "SaaS Portal"
                        }
                      },
                      "emailConfig": {
                        "smtpFromEmail": "example@gmail.com",
                        "smtpHost": "smtp.gmail.com",
                        "smtpPassword": "password",
                        "smtpPort": 587,
                        "smtpUsername": "username"
                      },
                      "endpoint": "https://saas-portal.example.com",
                      "environmentType": "DEV",
                      "googleAnalyticsTagID": "G-123456789",
                      "imageConfig": {
                        "imageName": "myimage",
                        "imageRegistry": "ghcr.io",
                        "imageTag": "latest"
                      },
                      "status": "READY"
                    },
                    {
                      "customDomain": "mycustomdomain.com",
                      "customDomainStatus": "READY",
                      "detailedNetworkTopology": {
                        "r-abcd1234": {
                          "allowedIPRanges": ["0.0.0.0/0"],
                          "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                          "clusterPorts": [3306],
                          "main": true,
                          "networkingType": "PUBLIC",
                          "nodes": [
                            {
                              "availabilityZone": "us-east-2a",
                              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                              "healthStatus": "healthy",
                              "id": "primary-0",
                              "ports": [3306],
                              "status": "RUNNING"
                            }
                          ],
                          "privateNetworkCIDR": "10.0.0.2/24",
                          "privateNetworkID": "n-1234abcd",
                          "publiclyAccessible": true,
                          "resourceKey": "saasportal",
                          "resourceName": "SaaS Portal"
                        }
                      },
                      "emailConfig": {
                        "smtpFromEmail": "example@gmail.com",
                        "smtpHost": "smtp.gmail.com",
                        "smtpPassword": "password",
                        "smtpPort": 587,
                        "smtpUsername": "username"
                      },
                      "endpoint": "https://saas-portal.example.com",
                      "environmentType": "DEV",
                      "googleAnalyticsTagID": "G-123456789",
                      "imageConfig": {
                        "imageName": "myimage",
                        "imageRegistry": "ghcr.io",
                        "imageTag": "latest"
                      },
                      "status": "READY"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list saas portals",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/saas-portal-custom-domain": {
      "get": {
        "tags": ["saas-portal-api"],
        "summary": "ListSaaSPortalCustomDomains saas-portal-api",
        "operationId": "saas-portal-api#ListSaaSPortalCustomDomains",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSaaSPortalCustomDomainsResult"
                },
                "example": {
                  "customDomains": [
                    {
                      "clusterEndpoint": "example.com",
                      "customDomain": "mycustomdomain.com",
                      "description": "My custom domain description",
                      "environmentType": "DEV",
                      "name": "MyCustomDomain",
                      "status": "READY"
                    },
                    {
                      "clusterEndpoint": "example.com",
                      "customDomain": "mycustomdomain.com",
                      "description": "My custom domain description",
                      "environmentType": "DEV",
                      "name": "MyCustomDomain",
                      "status": "READY"
                    },
                    {
                      "clusterEndpoint": "example.com",
                      "customDomain": "mycustomdomain.com",
                      "description": "My custom domain description",
                      "environmentType": "DEV",
                      "name": "MyCustomDomain",
                      "status": "READY"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list saas portal custom domains",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["saas-portal-api"],
        "summary": "CreateSaaSPortalCustomDomain saas-portal-api",
        "operationId": "saas-portal-api#CreateSaaSPortalCustomDomain",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSaaSPortalCustomDomainRequest2"
              },
              "example": {
                "customDomain": "mycustomdomain.com",
                "description": "My custom domain description",
                "environmentType": "DEV",
                "name": "MyCustomDomain"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create saas portal custom domain",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/saas-portal-custom-domain/{environmentType}": {
      "delete": {
        "tags": ["saas-portal-api"],
        "summary": "DeleteSaaSPortalCustomDomain saas-portal-api",
        "operationId": "saas-portal-api#DeleteSaaSPortalCustomDomain",
        "parameters": [
          {
            "name": "environmentType",
            "in": "path",
            "description": "The environment type for the custom domain",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The type of service environment",
              "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
            },
            "example": "DEV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete saas portal custom domains",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["saas-portal-api"],
        "summary": "UpdateSaaSPortalCustomDomain saas-portal-api",
        "operationId": "saas-portal-api#UpdateSaaSPortalCustomDomain",
        "parameters": [
          {
            "name": "environmentType",
            "in": "path",
            "description": "The environment type for the saas portal custom domain to update",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The type of service environment",
              "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
            },
            "example": "DEV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSaaSPortalCustomDomainRequest2"
              },
              "example": {
                "customDomain": "mycustomdomain.com",
                "description": "My custom domain description",
                "name": "MyCustomDomain"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update saas portal custom domain",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/saas-portal/{environmentType}": {
      "patch": {
        "tags": ["saas-portal-api"],
        "summary": "UpdateSaaSPortal saas-portal-api",
        "operationId": "saas-portal-api#UpdateSaaSPortal",
        "parameters": [
          {
            "name": "environmentType",
            "in": "path",
            "description": "The environment type for the saas portal custom domain to update",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The type of service environment",
              "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
            },
            "example": "DEV"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSaaSPortalRequest2"
              },
              "example": {
                "customDomain": "mycustomdomain.com",
                "emailConfig": {
                  "smtpFromEmail": "example@gmail.com",
                  "smtpHost": "smtp.gmail.com",
                  "smtpPassword": "password",
                  "smtpPort": 587,
                  "smtpUsername": "username"
                },
                "googleAnalyticsTagID": "G-123456789",
                "imageConfig": {
                  "imageName": "myimage",
                  "imageRegistry": "ghcr.io",
                  "imageTag": "latest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update saas portal",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service": {
      "get": {
        "tags": ["service-api"],
        "summary": "ListService service-api",
        "operationId": "service-api#ListService",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceResult"
                },
                "example": {
                  "ids": ["s-12345678", "s-abcdefgh", "s-1234efgh"],
                  "nextPageToken": "next-token",
                  "services": [
                    {
                      "createdAt": "2019-01-01T00:00:00Z",
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "s-12345678",
                      "key": "mysql",
                      "name": "MySQL multi-writer service",
                      "roleType": "admin",
                      "serviceEnvironments": [
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        },
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        },
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        },
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        }
                      ],
                      "serviceLogoURL": "Aliquid pariatur molestiae quod unde.",
                      "serviceProviderID": "sp-12345678",
                      "serviceProviderName": "Omnistrate, Inc."
                    },
                    {
                      "createdAt": "2019-01-01T00:00:00Z",
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "s-12345678",
                      "key": "mysql",
                      "name": "MySQL multi-writer service",
                      "roleType": "admin",
                      "serviceEnvironments": [
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        },
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        },
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        },
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        }
                      ],
                      "serviceLogoURL": "Aliquid pariatur molestiae quod unde.",
                      "serviceProviderID": "sp-12345678",
                      "serviceProviderName": "Omnistrate, Inc."
                    },
                    {
                      "createdAt": "2019-01-01T00:00:00Z",
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "s-12345678",
                      "key": "mysql",
                      "name": "MySQL multi-writer service",
                      "roleType": "admin",
                      "serviceEnvironments": [
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        },
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        },
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        },
                        {
                          "id": "se-12345678",
                          "name": "dev",
                          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                          "saasPortalStatus": "READY",
                          "saasPortalUrl": "https://saas-portal.example.com",
                          "servicePlans": [
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            },
                            {
                              "description": "A Basic product tier",
                              "modelType": "CUSTOMER_HOSTED",
                              "name": "Basic",
                              "productTierID": "pt-12345678",
                              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                            }
                          ],
                          "sourceEnvironmentID": "se-12345678",
                          "sourceEnvironmentName": "dev",
                          "type": "DEV",
                          "visibility": "private"
                        }
                      ],
                      "serviceLogoURL": "Aliquid pariatur molestiae quod unde.",
                      "serviceProviderID": "sp-12345678",
                      "serviceProviderName": "Omnistrate, Inc."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list services",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["service-api"],
        "summary": "CreateService service-api",
        "operationId": "service-api#CreateService",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceRequest2"
              },
              "example": {
                "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                "name": "MySQL multi-writer service",
                "serviceLogoURL": "http://walter.name/arden"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Service ID created",
                  "example": "s-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "s-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a service",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service-offering": {
      "get": {
        "tags": ["service-offering-api"],
        "summary": "ListServiceOffering service-offering-api",
        "operationId": "service-offering-api#ListServiceOffering",
        "parameters": [
          {
            "name": "orgId",
            "in": "query",
            "description": "Org Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of an Org",
              "example": "Aut eos aut impedit hic."
            },
            "example": "org-12345678"
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "The visibility of service offering",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "This parameter is used to configure the visibility of the service control-plane APIs",
              "example": "PUBLIC"
            },
            "example": "PRIVATE"
          },
          {
            "name": "environmentType",
            "in": "query",
            "description": "The environment type to filter by",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The type of service environment",
              "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
            },
            "example": "DEV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceOfferingsResult"
                },
                "example": {
                  "nextPageToken": "next-token",
                  "serviceIds": ["s-12345678", "s-abcdefgh"],
                  "services": [
                    {
                      "createdAt": "2019-01-01T00:00:00Z",
                      "isDeprecated": false,
                      "offerings": [
                        {
                          "assets": {
                            "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                            "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                          },
                          "billingPlans": [
                            {
                              "maxNumberofInstances": 4
                            }
                          ],
                          "productTierName": "Premium",
                          "productTierURLKey": "premium",
                          "resourceParameters": [
                            {
                              "name": "MySQL",
                              "urlKey": "mysql"
                            },
                            {
                              "name": "Redis",
                              "urlKey": "redis"
                            }
                          ],
                          "serviceAPIID": "sa-12345678",
                          "serviceAPIVersion": "v1",
                          "serviceEnvironmentName": "Production",
                          "serviceEnvironmentURLKey": "prod",
                          "serviceEnvironmentVisibility": "PRIVATE",
                          "serviceModelName": "Bring Your Own Account",
                          "serviceModelURLKey": "byoa"
                        },
                        {
                          "productTierName": "Basic",
                          "productTierURLKey": "basic",
                          "resourceParameters": [
                            {
                              "name": "MySQL",
                              "urlKey": "mysql"
                            },
                            {
                              "name": "Redis",
                              "urlKey": "redis"
                            }
                          ],
                          "serviceAPIID": "sa-abcdefgh",
                          "serviceAPIVersion": "v1",
                          "serviceEnvironmentName": "Production",
                          "serviceEnvironmentURLKey": "prod",
                          "serviceEnvironmentVisibility": "PUBLIC",
                          "serviceModelName": "Hosted",
                          "serviceModelURLKey": "hosted"
                        }
                      ],
                      "serviceDescription": "MySQL is a relational database",
                      "serviceId": "s-12345678",
                      "serviceName": "MySQL",
                      "serviceOrgId": "org-12345678",
                      "serviceProviderId": "sp-9zrg9W8Are",
                      "serviceProviderName": "Omnistrate, Inc.",
                      "serviceURLKey": "mysql"
                    },
                    {
                      "createdAt": "2019-01-01T00:00:00Z",
                      "isDeprecated": false,
                      "offerings": [
                        {
                          "assets": {
                            "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                            "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                          },
                          "billingPlans": [
                            {
                              "maxNumberofInstances": 4
                            }
                          ],
                          "productTierName": "Premium",
                          "productTierURLKey": "premium",
                          "resourceParameters": [
                            {
                              "name": "MySQL",
                              "urlKey": "mysql"
                            },
                            {
                              "name": "Redis",
                              "urlKey": "redis"
                            }
                          ],
                          "serviceAPIID": "sa-12345678",
                          "serviceAPIVersion": "v1",
                          "serviceEnvironmentName": "Production",
                          "serviceEnvironmentURLKey": "prod",
                          "serviceEnvironmentVisibility": "PRIVATE",
                          "serviceModelName": "Bring Your Own Account",
                          "serviceModelURLKey": "byoa"
                        },
                        {
                          "productTierName": "Basic",
                          "productTierURLKey": "basic",
                          "resourceParameters": [
                            {
                              "name": "MySQL",
                              "urlKey": "mysql"
                            },
                            {
                              "name": "Redis",
                              "urlKey": "redis"
                            }
                          ],
                          "serviceAPIID": "sa-abcdefgh",
                          "serviceAPIVersion": "v1",
                          "serviceEnvironmentName": "Production",
                          "serviceEnvironmentURLKey": "prod",
                          "serviceEnvironmentVisibility": "PUBLIC",
                          "serviceModelName": "Hosted",
                          "serviceModelURLKey": "hosted"
                        }
                      ],
                      "serviceDescription": "MySQL is a relational database",
                      "serviceId": "s-12345678",
                      "serviceName": "MySQL",
                      "serviceOrgId": "org-12345678",
                      "serviceProviderId": "sp-9zrg9W8Are",
                      "serviceProviderName": "Omnistrate, Inc.",
                      "serviceURLKey": "mysql"
                    },
                    {
                      "createdAt": "2019-01-01T00:00:00Z",
                      "isDeprecated": false,
                      "offerings": [
                        {
                          "assets": {
                            "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                            "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                          },
                          "billingPlans": [
                            {
                              "maxNumberofInstances": 4
                            }
                          ],
                          "productTierName": "Premium",
                          "productTierURLKey": "premium",
                          "resourceParameters": [
                            {
                              "name": "MySQL",
                              "urlKey": "mysql"
                            },
                            {
                              "name": "Redis",
                              "urlKey": "redis"
                            }
                          ],
                          "serviceAPIID": "sa-12345678",
                          "serviceAPIVersion": "v1",
                          "serviceEnvironmentName": "Production",
                          "serviceEnvironmentURLKey": "prod",
                          "serviceEnvironmentVisibility": "PRIVATE",
                          "serviceModelName": "Bring Your Own Account",
                          "serviceModelURLKey": "byoa"
                        },
                        {
                          "productTierName": "Basic",
                          "productTierURLKey": "basic",
                          "resourceParameters": [
                            {
                              "name": "MySQL",
                              "urlKey": "mysql"
                            },
                            {
                              "name": "Redis",
                              "urlKey": "redis"
                            }
                          ],
                          "serviceAPIID": "sa-abcdefgh",
                          "serviceAPIVersion": "v1",
                          "serviceEnvironmentName": "Production",
                          "serviceEnvironmentURLKey": "prod",
                          "serviceEnvironmentVisibility": "PUBLIC",
                          "serviceModelName": "Hosted",
                          "serviceModelURLKey": "hosted"
                        }
                      ],
                      "serviceDescription": "MySQL is a relational database",
                      "serviceId": "s-12345678",
                      "serviceName": "MySQL",
                      "serviceOrgId": "org-12345678",
                      "serviceProviderId": "sp-9zrg9W8Are",
                      "serviceProviderName": "Omnistrate, Inc.",
                      "serviceURLKey": "mysql"
                    },
                    {
                      "createdAt": "2019-01-01T00:00:00Z",
                      "isDeprecated": false,
                      "offerings": [
                        {
                          "assets": {
                            "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                            "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                          },
                          "billingPlans": [
                            {
                              "maxNumberofInstances": 4
                            }
                          ],
                          "productTierName": "Premium",
                          "productTierURLKey": "premium",
                          "resourceParameters": [
                            {
                              "name": "MySQL",
                              "urlKey": "mysql"
                            },
                            {
                              "name": "Redis",
                              "urlKey": "redis"
                            }
                          ],
                          "serviceAPIID": "sa-12345678",
                          "serviceAPIVersion": "v1",
                          "serviceEnvironmentName": "Production",
                          "serviceEnvironmentURLKey": "prod",
                          "serviceEnvironmentVisibility": "PRIVATE",
                          "serviceModelName": "Bring Your Own Account",
                          "serviceModelURLKey": "byoa"
                        },
                        {
                          "productTierName": "Basic",
                          "productTierURLKey": "basic",
                          "resourceParameters": [
                            {
                              "name": "MySQL",
                              "urlKey": "mysql"
                            },
                            {
                              "name": "Redis",
                              "urlKey": "redis"
                            }
                          ],
                          "serviceAPIID": "sa-abcdefgh",
                          "serviceAPIVersion": "v1",
                          "serviceEnvironmentName": "Production",
                          "serviceEnvironmentURLKey": "prod",
                          "serviceEnvironmentVisibility": "PUBLIC",
                          "serviceModelName": "Hosted",
                          "serviceModelURLKey": "hosted"
                        }
                      ],
                      "serviceDescription": "MySQL is a relational database",
                      "serviceId": "s-12345678",
                      "serviceName": "MySQL",
                      "serviceOrgId": "org-12345678",
                      "serviceProviderId": "sp-9zrg9W8Are",
                      "serviceProviderName": "Omnistrate, Inc.",
                      "serviceURLKey": "mysql"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list service offerings",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service-offering/{serviceId}": {
      "get": {
        "tags": ["service-offering-api"],
        "summary": "DescribeServiceOffering service-offering-api",
        "operationId": "service-offering-api#DescribeServiceOffering",
        "parameters": [
          {
            "name": "visibility",
            "in": "query",
            "description": "The visibility of service offering",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "This parameter is used to configure the visibility of the service control-plane APIs",
              "example": "PUBLIC"
            },
            "example": "PRIVATE"
          },
          {
            "name": "environmentType",
            "in": "query",
            "description": "The environment type to filter by",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The type of service environment",
              "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
            },
            "example": "DEV"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeServiceOfferingResult"
                },
                "example": {
                  "createdAt": "2019-01-01T00:00:00Z",
                  "isDeprecated": false,
                  "offerings": [
                    {
                      "assets": {
                        "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                        "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                      },
                      "billingPlans": [
                        {
                          "maxNumberofInstances": 4
                        }
                      ],
                      "productTierName": "Premium",
                      "productTierURLKey": "premium",
                      "resourceParameters": [
                        {
                          "name": "MySQL",
                          "urlKey": "mysql"
                        },
                        {
                          "name": "Redis",
                          "urlKey": "redis"
                        }
                      ],
                      "serviceAPIID": "sa-12345678",
                      "serviceAPIVersion": "v1",
                      "serviceEnvironmentName": "Production",
                      "serviceEnvironmentURLKey": "prod",
                      "serviceEnvironmentVisibility": "PRIVATE",
                      "serviceModelName": "Bring Your Own Account",
                      "serviceModelURLKey": "byoa"
                    },
                    {
                      "productTierName": "Basic",
                      "productTierURLKey": "basic",
                      "resourceParameters": [
                        {
                          "name": "MySQL",
                          "urlKey": "mysql"
                        },
                        {
                          "name": "Redis",
                          "urlKey": "redis"
                        }
                      ],
                      "serviceAPIID": "sa-abcdefgh",
                      "serviceAPIVersion": "v1",
                      "serviceEnvironmentName": "Production",
                      "serviceEnvironmentURLKey": "prod",
                      "serviceEnvironmentVisibility": "PUBLIC",
                      "serviceModelName": "Hosted",
                      "serviceModelURLKey": "hosted"
                    }
                  ],
                  "serviceDescription": "MySQL is a relational database",
                  "serviceId": "s-12345678",
                  "serviceName": "MySQL",
                  "serviceOrgId": "org-12345678",
                  "serviceProviderId": "sp-9zrg9W8Are",
                  "serviceProviderName": "Omnistrate, Inc.",
                  "serviceURLKey": "mysql"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a service offering",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service-offering/{serviceId}/resource/{resourceId}/instance/{instanceId}": {
      "get": {
        "tags": ["service-offering-api"],
        "summary": "DescribeServiceOfferingResource service-offering-api",
        "operationId": "service-offering-api#DescribeServiceOfferingResource",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "The resource ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Modi fugit."
            },
            "example": "r-12345678"
          },
          {
            "name": "instanceId",
            "in": "path",
            "description": "The instance ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The instance ID",
              "default": "none",
              "example": "instance-12345678"
            },
            "example": "instance-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeServiceOfferingResourceResult"
                },
                "example": {
                  "apis": [
                    {
                      "inputParameters": [
                        {
                          "defaultValue": null,
                          "description": "The name of the server",
                          "displayName": "Server Name",
                          "isList": false,
                          "key": "serverName",
                          "modifiable": true,
                          "options": null,
                          "required": true,
                          "type": "string"
                        },
                        {
                          "defaultValue": "option1",
                          "description": "The type of the server",
                          "displayName": "Server Type",
                          "isList": false,
                          "key": "serverType",
                          "modifiable": true,
                          "options": ["option1", "option2"],
                          "required": true,
                          "type": "string"
                        }
                      ],
                      "outputParameters": [
                        {
                          "description": "The name of the server",
                          "displayName": "Server Name",
                          "isList": false,
                          "key": "serverName",
                          "type": "string"
                        },
                        {
                          "description": "The type of the server",
                          "displayName": "Server Type",
                          "isList": false,
                          "key": "serverType",
                          "type": "string"
                        }
                      ],
                      "verb": "create"
                    },
                    {
                      "inputParameters": [
                        {
                          "defaultValue": null,
                          "description": "The name of the server",
                          "displayName": "Server Name",
                          "isList": false,
                          "key": "serverName",
                          "modifiable": true,
                          "options": null,
                          "required": true,
                          "type": "string"
                        }
                      ],
                      "outputParameters": [
                        {
                          "description": "The name of the server",
                          "displayName": "Server Name",
                          "isList": false,
                          "key": "serverName",
                          "type": "string"
                        },
                        {
                          "description": "The type of the server",
                          "displayName": "Server Type",
                          "isList": false,
                          "key": "serverType",
                          "type": "string"
                        }
                      ],
                      "verb": "describe"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a service offering resource",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{id}": {
      "delete": {
        "tags": ["service-api"],
        "summary": "DeleteService service-api",
        "operationId": "service-api#DeleteService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The service ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a service",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["service-api"],
        "summary": "DescribeService service-api",
        "operationId": "service-api#DescribeService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The service ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeServiceResult"
                },
                "example": {
                  "createdAt": "2019-01-01T00:00:00Z",
                  "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                  "id": "s-12345678",
                  "key": "mysql",
                  "name": "MySQL multi-writer service",
                  "roleType": "admin",
                  "serviceEnvironments": [
                    {
                      "id": "se-12345678",
                      "name": "dev",
                      "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                      "saasPortalStatus": "READY",
                      "saasPortalUrl": "https://saas-portal.example.com",
                      "servicePlans": [
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        },
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        },
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        }
                      ],
                      "sourceEnvironmentID": "se-12345678",
                      "sourceEnvironmentName": "dev",
                      "type": "DEV",
                      "visibility": "private"
                    },
                    {
                      "id": "se-12345678",
                      "name": "dev",
                      "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                      "saasPortalStatus": "READY",
                      "saasPortalUrl": "https://saas-portal.example.com",
                      "servicePlans": [
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        },
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        },
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        }
                      ],
                      "sourceEnvironmentID": "se-12345678",
                      "sourceEnvironmentName": "dev",
                      "type": "DEV",
                      "visibility": "private"
                    },
                    {
                      "id": "se-12345678",
                      "name": "dev",
                      "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                      "saasPortalStatus": "READY",
                      "saasPortalUrl": "https://saas-portal.example.com",
                      "servicePlans": [
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        },
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        },
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        }
                      ],
                      "sourceEnvironmentID": "se-12345678",
                      "sourceEnvironmentName": "dev",
                      "type": "DEV",
                      "visibility": "private"
                    },
                    {
                      "id": "se-12345678",
                      "name": "dev",
                      "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                      "saasPortalStatus": "READY",
                      "saasPortalUrl": "https://saas-portal.example.com",
                      "servicePlans": [
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        },
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        },
                        {
                          "description": "A Basic product tier",
                          "modelType": "CUSTOMER_HOSTED",
                          "name": "Basic",
                          "productTierID": "pt-12345678",
                          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                        }
                      ],
                      "sourceEnvironmentID": "se-12345678",
                      "sourceEnvironmentName": "dev",
                      "type": "DEV",
                      "visibility": "private"
                    }
                  ],
                  "serviceLogoURL": "Incidunt cupiditate quis voluptatem.",
                  "serviceProviderID": "sp-12345678",
                  "serviceProviderName": "Omnistrate, Inc."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a service",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["service-api"],
        "summary": "UpdateService service-api",
        "operationId": "service-api#UpdateService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The service ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceRequest2"
              },
              "example": {
                "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                "name": "MySQL multi-writer service",
                "serviceLogoURL": "Autem enim dolorum velit ea id."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update a service",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{id}/health": {
      "get": {
        "tags": ["service-api"],
        "summary": "ServiceHealth service-api",
        "operationId": "service-api#ServiceHealth",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportHealthResult"
                },
                "example": {
                  "health": "UP",
                  "id": "s-12345678",
                  "report": {
                    "se-12345678": {
                      "sm-12345678": {
                        "vu-11111111": "UNKNOWN",
                        "vu-12345678": "UP",
                        "vu-87654321": "DOWN"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to get service health",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/compute-config": {
      "get": {
        "tags": ["compute-config-api"],
        "summary": "ListComputeConfig compute-config-api",
        "operationId": "compute-config-api#ListComputeConfig",
        "parameters": [
          {
            "name": "managed",
            "in": "query",
            "description": "Is compute config managed by omnistrate",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "description": "Is compute config managed by omnistrate",
              "example": false
            },
            "example": false
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListComputeConfigsResult"
                },
                "example": {
                  "ids": ["cc-12345678", "cc-abcdefgh", "cc-1234efgh"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list compute configs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["compute-config-api"],
        "summary": "CreateComputeConfig compute-config-api",
        "operationId": "compute-config-api#CreateComputeConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateComputeConfigRequest2"
              },
              "example": {
                "autoscalingPolicy": {
                  "maxReplicas": 4,
                  "minReplicas": 1
                },
                "cpuArchitecture": "X86_64|ARM64",
                "description": "my compute config description",
                "name": "my compute config",
                "replicaCount": "3",
                "resources": {
                  "limits": {
                    "cpu": "1",
                    "memory": "500Mi"
                  },
                  "requests": {
                    "cpu": "0.5",
                    "memory": "200Mi"
                  }
                },
                "rootVolumeSizeGi": 10,
                "warmPoolConfiguration": {
                  "minimumNodesInPool": 1
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Compute Config ID created",
                  "example": "cc-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "cc-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create compute config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/compute-config/{id}": {
      "delete": {
        "tags": ["compute-config-api"],
        "summary": "DeleteComputeConfig compute-config-api",
        "operationId": "compute-config-api#DeleteComputeConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the compute config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Compute Config",
              "example": "Quis velit delectus sunt voluptatem."
            },
            "example": "cc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a compute config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["compute-config-api"],
        "summary": "DescribeComputeConfig compute-config-api",
        "operationId": "compute-config-api#DescribeComputeConfig",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the compute config to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the compute config to describe. If not specified, the latest version is described.",
              "example": "Voluptas dolorem vero est occaecati magni."
            },
            "example": "Consequuntur provident et non voluptatem voluptatem."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "ProductTierId of the compute config to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Maiores ducimus et."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the compute config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Compute Config",
              "example": "Quod possimus."
            },
            "example": "cc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeComputeConfigResult"
                },
                "example": {
                  "autoscalingPolicy": {
                    "maxReplicas": 4,
                    "minReplicas": 1
                  },
                  "cpuArchitecture": "X86_64|ARM64",
                  "description": "my compute config description",
                  "id": "cc-12345678",
                  "infraConfigIDs": ["ic-12345678", "ic-abcdefgh"],
                  "instanceTypes": {
                    "aws": ["t3.micro", "t3.small"],
                    "azure": ["Standard_B1ls", "Standard_B1ms"],
                    "gcp": ["$var.instance_type"]
                  },
                  "name": "my compute config",
                  "replicaCount": "3",
                  "resources": {
                    "limits": {
                      "cpu": "1",
                      "memory": "500Mi"
                    },
                    "requests": {
                      "cpu": "0.5",
                      "memory": "200Mi"
                    }
                  },
                  "rootVolumeSizeGi": 10,
                  "serviceId": "s-12345678",
                  "warmPoolConfiguration": {
                    "minimumNodesInPool": 1
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe compute config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["compute-config-api"],
        "summary": "UpdateComputeConfig compute-config-api",
        "operationId": "compute-config-api#UpdateComputeConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the compute config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Compute Config",
              "example": "Minima non voluptas quibusdam."
            },
            "example": "cc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateComputeConfigRequest2"
              },
              "example": {
                "autoscalingPolicy": {
                  "maxReplicas": 4,
                  "minReplicas": 1
                },
                "cpuArchitecture": "X86_64|ARM64",
                "description": "my compute config description",
                "name": "my compute config",
                "replicaCount": "3",
                "resources": {
                  "limits": {
                    "cpu": "1",
                    "memory": "500Mi"
                  },
                  "requests": {
                    "cpu": "0.5",
                    "memory": "200Mi"
                  }
                },
                "rootVolumeSizeGi": 10,
                "warmPoolConfiguration": {
                  "minimumNodesInPool": 1
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update compute config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/compute-config/{id}/instance-type": {
      "delete": {
        "tags": ["compute-config-api"],
        "summary": "RemoveComputeInstanceType compute-config-api",
        "operationId": "compute-config-api#RemoveComputeInstanceType",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the compute config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Compute Config",
              "example": "Ducimus doloremque cumque sit dolorem."
            },
            "example": "cc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveComputeInstanceTypeRequest2"
              },
              "example": {
                "cloudProviderName": "aws",
                "instanceType": "t3.micro"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to remove compute instance type",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["compute-config-api"],
        "summary": "AddComputeInstanceType compute-config-api",
        "operationId": "compute-config-api#AddComputeInstanceType",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the compute config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Compute Config",
              "example": "Et inventore laudantium fugit error qui sint."
            },
            "example": "cc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddComputeInstanceTypeRequest2"
              },
              "example": {
                "cloudProviderName": "aws",
                "instanceType": "t3.micro"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to add compute instance type",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/compute-config/cloud-provider/{cloudProviderName}/instance-types": {
      "get": {
        "tags": ["compute-config-api"],
        "summary": "ListComputeInstanceTypes compute-config-api",
        "operationId": "compute-config-api#ListComputeInstanceTypes",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "cloudProviderName",
            "in": "path",
            "description": "The cloud provider for this compute instance type config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Name of the Infra Provider",
              "example": "aws|azure|gcp|all"
            },
            "example": "aws"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListComputeInstanceTypesResult"
                },
                "example": {
                  "nextPageToken": "next-token",
                  "types": ["m5.xlarge", "c5.xlarge", "r5.xlarge"]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list compute instance types",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/environment": {
      "get": {
        "tags": ["service-environment-api"],
        "summary": "ListServiceEnvironment service-environment-api",
        "operationId": "service-environment-api#ListServiceEnvironment",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service this environment belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceEnvironmentsResult"
                },
                "example": {
                  "ids": ["se-12345678", "se-23456789"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list service environments",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["service-environment-api"],
        "summary": "CreateServiceEnvironment service-environment-api",
        "operationId": "service-environment-api#CreateServiceEnvironment",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service this environment belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceEnvironmentRequest2"
              },
              "example": {
                "autoApproveSubscription": false,
                "deploymentConfigId": "dc-12345678",
                "description": "The production environment for the MySQL multi-writer service",
                "name": "Production",
                "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
                "sourceEnvironmentId": "se-12345678",
                "type": "DEV",
                "visibility": "Itaque beatae placeat in et ea."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Service Environment ID created",
                  "example": "se-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "se-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a service environment",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/environment/{id}": {
      "delete": {
        "tags": ["service-environment-api"],
        "summary": "DeleteServiceEnvironment service-environment-api",
        "operationId": "service-environment-api#DeleteServiceEnvironment",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service this environment belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the service environment",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "example": "se-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a service environment",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["service-environment-api"],
        "summary": "DescribeServiceEnvironment service-environment-api",
        "operationId": "service-environment-api#DescribeServiceEnvironment",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service this environment belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the service environment",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "example": "se-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeServiceEnvironmentResult"
                },
                "example": {
                  "autoApproveSubscription": false,
                  "deploymentConfigId": "dc-12345678",
                  "description": "The production environment for the MySQL multi-writer service",
                  "id": "se-12345678",
                  "key": "production",
                  "name": "Production",
                  "roleType": "admin",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
                  "serviceId": "s-12345678",
                  "sourceEnvironmentId": "se-12345678",
                  "type": "DEV",
                  "visibility": "Similique voluptas eos."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a service environment",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["service-environment-api"],
        "summary": "UpdateServiceEnvironment service-environment-api",
        "operationId": "service-environment-api#UpdateServiceEnvironment",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service this environment belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the service environment",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "example": "se-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceEnvironmentRequest2"
              },
              "example": {
                "autoApproveSubscription": false,
                "deploymentConfigId": "dc-12345678",
                "description": "The production environment for the MySQL multi-writer service",
                "name": "Production",
                "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
                "sourceEnvironmentId": "se-12345678",
                "visibility": "Quisquam et adipisci."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update a service environment",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/environment/{id}/promote": {
      "get": {
        "tags": ["service-environment-api"],
        "summary": "PromoteServiceEnvironmentStatus service-environment-api",
        "operationId": "service-environment-api#PromoteServiceEnvironmentStatus",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service this environment belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the service environment",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "example": "se-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentPromotionStatus"
                  },
                  "example": [
                    {
                      "status": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                      "targetEnvironmentID": "se-12345678"
                    },
                    {
                      "status": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                      "targetEnvironmentID": "se-12345678"
                    },
                    {
                      "status": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                      "targetEnvironmentID": "se-12345678"
                    },
                    {
                      "status": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                      "targetEnvironmentID": "se-12345678"
                    }
                  ]
                },
                "example": [
                  {
                    "status": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "targetEnvironmentID": "se-12345678"
                  },
                  {
                    "status": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "targetEnvironmentID": "se-12345678"
                  }
                ]
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to get the status of a service environment promotion",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["service-environment-api"],
        "summary": "PromoteServiceEnvironment service-environment-api",
        "operationId": "service-environment-api#PromoteServiceEnvironment",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service this environment belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the service environment",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "example": "se-12345678"
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to promote a service environment",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/environment/{serviceEnvironmentId}/service-plan": {
      "get": {
        "tags": ["service-plan-api"],
        "summary": "ListServicePlans service-plan-api",
        "operationId": "service-plan-api#ListServicePlans",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "serviceEnvironmentId",
            "in": "path",
            "description": "Service environment ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "example": "se-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServicePlansResult"
                },
                "example": {
                  "nextPageToken": "next-token",
                  "servicePlans": [
                    {
                      "AutoApproveSubscription": false,
                      "accountConfigIds": ["ac-12345678", "ac-23456789"],
                      "activeAccountConfigIds": {
                        "aws": "ac-12345678",
                        "gcp": "ac-23456789"
                      },
                      "apiVersion": "v1",
                      "awsRegions": ["us-east-2", "ca-central-1"],
                      "deploymentConfigId": "dc-12345678",
                      "gcpRegions": ["us-central1"],
                      "hasPendingChanges": true,
                      "isProductTierDisabled": true,
                      "latestMajorVersion": "3.0",
                      "modelType": "CUSTOMER_HOSTED",
                      "productTierDescription": "A premium product tier",
                      "productTierDocumentation": "Any documentation",
                      "productTierFeatures": {
                        "BILLING": false,
                        "LOGS": true,
                        "METRICS": false
                      },
                      "productTierId": "pt-12345678",
                      "productTierKey": "premium",
                      "productTierName": "Premium",
                      "productTierPlanDescription": "A premium plan",
                      "productTierPricing": {
                        "price1": "value1"
                      },
                      "productTierSupport": "Any support",
                      "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
                      "serviceApiId": "sa-12345678",
                      "serviceEnvironmentId": "se-12345678",
                      "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                      "serviceModelFeatures": [
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        }
                      ],
                      "serviceModelId": "sm-12345678",
                      "serviceModelName": "MySQL multi-writer service hosted model",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY",
                      "versionSetStatus": "Preferred|Active|Deprecated|Pending"
                    },
                    {
                      "AutoApproveSubscription": false,
                      "accountConfigIds": ["ac-12345678", "ac-23456789"],
                      "activeAccountConfigIds": {
                        "aws": "ac-12345678",
                        "gcp": "ac-23456789"
                      },
                      "apiVersion": "v1",
                      "awsRegions": ["us-east-2", "ca-central-1"],
                      "deploymentConfigId": "dc-12345678",
                      "gcpRegions": ["us-central1"],
                      "hasPendingChanges": true,
                      "isProductTierDisabled": true,
                      "latestMajorVersion": "3.0",
                      "modelType": "CUSTOMER_HOSTED",
                      "productTierDescription": "A premium product tier",
                      "productTierDocumentation": "Any documentation",
                      "productTierFeatures": {
                        "BILLING": false,
                        "LOGS": true,
                        "METRICS": false
                      },
                      "productTierId": "pt-12345678",
                      "productTierKey": "premium",
                      "productTierName": "Premium",
                      "productTierPlanDescription": "A premium plan",
                      "productTierPricing": {
                        "price1": "value1"
                      },
                      "productTierSupport": "Any support",
                      "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
                      "serviceApiId": "sa-12345678",
                      "serviceEnvironmentId": "se-12345678",
                      "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                      "serviceModelFeatures": [
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        }
                      ],
                      "serviceModelId": "sm-12345678",
                      "serviceModelName": "MySQL multi-writer service hosted model",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY",
                      "versionSetStatus": "Preferred|Active|Deprecated|Pending"
                    },
                    {
                      "AutoApproveSubscription": false,
                      "accountConfigIds": ["ac-12345678", "ac-23456789"],
                      "activeAccountConfigIds": {
                        "aws": "ac-12345678",
                        "gcp": "ac-23456789"
                      },
                      "apiVersion": "v1",
                      "awsRegions": ["us-east-2", "ca-central-1"],
                      "deploymentConfigId": "dc-12345678",
                      "gcpRegions": ["us-central1"],
                      "hasPendingChanges": true,
                      "isProductTierDisabled": true,
                      "latestMajorVersion": "3.0",
                      "modelType": "CUSTOMER_HOSTED",
                      "productTierDescription": "A premium product tier",
                      "productTierDocumentation": "Any documentation",
                      "productTierFeatures": {
                        "BILLING": false,
                        "LOGS": true,
                        "METRICS": false
                      },
                      "productTierId": "pt-12345678",
                      "productTierKey": "premium",
                      "productTierName": "Premium",
                      "productTierPlanDescription": "A premium plan",
                      "productTierPricing": {
                        "price1": "value1"
                      },
                      "productTierSupport": "Any support",
                      "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
                      "serviceApiId": "sa-12345678",
                      "serviceEnvironmentId": "se-12345678",
                      "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                      "serviceModelFeatures": [
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        }
                      ],
                      "serviceModelId": "sm-12345678",
                      "serviceModelName": "MySQL multi-writer service hosted model",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY",
                      "versionSetStatus": "Preferred|Active|Deprecated|Pending"
                    },
                    {
                      "AutoApproveSubscription": false,
                      "accountConfigIds": ["ac-12345678", "ac-23456789"],
                      "activeAccountConfigIds": {
                        "aws": "ac-12345678",
                        "gcp": "ac-23456789"
                      },
                      "apiVersion": "v1",
                      "awsRegions": ["us-east-2", "ca-central-1"],
                      "deploymentConfigId": "dc-12345678",
                      "gcpRegions": ["us-central1"],
                      "hasPendingChanges": true,
                      "isProductTierDisabled": true,
                      "latestMajorVersion": "3.0",
                      "modelType": "CUSTOMER_HOSTED",
                      "productTierDescription": "A premium product tier",
                      "productTierDocumentation": "Any documentation",
                      "productTierFeatures": {
                        "BILLING": false,
                        "LOGS": true,
                        "METRICS": false
                      },
                      "productTierId": "pt-12345678",
                      "productTierKey": "premium",
                      "productTierName": "Premium",
                      "productTierPlanDescription": "A premium plan",
                      "productTierPricing": {
                        "price1": "value1"
                      },
                      "productTierSupport": "Any support",
                      "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
                      "serviceApiId": "sa-12345678",
                      "serviceEnvironmentId": "se-12345678",
                      "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                      "serviceModelFeatures": [
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        },
                        {
                          "configuration": {
                            "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                            "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                          },
                          "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                        }
                      ],
                      "serviceModelId": "sm-12345678",
                      "serviceModelName": "MySQL multi-writer service hosted model",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY",
                      "versionSetStatus": "Preferred|Active|Deprecated|Pending"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list product tiers",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/image-config": {
      "post": {
        "tags": ["image-config-api"],
        "summary": "CreateImageConfig image-config-api",
        "operationId": "image-config-api#CreateImageConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID to use for the infra",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateImageConfigRequest2"
              },
              "example": {
                "customImageCommandsAndArgs": {
                  "args": ["-d", "mysql"],
                  "commands": ["echo", "Hello, World!"]
                },
                "description": "A image configuration for my new entity",
                "imageName": "mysql",
                "imageRegistryId": "ir-12345678",
                "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
                "imageTag": "latest",
                "serviceEnvironmentId": "se-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Image Config ID created",
                  "example": "imgc-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "imgc-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create the image config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/image-config/{id}": {
      "delete": {
        "tags": ["image-config-api"],
        "summary": "DeleteImageConfig image-config-api",
        "operationId": "image-config-api#DeleteImageConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The image configuration ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Image Config",
              "example": "Eos rem iste repellendus perspiciatis qui."
            },
            "example": "imgc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete the image config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["image-config-api"],
        "summary": "DescribeImageConfig image-config-api",
        "operationId": "image-config-api#DescribeImageConfig",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the image config to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the image config to describe. If not specified, the latest version is described.",
              "example": "Iste suscipit enim ullam et tempore."
            },
            "example": "Fuga qui quam ullam amet ullam."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "ProductTierId of the image config to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Officia architecto natus."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The image configuration ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Image Config",
              "example": "Labore assumenda nisi."
            },
            "example": "imgc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeImageConfigResult"
                },
                "example": {
                  "customImageCommandsAndArgs": {
                    "args": ["-d", "mysql"],
                    "commands": ["echo", "Hello, World!"]
                  },
                  "description": "An image configuration for my new entity",
                  "id": "imgc-12345678",
                  "imageName": "mysql",
                  "imageRegistryId": "ir-12345678",
                  "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
                  "imageTag": "v1",
                  "serviceEnvironmentId": "se-12345678",
                  "serviceId": "s-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe the image config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["image-config-api"],
        "summary": "UpdateImageConfig image-config-api",
        "operationId": "image-config-api#UpdateImageConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The image configuration ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Image Config",
              "example": "Tenetur facilis qui."
            },
            "example": "imgc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateImageConfigRequest2"
              },
              "example": {
                "customImageCommandsAndArgs": {
                  "args": ["-d", "mysql"],
                  "commands": ["echo", "Hello, World!"]
                },
                "description": "An image configuration for my new entity",
                "imageName": "mysql",
                "imageRegistryId": "ir-12345678",
                "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
                "imageTag": "v1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update the image config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/image-config/{id}/release": {
      "post": {
        "tags": ["image-config-api"],
        "summary": "ReleaseImageConfig image-config-api",
        "operationId": "image-config-api#ReleaseImageConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The image configuration ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Image Config",
              "example": "Et eaque odit soluta."
            },
            "example": "imgc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReleaseImageConfigRequest2"
              },
              "example": {
                "productTierId": "pt-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to release the image config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/image-config/{id}/rollout": {
      "get": {
        "tags": ["image-config-api"],
        "summary": "RolloutFleetImageStatus image-config-api",
        "operationId": "image-config-api#RolloutFleetImageStatus",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The image configuration ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Image Config",
              "example": "Non sunt rerum quo."
            },
            "example": "imgc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolloutFleetImageStatusResult"
                },
                "example": {
                  "status": "IN_PROGRESS"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to get the fleet image rollout status",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["image-config-api"],
        "summary": "RolloutFleetImageConfig image-config-api",
        "operationId": "image-config-api#RolloutFleetImageConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The image configuration ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Image Config",
              "example": "Voluptas exercitationem."
            },
            "example": "imgc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to rollout to the fleet",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/infra-config": {
      "post": {
        "tags": ["infra-config-api"],
        "summary": "CreateInfraConfig infra-config-api",
        "operationId": "infra-config-api#CreateInfraConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInfraConfigRequest2"
              },
              "example": {
                "computeConfigId": "cc-12345678",
                "customTag": {
                  "key": "customKey",
                  "value": "customValue"
                },
                "description": "Infra config used for the base tier MySQL service",
                "name": "MySQL Writer Infra Config",
                "networkConfigId": "nc-12345678",
                "serviceEnvironmentId": "se-12345678",
                "storageConfigId": "sc-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Infra Config ID created",
                  "example": "ic-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "ic-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create an infra config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}": {
      "delete": {
        "tags": ["infra-config-api"],
        "summary": "DeleteInfraConfig infra-config-api",
        "operationId": "infra-config-api#DeleteInfraConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Infra Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Et doloribus eos iste sint."
            },
            "example": "ic-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete an infra config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["infra-config-api"],
        "summary": "DescribeInfraConfig infra-config-api",
        "operationId": "infra-config-api#DescribeInfraConfig",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the infra config to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the infra config to describe. If not specified, the latest version is described.",
              "example": "Maiores animi occaecati aspernatur aliquid."
            },
            "example": "Voluptas vero a."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "ProductTierId of the infra config to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Nisi rerum."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Infra Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Non ullam aut quo magnam."
            },
            "example": "ic-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeInfraConfigResult"
                },
                "example": {
                  "computeConfigId": "cc-12345678",
                  "customTag": {
                    "key": "customKey",
                    "value": "customValue"
                  },
                  "description": "Infra config used for the base tier MySQL service",
                  "id": "ic-12345678",
                  "name": "MySQL Writer Infra Config",
                  "networkConfigId": "nc-12345678",
                  "serviceEnvironmentId": "se-12345678",
                  "serviceId": "s-12345678",
                  "storageConfigId": "sc-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe an infra config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["infra-config-api"],
        "summary": "UpdateInfraConfig infra-config-api",
        "operationId": "infra-config-api#UpdateInfraConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Infra Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Quisquam aspernatur animi accusantium quis sit cumque."
            },
            "example": "ic-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInfraConfigRequest2"
              },
              "example": {
                "computeConfigId": "cc-12345678",
                "customTag": {
                  "key": "customKey",
                  "value": "customValue"
                },
                "description": "Infra config used for the base tier MySQL service",
                "name": "MySQL Writer Infra Config",
                "networkConfigId": "nc-12345678",
                "storageConfigId": "sc-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update an infra config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/associated-resources": {
      "get": {
        "tags": ["infra-config-api"],
        "summary": "ListAssociatedResources infra-config-api",
        "operationId": "infra-config-api#ListAssociatedResources",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Infra Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Eum optio repudiandae est animi amet."
            },
            "example": "ic-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAssociatedResourcesResult"
                },
                "example": {
                  "id": "ic-12345678",
                  "resourceIds": ["r-12345678", "r-abcdefgh"],
                  "serviceId": "s-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list associated resources",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/compute-config": {
      "delete": {
        "tags": ["infra-config-api"],
        "summary": "DetachComputeConfig infra-config-api",
        "operationId": "infra-config-api#DetachComputeConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Infra Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Quia nostrum inventore."
            },
            "example": "ic-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to detach a compute config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/network-config": {
      "delete": {
        "tags": ["infra-config-api"],
        "summary": "DetachNetworkConfig infra-config-api",
        "operationId": "infra-config-api#DetachNetworkConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Infra Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Deleniti aliquam aliquid esse odit quo cumque."
            },
            "example": "ic-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to detach a network config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/release": {
      "post": {
        "tags": ["infra-config-api"],
        "summary": "ReleaseInfraConfig infra-config-api",
        "operationId": "infra-config-api#ReleaseInfraConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Infra Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Et aut ducimus nulla est."
            },
            "example": "ic-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReleaseInfraConfigRequest2"
              },
              "example": {
                "productTierId": "pt-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to release an infra config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/rollout": {
      "post": {
        "tags": ["infra-config-api"],
        "summary": "RolloutFleetInfra infra-config-api",
        "operationId": "infra-config-api#RolloutFleetInfra",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Infra Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Delectus eos in."
            },
            "example": "ic-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to rollout to the fleet",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/rollout/status": {
      "get": {
        "tags": ["infra-config-api"],
        "summary": "RolloutFleetInfraStatus infra-config-api",
        "operationId": "infra-config-api#RolloutFleetInfraStatus",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Infra Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Voluptatem facilis hic ipsa eum."
            },
            "example": "ic-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolloutFleetInfraStatusResult"
                },
                "example": {
                  "status": "IN_PROGRESS"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to get the fleet rollout infra status",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/storage-config": {
      "delete": {
        "tags": ["infra-config-api"],
        "summary": "DetachStorageConfig infra-config-api",
        "operationId": "infra-config-api#DetachStorageConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Infra Config ID to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Et nihil ad libero aut nisi."
            },
            "example": "ic-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to detach a storage config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/input-parameter": {
      "post": {
        "tags": ["input-parameter-api"],
        "summary": "CreateInputParameter input-parameter-api",
        "operationId": "input-parameter-api#CreateInputParameter",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service that this output parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInputParameterRequest2"
              },
              "example": {
                "defaultValue": "default value",
                "dependentResourceId": "r-12345678",
                "description": "Commodi deserunt architecto ut sit ut.",
                "hasOptions": true,
                "isList": false,
                "key": "4u",
                "labeledOptions": {
                  "large": "t3.xlarge",
                  "medium": "t3.large",
                  "small": "t3.medium"
                },
                "limits": {
                  "max": "Sit explicabo delectus aut nisi consequuntur.",
                  "maxLength": "Sunt amet provident.",
                  "min": "Cumque temporibus dolores vitae dolores doloremque illum.",
                  "minLength": "Qui odio laudantium illum."
                },
                "modifiable": true,
                "name": "qrn",
                "options": ["a", "b", "c", "default value"],
                "required": false,
                "resourceId": "r-12345678",
                "type": "Quis sunt."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Input Parameter ID created",
                  "example": "ip-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "ip-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create an input parameter",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/input-parameter/{id}": {
      "delete": {
        "tags": ["input-parameter-api"],
        "summary": "DeleteInputParameter input-parameter-api",
        "operationId": "input-parameter-api#DeleteInputParameter",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service that this output parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the input parameter",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Input Parameter",
              "example": "Et unde."
            },
            "example": "var-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete an input parameter",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["input-parameter-api"],
        "summary": "DescribeInputParameter input-parameter-api",
        "operationId": "input-parameter-api#DescribeInputParameter",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the instance to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the instance to describe. If not specified, the latest version is described.",
              "example": "Culpa maxime laudantium."
            },
            "example": "Enim facilis aspernatur mollitia est aliquid."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "Product tier id of the instance to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Doloremque soluta laborum facere quia qui pariatur."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service that this output parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the input parameter",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Input Parameter",
              "example": "Eum omnis delectus est eligendi blanditiis dolore."
            },
            "example": "var-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeInputParameterResult"
                },
                "example": {
                  "defaultValue": "true",
                  "dependentResourceId": "r-12345678",
                  "description": "Nihil qui ullam totam dolorem.",
                  "hasOptions": true,
                  "id": "var-12345678",
                  "isList": true,
                  "key": "qe",
                  "labeledOptions": {
                    "large": "t3.xlarge",
                    "medium": "t3.large",
                    "small": "t3.medium"
                  },
                  "limits": {
                    "max": "Blanditiis voluptas.",
                    "maxLength": "Et error sequi et dignissimos illo.",
                    "min": "Et consequatur dolor est saepe velit voluptas.",
                    "minLength": "Ad suscipit aut ut suscipit voluptatem."
                  },
                  "modifiable": false,
                  "name": "3p4",
                  "options": ["true", "false"],
                  "required": true,
                  "resourceId": "r-12345678",
                  "serviceId": "s-12345678",
                  "type": "Nemo libero doloremque velit et."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe an input parameter",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["input-parameter-api"],
        "summary": "UpdateInputParameter input-parameter-api",
        "operationId": "input-parameter-api#UpdateInputParameter",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service that this output parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the input parameter",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Input Parameter",
              "example": "Ullam sunt aut quos."
            },
            "example": "var-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInputParameterRequest2"
              },
              "example": {
                "defaultValue": "[\"1\", \"2.8\", \"3\"]",
                "description": "Aut ipsum harum delectus aliquid.",
                "hasOptions": false,
                "labeledOptions": {
                  "large": "t3.xlarge",
                  "medium": "t3.large",
                  "small": "t3.medium"
                },
                "limits": {
                  "max": "Sit explicabo delectus aut nisi consequuntur.",
                  "maxLength": "Sunt amet provident.",
                  "min": "Cumque temporibus dolores vitae dolores doloremque illum.",
                  "minLength": "Qui odio laudantium illum."
                },
                "modifiable": true,
                "name": "y",
                "options": ["[\"1\", \"2.8\", \"3\"]", "[\"3.4\", \"4.5\"]"],
                "required": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update an input parameter",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/model": {
      "post": {
        "tags": ["service-model-api"],
        "summary": "CreateServiceModel service-model-api",
        "operationId": "service-model-api#CreateServiceModel",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service this model is for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceModelRequest2"
              },
              "example": {
                "accountConfigIds": ["ac-12345678", "ac-23456789"],
                "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                "features": [
                  {
                    "configuration": {
                      "Sapiente ut.": "Ut qui eligendi odit."
                    },
                    "feature": "Quia quas saepe sequi quidem facere."
                  },
                  {
                    "configuration": {
                      "Sapiente ut.": "Ut qui eligendi odit."
                    },
                    "feature": "Quia quas saepe sequi quidem facere."
                  },
                  {
                    "configuration": {
                      "Sapiente ut.": "Ut qui eligendi odit."
                    },
                    "feature": "Quia quas saepe sequi quidem facere."
                  },
                  {
                    "configuration": {
                      "Sapiente ut.": "Ut qui eligendi odit."
                    },
                    "feature": "Quia quas saepe sequi quidem facere."
                  }
                ],
                "modelType": "CUSTOMER_HOSTED",
                "name": "MySQL multi-writer service hosted model",
                "serviceApiId": "sa-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Service Model ID created",
                  "example": "sm-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "sm-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a service model",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/model/{id}": {
      "delete": {
        "tags": ["service-model-api"],
        "summary": "DeleteServiceModel service-model-api",
        "operationId": "service-model-api#DeleteServiceModel",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID this model belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service model ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "In omnis."
            },
            "example": "sm-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a service model",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["service-model-api"],
        "summary": "DescribeServiceModel service-model-api",
        "operationId": "service-model-api#DescribeServiceModel",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID this model belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service model ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Et placeat aut eveniet quibusdam ea sed."
            },
            "example": "sm-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeServiceModelResult"
                },
                "example": {
                  "accountConfigIds": ["ac-12345678", "ac-23456789"],
                  "activeAccountConfigIds": {
                    "aws": "ac-12345678",
                    "gcp": "ac-23456789"
                  },
                  "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                  "features": [
                    {
                      "configuration": {
                        "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                        "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                      },
                      "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                    },
                    {
                      "configuration": {
                        "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                        "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                      },
                      "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                    },
                    {
                      "configuration": {
                        "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                        "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                      },
                      "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                    },
                    {
                      "configuration": {
                        "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                        "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                      },
                      "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                    }
                  ],
                  "id": "sm-12345678",
                  "key": "mysql-multi-writer-service-hosted-model",
                  "modelType": "CUSTOMER_HOSTED",
                  "name": "MySQL multi-writer service hosted model",
                  "productTiers": ["pt-12345678", "pt-87654321"],
                  "serviceApiId": "sa-12345678",
                  "serviceId": "s-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a service model",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["service-model-api"],
        "summary": "UpdateServiceModel service-model-api",
        "operationId": "service-model-api#UpdateServiceModel",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID this model belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service model ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Perspiciatis maiores."
            },
            "example": "sm-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceModelRequest2"
              },
              "example": {
                "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                "name": "MySQL multi-writer service hosted model"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update a service model",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/model/{id}/account-config": {
      "delete": {
        "tags": ["service-model-api"],
        "summary": "RemoveAccountConfigFromServiceModel service-model-api",
        "operationId": "service-model-api#RemoveAccountConfigFromServiceModel",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID this model belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service model ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Sed ea tenetur quam sed ab."
            },
            "example": "sm-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveAccountConfigFromServiceModelRequest2"
              },
              "example": {
                "accountConfigId": "ac-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to remove an account config from a service model",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["service-model-api"],
        "summary": "AddAccountConfigToServiceModel service-model-api",
        "operationId": "service-model-api#AddAccountConfigToServiceModel",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID this model belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service model ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Et saepe soluta eligendi molestiae voluptatum."
            },
            "example": "sm-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddAccountConfigToServiceModelRequest2"
              },
              "example": {
                "accountConfigId": "ac-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to add an account config to a service model",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/model/{id}/account-config/{accountConfigId}/active": {
      "post": {
        "tags": ["service-model-api"],
        "summary": "SetActiveAccountConfig service-model-api",
        "operationId": "service-model-api#SetActiveAccountConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID this model belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service model ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Qui et fugiat."
            },
            "example": "sm-12345678"
          },
          {
            "name": "accountConfigId",
            "in": "path",
            "description": "The infrastructure account configuration ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Account Config",
              "example": "Impedit aliquid hic."
            },
            "example": "ac-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to set the active account config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/model/{id}/feature": {
      "delete": {
        "tags": ["service-model-api"],
        "summary": "DisableServiceModelFeature service-model-api",
        "operationId": "service-model-api#DisableServiceModelFeature",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID this model belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service model ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Accusamus tenetur non omnis placeat."
            },
            "example": "sm-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableServiceModelFeatureRequest2"
              },
              "example": {
                "feature": "Earum eum ab earum sed."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when the service model feature could not be disabled",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "put": {
        "tags": ["service-model-api"],
        "summary": "EnableServiceModelFeature service-model-api",
        "operationId": "service-model-api#EnableServiceModelFeature",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID this model belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service model ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Voluptates beatae ipsam omnis esse quaerat cumque."
            },
            "example": "sm-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableServiceModelFeatureRequest2"
              },
              "example": {
                "configuration": {
                  "Iste eaque consequuntur architecto minima.": "Natus voluptatum.",
                  "Similique temporibus.": "Repellat omnis dolores rem voluptas."
                },
                "feature": "Et nemo alias ad molestias odio."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when the service model feature could not be enabled",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/model/{id}/release": {
      "get": {
        "tags": ["service-model-api"],
        "summary": "ReleaseServiceModelStatus service-model-api",
        "operationId": "service-model-api#ReleaseServiceModelStatus",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID this model belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service model ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Qui eum velit beatae sed."
            },
            "example": "sm-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReleaseServiceModelResult"
                },
                "example": {
                  "status": "READY"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to release a service model status",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/model/{serviceModelId}/product-tier": {
      "get": {
        "tags": ["product-tier-api"],
        "summary": "ListProductTier product-tier-api",
        "operationId": "product-tier-api#ListProductTier",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "serviceModelId",
            "in": "path",
            "description": "Service model ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Dolores voluptatem."
            },
            "example": "sm-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProductTiersResult"
                },
                "example": {
                  "ids": [
                    "Dolores repellat sit unde.",
                    "Fugit maxime pariatur iure non.",
                    "Vero ex sunt esse.",
                    "Exercitationem nobis."
                  ],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list product tiers",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/model/{serviceModelId}/vunit": {
      "get": {
        "tags": ["vunit-api"],
        "summary": "ListVUnits vunit-api",
        "operationId": "vunit-api#ListVUnits",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID for the VUnit",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "serviceModelId",
            "in": "path",
            "description": "Service Model ID for the VUnit",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Quaerat eos dicta nulla optio."
            },
            "example": "sm-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListVUnitsRequest2"
              },
              "example": {
                "cloudProvider": "aws",
                "region": "us-west-2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVUnitsResult"
                },
                "example": {
                  "ids": {
                    "aws": ["vu-12345678", "vu-abcdefgh"],
                    "gcp": ["vu-1234efgh"]
                  },
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list vunits",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/model/copy/{sourceId}": {
      "post": {
        "tags": ["service-model-api"],
        "summary": "CopyServiceModel service-model-api",
        "operationId": "service-model-api#CopyServiceModel",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID this model belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "sourceId",
            "in": "path",
            "description": "The source service model ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Neque ipsa aut ex."
            },
            "example": "sm-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyServiceModelRequest2"
              },
              "example": {
                "accountConfigIds": ["ac-12345678", "ac-23456789"],
                "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                "features": [
                  {
                    "configuration": {
                      "Sapiente ut.": "Ut qui eligendi odit."
                    },
                    "feature": "Quia quas saepe sequi quidem facere."
                  },
                  {
                    "configuration": {
                      "Sapiente ut.": "Ut qui eligendi odit."
                    },
                    "feature": "Quia quas saepe sequi quidem facere."
                  },
                  {
                    "configuration": {
                      "Sapiente ut.": "Ut qui eligendi odit."
                    },
                    "feature": "Quia quas saepe sequi quidem facere."
                  },
                  {
                    "configuration": {
                      "Sapiente ut.": "Ut qui eligendi odit."
                    },
                    "feature": "Quia quas saepe sequi quidem facere."
                  }
                ],
                "name": "MySQL multi-writer service hosted model",
                "targetServiceModelType": "CUSTOMER_HOSTED",
                "targetTierType": "OMNISTRATE_DEDICATED_TENANCY"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "New Service Model ID",
                  "example": "sm-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "sm-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to copy a service model",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/network-config": {
      "get": {
        "tags": ["network-config-api"],
        "summary": "ListNetworkConfig network-config-api",
        "operationId": "network-config-api#ListNetworkConfig",
        "parameters": [
          {
            "name": "managed",
            "in": "query",
            "description": "Is network config managed by omnistrate",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "description": "Is network config managed by omnistrate",
              "example": false
            },
            "example": false
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID to list network configs for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNetworkConfigsResult"
                },
                "example": {
                  "ids": ["Saepe consequatur dolor sequi rerum cum similique.", "Numquam ut et ullam iusto sit ut."],
                  "nextPageToken": "token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list network configs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["network-config-api"],
        "summary": "CreateNetworkConfig network-config-api",
        "operationId": "network-config-api#CreateNetworkConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkConfigRequest2"
              },
              "example": {
                "description": "A multi-zone HA network config",
                "endpointPerReplica": true,
                "internal": true,
                "name": "Multi-zone",
                "openPorts": [1299, 3306],
                "privateNetworkingConfiguration": {
                  "privateLinkConfiguration": {
                    "awsPrivateLinkConfigurations": [
                      {
                        "port": 80,
                        "targetGroupName": "my-target-group"
                      },
                      {
                        "port": 80,
                        "targetGroupName": "my-target-group"
                      },
                      {
                        "port": 80,
                        "targetGroupName": "my-target-group"
                      },
                      {
                        "port": 80,
                        "targetGroupName": "my-target-group"
                      }
                    ]
                  }
                },
                "publicNetworkingConfiguration": {
                  "enableClusterLoadBalancer": true,
                  "enableNodeLoadBalancer": true
                },
                "stableEgressIP": true,
                "tlsTerminationPort": 443,
                "zoneConfiguration": "Odio assumenda sunt."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Network Config ID created",
                  "example": "nc-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "nc-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create network config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/network-config/{id}": {
      "delete": {
        "tags": ["network-config-api"],
        "summary": "DeleteNetworkConfig network-config-api",
        "operationId": "network-config-api#DeleteNetworkConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the network config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Network Config",
              "example": "Dolor earum quis totam."
            },
            "example": "nc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a network config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["network-config-api"],
        "summary": "DescribeNetworkConfig network-config-api",
        "operationId": "network-config-api#DescribeNetworkConfig",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the network config to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the network config to describe. If not specified, the latest version is described.",
              "example": "Temporibus cumque repellendus eos."
            },
            "example": "Dignissimos laboriosam facilis sed."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "ProductTierId of the network config to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Facilis mollitia aut temporibus sapiente."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the network config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Network Config",
              "example": "Possimus doloremque suscipit."
            },
            "example": "nc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeNetworkConfigResult"
                },
                "example": {
                  "description": "A multi-zone HA network config",
                  "endpointPerReplica": true,
                  "id": "nc-12345678",
                  "infraConfigIDs": ["ic-12345678", "ic-abcdefgh"],
                  "internal": true,
                  "name": "Multi-zone",
                  "openPorts": [1299, 3306],
                  "privateNetworkingConfiguration": {
                    "privateLinkConfiguration": {
                      "awsPrivateLinkConfigurations": [
                        {
                          "port": 80,
                          "targetGroupName": "my-target-group"
                        },
                        {
                          "port": 80,
                          "targetGroupName": "my-target-group"
                        },
                        {
                          "port": 80,
                          "targetGroupName": "my-target-group"
                        }
                      ]
                    }
                  },
                  "publicNetworkingConfiguration": {
                    "enableClusterLoadBalancer": true,
                    "enableNodeLoadBalancer": true
                  },
                  "serviceId": "s-12345678",
                  "stableEgressIP": true,
                  "tlsTerminationPort": 443,
                  "zoneConfiguration": "Veniam soluta id."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe network config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["network-config-api"],
        "summary": "UpdateNetworkConfig network-config-api",
        "operationId": "network-config-api#UpdateNetworkConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the network config",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Network Config",
              "example": "Quas dolore ipsum eos."
            },
            "example": "nc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNetworkConfigRequest2"
              },
              "example": {
                "description": "A multi-zone HA network config",
                "endpointPerReplica": true,
                "internal": true,
                "name": "Multi-zone",
                "openPorts": [1299, 3306],
                "privateNetworkingConfiguration": {
                  "privateLinkConfiguration": {
                    "awsPrivateLinkConfigurations": [
                      {
                        "port": 80,
                        "targetGroupName": "my-target-group"
                      },
                      {
                        "port": 80,
                        "targetGroupName": "my-target-group"
                      },
                      {
                        "port": 80,
                        "targetGroupName": "my-target-group"
                      },
                      {
                        "port": 80,
                        "targetGroupName": "my-target-group"
                      }
                    ]
                  }
                },
                "publicNetworkingConfiguration": {
                  "enableClusterLoadBalancer": true,
                  "enableNodeLoadBalancer": true
                },
                "stableEgressIP": true,
                "tlsTerminationPort": 443,
                "zoneConfiguration": "Natus est velit molestiae nisi sequi ipsum."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update network config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/network/{id}": {
      "get": {
        "tags": ["vunit-api"],
        "summary": "DescribeNetwork vunit-api",
        "operationId": "vunit-api#DescribeNetwork",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID context",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Network to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Network",
              "example": "Et assumenda aut."
            },
            "example": "n-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeNetworkResult"
                },
                "example": {
                  "cidr": "10.0.0.0/16",
                  "id": "n-12345678",
                  "networkConfigId": "nc-12345678",
                  "serviceId": "s-12345678",
                  "type": "PUBLIC",
                  "vunitId": "vu-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a network",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/output-parameter": {
      "post": {
        "tags": ["output-parameter-api"],
        "summary": "CreateOutputParameter output-parameter-api",
        "operationId": "output-parameter-api#CreateOutputParameter",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service that this output parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOutputParameterRequest2"
              },
              "example": {
                "description": "Username of the user created in the target system",
                "key": "username",
                "name": "Username",
                "resourceId": "r-12345678",
                "value": "johndoe",
                "valueRef": "$var.username",
                "valueType": "Omnis molestias accusamus praesentium temporibus cum delectus."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Output Parameter ID created",
                  "example": "op-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "op-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create an output parameter",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/output-parameter/{id}": {
      "delete": {
        "tags": ["output-parameter-api"],
        "summary": "DeleteOutputParameter output-parameter-api",
        "operationId": "output-parameter-api#DeleteOutputParameter",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service that this output parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the output parameter",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Output Parameter",
              "example": "Accusantium aut blanditiis molestias temporibus tempora."
            },
            "example": "op-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete an output parameter",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["output-parameter-api"],
        "summary": "DescribeOutputParameter output-parameter-api",
        "operationId": "output-parameter-api#DescribeOutputParameter",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the resource to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the resource to describe. If not specified, the latest version is described.",
              "example": "Explicabo dolores."
            },
            "example": "Itaque enim cupiditate tempora quisquam voluptatem."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "ProductTierId of the resource to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Est necessitatibus dolorem soluta rerum omnis dolorum."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service that this output parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the output parameter",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Output Parameter",
              "example": "Totam veritatis iste."
            },
            "example": "op-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeOutputParameterResult"
                },
                "example": {
                  "description": "Username of the user created in the target system",
                  "id": "op-12345678",
                  "key": "username",
                  "name": "Username",
                  "resourceId": "r-12345678",
                  "serviceId": "s-12345678",
                  "value": "johndoe",
                  "valueRef": "$var.username",
                  "valueType": "Sequi et corporis beatae voluptas dolorum."
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe an output parameter",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["output-parameter-api"],
        "summary": "UpdateOutputParameter output-parameter-api",
        "operationId": "output-parameter-api#UpdateOutputParameter",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service that this output parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the output parameter",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of an Output Parameter",
              "example": "Consequatur quidem et temporibus."
            },
            "example": "op-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOutputParameterRequest2"
              },
              "example": {
                "description": "Username of the user created in the target system",
                "name": "Username",
                "value": "johndoe",
                "valueRef": "$var.username",
                "valueType": "Maiores temporibus pariatur praesentium expedita."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update an output parameter",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/product-tier": {
      "post": {
        "tags": ["product-tier-api"],
        "summary": "CreateProductTier product-tier-api",
        "operationId": "product-tier-api#CreateProductTier",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductTierRequest2"
              },
              "example": {
                "autoApproveSubscription": false,
                "awsRegions": ["us-east-2", "ca-central-1"],
                "description": "A premium product tier",
                "documentation": "Any documentation",
                "gcpRegions": ["us-central1"],
                "isDisabled": false,
                "name": "Premium",
                "planDescription": "A premium plan",
                "pricing": {
                  "price1": "value1"
                },
                "serviceModelId": "sm-12345678",
                "support": "Any support",
                "tierType": "OMNISTRATE_DEDICATED_TENANCY"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Product Tier ID created",
                  "example": "pt-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "pt-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a product tier",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/product-tier/{id}": {
      "delete": {
        "tags": ["product-tier-api"],
        "summary": "DeleteProductTier product-tier-api",
        "operationId": "product-tier-api#DeleteProductTier",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Voluptas reprehenderit laborum eligendi quis."
            },
            "example": "pt-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a product tier",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["product-tier-api"],
        "summary": "DescribeProductTier product-tier-api",
        "operationId": "product-tier-api#DescribeProductTier",
        "parameters": [
          {
            "name": "version",
            "in": "query",
            "description": "The version number for the specific version set",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The version number for the specific version set",
              "example": "3.0"
            },
            "example": "3.0"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Maiores beatae velit qui repellat fugiat."
            },
            "example": "pt-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeProductTierResult"
                },
                "example": {
                  "apiGroups": {
                    "r-12345678": "v1",
                    "r-23456789": "v2",
                    "r-34567890": "v3"
                  },
                  "autoApproveSubscription": false,
                  "awsRegions": ["us-east-2", "ca-central-1"],
                  "cloudProvidersConfigReadiness": {
                    "aws": {
                      "resourceA": "missing terraform configuration",
                      "resourceB": "missing cloudformation configuration"
                    }
                  },
                  "description": "A premium product tier",
                  "documentation": "Any documentation",
                  "enabledFeatures": [
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    },
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    },
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    }
                  ],
                  "features": {
                    "BILLING": false,
                    "LOGS": true,
                    "METRICS": false
                  },
                  "gcpRegions": ["us-central1"],
                  "id": "pt-12345678",
                  "isDisabled": false,
                  "key": "premium",
                  "name": "Premium",
                  "planDescription": "A premium plan",
                  "pricing": {
                    "price1": "value1"
                  },
                  "serviceId": "s-12345678",
                  "serviceModelId": "sm-12345678",
                  "support": "Any support",
                  "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a product tier",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["product-tier-api"],
        "summary": "UpdateProductTier product-tier-api",
        "operationId": "product-tier-api#UpdateProductTier",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Sit voluptates."
            },
            "example": "pt-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductTierRequest2"
              },
              "example": {
                "autoApproveSubscription": false,
                "awsRegions": ["us-east-2", "ca-central-1"],
                "description": "A premium product tier",
                "documentation": "Any documentation",
                "gcpRegions": ["us-central1"],
                "isDisabled": false,
                "name": "Premium",
                "planDescription": "A premium plan",
                "pricing": {
                  "price1": "value1"
                },
                "support": "Any support",
                "tierType": "OMNISTRATE_DEDICATED_TENANCY"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update a product tier",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/product-tier/{id}/billing-plan": {
      "get": {
        "tags": ["product-tier-api"],
        "summary": "ListProductTierBillingPlan product-tier-api",
        "operationId": "product-tier-api#ListProductTierBillingPlan",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Nemo tempore impedit optio quasi qui."
            },
            "example": "pt-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListProductTierBillingPlanResult"
                },
                "example": {
                  "billingPlans": [
                    {
                      "allowCreatesWhenPaymentNotConfigured": true,
                      "id": "bp-12345678",
                      "maxNumberofInstances": 5,
                      "planName": "STARTER",
                      "pricing": {
                        "cpuCoreHours": "0.001",
                        "memoryGiBHours": "0.0001",
                        "storageGiBHours": "0.0001"
                      },
                      "productTierId": "pt-12345678",
                      "serviceId": "s-12345678"
                    },
                    {
                      "allowCreatesWhenPaymentNotConfigured": true,
                      "id": "bp-12345678",
                      "maxNumberofInstances": 5,
                      "planName": "STARTER",
                      "pricing": {
                        "cpuCoreHours": "0.001",
                        "memoryGiBHours": "0.0001",
                        "storageGiBHours": "0.0001"
                      },
                      "productTierId": "pt-12345678",
                      "serviceId": "s-12345678"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when the product tier pricing could not be described",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["product-tier-api"],
        "summary": "CreateProductTierBillingPlan product-tier-api",
        "operationId": "product-tier-api#CreateProductTierBillingPlan",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Praesentium aut non ut ea aperiam."
            },
            "example": "pt-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductTierBillingPlanRequest2"
              },
              "example": {
                "allowCreatesWhenPaymentNotConfigured": true,
                "maxNumberofInstances": 5,
                "planName": "STARTER",
                "pricing": {
                  "cpuCoreHours": "0.001",
                  "memoryGiBHours": "0.0001",
                  "storageGiBHours": "0.0001"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingPlan"
                },
                "example": {
                  "allowCreatesWhenPaymentNotConfigured": true,
                  "id": "bp-12345678",
                  "maxNumberofInstances": 5,
                  "planName": "STARTER",
                  "pricing": {
                    "cpuCoreHours": "0.001",
                    "memoryGiBHours": "0.0001",
                    "storageGiBHours": "0.0001"
                  },
                  "productTierId": "pt-12345678",
                  "serviceId": "s-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a product tier pricing",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/product-tier/{id}/feature": {
      "delete": {
        "tags": ["product-tier-api"],
        "summary": "DisableProductTierFeature product-tier-api",
        "operationId": "product-tier-api#DisableProductTierFeature",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Harum rerum exercitationem error et sed."
            },
            "example": "pt-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableProductTierFeatureRequest2"
              },
              "example": {
                "feature": "BILLING",
                "scope": "INTERNAL"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when the product tier feature could not be disabled",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "put": {
        "tags": ["product-tier-api"],
        "summary": "EnableProductTierFeature product-tier-api",
        "operationId": "product-tier-api#EnableProductTierFeature",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Perferendis architecto modi."
            },
            "example": "pt-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableProductTierFeatureRequest2"
              },
              "example": {
                "configuration": {
                  "S3BucketArn": "arn:aws:s3:::my_billing_bucket_name"
                },
                "feature": "BILLING",
                "scope": "INTERNAL"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when the product tier feature could not be enabled",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/product-tier/{productTierId}/billing-plan/{id}": {
      "delete": {
        "tags": ["product-tier-api"],
        "summary": "DeleteProductTierBillingPlan product-tier-api",
        "operationId": "product-tier-api#DeleteProductTierBillingPlan",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "Product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Autem error culpa est."
            },
            "example": "pt-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Product tier billing plan ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier Billing Plan",
              "example": "Quis suscipit qui est distinctio."
            },
            "example": "bp-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when the product tier pricing could not be described",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["product-tier-api"],
        "summary": "DescribeProductTierBillingPlan product-tier-api",
        "operationId": "product-tier-api#DescribeProductTierBillingPlan",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "Product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Eius qui nobis."
            },
            "example": "pt-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Product tier billing plan ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier Billing Plan",
              "example": "Aut sapiente soluta distinctio."
            },
            "example": "bp-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingPlan"
                },
                "example": {
                  "allowCreatesWhenPaymentNotConfigured": true,
                  "id": "bp-12345678",
                  "maxNumberofInstances": 5,
                  "planName": "STARTER",
                  "pricing": {
                    "cpuCoreHours": "0.001",
                    "memoryGiBHours": "0.0001",
                    "storageGiBHours": "0.0001"
                  },
                  "productTierId": "pt-12345678",
                  "serviceId": "s-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when the product tier pricing could not be described",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["product-tier-api"],
        "summary": "UpdateProductTierBillingPlan product-tier-api",
        "operationId": "product-tier-api#UpdateProductTierBillingPlan",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "Product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Reiciendis perferendis dolores reprehenderit quaerat iure."
            },
            "example": "pt-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Product tier billing plan ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier Billing Plan",
              "example": "Dolorum voluptates eius ex et neque est."
            },
            "example": "bp-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductTierBillingPlanRequest2"
              },
              "example": {
                "allowCreatesWhenPaymentNotConfigured": true,
                "maxNumberofInstances": 5,
                "planName": "STARTER",
                "pricing": {
                  "cpuCoreHours": "0.001",
                  "memoryGBHours": "0.0001"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingPlan"
                },
                "example": {
                  "allowCreatesWhenPaymentNotConfigured": true,
                  "id": "bp-12345678",
                  "maxNumberofInstances": 5,
                  "planName": "STARTER",
                  "pricing": {
                    "cpuCoreHours": "0.001",
                    "memoryGiBHours": "0.0001",
                    "storageGiBHours": "0.0001"
                  },
                  "productTierId": "pt-12345678",
                  "serviceId": "s-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update a product tier pricing",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/product-tier/{productTierId}/service-plan": {
      "get": {
        "tags": ["service-plan-api"],
        "summary": "GetServicePlan service-plan-api",
        "operationId": "service-plan-api#GetServicePlan",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "Product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Molestias est temporibus."
            },
            "example": "pt-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetServicePlanResult"
                },
                "example": {
                  "AutoApproveSubscription": false,
                  "accountConfigIds": ["ac-12345678", "ac-23456789"],
                  "activeAccountConfigIds": {
                    "aws": "ac-12345678",
                    "gcp": "ac-23456789"
                  },
                  "apiVersion": "v1",
                  "awsRegions": ["us-east-2", "ca-central-1"],
                  "deploymentConfigId": "dc-12345678",
                  "gcpRegions": ["us-central1"],
                  "hasPendingChanges": true,
                  "isProductTierDisabled": true,
                  "latestMajorVersion": "3.0",
                  "modelType": "CUSTOMER_HOSTED",
                  "productTierDescription": "A premium product tier",
                  "productTierDocumentation": "Any documentation",
                  "productTierFeatures": {
                    "BILLING": false,
                    "LOGS": true,
                    "METRICS": false
                  },
                  "productTierId": "pt-12345678",
                  "productTierKey": "premium",
                  "productTierName": "Premium",
                  "productTierPlanDescription": "A premium plan",
                  "productTierPricing": {
                    "price1": "value1"
                  },
                  "productTierSupport": "Any support",
                  "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
                  "serviceApiId": "sa-12345678",
                  "serviceEnvironmentId": "se-12345678",
                  "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                  "serviceModelFeatures": [
                    {
                      "configuration": {
                        "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                        "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                      },
                      "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                    },
                    {
                      "configuration": {
                        "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                        "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                      },
                      "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                    },
                    {
                      "configuration": {
                        "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                        "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                      },
                      "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                    },
                    {
                      "configuration": {
                        "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
                        "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
                      },
                      "feature": "Eum temporibus voluptate inventore est consectetur omnis."
                    }
                  ],
                  "serviceModelId": "sm-12345678",
                  "serviceModelName": "MySQL multi-writer service hosted model",
                  "tierType": "OMNISTRATE_DEDICATED_TENANCY",
                  "versionSetStatus": "Preferred|Active|Deprecated|Pending"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list product tiers",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/product-tier/copy/{sourceId}": {
      "post": {
        "tags": ["product-tier-api"],
        "summary": "CopyProductTier product-tier-api",
        "operationId": "product-tier-api#CopyProductTier",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "sourceId",
            "in": "path",
            "description": "The source product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Ipsum dolore error minima."
            },
            "example": "pt-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyProductTierRequest2"
              },
              "example": {
                "autoApproveSubscription": false,
                "awsRegions": ["us-east-2", "ca-central-1"],
                "description": "A premium product tier",
                "documentation": "Any documentation",
                "gcpRegions": ["us-central1"],
                "name": "Premium",
                "planDescription": "A premium plan",
                "pricing": {
                  "price1": "value1"
                },
                "serviceModelId": "sm-12345678",
                "support": "Any support",
                "targetTierType": "OMNISTRATE_DEDICATED_TENANCY"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Product Tier ID created",
                  "example": "pt-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "pt-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a product tier",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set": {
      "get": {
        "tags": ["tier-version-set-api"],
        "summary": "ListTierVersionSets tier-version-set-api",
        "operationId": "tier-version-set-api#ListTierVersionSets",
        "parameters": [
          {
            "name": "latestMajorVersionOnly",
            "in": "query",
            "description": "If true, the latest major version is returned. The parameter needs to be specified in isolation.",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "description": "If true, the latest major version is returned. The parameter needs to be specified in isolation.",
              "example": true
            },
            "example": true
          },
          {
            "name": "latestIncrementalVersionForMajorVersion",
            "in": "query",
            "description": "Returns the latest incremental version for the given major version. The paramenter needs to be specified in isolation.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Returns the latest incremental version for the given major version. The paramenter needs to be specified in isolation.",
              "example": "3.0"
            },
            "example": "3.0"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "The product tier ID that this version set belongs to.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Molestias dolorem quia."
            },
            "example": "Beatae beatae."
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListTierVersionSetsResult"
                },
                "example": {
                  "nextPageToken": "next-token",
                  "tierVersionSets": [
                    {
                      "autoApproveSubscription": false,
                      "baseVersion": "3.0",
                      "createdAt": "2020-01-01T00:00:00Z",
                      "createdBy": "John Doe",
                      "description": "Voluptas ipsum et consectetur maiores aliquid.",
                      "enabledFeatures": [
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        }
                      ],
                      "features": {
                        "BILLING": false,
                        "LOGS": true,
                        "METRICS": false
                      },
                      "instanceCount": 12,
                      "latestUpgradePathId": "upgrade-12345678",
                      "name": "Regular version set",
                      "parentVersion": "2.0",
                      "productTierId": "Nihil qui ex omnis repellat consectetur.",
                      "releasedAt": "2020-01-01T00:00:00Z",
                      "releasedBy": "John Doe",
                      "resources": [
                        {
                          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                          "id": "r-12345678",
                          "imageConfigId": "imgc-12345678",
                          "infraConfigId": "ic-12345678",
                          "isExternal": true,
                          "managedResourceType": "PortsBasedProxy",
                          "name": "MySQL multi-writer service"
                        },
                        {
                          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                          "id": "r-12345678",
                          "imageConfigId": "imgc-12345678",
                          "infraConfigId": "ic-12345678",
                          "isExternal": true,
                          "managedResourceType": "PortsBasedProxy",
                          "name": "MySQL multi-writer service"
                        }
                      ],
                      "serviceId": "s-12345678",
                      "serviceModelId": "Et ut error delectus quaerat placeat dolores.",
                      "status": "Preferred|Active|Deprecated|Pending",
                      "type": "Major|Incremental|UserDefined",
                      "updatedAt": "2020-01-01T00:00:00Z",
                      "version": "3.0"
                    },
                    {
                      "autoApproveSubscription": false,
                      "baseVersion": "3.0",
                      "createdAt": "2020-01-01T00:00:00Z",
                      "createdBy": "John Doe",
                      "description": "Voluptas ipsum et consectetur maiores aliquid.",
                      "enabledFeatures": [
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        }
                      ],
                      "features": {
                        "BILLING": false,
                        "LOGS": true,
                        "METRICS": false
                      },
                      "instanceCount": 12,
                      "latestUpgradePathId": "upgrade-12345678",
                      "name": "Regular version set",
                      "parentVersion": "2.0",
                      "productTierId": "Nihil qui ex omnis repellat consectetur.",
                      "releasedAt": "2020-01-01T00:00:00Z",
                      "releasedBy": "John Doe",
                      "resources": [
                        {
                          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                          "id": "r-12345678",
                          "imageConfigId": "imgc-12345678",
                          "infraConfigId": "ic-12345678",
                          "isExternal": true,
                          "managedResourceType": "PortsBasedProxy",
                          "name": "MySQL multi-writer service"
                        },
                        {
                          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                          "id": "r-12345678",
                          "imageConfigId": "imgc-12345678",
                          "infraConfigId": "ic-12345678",
                          "isExternal": true,
                          "managedResourceType": "PortsBasedProxy",
                          "name": "MySQL multi-writer service"
                        }
                      ],
                      "serviceId": "s-12345678",
                      "serviceModelId": "Et ut error delectus quaerat placeat dolores.",
                      "status": "Preferred|Active|Deprecated|Pending",
                      "type": "Major|Incremental|UserDefined",
                      "updatedAt": "2020-01-01T00:00:00Z",
                      "version": "3.0"
                    },
                    {
                      "autoApproveSubscription": false,
                      "baseVersion": "3.0",
                      "createdAt": "2020-01-01T00:00:00Z",
                      "createdBy": "John Doe",
                      "description": "Voluptas ipsum et consectetur maiores aliquid.",
                      "enabledFeatures": [
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        }
                      ],
                      "features": {
                        "BILLING": false,
                        "LOGS": true,
                        "METRICS": false
                      },
                      "instanceCount": 12,
                      "latestUpgradePathId": "upgrade-12345678",
                      "name": "Regular version set",
                      "parentVersion": "2.0",
                      "productTierId": "Nihil qui ex omnis repellat consectetur.",
                      "releasedAt": "2020-01-01T00:00:00Z",
                      "releasedBy": "John Doe",
                      "resources": [
                        {
                          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                          "id": "r-12345678",
                          "imageConfigId": "imgc-12345678",
                          "infraConfigId": "ic-12345678",
                          "isExternal": true,
                          "managedResourceType": "PortsBasedProxy",
                          "name": "MySQL multi-writer service"
                        },
                        {
                          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                          "id": "r-12345678",
                          "imageConfigId": "imgc-12345678",
                          "infraConfigId": "ic-12345678",
                          "isExternal": true,
                          "managedResourceType": "PortsBasedProxy",
                          "name": "MySQL multi-writer service"
                        }
                      ],
                      "serviceId": "s-12345678",
                      "serviceModelId": "Et ut error delectus quaerat placeat dolores.",
                      "status": "Preferred|Active|Deprecated|Pending",
                      "type": "Major|Incremental|UserDefined",
                      "updatedAt": "2020-01-01T00:00:00Z",
                      "version": "3.0"
                    },
                    {
                      "autoApproveSubscription": false,
                      "baseVersion": "3.0",
                      "createdAt": "2020-01-01T00:00:00Z",
                      "createdBy": "John Doe",
                      "description": "Voluptas ipsum et consectetur maiores aliquid.",
                      "enabledFeatures": [
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        },
                        {
                          "configuration": {
                            "provider": "native"
                          },
                          "feature": "LOGS",
                          "scope": "INTERNAL"
                        }
                      ],
                      "features": {
                        "BILLING": false,
                        "LOGS": true,
                        "METRICS": false
                      },
                      "instanceCount": 12,
                      "latestUpgradePathId": "upgrade-12345678",
                      "name": "Regular version set",
                      "parentVersion": "2.0",
                      "productTierId": "Nihil qui ex omnis repellat consectetur.",
                      "releasedAt": "2020-01-01T00:00:00Z",
                      "releasedBy": "John Doe",
                      "resources": [
                        {
                          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                          "id": "r-12345678",
                          "imageConfigId": "imgc-12345678",
                          "infraConfigId": "ic-12345678",
                          "isExternal": true,
                          "managedResourceType": "PortsBasedProxy",
                          "name": "MySQL multi-writer service"
                        },
                        {
                          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                          "id": "r-12345678",
                          "imageConfigId": "imgc-12345678",
                          "infraConfigId": "ic-12345678",
                          "isExternal": true,
                          "managedResourceType": "PortsBasedProxy",
                          "name": "MySQL multi-writer service"
                        }
                      ],
                      "serviceId": "s-12345678",
                      "serviceModelId": "Et ut error delectus quaerat placeat dolores.",
                      "status": "Preferred|Active|Deprecated|Pending",
                      "type": "Major|Incremental|UserDefined",
                      "updatedAt": "2020-01-01T00:00:00Z",
                      "version": "3.0"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used when a bad request is made",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used when authentication fails",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used when authorization fails",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when a failure occurs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["tier-version-set-api"],
        "summary": "CreateTierVersionSet tier-version-set-api",
        "operationId": "tier-version-set-api#CreateTierVersionSet",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "The product tier ID that this version set belongs to.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Ut laboriosam cumque a occaecati ullam omnis."
            },
            "example": "Beatae beatae."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTierVersionSetRequest2"
              },
              "example": {
                "description": "Praesentium optio nesciunt.",
                "name": "Major version set",
                "parentVersion": "2.0",
                "type": "Major|Incremental|UserDefined"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTierVersionSetResult"
                },
                "example": {
                  "version": "3.0"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request.",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a version set.",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}": {
      "get": {
        "tags": ["tier-version-set-api"],
        "summary": "DescribeTierVersionSet tier-version-set-api",
        "operationId": "tier-version-set-api#DescribeTierVersionSet",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "The product tier ID that this version set belongs to.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Cumque dicta rem illum ipsum ut."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version number for the specific version set.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The version number for the specific version set.",
              "example": "3.0"
            },
            "example": "3.0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TierVersionSet"
                },
                "example": {
                  "autoApproveSubscription": false,
                  "baseVersion": "3.0",
                  "createdAt": "2020-01-01T00:00:00Z",
                  "createdBy": "John Doe",
                  "description": "Fugiat magni sapiente.",
                  "enabledFeatures": [
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    },
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    },
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    },
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    }
                  ],
                  "features": {
                    "BILLING": false,
                    "LOGS": true,
                    "METRICS": false
                  },
                  "instanceCount": 12,
                  "latestUpgradePathId": "upgrade-12345678",
                  "name": "Regular version set",
                  "parentVersion": "2.0",
                  "productTierId": "Labore iusto eos.",
                  "releasedAt": "2020-01-01T00:00:00Z",
                  "releasedBy": "John Doe",
                  "resources": [
                    {
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "isExternal": true,
                      "managedResourceType": "PortsBasedProxy",
                      "name": "MySQL multi-writer service"
                    },
                    {
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "isExternal": true,
                      "managedResourceType": "PortsBasedProxy",
                      "name": "MySQL multi-writer service"
                    },
                    {
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "isExternal": true,
                      "managedResourceType": "PortsBasedProxy",
                      "name": "MySQL multi-writer service"
                    }
                  ],
                  "serviceId": "s-12345678",
                  "serviceModelId": "Rerum architecto incidunt quis iste commodi.",
                  "status": "Preferred|Active|Deprecated|Pending",
                  "type": "Major|Incremental|UserDefined",
                  "updatedAt": "2020-01-01T00:00:00Z",
                  "version": "3.0"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used when a bad request is made",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used when authentication fails",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used when authorization fails",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when a failure occurs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/deprecate": {
      "patch": {
        "tags": ["tier-version-set-api"],
        "summary": "DeprecateTierVersionSet tier-version-set-api",
        "operationId": "tier-version-set-api#DeprecateTierVersionSet",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "The product tier ID that this version set belongs to.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Cupiditate molestiae dolorem dolorum maxime."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version number for the specific version set.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The version number for the specific version set.",
              "example": "3.0"
            },
            "example": "3.0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TierVersionSet"
                },
                "example": {
                  "autoApproveSubscription": false,
                  "baseVersion": "3.0",
                  "createdAt": "2020-01-01T00:00:00Z",
                  "createdBy": "John Doe",
                  "description": "Odit ut doloremque sed voluptates dolorem possimus.",
                  "enabledFeatures": [
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    },
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    }
                  ],
                  "features": {
                    "BILLING": false,
                    "LOGS": true,
                    "METRICS": false
                  },
                  "instanceCount": 12,
                  "latestUpgradePathId": "upgrade-12345678",
                  "name": "Regular version set",
                  "parentVersion": "2.0",
                  "productTierId": "Quasi error laborum pariatur sed mollitia numquam.",
                  "releasedAt": "2020-01-01T00:00:00Z",
                  "releasedBy": "John Doe",
                  "resources": [
                    {
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "isExternal": true,
                      "managedResourceType": "PortsBasedProxy",
                      "name": "MySQL multi-writer service"
                    },
                    {
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "isExternal": true,
                      "managedResourceType": "PortsBasedProxy",
                      "name": "MySQL multi-writer service"
                    }
                  ],
                  "serviceId": "s-12345678",
                  "serviceModelId": "Quisquam quis ut sapiente.",
                  "status": "Preferred|Active|Deprecated|Pending",
                  "type": "Major|Incremental|UserDefined",
                  "updatedAt": "2020-01-01T00:00:00Z",
                  "version": "3.0"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used when a bad request is made",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used when authentication fails",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used when authorization fails",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when a failure occurs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/diff/{anotherVersion}": {
      "get": {
        "tags": ["tier-version-set-api"],
        "summary": "DiffTierVersionSets tier-version-set-api",
        "operationId": "tier-version-set-api#DiffTierVersionSets",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "The product tier ID that this version set belongs to.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Iste ea."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version number for the version set.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The version number for the version set.",
              "example": "3.0"
            },
            "example": "3.0"
          },
          {
            "name": "anotherVersion",
            "in": "path",
            "description": "The target version to compare against.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The target version to compare against.",
              "example": "3.1"
            },
            "example": "3.1"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiffTierVersionSetsResult"
                },
                "example": {
                  "anotherVersion": "3.1",
                  "productTierId": "Ab omnis illum.",
                  "resourceChangeSets": {
                    "Dolor modi exercitationem et ut.": {
                      "categorizedResourceChanges": {
                        "Quo amet explicabo.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        },
                        "Ut deserunt voluptate vel necessitatibus.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        },
                        "Vitae omnis molestiae eaque id.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        }
                      },
                      "imageConfigChanges": {
                        "changeState": "PENDING_NEW",
                        "imageConfigId": "imgc-12345678",
                        "imageName": "mysql"
                      },
                      "infraConfigChanges": {
                        "changeState": "PENDING_NEW",
                        "infraConfigId": "ic-12345678",
                        "name": "MySQL Writer Infra Config"
                      },
                      "overallResourceStatus": "PENDING_UPDATE",
                      "productTierFeatureChanges": "PENDING_UPDATE",
                      "resourceChanges": "PENDING_DELETE",
                      "resourceName": "Inventore commodi quasi consequatur."
                    },
                    "Voluptatem provident laboriosam omnis sed.": {
                      "categorizedResourceChanges": {
                        "Quo amet explicabo.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        },
                        "Ut deserunt voluptate vel necessitatibus.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        },
                        "Vitae omnis molestiae eaque id.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        }
                      },
                      "imageConfigChanges": {
                        "changeState": "PENDING_NEW",
                        "imageConfigId": "imgc-12345678",
                        "imageName": "mysql"
                      },
                      "infraConfigChanges": {
                        "changeState": "PENDING_NEW",
                        "infraConfigId": "ic-12345678",
                        "name": "MySQL Writer Infra Config"
                      },
                      "overallResourceStatus": "PENDING_UPDATE",
                      "productTierFeatureChanges": "PENDING_UPDATE",
                      "resourceChanges": "PENDING_DELETE",
                      "resourceName": "Inventore commodi quasi consequatur."
                    }
                  },
                  "serviceId": "s-12345678",
                  "version": "3.0"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used when a bad request is made",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used when authentication fails",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used when authorization fails",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when a failure occurs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/promote": {
      "patch": {
        "tags": ["tier-version-set-api"],
        "summary": "PromoteTierVersionSet tier-version-set-api",
        "operationId": "tier-version-set-api#PromoteTierVersionSet",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "The product tier ID that this version set belongs to.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Dolorem ab placeat et."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version number for the specific version set.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The version number for the specific version set.",
              "example": "3.0"
            },
            "example": "3.0"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TierVersionSet"
                },
                "example": {
                  "autoApproveSubscription": false,
                  "baseVersion": "3.0",
                  "createdAt": "2020-01-01T00:00:00Z",
                  "createdBy": "John Doe",
                  "description": "Ex consequuntur odio amet similique quia aliquid.",
                  "enabledFeatures": [
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    },
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    },
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    }
                  ],
                  "features": {
                    "BILLING": false,
                    "LOGS": true,
                    "METRICS": false
                  },
                  "instanceCount": 12,
                  "latestUpgradePathId": "upgrade-12345678",
                  "name": "Regular version set",
                  "parentVersion": "2.0",
                  "productTierId": "Aut dolorum aut molestiae.",
                  "releasedAt": "2020-01-01T00:00:00Z",
                  "releasedBy": "John Doe",
                  "resources": [
                    {
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "isExternal": true,
                      "managedResourceType": "PortsBasedProxy",
                      "name": "MySQL multi-writer service"
                    },
                    {
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "isExternal": true,
                      "managedResourceType": "PortsBasedProxy",
                      "name": "MySQL multi-writer service"
                    }
                  ],
                  "serviceId": "s-12345678",
                  "serviceModelId": "Qui quia eum itaque nesciunt sit.",
                  "status": "Preferred|Active|Deprecated|Pending",
                  "type": "Major|Incremental|UserDefined",
                  "updatedAt": "2020-01-01T00:00:00Z",
                  "version": "3.0"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used when a bad request is made",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used when authentication fails",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used when authorization fails",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used when a failure occurs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/release": {
      "patch": {
        "tags": ["tier-version-set-api"],
        "summary": "ReleaseTierVersionSet tier-version-set-api",
        "operationId": "tier-version-set-api#ReleaseTierVersionSet",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "ID of the Service",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "The product tier ID that this version set belongs to.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Omnis tempore culpa et."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version number for the specific version set.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The version number for the specific version set.",
              "example": "3.0"
            },
            "example": "3.0"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReleaseTierVersionSetRequest2"
              },
              "example": {
                "isPreferred": true,
                "name": "Major version set"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TierVersionSet"
                },
                "example": {
                  "autoApproveSubscription": false,
                  "baseVersion": "3.0",
                  "createdAt": "2020-01-01T00:00:00Z",
                  "createdBy": "John Doe",
                  "description": "Dolorem nisi repellat aut sed commodi aut.",
                  "enabledFeatures": [
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    },
                    {
                      "configuration": {
                        "provider": "native"
                      },
                      "feature": "LOGS",
                      "scope": "INTERNAL"
                    }
                  ],
                  "features": {
                    "BILLING": false,
                    "LOGS": true,
                    "METRICS": false
                  },
                  "instanceCount": 12,
                  "latestUpgradePathId": "upgrade-12345678",
                  "name": "Regular version set",
                  "parentVersion": "2.0",
                  "productTierId": "Omnis alias.",
                  "releasedAt": "2020-01-01T00:00:00Z",
                  "releasedBy": "John Doe",
                  "resources": [
                    {
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "isExternal": true,
                      "managedResourceType": "PortsBasedProxy",
                      "name": "MySQL multi-writer service"
                    },
                    {
                      "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "isExternal": true,
                      "managedResourceType": "PortsBasedProxy",
                      "name": "MySQL multi-writer service"
                    }
                  ],
                  "serviceId": "s-12345678",
                  "serviceModelId": "Nesciunt dolorem est quo dolorem omnis quas.",
                  "status": "Preferred|Active|Deprecated|Pending",
                  "type": "Major|Incremental|UserDefined",
                  "updatedAt": "2020-01-01T00:00:00Z",
                  "version": "3.0"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request.",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to release a version set.",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/producttier/{productTierId}/resource": {
      "get": {
        "tags": ["resource-api"],
        "summary": "ListResources resource-api",
        "operationId": "resource-api#ListResources",
        "parameters": [
          {
            "name": "managed",
            "in": "query",
            "description": "Is resource managed by omnistrate",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "description": "Is resource managed by omnistrate",
              "example": false
            },
            "example": false
          },
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the instance to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the instance to describe. If not specified, the latest version is described.",
              "example": "Earum aut."
            },
            "example": "Et cum."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service to list resources for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "si-12345678"
          },
          {
            "name": "productTierId",
            "in": "path",
            "description": "The product tier ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Id consequatur sed quam et."
            },
            "example": "pt-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResourcesResult"
                },
                "example": {
                  "ids": ["r-12345678", "r-abcdefgh", "r-1234abcd"],
                  "nextPageToken": "next-token",
                  "resources": [
                    {
                      "actionHooks": [
                        {
                          "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                          "scope": "CLUSTER",
                          "type": "INIT"
                        }
                      ],
                      "additionalSecurityContext": {
                        "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                        "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                        "SupplementalGroupIDs": [1001, 999]
                      },
                      "backupConfiguration": {
                        "backupPeriodInHours": 24,
                        "backupRetentionInDays": 7
                      },
                      "blobStorageConfiguration": {
                        "GCSConfiguration": {},
                        "S3Configuration": {}
                      },
                      "capabilities": [
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        },
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        },
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        }
                      ],
                      "customLabels": {
                        "key": "value"
                      },
                      "customSysCTLs": {
                        "net.ipv4.tcp_syncookies": "1"
                      },
                      "customULimits": [
                        {
                          "ULimitsName": "NoProc",
                          "ULimitsType": "Soft",
                          "ULimitsValue": 1000
                        },
                        {
                          "ULimitsName": "NoFile",
                          "ULimitsType": "Hard",
                          "ULimitsValue": 2048
                        }
                      ],
                      "dependencies": [
                        {
                          "parameterMap": {
                            "clusterId": "writerId",
                            "clusterOrg": "userDatabase"
                          },
                          "resourceId": "r-12345678"
                        },
                        {
                          "parameterMap": {
                            "clusterId": "readerId",
                            "clusterOrg": "userDatabase"
                          },
                          "resourceId": "r-abcdef12"
                        }
                      ],
                      "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                      "environmentVariables": [
                        {
                          "name": "MYSQL_ROOT_PASSWORD",
                          "value": "password"
                        }
                      ],
                      "fileSystemConfiguration": {
                        "EFSFileSystemConfiguration": {
                          "PerformanceMode": "generalPurpose|maxIO",
                          "ProvisionedThroughputInMibps": 125,
                          "ThroughputMode": "provisioned|bursting|elastic"
                        }
                      },
                      "helmChartConfiguration": {
                        "chartName": "my-chart",
                        "chartRepoName": "my-repo",
                        "chartRepoUrl": "https://my-repo.com",
                        "chartValues": {
                          "key1": "value1",
                          "key2": 3,
                          "key3": {
                            "key4": "value4"
                          }
                        },
                        "chartVersion": "1.0.0",
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "password": "my-password",
                        "runtimeConfiguration": {
                          "disableHooks": true,
                          "recreate": true,
                          "resetThenReuseValues": true,
                          "resetValues": true,
                          "reuseValues": true,
                          "skipCRDs": true,
                          "timeoutNanos": 1000000000,
                          "upgradeCRDs": true,
                          "wait": true,
                          "waitForJobs": true
                        },
                        "username": "my-user"
                      },
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "internal": false,
                      "isDeprecated": false,
                      "key": "galera",
                      "kustomizeConfiguration": {
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "gitConfiguration": {
                          "accessToken": "my-token",
                          "referenceName": "tags/v1.0.0",
                          "repositoryUrl": "https://github.com/username/myrepo",
                          "userName": "my-user"
                        },
                        "helmChartDependencies": [
                          {
                            "chartName": "cert-manager",
                            "chartVersion": "v1.5.3"
                          },
                          {
                            "chartName": "nginx-ingress",
                            "chartVersion": "v0.48.1"
                          },
                          {
                            "chartName": "external-dns",
                            "chartVersion": "v0.7.0"
                          },
                          {
                            "chartName": "cnpg-operator",
                            "chartVersion": "v0.23.1"
                          }
                        ],
                        "kustomizePath": "/kustomize"
                      },
                      "l4LoadBalancerConfiguration": {
                        "ingressPortConfiguration": [
                          {
                            "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                            "backendPort": 8080,
                            "ingressPort": 1234
                          },
                          {
                            "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                            "backendPort": 8081,
                            "ingressPort": 5678
                          },
                          {
                            "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                            "backendPort": 8082,
                            "ingressPort": 9012
                          }
                        ]
                      },
                      "l7LoadBalancerConfiguration": {
                        "paths": [
                          {
                            "associatedResourceID": "r-12345678",
                            "path": "/path",
                            "port": 8080
                          }
                        ]
                      },
                      "name": "Galera",
                      "operatorCRDConfiguration": {
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "helmChartDependencies": [
                          {
                            "chartName": "cert-manager",
                            "chartVersion": "v1.5.3"
                          },
                          {
                            "chartName": "nginx-ingress",
                            "chartVersion": "v0.48.1"
                          },
                          {
                            "chartName": "external-dns",
                            "chartVersion": "v0.7.0"
                          },
                          {
                            "chartName": "cnpg-operator",
                            "chartVersion": "v0.23.1"
                          }
                        ],
                        "outputParameters": {
                          "expiresAt": "$out.status.notAfter",
                          "issuerName": "letsencrypt-prod"
                        },
                        "readinessConditions": {
                          "$out.status.conditions[?(@.type=='Ready')].status": true
                        },
                        "supplementalFiles": [
                          "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                          "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                        ],
                        "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                      },
                      "productTierId": "pt-12345678",
                      "proxyType": "PortsBasedProxy",
                      "resourceType": "Generic",
                      "serviceId": "s-12345678",
                      "terraformConfigurations": {
                        "Accusamus sed facere consectetur et qui.": {
                          "gitConfiguration": {
                            "accessToken": "my-token",
                            "referenceName": "tags/v1.0.0",
                            "repositoryUrl": "https://github.com/username/myrepo",
                            "userName": "my-user"
                          },
                          "privateModuleGitAccessTokens": {
                            "tokenName": "accessToken"
                          },
                          "requiredOutputKeys": ["output1"],
                          "requiredOutputs": [
                            {
                              "exported": true,
                              "key": "output1"
                            }
                          ],
                          "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                          "terraformPath": "/project1/tf"
                        },
                        "Sequi asperiores.": {
                          "gitConfiguration": {
                            "accessToken": "my-token",
                            "referenceName": "tags/v1.0.0",
                            "repositoryUrl": "https://github.com/username/myrepo",
                            "userName": "my-user"
                          },
                          "privateModuleGitAccessTokens": {
                            "tokenName": "accessToken"
                          },
                          "requiredOutputKeys": ["output1"],
                          "requiredOutputs": [
                            {
                              "exported": true,
                              "key": "output1"
                            }
                          ],
                          "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                          "terraformPath": "/project1/tf"
                        }
                      }
                    },
                    {
                      "actionHooks": [
                        {
                          "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                          "scope": "CLUSTER",
                          "type": "INIT"
                        }
                      ],
                      "additionalSecurityContext": {
                        "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                        "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                        "SupplementalGroupIDs": [1001, 999]
                      },
                      "backupConfiguration": {
                        "backupPeriodInHours": 24,
                        "backupRetentionInDays": 7
                      },
                      "blobStorageConfiguration": {
                        "GCSConfiguration": {},
                        "S3Configuration": {}
                      },
                      "capabilities": [
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        },
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        },
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        }
                      ],
                      "customLabels": {
                        "key": "value"
                      },
                      "customSysCTLs": {
                        "net.ipv4.tcp_syncookies": "1"
                      },
                      "customULimits": [
                        {
                          "ULimitsName": "NoProc",
                          "ULimitsType": "Soft",
                          "ULimitsValue": 1000
                        },
                        {
                          "ULimitsName": "NoFile",
                          "ULimitsType": "Hard",
                          "ULimitsValue": 2048
                        }
                      ],
                      "dependencies": [
                        {
                          "parameterMap": {
                            "clusterId": "writerId",
                            "clusterOrg": "userDatabase"
                          },
                          "resourceId": "r-12345678"
                        },
                        {
                          "parameterMap": {
                            "clusterId": "readerId",
                            "clusterOrg": "userDatabase"
                          },
                          "resourceId": "r-abcdef12"
                        }
                      ],
                      "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                      "environmentVariables": [
                        {
                          "name": "MYSQL_ROOT_PASSWORD",
                          "value": "password"
                        }
                      ],
                      "fileSystemConfiguration": {
                        "EFSFileSystemConfiguration": {
                          "PerformanceMode": "generalPurpose|maxIO",
                          "ProvisionedThroughputInMibps": 125,
                          "ThroughputMode": "provisioned|bursting|elastic"
                        }
                      },
                      "helmChartConfiguration": {
                        "chartName": "my-chart",
                        "chartRepoName": "my-repo",
                        "chartRepoUrl": "https://my-repo.com",
                        "chartValues": {
                          "key1": "value1",
                          "key2": 3,
                          "key3": {
                            "key4": "value4"
                          }
                        },
                        "chartVersion": "1.0.0",
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "password": "my-password",
                        "runtimeConfiguration": {
                          "disableHooks": true,
                          "recreate": true,
                          "resetThenReuseValues": true,
                          "resetValues": true,
                          "reuseValues": true,
                          "skipCRDs": true,
                          "timeoutNanos": 1000000000,
                          "upgradeCRDs": true,
                          "wait": true,
                          "waitForJobs": true
                        },
                        "username": "my-user"
                      },
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "internal": false,
                      "isDeprecated": false,
                      "key": "galera",
                      "kustomizeConfiguration": {
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "gitConfiguration": {
                          "accessToken": "my-token",
                          "referenceName": "tags/v1.0.0",
                          "repositoryUrl": "https://github.com/username/myrepo",
                          "userName": "my-user"
                        },
                        "helmChartDependencies": [
                          {
                            "chartName": "cert-manager",
                            "chartVersion": "v1.5.3"
                          },
                          {
                            "chartName": "nginx-ingress",
                            "chartVersion": "v0.48.1"
                          },
                          {
                            "chartName": "external-dns",
                            "chartVersion": "v0.7.0"
                          },
                          {
                            "chartName": "cnpg-operator",
                            "chartVersion": "v0.23.1"
                          }
                        ],
                        "kustomizePath": "/kustomize"
                      },
                      "l4LoadBalancerConfiguration": {
                        "ingressPortConfiguration": [
                          {
                            "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                            "backendPort": 8080,
                            "ingressPort": 1234
                          },
                          {
                            "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                            "backendPort": 8081,
                            "ingressPort": 5678
                          },
                          {
                            "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                            "backendPort": 8082,
                            "ingressPort": 9012
                          }
                        ]
                      },
                      "l7LoadBalancerConfiguration": {
                        "paths": [
                          {
                            "associatedResourceID": "r-12345678",
                            "path": "/path",
                            "port": 8080
                          }
                        ]
                      },
                      "name": "Galera",
                      "operatorCRDConfiguration": {
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "helmChartDependencies": [
                          {
                            "chartName": "cert-manager",
                            "chartVersion": "v1.5.3"
                          },
                          {
                            "chartName": "nginx-ingress",
                            "chartVersion": "v0.48.1"
                          },
                          {
                            "chartName": "external-dns",
                            "chartVersion": "v0.7.0"
                          },
                          {
                            "chartName": "cnpg-operator",
                            "chartVersion": "v0.23.1"
                          }
                        ],
                        "outputParameters": {
                          "expiresAt": "$out.status.notAfter",
                          "issuerName": "letsencrypt-prod"
                        },
                        "readinessConditions": {
                          "$out.status.conditions[?(@.type=='Ready')].status": true
                        },
                        "supplementalFiles": [
                          "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                          "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                        ],
                        "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                      },
                      "productTierId": "pt-12345678",
                      "proxyType": "PortsBasedProxy",
                      "resourceType": "Generic",
                      "serviceId": "s-12345678",
                      "terraformConfigurations": {
                        "Accusamus sed facere consectetur et qui.": {
                          "gitConfiguration": {
                            "accessToken": "my-token",
                            "referenceName": "tags/v1.0.0",
                            "repositoryUrl": "https://github.com/username/myrepo",
                            "userName": "my-user"
                          },
                          "privateModuleGitAccessTokens": {
                            "tokenName": "accessToken"
                          },
                          "requiredOutputKeys": ["output1"],
                          "requiredOutputs": [
                            {
                              "exported": true,
                              "key": "output1"
                            }
                          ],
                          "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                          "terraformPath": "/project1/tf"
                        },
                        "Sequi asperiores.": {
                          "gitConfiguration": {
                            "accessToken": "my-token",
                            "referenceName": "tags/v1.0.0",
                            "repositoryUrl": "https://github.com/username/myrepo",
                            "userName": "my-user"
                          },
                          "privateModuleGitAccessTokens": {
                            "tokenName": "accessToken"
                          },
                          "requiredOutputKeys": ["output1"],
                          "requiredOutputs": [
                            {
                              "exported": true,
                              "key": "output1"
                            }
                          ],
                          "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                          "terraformPath": "/project1/tf"
                        }
                      }
                    },
                    {
                      "actionHooks": [
                        {
                          "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                          "scope": "CLUSTER",
                          "type": "INIT"
                        }
                      ],
                      "additionalSecurityContext": {
                        "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                        "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                        "SupplementalGroupIDs": [1001, 999]
                      },
                      "backupConfiguration": {
                        "backupPeriodInHours": 24,
                        "backupRetentionInDays": 7
                      },
                      "blobStorageConfiguration": {
                        "GCSConfiguration": {},
                        "S3Configuration": {}
                      },
                      "capabilities": [
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        },
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        },
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        }
                      ],
                      "customLabels": {
                        "key": "value"
                      },
                      "customSysCTLs": {
                        "net.ipv4.tcp_syncookies": "1"
                      },
                      "customULimits": [
                        {
                          "ULimitsName": "NoProc",
                          "ULimitsType": "Soft",
                          "ULimitsValue": 1000
                        },
                        {
                          "ULimitsName": "NoFile",
                          "ULimitsType": "Hard",
                          "ULimitsValue": 2048
                        }
                      ],
                      "dependencies": [
                        {
                          "parameterMap": {
                            "clusterId": "writerId",
                            "clusterOrg": "userDatabase"
                          },
                          "resourceId": "r-12345678"
                        },
                        {
                          "parameterMap": {
                            "clusterId": "readerId",
                            "clusterOrg": "userDatabase"
                          },
                          "resourceId": "r-abcdef12"
                        }
                      ],
                      "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                      "environmentVariables": [
                        {
                          "name": "MYSQL_ROOT_PASSWORD",
                          "value": "password"
                        }
                      ],
                      "fileSystemConfiguration": {
                        "EFSFileSystemConfiguration": {
                          "PerformanceMode": "generalPurpose|maxIO",
                          "ProvisionedThroughputInMibps": 125,
                          "ThroughputMode": "provisioned|bursting|elastic"
                        }
                      },
                      "helmChartConfiguration": {
                        "chartName": "my-chart",
                        "chartRepoName": "my-repo",
                        "chartRepoUrl": "https://my-repo.com",
                        "chartValues": {
                          "key1": "value1",
                          "key2": 3,
                          "key3": {
                            "key4": "value4"
                          }
                        },
                        "chartVersion": "1.0.0",
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "password": "my-password",
                        "runtimeConfiguration": {
                          "disableHooks": true,
                          "recreate": true,
                          "resetThenReuseValues": true,
                          "resetValues": true,
                          "reuseValues": true,
                          "skipCRDs": true,
                          "timeoutNanos": 1000000000,
                          "upgradeCRDs": true,
                          "wait": true,
                          "waitForJobs": true
                        },
                        "username": "my-user"
                      },
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "internal": false,
                      "isDeprecated": false,
                      "key": "galera",
                      "kustomizeConfiguration": {
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "gitConfiguration": {
                          "accessToken": "my-token",
                          "referenceName": "tags/v1.0.0",
                          "repositoryUrl": "https://github.com/username/myrepo",
                          "userName": "my-user"
                        },
                        "helmChartDependencies": [
                          {
                            "chartName": "cert-manager",
                            "chartVersion": "v1.5.3"
                          },
                          {
                            "chartName": "nginx-ingress",
                            "chartVersion": "v0.48.1"
                          },
                          {
                            "chartName": "external-dns",
                            "chartVersion": "v0.7.0"
                          },
                          {
                            "chartName": "cnpg-operator",
                            "chartVersion": "v0.23.1"
                          }
                        ],
                        "kustomizePath": "/kustomize"
                      },
                      "l4LoadBalancerConfiguration": {
                        "ingressPortConfiguration": [
                          {
                            "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                            "backendPort": 8080,
                            "ingressPort": 1234
                          },
                          {
                            "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                            "backendPort": 8081,
                            "ingressPort": 5678
                          },
                          {
                            "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                            "backendPort": 8082,
                            "ingressPort": 9012
                          }
                        ]
                      },
                      "l7LoadBalancerConfiguration": {
                        "paths": [
                          {
                            "associatedResourceID": "r-12345678",
                            "path": "/path",
                            "port": 8080
                          }
                        ]
                      },
                      "name": "Galera",
                      "operatorCRDConfiguration": {
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "helmChartDependencies": [
                          {
                            "chartName": "cert-manager",
                            "chartVersion": "v1.5.3"
                          },
                          {
                            "chartName": "nginx-ingress",
                            "chartVersion": "v0.48.1"
                          },
                          {
                            "chartName": "external-dns",
                            "chartVersion": "v0.7.0"
                          },
                          {
                            "chartName": "cnpg-operator",
                            "chartVersion": "v0.23.1"
                          }
                        ],
                        "outputParameters": {
                          "expiresAt": "$out.status.notAfter",
                          "issuerName": "letsencrypt-prod"
                        },
                        "readinessConditions": {
                          "$out.status.conditions[?(@.type=='Ready')].status": true
                        },
                        "supplementalFiles": [
                          "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                          "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                        ],
                        "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                      },
                      "productTierId": "pt-12345678",
                      "proxyType": "PortsBasedProxy",
                      "resourceType": "Generic",
                      "serviceId": "s-12345678",
                      "terraformConfigurations": {
                        "Accusamus sed facere consectetur et qui.": {
                          "gitConfiguration": {
                            "accessToken": "my-token",
                            "referenceName": "tags/v1.0.0",
                            "repositoryUrl": "https://github.com/username/myrepo",
                            "userName": "my-user"
                          },
                          "privateModuleGitAccessTokens": {
                            "tokenName": "accessToken"
                          },
                          "requiredOutputKeys": ["output1"],
                          "requiredOutputs": [
                            {
                              "exported": true,
                              "key": "output1"
                            }
                          ],
                          "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                          "terraformPath": "/project1/tf"
                        },
                        "Sequi asperiores.": {
                          "gitConfiguration": {
                            "accessToken": "my-token",
                            "referenceName": "tags/v1.0.0",
                            "repositoryUrl": "https://github.com/username/myrepo",
                            "userName": "my-user"
                          },
                          "privateModuleGitAccessTokens": {
                            "tokenName": "accessToken"
                          },
                          "requiredOutputKeys": ["output1"],
                          "requiredOutputs": [
                            {
                              "exported": true,
                              "key": "output1"
                            }
                          ],
                          "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                          "terraformPath": "/project1/tf"
                        }
                      }
                    },
                    {
                      "actionHooks": [
                        {
                          "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                          "scope": "CLUSTER",
                          "type": "INIT"
                        }
                      ],
                      "additionalSecurityContext": {
                        "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                        "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                        "SupplementalGroupIDs": [1001, 999]
                      },
                      "backupConfiguration": {
                        "backupPeriodInHours": 24,
                        "backupRetentionInDays": 7
                      },
                      "blobStorageConfiguration": {
                        "GCSConfiguration": {},
                        "S3Configuration": {}
                      },
                      "capabilities": [
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        },
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        },
                        {
                          "capability": "SERVERLESS",
                          "configuration": {
                            "EnableAutoStop": true,
                            "MinimumNodesInPool": 5,
                            "PortsMappingProxyConfig": {
                              "MaxNumberOfClustersPerProxyInstance": 50,
                              "NumberOfPortsPerCluster": 4
                            },
                            "ProxyId": "r-123456",
                            "ReferenceProxyKey": "resource-proxy",
                            "TargetPort": 5432
                          }
                        }
                      ],
                      "customLabels": {
                        "key": "value"
                      },
                      "customSysCTLs": {
                        "net.ipv4.tcp_syncookies": "1"
                      },
                      "customULimits": [
                        {
                          "ULimitsName": "NoProc",
                          "ULimitsType": "Soft",
                          "ULimitsValue": 1000
                        },
                        {
                          "ULimitsName": "NoFile",
                          "ULimitsType": "Hard",
                          "ULimitsValue": 2048
                        }
                      ],
                      "dependencies": [
                        {
                          "parameterMap": {
                            "clusterId": "writerId",
                            "clusterOrg": "userDatabase"
                          },
                          "resourceId": "r-12345678"
                        },
                        {
                          "parameterMap": {
                            "clusterId": "readerId",
                            "clusterOrg": "userDatabase"
                          },
                          "resourceId": "r-abcdef12"
                        }
                      ],
                      "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                      "environmentVariables": [
                        {
                          "name": "MYSQL_ROOT_PASSWORD",
                          "value": "password"
                        }
                      ],
                      "fileSystemConfiguration": {
                        "EFSFileSystemConfiguration": {
                          "PerformanceMode": "generalPurpose|maxIO",
                          "ProvisionedThroughputInMibps": 125,
                          "ThroughputMode": "provisioned|bursting|elastic"
                        }
                      },
                      "helmChartConfiguration": {
                        "chartName": "my-chart",
                        "chartRepoName": "my-repo",
                        "chartRepoUrl": "https://my-repo.com",
                        "chartValues": {
                          "key1": "value1",
                          "key2": 3,
                          "key3": {
                            "key4": "value4"
                          }
                        },
                        "chartVersion": "1.0.0",
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "password": "my-password",
                        "runtimeConfiguration": {
                          "disableHooks": true,
                          "recreate": true,
                          "resetThenReuseValues": true,
                          "resetValues": true,
                          "reuseValues": true,
                          "skipCRDs": true,
                          "timeoutNanos": 1000000000,
                          "upgradeCRDs": true,
                          "wait": true,
                          "waitForJobs": true
                        },
                        "username": "my-user"
                      },
                      "id": "r-12345678",
                      "imageConfigId": "imgc-12345678",
                      "infraConfigId": "ic-12345678",
                      "internal": false,
                      "isDeprecated": false,
                      "key": "galera",
                      "kustomizeConfiguration": {
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "gitConfiguration": {
                          "accessToken": "my-token",
                          "referenceName": "tags/v1.0.0",
                          "repositoryUrl": "https://github.com/username/myrepo",
                          "userName": "my-user"
                        },
                        "helmChartDependencies": [
                          {
                            "chartName": "cert-manager",
                            "chartVersion": "v1.5.3"
                          },
                          {
                            "chartName": "nginx-ingress",
                            "chartVersion": "v0.48.1"
                          },
                          {
                            "chartName": "external-dns",
                            "chartVersion": "v0.7.0"
                          },
                          {
                            "chartName": "cnpg-operator",
                            "chartVersion": "v0.23.1"
                          }
                        ],
                        "kustomizePath": "/kustomize"
                      },
                      "l4LoadBalancerConfiguration": {
                        "ingressPortConfiguration": [
                          {
                            "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                            "backendPort": 8080,
                            "ingressPort": 1234
                          },
                          {
                            "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                            "backendPort": 8081,
                            "ingressPort": 5678
                          },
                          {
                            "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                            "backendPort": 8082,
                            "ingressPort": 9012
                          }
                        ]
                      },
                      "l7LoadBalancerConfiguration": {
                        "paths": [
                          {
                            "associatedResourceID": "r-12345678",
                            "path": "/path",
                            "port": 8080
                          }
                        ]
                      },
                      "name": "Galera",
                      "operatorCRDConfiguration": {
                        "endpointConfiguration": {
                          "admin": {
                            "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                            "networkingType": "PRIVATE",
                            "ports": [8080, 8081],
                            "primary": false
                          },
                          "cluster": {
                            "host": "https://my-endpoint.com",
                            "networkingType": "PUBLIC",
                            "ports": [8080, 8081],
                            "primary": true
                          }
                        },
                        "helmChartDependencies": [
                          {
                            "chartName": "cert-manager",
                            "chartVersion": "v1.5.3"
                          },
                          {
                            "chartName": "nginx-ingress",
                            "chartVersion": "v0.48.1"
                          },
                          {
                            "chartName": "external-dns",
                            "chartVersion": "v0.7.0"
                          },
                          {
                            "chartName": "cnpg-operator",
                            "chartVersion": "v0.23.1"
                          }
                        ],
                        "outputParameters": {
                          "expiresAt": "$out.status.notAfter",
                          "issuerName": "letsencrypt-prod"
                        },
                        "readinessConditions": {
                          "$out.status.conditions[?(@.type=='Ready')].status": true
                        },
                        "supplementalFiles": [
                          "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                          "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                        ],
                        "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                      },
                      "productTierId": "pt-12345678",
                      "proxyType": "PortsBasedProxy",
                      "resourceType": "Generic",
                      "serviceId": "s-12345678",
                      "terraformConfigurations": {
                        "Accusamus sed facere consectetur et qui.": {
                          "gitConfiguration": {
                            "accessToken": "my-token",
                            "referenceName": "tags/v1.0.0",
                            "repositoryUrl": "https://github.com/username/myrepo",
                            "userName": "my-user"
                          },
                          "privateModuleGitAccessTokens": {
                            "tokenName": "accessToken"
                          },
                          "requiredOutputKeys": ["output1"],
                          "requiredOutputs": [
                            {
                              "exported": true,
                              "key": "output1"
                            }
                          ],
                          "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                          "terraformPath": "/project1/tf"
                        },
                        "Sequi asperiores.": {
                          "gitConfiguration": {
                            "accessToken": "my-token",
                            "referenceName": "tags/v1.0.0",
                            "repositoryUrl": "https://github.com/username/myrepo",
                            "userName": "my-user"
                          },
                          "privateModuleGitAccessTokens": {
                            "tokenName": "accessToken"
                          },
                          "requiredOutputKeys": ["output1"],
                          "requiredOutputs": [
                            {
                              "exported": true,
                              "key": "output1"
                            }
                          ],
                          "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                          "terraformPath": "/project1/tf"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list resources",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource": {
      "post": {
        "tags": ["resource-api"],
        "summary": "CreateResource resource-api",
        "operationId": "resource-api#CreateResource",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateResourceRequest2"
              },
              "example": {
                "additionalSecurityContext": {
                  "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "SupplementalGroupIDs": [1001, 999]
                },
                "backupConfiguration": {
                  "backupPeriodInHours": 24,
                  "backupRetentionInDays": 7
                },
                "blobStorageConfiguration": {
                  "GCSConfiguration": {},
                  "S3Configuration": {}
                },
                "customLabels": {
                  "key": "value"
                },
                "customSysCTLs": {
                  "net.ipv4.tcp_syncookies": "1"
                },
                "customULimits": [
                  {
                    "ULimitsName": "NoProc",
                    "ULimitsType": "Soft",
                    "ULimitsValue": 1000
                  },
                  {
                    "ULimitsName": "NoFile",
                    "ULimitsType": "Hard",
                    "ULimitsValue": 2048
                  }
                ],
                "description": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                "environmentVariables": [
                  {
                    "key": "MYSQL_ROOT_PASSWORD",
                    "value": "password"
                  }
                ],
                "fileSystemConfiguration": {
                  "EFSFileSystemConfiguration": {
                    "PerformanceMode": "generalPurpose|maxIO",
                    "ProvisionedThroughputInMibps": 125,
                    "ThroughputMode": "provisioned|bursting|elastic"
                  }
                },
                "helmChartConfiguration": {
                  "chartName": "my-chart",
                  "chartRepoName": "my-repo",
                  "chartRepoUrl": "https://my-repo.com",
                  "chartValues": {
                    "key1": "value1",
                    "key2": 3,
                    "key3": {
                      "key4": "value4"
                    }
                  },
                  "chartVersion": "1.0.0",
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "password": "my-password",
                  "runtimeConfiguration": {
                    "disableHooks": true,
                    "recreate": true,
                    "resetThenReuseValues": true,
                    "resetValues": true,
                    "reuseValues": true,
                    "skipCRDs": true,
                    "timeoutNanos": 1000000000,
                    "upgradeCRDs": true,
                    "wait": true,
                    "waitForJobs": true
                  },
                  "username": "my-user"
                },
                "imageConfigId": "imgc-12345678",
                "infraConfigId": "ic-12345678",
                "internal": false,
                "isProxy": false,
                "key": "galera",
                "kustomizeConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "gitConfiguration": {
                    "accessToken": "my-token",
                    "referenceName": "tags/v1.0.0",
                    "repositoryUrl": "https://github.com/username/myrepo",
                    "userName": "my-user"
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "kustomizePath": "/kustomize"
                },
                "l4LoadBalancerConfiguration": {
                  "ingressPortConfiguration": [
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8080,
                      "ingressPort": 1234
                    },
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8081,
                      "ingressPort": 5678
                    },
                    {
                      "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                      "backendPort": 8082,
                      "ingressPort": 9012
                    }
                  ]
                },
                "l7LoadBalancerConfiguration": {
                  "paths": [
                    {
                      "associatedResourceID": "r-12345678",
                      "path": "/path",
                      "port": 8080
                    }
                  ]
                },
                "name": "Galera",
                "operatorCRDConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "outputParameters": {
                    "expiresAt": "$out.status.notAfter",
                    "issuerName": "letsencrypt-prod"
                  },
                  "readinessConditions": {
                    "$out.status.conditions[?(@.type=='Ready')].status": true
                  },
                  "supplementalFiles": [
                    "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                    "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                  ],
                  "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                },
                "productTierId": "pt-12345678",
                "proxyType": "PortsBasedProxy",
                "resourceDependencies": [
                  {
                    "parameterMap": {
                      "userDatabase": "clusterOrg",
                      "writerId": "clusterWriterId"
                    },
                    "resourceId": "r-12345678"
                  },
                  {
                    "parameterMap": {
                      "readerId": "clusterReaderId",
                      "userDatabase": "clusterOrg"
                    },
                    "resourceId": "r-abcdef12"
                  }
                ],
                "resourceType": "Generic",
                "terraformConfigurations": {
                  "Officiis facilis impedit animi et.": {
                    "gitConfiguration": {
                      "accessToken": "my-token",
                      "referenceName": "tags/v1.0.0",
                      "repositoryUrl": "https://github.com/username/myrepo",
                      "userName": "my-user"
                    },
                    "privateModuleGitAccessTokens": {
                      "tokenName": "accessToken"
                    },
                    "requiredOutputKeys": ["output1"],
                    "requiredOutputs": [
                      {
                        "exported": true,
                        "key": "output1"
                      }
                    ],
                    "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                    "terraformPath": "/project1/tf"
                  },
                  "Quis exercitationem dolor culpa perferendis et qui.": {
                    "gitConfiguration": {
                      "accessToken": "my-token",
                      "referenceName": "tags/v1.0.0",
                      "repositoryUrl": "https://github.com/username/myrepo",
                      "userName": "my-user"
                    },
                    "privateModuleGitAccessTokens": {
                      "tokenName": "accessToken"
                    },
                    "requiredOutputKeys": ["output1"],
                    "requiredOutputs": [
                      {
                        "exported": true,
                        "key": "output1"
                      }
                    ],
                    "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                    "terraformPath": "/project1/tf"
                  },
                  "Sunt ea harum eum dignissimos incidunt.": {
                    "gitConfiguration": {
                      "accessToken": "my-token",
                      "referenceName": "tags/v1.0.0",
                      "repositoryUrl": "https://github.com/username/myrepo",
                      "userName": "my-user"
                    },
                    "privateModuleGitAccessTokens": {
                      "tokenName": "accessToken"
                    },
                    "requiredOutputKeys": ["output1"],
                    "requiredOutputs": [
                      {
                        "exported": true,
                        "key": "output1"
                      }
                    ],
                    "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                    "terraformPath": "/project1/tf"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "resource ID created",
                  "example": "r-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "r-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create an resource",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}": {
      "delete": {
        "tags": ["resource-api"],
        "summary": "DeleteResource resource-api",
        "operationId": "resource-api#DeleteResource",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Commodi sint enim sapiente velit aut."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete an resource",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["resource-api"],
        "summary": "DescribeResource resource-api",
        "operationId": "resource-api#DescribeResource",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the resource to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the resource to describe. If not specified, the latest version is described.",
              "example": "Earum corporis enim rerum fuga quo sunt."
            },
            "example": "Ut aut facilis enim."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "ProductTierId of the resource to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Consectetur rerum in numquam."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Et praesentium molestiae."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeResourceResult"
                },
                "example": {
                  "actionHooks": [
                    {
                      "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                      "scope": "CLUSTER",
                      "type": "INIT"
                    }
                  ],
                  "additionalSecurityContext": {
                    "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                    "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                    "SupplementalGroupIDs": [1001, 999]
                  },
                  "backupConfiguration": {
                    "backupPeriodInHours": 24,
                    "backupRetentionInDays": 7
                  },
                  "blobStorageConfiguration": {
                    "GCSConfiguration": {},
                    "S3Configuration": {}
                  },
                  "capabilities": [
                    {
                      "capability": "SERVERLESS",
                      "configuration": {
                        "EnableAutoStop": true,
                        "MinimumNodesInPool": 5,
                        "PortsMappingProxyConfig": {
                          "MaxNumberOfClustersPerProxyInstance": 50,
                          "NumberOfPortsPerCluster": 4
                        },
                        "ProxyId": "r-123456",
                        "ReferenceProxyKey": "resource-proxy",
                        "TargetPort": 5432
                      }
                    },
                    {
                      "capability": "SERVERLESS",
                      "configuration": {
                        "EnableAutoStop": true,
                        "MinimumNodesInPool": 5,
                        "PortsMappingProxyConfig": {
                          "MaxNumberOfClustersPerProxyInstance": 50,
                          "NumberOfPortsPerCluster": 4
                        },
                        "ProxyId": "r-123456",
                        "ReferenceProxyKey": "resource-proxy",
                        "TargetPort": 5432
                      }
                    },
                    {
                      "capability": "SERVERLESS",
                      "configuration": {
                        "EnableAutoStop": true,
                        "MinimumNodesInPool": 5,
                        "PortsMappingProxyConfig": {
                          "MaxNumberOfClustersPerProxyInstance": 50,
                          "NumberOfPortsPerCluster": 4
                        },
                        "ProxyId": "r-123456",
                        "ReferenceProxyKey": "resource-proxy",
                        "TargetPort": 5432
                      }
                    }
                  ],
                  "customLabels": {
                    "key": "value"
                  },
                  "customSysCTLs": {
                    "net.ipv4.tcp_syncookies": "1"
                  },
                  "customULimits": [
                    {
                      "ULimitsName": "NoProc",
                      "ULimitsType": "Soft",
                      "ULimitsValue": 1000
                    },
                    {
                      "ULimitsName": "NoFile",
                      "ULimitsType": "Hard",
                      "ULimitsValue": 2048
                    }
                  ],
                  "dependencies": [
                    {
                      "parameterMap": {
                        "clusterId": "writerId",
                        "clusterOrg": "userDatabase"
                      },
                      "resourceId": "r-12345678"
                    },
                    {
                      "parameterMap": {
                        "clusterId": "readerId",
                        "clusterOrg": "userDatabase"
                      },
                      "resourceId": "r-abcdef12"
                    }
                  ],
                  "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                  "environmentVariables": [
                    {
                      "name": "MYSQL_ROOT_PASSWORD",
                      "value": "password"
                    }
                  ],
                  "fileSystemConfiguration": {
                    "EFSFileSystemConfiguration": {
                      "PerformanceMode": "generalPurpose|maxIO",
                      "ProvisionedThroughputInMibps": 125,
                      "ThroughputMode": "provisioned|bursting|elastic"
                    }
                  },
                  "helmChartConfiguration": {
                    "chartName": "my-chart",
                    "chartRepoName": "my-repo",
                    "chartRepoUrl": "https://my-repo.com",
                    "chartValues": {
                      "key1": "value1",
                      "key2": 3,
                      "key3": {
                        "key4": "value4"
                      }
                    },
                    "chartVersion": "1.0.0",
                    "endpointConfiguration": {
                      "admin": {
                        "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                        "networkingType": "PRIVATE",
                        "ports": [8080, 8081],
                        "primary": false
                      },
                      "cluster": {
                        "host": "https://my-endpoint.com",
                        "networkingType": "PUBLIC",
                        "ports": [8080, 8081],
                        "primary": true
                      }
                    },
                    "password": "my-password",
                    "runtimeConfiguration": {
                      "disableHooks": true,
                      "recreate": true,
                      "resetThenReuseValues": true,
                      "resetValues": true,
                      "reuseValues": true,
                      "skipCRDs": true,
                      "timeoutNanos": 1000000000,
                      "upgradeCRDs": true,
                      "wait": true,
                      "waitForJobs": true
                    },
                    "username": "my-user"
                  },
                  "id": "r-12345678",
                  "imageConfigId": "imgc-12345678",
                  "infraConfigId": "ic-12345678",
                  "internal": true,
                  "isDeprecated": true,
                  "key": "galera",
                  "kustomizeConfiguration": {
                    "endpointConfiguration": {
                      "admin": {
                        "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                        "networkingType": "PRIVATE",
                        "ports": [8080, 8081],
                        "primary": false
                      },
                      "cluster": {
                        "host": "https://my-endpoint.com",
                        "networkingType": "PUBLIC",
                        "ports": [8080, 8081],
                        "primary": true
                      }
                    },
                    "gitConfiguration": {
                      "accessToken": "my-token",
                      "referenceName": "tags/v1.0.0",
                      "repositoryUrl": "https://github.com/username/myrepo",
                      "userName": "my-user"
                    },
                    "helmChartDependencies": [
                      {
                        "chartName": "cert-manager",
                        "chartVersion": "v1.5.3"
                      },
                      {
                        "chartName": "nginx-ingress",
                        "chartVersion": "v0.48.1"
                      },
                      {
                        "chartName": "external-dns",
                        "chartVersion": "v0.7.0"
                      },
                      {
                        "chartName": "cnpg-operator",
                        "chartVersion": "v0.23.1"
                      }
                    ],
                    "kustomizePath": "/kustomize"
                  },
                  "l4LoadBalancerConfiguration": {
                    "ingressPortConfiguration": [
                      {
                        "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                        "backendPort": 8080,
                        "ingressPort": 1234
                      },
                      {
                        "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                        "backendPort": 8081,
                        "ingressPort": 5678
                      },
                      {
                        "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                        "backendPort": 8082,
                        "ingressPort": 9012
                      }
                    ]
                  },
                  "l7LoadBalancerConfiguration": {
                    "paths": [
                      {
                        "associatedResourceID": "r-12345678",
                        "path": "/path",
                        "port": 8080
                      }
                    ]
                  },
                  "name": "Galera",
                  "operatorCRDConfiguration": {
                    "endpointConfiguration": {
                      "admin": {
                        "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                        "networkingType": "PRIVATE",
                        "ports": [8080, 8081],
                        "primary": false
                      },
                      "cluster": {
                        "host": "https://my-endpoint.com",
                        "networkingType": "PUBLIC",
                        "ports": [8080, 8081],
                        "primary": true
                      }
                    },
                    "helmChartDependencies": [
                      {
                        "chartName": "cert-manager",
                        "chartVersion": "v1.5.3"
                      },
                      {
                        "chartName": "nginx-ingress",
                        "chartVersion": "v0.48.1"
                      },
                      {
                        "chartName": "external-dns",
                        "chartVersion": "v0.7.0"
                      },
                      {
                        "chartName": "cnpg-operator",
                        "chartVersion": "v0.23.1"
                      }
                    ],
                    "outputParameters": {
                      "expiresAt": "$out.status.notAfter",
                      "issuerName": "letsencrypt-prod"
                    },
                    "readinessConditions": {
                      "$out.status.conditions[?(@.type=='Ready')].status": true
                    },
                    "supplementalFiles": [
                      "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                      "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                    ],
                    "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                  },
                  "productTierId": "pt-12345678",
                  "proxyType": "PortsBasedProxy",
                  "resourceType": "Generic",
                  "serviceId": "s-12345678",
                  "terraformConfigurations": {
                    "Et minima dolor.": {
                      "gitConfiguration": {
                        "accessToken": "my-token",
                        "referenceName": "tags/v1.0.0",
                        "repositoryUrl": "https://github.com/username/myrepo",
                        "userName": "my-user"
                      },
                      "privateModuleGitAccessTokens": {
                        "tokenName": "accessToken"
                      },
                      "requiredOutputKeys": ["output1"],
                      "requiredOutputs": [
                        {
                          "exported": true,
                          "key": "output1"
                        }
                      ],
                      "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                      "terraformPath": "/project1/tf"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe an resource",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["resource-api"],
        "summary": "UpdateResource resource-api",
        "operationId": "resource-api#UpdateResource",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Veritatis hic et nulla a."
            },
            "example": "r-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateResourceRequest2"
              },
              "example": {
                "additionalSecurityContext": {
                  "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "SupplementalGroupIDs": [1001, 999]
                },
                "backupConfiguration": {
                  "backupPeriodInHours": 24,
                  "backupRetentionInDays": 7
                },
                "customLabels": {
                  "key": "value"
                },
                "customSysCTLs": {
                  "net.ipv4.tcp_syncookies": "1"
                },
                "customULimits": [
                  {
                    "ULimitsName": "NoProc",
                    "ULimitsType": "Soft",
                    "ULimitsValue": 1000
                  },
                  {
                    "ULimitsName": "NoFile",
                    "ULimitsType": "Hard",
                    "ULimitsValue": 2048
                  }
                ],
                "dependencies": [
                  {
                    "parameterMap": {
                      "clusterId": "writerId",
                      "clusterOrg": "userDatabase"
                    },
                    "resourceId": "r-12345678"
                  },
                  {
                    "parameterMap": {
                      "clusterId": "readerId",
                      "clusterOrg": "userDatabase"
                    },
                    "resourceId": "r-abcdef12"
                  }
                ],
                "description": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                "environmentVariables": [
                  {
                    "key": "MYSQL_ROOT_PASSWORD",
                    "value": "password"
                  }
                ],
                "helmChartConfiguration": {
                  "chartName": "my-chart",
                  "chartRepoName": "my-repo",
                  "chartRepoUrl": "https://my-repo.com",
                  "chartValues": {
                    "key1": "value1",
                    "key2": 3,
                    "key3": {
                      "key4": "value4"
                    }
                  },
                  "chartVersion": "1.0.0",
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "password": "my-password",
                  "runtimeConfiguration": {
                    "disableHooks": true,
                    "recreate": true,
                    "resetThenReuseValues": true,
                    "resetValues": true,
                    "reuseValues": true,
                    "skipCRDs": true,
                    "timeoutNanos": 1000000000,
                    "upgradeCRDs": true,
                    "wait": true,
                    "waitForJobs": true
                  },
                  "username": "my-user"
                },
                "imageConfigId": "imgc-12345678",
                "infraConfigId": "ic-12345678",
                "kustomizeConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "gitConfiguration": {
                    "accessToken": "my-token",
                    "referenceName": "tags/v1.0.0",
                    "repositoryUrl": "https://github.com/username/myrepo",
                    "userName": "my-user"
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "kustomizePath": "/kustomize"
                },
                "l4LoadBalancerConfiguration": {
                  "ingressPortConfiguration": [
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8080,
                      "ingressPort": 1234
                    },
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8081,
                      "ingressPort": 5678
                    },
                    {
                      "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                      "backendPort": 8082,
                      "ingressPort": 9012
                    }
                  ]
                },
                "l7LoadBalancerConfiguration": {
                  "paths": [
                    {
                      "associatedResourceID": "r-12345678",
                      "path": "/path",
                      "port": 8080
                    }
                  ]
                },
                "name": "Galera",
                "operatorCRDConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "outputParameters": {
                    "expiresAt": "$out.status.notAfter",
                    "issuerName": "letsencrypt-prod"
                  },
                  "readinessConditions": {
                    "$out.status.conditions[?(@.type=='Ready')].status": true
                  },
                  "supplementalFiles": [
                    "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                    "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                  ],
                  "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                },
                "terraformConfigurations": {
                  "Iste praesentium optio consequuntur qui id.": {
                    "gitConfiguration": {
                      "accessToken": "my-token",
                      "referenceName": "tags/v1.0.0",
                      "repositoryUrl": "https://github.com/username/myrepo",
                      "userName": "my-user"
                    },
                    "privateModuleGitAccessTokens": {
                      "tokenName": "accessToken"
                    },
                    "requiredOutputKeys": ["output1"],
                    "requiredOutputs": [
                      {
                        "exported": true,
                        "key": "output1"
                      }
                    ],
                    "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                    "terraformPath": "/project1/tf"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update an resource",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}/action-hook": {
      "delete": {
        "tags": ["resource-api"],
        "summary": "DeregisterActionHook resource-api",
        "operationId": "resource-api#DeregisterActionHook",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service to which the hook belongs",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource to which the hook belongs",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Dicta qui magnam."
            },
            "example": "r-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeregisterActionHookRequest2"
              },
              "example": {
                "scope": "CLUSTER",
                "type": "ADD"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to deregister an action hook",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["resource-api"],
        "summary": "ListActionHooks resource-api",
        "operationId": "resource-api#ListActionHooks",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service to which the hook belongs",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource to which the hook belongs",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Atque reprehenderit natus."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListActionHooksResult"
                },
                "example": {
                  "hooks": [
                    {
                      "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
                      "customCommand": ["/bin/sh", "-c"],
                      "customImage": "my-custom-image:latest",
                      "scope": "CLUSTER",
                      "type": "ADD"
                    },
                    {
                      "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
                      "customCommand": ["/bin/sh", "-c"],
                      "customImage": "my-custom-image:latest",
                      "scope": "CLUSTER",
                      "type": "ADD"
                    },
                    {
                      "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
                      "customCommand": ["/bin/sh", "-c"],
                      "customImage": "my-custom-image:latest",
                      "scope": "CLUSTER",
                      "type": "ADD"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list action hooks",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["resource-api"],
        "summary": "RegisterActionHook resource-api",
        "operationId": "resource-api#RegisterActionHook",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service to which the hook belongs",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource to which the hook belongs",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Voluptate voluptatem."
            },
            "example": "r-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterActionHookRequest2"
              },
              "example": {
                "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
                "customCommand": ["/bin/sh", "-c"],
                "customImage": "my-custom-image:latest",
                "scope": "CLUSTER",
                "type": "ADD"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to register an action hook",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}/capability": {
      "delete": {
        "tags": ["resource-api"],
        "summary": "DisableResourceCapability resource-api",
        "operationId": "resource-api#DisableResourceCapability",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Vero cupiditate rem."
            },
            "example": "r-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableResourceCapabilityRequest2"
              },
              "example": {
                "capability": "SERVERLESS"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to disable resource capabilities",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["resource-api"],
        "summary": "ListResourceCapabilities resource-api",
        "operationId": "resource-api#ListResourceCapabilities",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the instance to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the instance to describe. If not specified, the latest version is described.",
              "example": "Saepe exercitationem ut doloribus ea sit."
            },
            "example": "Et voluptatem dolores."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "Product tier id of the instance to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Aut aperiam illum quaerat."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Natus debitis ea rerum."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListResourceCapabilitiesResponse"
                },
                "example": {
                  "capabilities": [
                    {
                      "capability": "SERVERLESS",
                      "configuration": {
                        "EnableAutoStop": true,
                        "MinimumNodesInPool": 5,
                        "PortsMappingProxyConfig": {
                          "MaxNumberOfClustersPerProxyInstance": 50,
                          "NumberOfPortsPerCluster": 4
                        },
                        "ProxyId": "r-123456",
                        "ReferenceProxyKey": "resource-proxy",
                        "TargetPort": 5432
                      }
                    },
                    {
                      "capability": "SERVERLESS",
                      "configuration": {
                        "EnableAutoStop": true,
                        "MinimumNodesInPool": 5,
                        "PortsMappingProxyConfig": {
                          "MaxNumberOfClustersPerProxyInstance": 50,
                          "NumberOfPortsPerCluster": 4
                        },
                        "ProxyId": "r-123456",
                        "ReferenceProxyKey": "resource-proxy",
                        "TargetPort": 5432
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to disable resource capabilities",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "put": {
        "tags": ["resource-api"],
        "summary": "EnableResourceCapability resource-api",
        "operationId": "resource-api#EnableResourceCapability",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Enim vel."
            },
            "example": "r-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnableResourceCapabilityRequest2"
              },
              "example": {
                "capability": "SERVERLESS",
                "configuration": {
                  "EnableAutoStop": true,
                  "MinimumNodesInPool": 5,
                  "PortsMappingProxyConfig": {
                    "MaxNumberOfClustersPerProxyInstance": 50,
                    "NumberOfPortsPerCluster": 4
                  },
                  "ReferenceProxyKey": "resource-proxy",
                  "TargetPort": 5432
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to enable resource capabilities",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}/dependent-resource": {
      "get": {
        "tags": ["resource-api"],
        "summary": "ListDependentResource resource-api",
        "operationId": "resource-api#ListDependentResource",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Quia veritatis ut dolor quae sunt."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDependentResourcesResult"
                },
                "example": {
                  "id": "r-12345678",
                  "ids": ["r-12345678", "r-abcdefgh", "r-1234abcd"],
                  "nextPageToken": "next-token",
                  "serviceId": "s-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list resources",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}/deprecate": {
      "patch": {
        "tags": ["resource-api"],
        "summary": "DeprecateResource resource-api",
        "operationId": "resource-api#DeprecateResource",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Enim iste exercitationem sint."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to deprecate an resource",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}/environment-variables": {
      "delete": {
        "tags": ["resource-api"],
        "summary": "UnsetEnvironmentVariables resource-api",
        "operationId": "resource-api#UnsetEnvironmentVariables",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Autem saepe est modi tenetur in."
            },
            "example": "r-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnsetEnvironmentVariablesRequest2"
              },
              "example": {
                "environmentVariables": [
                  {
                    "key": "MYSQL_ROOT_PASSWORD",
                    "value": "password"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to remove environment variables from a resource",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["resource-api"],
        "summary": "SetEnvironmentVariables resource-api",
        "operationId": "resource-api#SetEnvironmentVariables",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Aut enim eius a."
            },
            "example": "r-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetEnvironmentVariablesRequest2"
              },
              "example": {
                "environmentVariables": [
                  {
                    "key": "MYSQL_ROOT_PASSWORD",
                    "value": "password"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to add environment variables to a resource",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}/file": {
      "get": {
        "tags": ["resource-api"],
        "summary": "ListFiles resource-api",
        "operationId": "resource-api#ListFiles",
        "parameters": [
          {
            "name": "productTierId",
            "in": "query",
            "description": "ProductTierId of the config file to describe",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Quaerat nostrum dolorem quo."
            },
            "example": "pt-12345678"
          },
          {
            "name": "productTierVersion",
            "in": "query",
            "description": "Product tier version of the config file to describe. If missing, last version is described",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the config file to describe. If missing, last version is described",
              "example": "1.0"
            },
            "example": "1.0"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Quidem ipsum."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilesResult"
                },
                "example": {
                  "files": [
                    {
                      "description": "A file to store the configuration for the resource",
                      "fileId": "f-12345678",
                      "mountPath": "/etc/config",
                      "name": "file.txt",
                      "size": 1234,
                      "type": "Config",
                      "uploadTime": "2023-01-10T00:00:00Z",
                      "uploadedBy": "user"
                    },
                    {
                      "description": "A file to store the configuration for the resource",
                      "fileId": "f-12345678",
                      "mountPath": "/etc/config",
                      "name": "file.txt",
                      "size": 1234,
                      "type": "Config",
                      "uploadTime": "2023-01-10T00:00:00Z",
                      "uploadedBy": "user"
                    },
                    {
                      "description": "A file to store the configuration for the resource",
                      "fileId": "f-12345678",
                      "mountPath": "/etc/config",
                      "name": "file.txt",
                      "size": 1234,
                      "type": "Config",
                      "uploadTime": "2023-01-10T00:00:00Z",
                      "uploadedBy": "user"
                    },
                    {
                      "description": "A file to store the configuration for the resource",
                      "fileId": "f-12345678",
                      "mountPath": "/etc/config",
                      "name": "file.txt",
                      "size": 1234,
                      "type": "Config",
                      "uploadTime": "2023-01-10T00:00:00Z",
                      "uploadedBy": "user"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list files",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["resource-api"],
        "summary": "AddFile resource-api",
        "operationId": "resource-api#AddFile",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Exercitationem excepturi asperiores."
            },
            "example": "r-12345678"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content-Type header, must define value for multipart boundary.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Content-Type header, must define value for multipart boundary.",
              "default": "multipart/form-data; boundary=boundary",
              "example": "multipart/form-data; boundary=boundary",
              "pattern": "multipart/[^;]+; boundary=.+"
            },
            "example": "multipart/form-data; boundary=boundary"
          },
          {
            "name": "Name",
            "in": "header",
            "description": "The name of the file",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the file",
              "example": "file.txt"
            },
            "example": "file.txt"
          },
          {
            "name": "Description",
            "in": "header",
            "description": "The description of the file",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "The description of the file",
              "example": "A file to store the configuration for the resource"
            },
            "example": "A file to store the configuration for the resource"
          },
          {
            "name": "FileType",
            "in": "header",
            "description": "The type of the file",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "The type of the file",
              "example": "Config|Secret"
            },
            "example": "Config"
          },
          {
            "name": "MountPath",
            "in": "header",
            "description": "The mount path of the file",
            "allowEmptyValue": true,
            "required": true,
            "schema": {
              "type": "string",
              "description": "The mount path of the file",
              "example": "/etc/config"
            },
            "example": "/etc/config"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": "Ab dolor ipsa maiores."
                },
                "example": "Omnis temporibus sunt accusantium aut ducimus."
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "415": {
            "description": "invalid_media_type: Error returned when the Content-Type header does not define a multipart request.",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}/file/{fileId}": {
      "delete": {
        "tags": ["resource-api"],
        "summary": "RemoveFile resource-api",
        "operationId": "resource-api#RemoveFile",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Pariatur tempore atque."
            },
            "example": "r-12345678"
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a File",
              "example": "Est ut consequatur sapiente qui facilis."
            },
            "example": "file-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when the requested file is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a file",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["resource-api"],
        "summary": "GetFile resource-api",
        "operationId": "resource-api#GetFile",
        "parameters": [
          {
            "name": "productTierId",
            "in": "query",
            "description": "Product Tier ID of the config files to list",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Id sequi dolores dolores est magnam eum."
            },
            "example": "pt-12345678"
          },
          {
            "name": "productTierVersion",
            "in": "query",
            "description": "Product Tier version of the config files to list. If missing, last version is used",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product Tier version of the config files to list. If missing, last version is used",
              "example": "1.0"
            },
            "example": "1.0"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Qui quia qui repellat."
            },
            "example": "r-12345678"
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a File",
              "example": "Eum temporibus labore asperiores."
            },
            "example": "f-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "headers": {
              "Content-Length": {
                "description": "Length is the downloaded content length in bytes.",
                "schema": {
                  "type": "integer",
                  "description": "Length is the downloaded content length in bytes.",
                  "example": 4194304,
                  "format": "int64"
                },
                "example": 4194304
              },
              "Content-Type": {
                "description": "Content-Type header, must define value for multipart boundary.",
                "schema": {
                  "type": "string",
                  "description": "Content-Type header, must define value for multipart boundary.",
                  "default": "multipart/form-data; boundary=boundary",
                  "example": "multipart/form-data; boundary=boundary"
                },
                "example": "multipart/form-data; boundary=boundary"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when the requested file is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a file",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}/file/{fileId}/content": {
      "put": {
        "tags": ["resource-api"],
        "summary": "UpdateFileContent resource-api",
        "operationId": "resource-api#UpdateFileContent",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Qui eveniet ut blanditiis tempore cumque."
            },
            "example": "r-12345678"
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a File",
              "example": "Dolorem nisi est rerum earum hic cupiditate."
            },
            "example": "f-12345678"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "Content-Type header, must define value for multipart boundary.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Content-Type header, must define value for multipart boundary.",
              "default": "multipart/form-data; boundary=boundary",
              "example": "multipart/form-data; boundary=boundary",
              "pattern": "multipart/[^;]+; boundary=.+"
            },
            "example": "multipart/form-data; boundary=boundary"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}/file/{fileId}/metadata": {
      "patch": {
        "tags": ["resource-api"],
        "summary": "UpdateFileMetadata resource-api",
        "operationId": "resource-api#UpdateFileMetadata",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Autem suscipit dolor quibusdam vitae."
            },
            "example": "r-12345678"
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a File",
              "example": "Libero dolor fuga."
            },
            "example": "f-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFileMetadataRequest2"
              },
              "example": {
                "description": "A file to store the configuration for the resource",
                "mountPath": "/etc/config",
                "name": "file.txt"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}/metrics": {
      "delete": {
        "tags": ["resource-api"],
        "summary": "DeregisterResourceMetricsConfig resource-api",
        "operationId": "resource-api#DeregisterResourceMetricsConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Vel officia ipsam."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response on failure to register resource metrics",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["resource-api"],
        "summary": "DescribeResourceMetricsConfig resource-api",
        "operationId": "resource-api#DescribeResourceMetricsConfig",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the resource to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the resource to describe. If not specified, the latest version is described.",
              "example": "Quibusdam dolorem nam omnis praesentium inventore minus."
            },
            "example": "Tempora quis illum accusantium vel molestiae natus."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "ProductTierId of the resource to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Iusto qui."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Voluptas totam quaerat sint."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Describeresourcemetricsconfigresult"
                },
                "example": {
                  "id": "r-12345678",
                  "metricEndpoint": "http://localhost:9187/metrics",
                  "serviceId": "s-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response on failure to describe resource metrics",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["resource-api"],
        "summary": "RegisterResourceMetricsConfig resource-api",
        "operationId": "resource-api#RegisterResourceMetricsConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Deserunt sapiente veritatis enim quasi."
            },
            "example": "r-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterResourceMetricsConfigRequest2"
              },
              "example": {
                "metricEndpoint": "http://localhost:9187/metrics"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response on failure to register resource metrics",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{id}/resource-dependency/{resourceDependencyId}": {
      "delete": {
        "tags": ["resource-api"],
        "summary": "RemoveResourceDependency resource-api",
        "operationId": "resource-api#RemoveResourceDependency",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Fuga culpa."
            },
            "example": "r-12345678"
          },
          {
            "name": "resourceDependencyId",
            "in": "path",
            "description": "The ID of the resource dependency to remove",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Ullam asperiores molestiae temporibus."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to remove a resource dependency from a resource",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["resource-api"],
        "summary": "AddResourceDependency resource-api",
        "operationId": "resource-api#AddResourceDependency",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the resource",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Et accusantium maiores dolor eligendi perspiciatis."
            },
            "example": "r-12345678"
          },
          {
            "name": "resourceDependencyId",
            "in": "path",
            "description": "The ID of the resource to be added as a dependency",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Accusamus et aut voluptatem fugit et."
            },
            "example": "r-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddResourceDependencyRequest2"
              },
              "example": {
                "parameterMap": {
                  "clusterId": "writerId",
                  "clusterOrg": "userDatabase"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to add a resource dependency to a resource",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{resourceId}/input-parameter": {
      "get": {
        "tags": ["input-parameter-api"],
        "summary": "ListInputParameter input-parameter-api",
        "operationId": "input-parameter-api#ListInputParameter",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the instance to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the instance to describe. If not specified, the latest version is described.",
              "example": "Error aut at cum odit non quidem."
            },
            "example": "Et ut hic."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "Product tier id of the instance to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Sint omnis doloribus adipisci."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service that this output parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "The ID of the resource that this input parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Ad voluptas accusantium reiciendis doloremque blanditiis fugiat."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInputParametersResult"
                },
                "example": {
                  "ids": ["ip-12345678", "ip-12345679"],
                  "inputParameters": [
                    {
                      "defaultValue": "true",
                      "dependentResourceId": "r-12345678",
                      "description": "Non corporis ab id magnam.",
                      "hasOptions": true,
                      "id": "var-12345678",
                      "isList": true,
                      "key": "1",
                      "labeledOptions": {
                        "large": "t3.xlarge",
                        "medium": "t3.large",
                        "small": "t3.medium"
                      },
                      "limits": {
                        "max": "Blanditiis voluptas.",
                        "maxLength": "Et error sequi et dignissimos illo.",
                        "min": "Et consequatur dolor est saepe velit voluptas.",
                        "minLength": "Ad suscipit aut ut suscipit voluptatem."
                      },
                      "modifiable": true,
                      "name": "13k",
                      "options": ["true", "false"],
                      "required": true,
                      "resourceId": "r-12345678",
                      "serviceId": "s-12345678",
                      "type": "Aut vitae."
                    },
                    {
                      "defaultValue": "true",
                      "dependentResourceId": "r-12345678",
                      "description": "Non corporis ab id magnam.",
                      "hasOptions": true,
                      "id": "var-12345678",
                      "isList": true,
                      "key": "1",
                      "labeledOptions": {
                        "large": "t3.xlarge",
                        "medium": "t3.large",
                        "small": "t3.medium"
                      },
                      "limits": {
                        "max": "Blanditiis voluptas.",
                        "maxLength": "Et error sequi et dignissimos illo.",
                        "min": "Et consequatur dolor est saepe velit voluptas.",
                        "minLength": "Ad suscipit aut ut suscipit voluptatem."
                      },
                      "modifiable": true,
                      "name": "13k",
                      "options": ["true", "false"],
                      "required": true,
                      "resourceId": "r-12345678",
                      "serviceId": "s-12345678",
                      "type": "Aut vitae."
                    },
                    {
                      "defaultValue": "true",
                      "dependentResourceId": "r-12345678",
                      "description": "Non corporis ab id magnam.",
                      "hasOptions": true,
                      "id": "var-12345678",
                      "isList": true,
                      "key": "1",
                      "labeledOptions": {
                        "large": "t3.xlarge",
                        "medium": "t3.large",
                        "small": "t3.medium"
                      },
                      "limits": {
                        "max": "Blanditiis voluptas.",
                        "maxLength": "Et error sequi et dignissimos illo.",
                        "min": "Et consequatur dolor est saepe velit voluptas.",
                        "minLength": "Ad suscipit aut ut suscipit voluptatem."
                      },
                      "modifiable": true,
                      "name": "13k",
                      "options": ["true", "false"],
                      "required": true,
                      "resourceId": "r-12345678",
                      "serviceId": "s-12345678",
                      "type": "Aut vitae."
                    }
                  ],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list input parameters",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/resource/{resourceId}/output-parameter": {
      "get": {
        "tags": ["output-parameter-api"],
        "summary": "ListOutputParameter output-parameter-api",
        "operationId": "output-parameter-api#ListOutputParameter",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the resource to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the resource to describe. If not specified, the latest version is described.",
              "example": "Praesentium est voluptatum labore aspernatur."
            },
            "example": "Recusandae tenetur qui amet veniam tempora sed."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "ProductTierId of the resource to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Error iste explicabo amet deleniti et non."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The ID of the service that this output parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "The ID of the resource that this output parameter belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Repudiandae et qui deleniti."
            },
            "example": "r-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListOutputParametersResult"
                },
                "example": {
                  "ids": ["op-12345678"],
                  "nextPageToken": "next-token",
                  "outputParameters": [
                    {
                      "description": "Username of the user created in the target system",
                      "id": "op-12345678",
                      "key": "username",
                      "name": "Username",
                      "resourceId": "r-12345678",
                      "serviceId": "s-12345678",
                      "value": "johndoe",
                      "valueRef": "$var.username",
                      "valueType": "Sit ab veritatis sed recusandae quo."
                    },
                    {
                      "description": "Username of the user created in the target system",
                      "id": "op-12345678",
                      "key": "username",
                      "name": "Username",
                      "resourceId": "r-12345678",
                      "serviceId": "s-12345678",
                      "value": "johndoe",
                      "valueRef": "$var.username",
                      "valueType": "Sit ab veritatis sed recusandae quo."
                    },
                    {
                      "description": "Username of the user created in the target system",
                      "id": "op-12345678",
                      "key": "username",
                      "name": "Username",
                      "resourceId": "r-12345678",
                      "serviceId": "s-12345678",
                      "value": "johndoe",
                      "valueRef": "$var.username",
                      "valueType": "Sit ab veritatis sed recusandae quo."
                    },
                    {
                      "description": "Username of the user created in the target system",
                      "id": "op-12345678",
                      "key": "username",
                      "name": "Username",
                      "resourceId": "r-12345678",
                      "serviceId": "s-12345678",
                      "value": "johndoe",
                      "valueRef": "$var.username",
                      "valueType": "Sit ab veritatis sed recusandae quo."
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list output parameters",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/service-api": {
      "post": {
        "tags": ["service-api-api"],
        "summary": "CreateServiceAPI service-api-api",
        "operationId": "service-api-api#CreateServiceAPI",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceAPIRequest2"
              },
              "example": {
                "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
                "serviceEnvironmentId": "se-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Service API ID created",
                  "example": "sa-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "sa-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a service API",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/service-api/{id}": {
      "delete": {
        "tags": ["service-api-api"],
        "summary": "DeleteServiceAPI service-api-api",
        "operationId": "service-api-api#DeleteServiceAPI",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service API ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service API",
              "example": "Itaque eveniet."
            },
            "example": "sa-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a service API",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["service-api-api"],
        "summary": "DescribeServiceAPI service-api-api",
        "operationId": "service-api-api#DescribeServiceAPI",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service API ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service API",
              "example": "Ab quae."
            },
            "example": "sa-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeServiceAPIResult"
                },
                "example": {
                  "apiVersion": "v1",
                  "deploymentConfigId": "dc-12345678",
                  "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
                  "id": "sa-12345678",
                  "serviceEnvironmentId": "se-12345678",
                  "serviceId": "s-12345678",
                  "serviceName": "mysql"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a service API",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["service-api-api"],
        "summary": "UpdateServiceAPI service-api-api",
        "operationId": "service-api-api#UpdateServiceAPI",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service API ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service API",
              "example": "Eos commodi."
            },
            "example": "sa-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateServiceAPIRequest2"
              },
              "example": {
                "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update a service API",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/service-api/{id}/all-pending-changes": {
      "delete": {
        "tags": ["service-api-api"],
        "summary": "DiscardPendingChanges service-api-api",
        "operationId": "service-api-api#DiscardPendingChanges",
        "parameters": [
          {
            "name": "productTierId",
            "in": "query",
            "description": "ProductTierID of the resource to describe pending changes forNeeds to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Repellendus natus placeat."
            },
            "example": "pt-12345678"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service API ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service API",
              "example": "Natus facere occaecati dolor ea et."
            },
            "example": "sa-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe pending changes to a service API",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["service-api-api"],
        "summary": "DescribePendingChanges service-api-api",
        "operationId": "service-api-api#DescribePendingChanges",
        "parameters": [
          {
            "name": "productTierId",
            "in": "query",
            "description": "ProductTierID of the resource to describe pending changes forNeeds to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Quo sint consequuntur labore enim culpa."
            },
            "example": "pt-12345678"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service API ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service API",
              "example": "Quaerat et quo expedita."
            },
            "example": "sa-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribePendingChangesResult"
                },
                "example": {
                  "id": "sa-12345678",
                  "resourceChangeSets": {
                    "Est dolor reiciendis aut repudiandae doloremque sed.": {
                      "categorizedResourceChanges": {
                        "Quo amet explicabo.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        },
                        "Ut deserunt voluptate vel necessitatibus.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        },
                        "Vitae omnis molestiae eaque id.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        }
                      },
                      "imageConfigChanges": {
                        "changeState": "PENDING_NEW",
                        "imageConfigId": "imgc-12345678",
                        "imageName": "mysql"
                      },
                      "infraConfigChanges": {
                        "changeState": "PENDING_NEW",
                        "infraConfigId": "ic-12345678",
                        "name": "MySQL Writer Infra Config"
                      },
                      "overallResourceStatus": "PENDING_UPDATE",
                      "productTierFeatureChanges": "PENDING_UPDATE",
                      "resourceChanges": "PENDING_DELETE",
                      "resourceName": "Inventore commodi quasi consequatur."
                    },
                    "Velit velit aut voluptatem.": {
                      "categorizedResourceChanges": {
                        "Quo amet explicabo.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        },
                        "Ut deserunt voluptate vel necessitatibus.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        },
                        "Vitae omnis molestiae eaque id.": {
                          "changes": [
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            },
                            {
                              "attributes": {
                                "resourceId": "r-12345678"
                              },
                              "changeType": "PENDING_NEW",
                              "name": "Customer metrics"
                            }
                          ],
                          "status": "PENDING_UPDATE"
                        }
                      },
                      "imageConfigChanges": {
                        "changeState": "PENDING_NEW",
                        "imageConfigId": "imgc-12345678",
                        "imageName": "mysql"
                      },
                      "infraConfigChanges": {
                        "changeState": "PENDING_NEW",
                        "infraConfigId": "ic-12345678",
                        "name": "MySQL Writer Infra Config"
                      },
                      "overallResourceStatus": "PENDING_UPDATE",
                      "productTierFeatureChanges": "PENDING_UPDATE",
                      "resourceChanges": "PENDING_DELETE",
                      "resourceName": "Inventore commodi quasi consequatur."
                    }
                  },
                  "serviceId": "s-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe pending changes to a service API",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/service-api/{id}/deprecate": {
      "post": {
        "tags": ["service-api-api"],
        "summary": "DeprecateServiceAPI service-api-api",
        "operationId": "service-api-api#DeprecateServiceAPI",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service API ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service API",
              "example": "Necessitatibus eligendi."
            },
            "example": "sa-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to deprecate a service API",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/service-api/{id}/release": {
      "post": {
        "tags": ["service-api-api"],
        "summary": "ReleaseServiceAPI service-api-api",
        "operationId": "service-api-api#ReleaseServiceAPI",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The service API ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service API",
              "example": "Quia dolorem qui."
            },
            "example": "sa-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReleaseServiceAPIRequest2"
              },
              "example": {
                "isPreferred": true,
                "productTierId": "pt-12345678",
                "versionSetName": "v1",
                "versionSetType": "Major|Incremental|UserDefined"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to release a service API",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/serviceapi/{serviceApiId}/model": {
      "get": {
        "tags": ["service-model-api"],
        "summary": "ListServiceModel service-model-api",
        "operationId": "service-model-api#ListServiceModel",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "serviceApiId",
            "in": "path",
            "description": "The service API ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service API",
              "example": "Expedita deleniti repudiandae reprehenderit tempore neque."
            },
            "example": "sa-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceModelsResult"
                },
                "example": {
                  "ids": ["sm-12345678", "sm-87654321"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list service models",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/serviceenvironment/{serviceEnvironmentId}/image-config": {
      "get": {
        "tags": ["image-config-api"],
        "summary": "ListImageConfigs image-config-api",
        "operationId": "image-config-api#ListImageConfigs",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID to use for the infra",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "serviceEnvironmentId",
            "in": "path",
            "description": "The service environment ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "example": "se-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListImageConfigsResult"
                },
                "example": {
                  "ids": ["imgc-12345678", "imgc-87654321"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list image configs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/serviceenvironment/{serviceEnvironmentId}/infra-config": {
      "get": {
        "tags": ["infra-config-api"],
        "summary": "ListInfraConfig infra-config-api",
        "operationId": "infra-config-api#ListInfraConfig",
        "parameters": [
          {
            "name": "managed",
            "in": "query",
            "description": "Is infra config managed by omnistrate",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "description": "Is infra config managed by omnistrate",
              "example": false
            },
            "example": false
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "serviceEnvironmentId",
            "in": "path",
            "description": "The service environment ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "example": "se-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInfraConfigResult"
                },
                "example": {
                  "ids": ["ic-12345678", "ic-abcdefgh", "ic-1234efgh"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list infra configs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/serviceenvironment/{serviceEnvironmentId}/service-api": {
      "get": {
        "tags": ["service-api-api"],
        "summary": "ListServiceAPI service-api-api",
        "operationId": "service-api-api#ListServiceAPI",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID that this API bundle belongs to",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "serviceEnvironmentId",
            "in": "path",
            "description": "The service environment ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "example": "se-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListServiceAPIsResult"
                },
                "example": {
                  "ids": ["sa-12345678"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list service APIs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/storage-config": {
      "get": {
        "tags": ["storage-config-api"],
        "summary": "ListStorageConfig storage-config-api",
        "operationId": "storage-config-api#ListStorageConfig",
        "parameters": [
          {
            "name": "managed",
            "in": "query",
            "description": "Is storage config managed by omnistrate",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "description": "Is storage config managed by omnistrate",
              "example": false
            },
            "example": false
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service id to filter by",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListStorageConfigsResult"
                },
                "example": {
                  "ids": ["sc-12345678"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list storage configs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["storage-config-api"],
        "summary": "CreateStorageConfig storage-config-api",
        "operationId": "storage-config-api#CreateStorageConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service to which this storage config belongs",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStorageConfigRequest2"
              },
              "example": {
                "description": "my-storage-config-description",
                "name": "my-storage-config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Storage Config ID created",
                  "example": "sc-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "sc-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create storage config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/storage-config/{id}": {
      "delete": {
        "tags": ["storage-config-api"],
        "summary": "DeleteStorageConfig storage-config-api",
        "operationId": "storage-config-api#DeleteStorageConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The storage config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Config",
              "example": "At harum."
            },
            "example": "sc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a storage config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["storage-config-api"],
        "summary": "DescribeStorageConfig storage-config-api",
        "operationId": "storage-config-api#DescribeStorageConfig",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the storage config to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the storage config to describe. If not specified, the latest version is described.",
              "example": "Aut distinctio veniam quae praesentium animi."
            },
            "example": "Itaque ut autem et."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "ProductTierId of the storage config to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Repellendus eos dolorum est veritatis quos."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The storage config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Config",
              "example": "Eos culpa odit fugiat officia quia."
            },
            "example": "sc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeStorageConfigResult"
                },
                "example": {
                  "description": "my-storage-config-description",
                  "id": "sc-12345678",
                  "infraConfigIDs": ["ic-12345678", "ic-abcdefgh"],
                  "name": "my-storage-config",
                  "serviceId": "s-12345678",
                  "volumes": {
                    "svc-12345678": ["/data", "/mnt/logs"],
                    "svc-23456789": ["/config"]
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe storage config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["storage-config-api"],
        "summary": "UpdateStorageConfig storage-config-api",
        "operationId": "storage-config-api#UpdateStorageConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The storage config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Config",
              "example": "Est id."
            },
            "example": "sc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStorageConfigRequest2"
              },
              "example": {
                "description": "my-storage-config-description",
                "name": "my-storage-config"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update storage config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/storage-config/{id}/volume/{storageVolumeConfigId}": {
      "delete": {
        "tags": ["storage-config-api"],
        "summary": "RemoveStorageVolumeConfig storage-config-api",
        "operationId": "storage-config-api#RemoveStorageVolumeConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The storage config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Config",
              "example": "Et ea recusandae ut voluptas architecto qui."
            },
            "example": "sc-12345678"
          },
          {
            "name": "storageVolumeConfigId",
            "in": "path",
            "description": "The storage volume config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Volume Config",
              "example": "Iure quae aut sit nostrum."
            },
            "example": "svc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveStorageVolumeConfigRequest2"
              },
              "example": {
                "mountPath": "/data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to remove storage volume config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "put": {
        "tags": ["storage-config-api"],
        "summary": "AddStorageVolumeConfig storage-config-api",
        "operationId": "storage-config-api#AddStorageVolumeConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The storage config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Config",
              "example": "Non atque blanditiis placeat et et."
            },
            "example": "sc-12345678"
          },
          {
            "name": "storageVolumeConfigId",
            "in": "path",
            "description": "The storage volume config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Volume Config",
              "example": "Eum molestiae quas sed quod corporis."
            },
            "example": "svc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddStorageVolumeConfigRequest2"
              },
              "example": {
                "mountPath": "/data"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to add storage volume config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/storage-volume-config": {
      "get": {
        "tags": ["storage-volume-config-api"],
        "summary": "ListStorageVolumeConfig storage-volume-config-api",
        "operationId": "storage-volume-config-api#ListStorageVolumeConfig",
        "parameters": [
          {
            "name": "managed",
            "in": "query",
            "description": "Is storage volume config managed by omnistrate",
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean",
              "description": "Is storage volume config managed by omnistrate",
              "example": false
            },
            "example": false
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service to list storage volume configs for",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListStorageVolumeConfigsResult"
                },
                "example": {
                  "ids": ["svc-12345678"],
                  "nextPageToken": "next-token"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list storage volume configs",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["storage-volume-config-api"],
        "summary": "CreateStorageVolumeConfig storage-volume-config-api",
        "operationId": "storage-volume-config-api#CreateStorageVolumeConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStorageVolumeConfigRequest2"
              },
              "example": {
                "clusterStorageType": "S3|$var.storageType|AWS::EFS",
                "description": "A storage volume set to store the MySQL data directory",
                "disableBackup": false,
                "instanceStorageIops": "$var.storageIops",
                "instanceStorageSizeGi": "$var.storage_size",
                "instanceStorageThroughputMiBps": "128",
                "instanceStorageType": "$var.storageType",
                "name": "MySQL Data Volume",
                "storageResourceID": "r-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Storage Volume Config ID created",
                  "example": "svc-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "svc-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create storage volume config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/storage-volume-config/{id}": {
      "delete": {
        "tags": ["storage-volume-config-api"],
        "summary": "DeleteStorageVolumeConfig storage-volume-config-api",
        "operationId": "storage-volume-config-api#DeleteStorageVolumeConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The storage volume config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Volume Config",
              "example": "Iusto nihil atque quos totam."
            },
            "example": "svc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a storage volume config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["storage-volume-config-api"],
        "summary": "DescribeStorageVolumeConfig storage-volume-config-api",
        "operationId": "storage-volume-config-api#DescribeStorageVolumeConfig",
        "parameters": [
          {
            "name": "ProductTierVersion",
            "in": "query",
            "description": "Product tier version of the network config to describe. If not specified, the latest version is described.",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "Product tier version of the network config to describe. If not specified, the latest version is described.",
              "example": "Illo illum quia."
            },
            "example": "Voluptatibus officiis ducimus minima."
          },
          {
            "name": "ProductTierId",
            "in": "query",
            "description": "ProductTierId of the network config to describe. Needs to specified in combination with the product tier version",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Quidem pariatur facere."
            },
            "example": "Beatae beatae."
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The storage volume config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Volume Config",
              "example": "Voluptatibus quasi dignissimos."
            },
            "example": "svc-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeStorageVolumeConfigResult"
                },
                "example": {
                  "cloudProviderName": "aws",
                  "clusterStorageType": "S3|$var.storageType|AWS::EFS",
                  "description": "A storage volume set to store the MySQL data directory",
                  "disableBackup": false,
                  "id": "svc-12345678",
                  "instanceStorageIops": "7500",
                  "instanceStorageSizeGi": "128",
                  "instanceStorageThroughputMiBps": "128",
                  "instanceStorageType": "$var.storageType",
                  "name": "MySQL Data Volume",
                  "serviceId": "s-12345678",
                  "storageResourceID": "r-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe storage volume config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "patch": {
        "tags": ["storage-volume-config-api"],
        "summary": "UpdateStorageVolumeConfig storage-volume-config-api",
        "operationId": "storage-volume-config-api#UpdateStorageVolumeConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The storage volume config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Volume Config",
              "example": "Ut facilis sint."
            },
            "example": "svc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStorageVolumeConfigRequest2"
              },
              "example": {
                "description": "A storage volume set to store the MySQL data directory",
                "disableBackup": false,
                "name": "MySQL Data Volume"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update storage volume config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/storage-volume-config/{id}/instance": {
      "patch": {
        "tags": ["storage-volume-config-api"],
        "summary": "UpdateInstanceStorageVolumeConfig storage-volume-config-api",
        "operationId": "storage-volume-config-api#UpdateInstanceStorageVolumeConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The storage volume config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Volume Config",
              "example": "Cupiditate corrupti rerum eligendi."
            },
            "example": "svc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInstanceStorageVolumeConfigRequest2"
              },
              "example": {
                "instanceStorageIops": "7500",
                "instanceStorageThroughputMiBps": "128",
                "instanceStorageType": "AWS::EBS_GP2"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update instance storage volume type config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/storage-volume-config/{id}/size": {
      "patch": {
        "tags": ["storage-volume-config-api"],
        "summary": "UpdateStorageVolumeSizeConfig storage-volume-config-api",
        "operationId": "storage-volume-config-api#UpdateStorageVolumeSizeConfig",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "The storage volume config ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Storage Volume Config",
              "example": "Optio voluptatem consequatur."
            },
            "example": "svc-12345678"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStorageVolumeSizeConfigRequest2"
              },
              "example": {
                "instanceStorageSizeGi": "$var.storage_size"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update storage volume size config",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/{serviceId}/vunit/{id}": {
      "get": {
        "tags": ["vunit-api"],
        "summary": "DescribeVUnit vunit-api",
        "operationId": "vunit-api#DescribeVUnit",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "Service ID for the VUnit",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "s-12345678"
          },
          {
            "name": "id",
            "in": "path",
            "description": "VUnit to operate on",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a VUnit",
              "example": "Ab aut nihil quos qui."
            },
            "example": "vu-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeVUnitResult"
                },
                "example": {
                  "cloudProvider": "aws",
                  "id": "vu-12345678",
                  "networkIds": ["n-12345678", "n-abcdefgh", "n-1234efgh"],
                  "region": "us-west-2",
                  "serviceId": "s-12345678",
                  "serviceModelId": "sm-12345678"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a vunit",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/composespec": {
      "post": {
        "tags": ["service-api"],
        "summary": "CreateServiceFromComposeSpec service-api",
        "operationId": "service-api#CreateServiceFromComposeSpec",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceFromComposeSpecRequest2"
              },
              "example": {
                "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                "fileContent": "Sed laudantium quasi accusantium harum sit.",
                "fileFormat": "text/plain",
                "fileName": "mysql.yaml",
                "name": "MySQL multi-writer service",
                "serviceLogoURL": "http://ledner.com/mandy.bechtelar"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Service ID created",
                  "example": "s-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "s-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a service",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "put": {
        "tags": ["service-api"],
        "summary": "BuildServiceFromComposeSpec service-api",
        "operationId": "service-api#BuildServiceFromComposeSpec",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildServiceFromComposeSpecRequest2"
              },
              "example": {
                "configs": {
                  "Est aliquam.": "Quae et id qui possimus."
                },
                "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                "environment": "dev",
                "environmentType": "DEV",
                "fileContent": "Magni eaque dolore et.",
                "name": "MySQL multi-writer service",
                "release": true,
                "releaseAsPreferred": true,
                "releaseVersionName": "mysql",
                "secrets": {
                  "Minima magnam occaecati.": "Maxime iusto dolorum odio.",
                  "Quae beatae eius.": "Amet doloremque."
                },
                "serviceLogoURL": "http://gusikowski.biz/keeley"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildServiceFromComposeSpecResult"
                },
                "example": {
                  "productTierID": "pt-12345678",
                  "serviceEnvironmentID": "se-12345678",
                  "serviceID": "s-12345678",
                  "undefinedResources": {
                    "mysql": "r-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to build a service from compose spec",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/service/serviceplanspec": {
      "put": {
        "tags": ["service-api"],
        "summary": "BuildServiceFromServicePlanSpec service-api",
        "operationId": "service-api#BuildServiceFromServicePlanSpec",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuildServiceFromServicePlanSpecRequest2"
              },
              "example": {
                "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                "environment": "dev",
                "environmentType": "DEV",
                "fileContent": "Quo harum dolorum consequatur ut.",
                "name": "MySQL multi-writer service",
                "release": true,
                "releaseAsPreferred": true,
                "releaseVersionName": "mysql",
                "serviceLogoURL": "http://morissette.net/webster.grimes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildServiceFromServicePlanSpecResult"
                },
                "example": {
                  "productTierID": "pt-12345678",
                  "serviceEnvironmentID": "se-12345678",
                  "serviceID": "s-12345678",
                  "undefinedResources": {
                    "mysql": "r-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to build a service from compose spec",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/signin": {
      "post": {
        "tags": ["signin-api"],
        "summary": "Signin signin-api",
        "operationId": "signin-api#Signin",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SigninRequest"
              },
              "example": {
                "email": "abc@gmail.com",
                "hashedPassword": "deprecated",
                "password": "password"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SigninResult"
                },
                "example": {
                  "jwtToken": ""
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to signin",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/signup": {
      "post": {
        "tags": ["signup-api"],
        "summary": "Signup signup-api",
        "operationId": "signup-api#Signup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupRequest"
              },
              "example": {
                "companyDescription": "We sell xyz database software",
                "companyUrl": "https://www.mywebsite.com",
                "email": "abc@gmail.com",
                "legalCompanyName": "mywebsite",
                "name": "John Doe",
                "password": "password"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to signup",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/subscription": {
      "get": {
        "tags": ["subscription-api"],
        "summary": "ListSubscriptions subscription-api",
        "operationId": "subscription-api#ListSubscriptions",
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "description": "Service Id",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "example": "service-12345678"
          },
          {
            "name": "environmentType",
            "in": "query",
            "description": "The environment type to filter by",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The type of service environment",
              "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
            },
            "example": "DEV"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSubscriptionsResult"
                },
                "example": {
                  "ids": ["sub-12345678", "sub-abcdefgh", "sub-1234efgh"],
                  "nextPageToken": "next-token",
                  "subscriptions": [
                    {
                      "accountConfigIdentityId": "org-12345678",
                      "cloudProviderNames": ["aws", "gcp"],
                      "createdAt": "2019-01-01T00:00:00Z",
                      "defaultSubscription": true,
                      "id": "sub-12345678",
                      "productTierId": "pt-12345678",
                      "productTierName": "Omnistrate Multi Tenancy",
                      "roleType": "root",
                      "rootUserId": "user-12345678",
                      "serviceId": "s-12345678",
                      "serviceLogoURL": "Eum beatae asperiores.",
                      "serviceName": "MySQL multi-writer service",
                      "serviceOrgId": "org-12345678",
                      "serviceOrgName": "Omnistrate",
                      "status": "ACTIVE",
                      "subscriptionOwnerName": "John Doe"
                    },
                    {
                      "accountConfigIdentityId": "org-12345678",
                      "cloudProviderNames": ["aws", "gcp"],
                      "createdAt": "2019-01-01T00:00:00Z",
                      "defaultSubscription": true,
                      "id": "sub-12345678",
                      "productTierId": "pt-12345678",
                      "productTierName": "Omnistrate Multi Tenancy",
                      "roleType": "root",
                      "rootUserId": "user-12345678",
                      "serviceId": "s-12345678",
                      "serviceLogoURL": "Eum beatae asperiores.",
                      "serviceName": "MySQL multi-writer service",
                      "serviceOrgId": "org-12345678",
                      "serviceOrgName": "Omnistrate",
                      "status": "ACTIVE",
                      "subscriptionOwnerName": "John Doe"
                    },
                    {
                      "accountConfigIdentityId": "org-12345678",
                      "cloudProviderNames": ["aws", "gcp"],
                      "createdAt": "2019-01-01T00:00:00Z",
                      "defaultSubscription": true,
                      "id": "sub-12345678",
                      "productTierId": "pt-12345678",
                      "productTierName": "Omnistrate Multi Tenancy",
                      "roleType": "root",
                      "rootUserId": "user-12345678",
                      "serviceId": "s-12345678",
                      "serviceLogoURL": "Eum beatae asperiores.",
                      "serviceName": "MySQL multi-writer service",
                      "serviceOrgId": "org-12345678",
                      "serviceOrgName": "Omnistrate",
                      "status": "ACTIVE",
                      "subscriptionOwnerName": "John Doe"
                    },
                    {
                      "accountConfigIdentityId": "org-12345678",
                      "cloudProviderNames": ["aws", "gcp"],
                      "createdAt": "2019-01-01T00:00:00Z",
                      "defaultSubscription": true,
                      "id": "sub-12345678",
                      "productTierId": "pt-12345678",
                      "productTierName": "Omnistrate Multi Tenancy",
                      "roleType": "root",
                      "rootUserId": "user-12345678",
                      "serviceId": "s-12345678",
                      "serviceLogoURL": "Eum beatae asperiores.",
                      "serviceName": "MySQL multi-writer service",
                      "serviceOrgId": "org-12345678",
                      "serviceOrgName": "Omnistrate",
                      "status": "ACTIVE",
                      "subscriptionOwnerName": "John Doe"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to list subscriptions",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["subscription-api"],
        "summary": "CreateSubscription subscription-api",
        "operationId": "subscription-api#CreateSubscription",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequest2"
              },
              "example": {
                "productTierId": "pt-12345678",
                "serviceId": "s-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Subscription ID created",
                  "example": "sub-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "sub-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a subscription",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/subscription/{id}": {
      "delete": {
        "tags": ["subscription-api"],
        "summary": "DeleteSubscription subscription-api",
        "operationId": "subscription-api#DeleteSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Subscription",
              "example": "Veritatis unde adipisci veniam eos dolore voluptas."
            },
            "example": "sub-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete a subscription",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["subscription-api"],
        "summary": "DescribeSubscription subscription-api",
        "operationId": "subscription-api#DescribeSubscription",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Subscription",
              "example": "Placeat ullam hic."
            },
            "example": "sub-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeSubscriptionResult"
                },
                "example": {
                  "accountConfigIdentityId": "org-12345678",
                  "cloudProviderNames": ["aws", "gcp"],
                  "createdAt": "2019-01-01T00:00:00Z",
                  "defaultSubscription": true,
                  "id": "sub-12345678",
                  "productTierId": "pt-12345678",
                  "productTierName": "Omnistrate Multi Tenancy",
                  "roleType": "root",
                  "rootUserId": "user-12345678",
                  "serviceId": "s-12345678",
                  "serviceLogoURL": "Ex laboriosam ipsam quis numquam.",
                  "serviceName": "MySQL multi-writer service",
                  "serviceOrgId": "org-12345678",
                  "serviceOrgName": "Omnistrate",
                  "status": "ACTIVE",
                  "subscriptionOwnerName": "John Doe"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a subscription",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/subscription/request": {
      "get": {
        "tags": ["subscription-request-api"],
        "summary": "ListSubscriptionRequests subscription-request-api",
        "operationId": "subscription-request-api#ListSubscriptionRequests",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "The status of the subscription request to filter by",
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "description": "The status of the subscription request",
              "example": "PENDING|APPROVED|DENIED|CANCELLED"
            },
            "example": "PENDING"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSubscriptionRequestsResult"
                },
                "example": {
                  "ids": ["subr-12345678", "subr-abcdefgh", "subr-1234efgh"],
                  "nextPageToken": "next-token",
                  "subscriptionRequests": [
                    {
                      "createdAt": "2019-01-01T00:00:00Z",
                      "id": "subr-12345678",
                      "productTierId": "pt-12345678",
                      "productTierName": "Omnistrate Multi Tenancy",
                      "rootUserEmail": "abc@gmail.com",
                      "rootUserId": "org-12345678",
                      "rootUserName": "John Doe",
                      "serviceId": "s-12345678",
                      "serviceLogoURL": "Mollitia sunt commodi.",
                      "serviceName": "MySQL multi-writer service",
                      "status": "PENDING",
                      "updatedAt": "2019-01-01T00:00:00Z",
                      "updatedByUserId": "user-12345678",
                      "updatedByUserName": "John Doe"
                    },
                    {
                      "createdAt": "2019-01-01T00:00:00Z",
                      "id": "subr-12345678",
                      "productTierId": "pt-12345678",
                      "productTierName": "Omnistrate Multi Tenancy",
                      "rootUserEmail": "abc@gmail.com",
                      "rootUserId": "org-12345678",
                      "rootUserName": "John Doe",
                      "serviceId": "s-12345678",
                      "serviceLogoURL": "Mollitia sunt commodi.",
                      "serviceName": "MySQL multi-writer service",
                      "status": "PENDING",
                      "updatedAt": "2019-01-01T00:00:00Z",
                      "updatedByUserId": "user-12345678",
                      "updatedByUserName": "John Doe"
                    },
                    {
                      "createdAt": "2019-01-01T00:00:00Z",
                      "id": "subr-12345678",
                      "productTierId": "pt-12345678",
                      "productTierName": "Omnistrate Multi Tenancy",
                      "rootUserEmail": "abc@gmail.com",
                      "rootUserId": "org-12345678",
                      "rootUserName": "John Doe",
                      "serviceId": "s-12345678",
                      "serviceLogoURL": "Mollitia sunt commodi.",
                      "serviceName": "MySQL multi-writer service",
                      "status": "PENDING",
                      "updatedAt": "2019-01-01T00:00:00Z",
                      "updatedByUserId": "user-12345678",
                      "updatedByUserName": "John Doe"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a subscription",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "post": {
        "tags": ["subscription-request-api"],
        "summary": "CreateSubscriptionRequest subscription-request-api",
        "operationId": "subscription-request-api#CreateSubscriptionRequest",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriptionRequestRequest2"
              },
              "example": {
                "productTierId": "pt-12345678",
                "serviceId": "s-12345678"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Subscription request ID created",
                  "example": "subr-12345678"
                },
                "examples": {
                  "default": {
                    "summary": "default",
                    "value": "subr-12345678"
                  }
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a subscription",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/subscription/request/{id}": {
      "delete": {
        "tags": ["subscription-request-api"],
        "summary": "CancelSubscriptionRequest subscription-request-api",
        "operationId": "subscription-request-api#CancelSubscriptionRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Subscription Request",
              "example": "Aut et et nemo modi quis."
            },
            "example": "subr-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a subscription",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["subscription-request-api"],
        "summary": "DescribeSubscriptionRequest subscription-request-api",
        "operationId": "subscription-request-api#DescribeSubscriptionRequest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of a Subscription Request",
              "example": "Debitis impedit in et et cumque voluptates."
            },
            "example": "subr-12345678"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeSubscriptionRequestResult"
                },
                "example": {
                  "createdAt": "2019-01-01T00:00:00Z",
                  "id": "subr-12345678",
                  "productTierId": "pt-12345678",
                  "productTierName": "Omnistrate Multi Tenancy",
                  "rootUserEmail": "abc@gmail.com",
                  "rootUserId": "org-12345678",
                  "rootUserName": "John Doe",
                  "serviceId": "s-12345678",
                  "serviceLogoURL": "Dolorem quam.",
                  "serviceName": "MySQL multi-writer service",
                  "status": "PENDING",
                  "updatedAt": "2019-01-01T00:00:00Z",
                  "updatedByUserId": "user-12345678",
                  "updatedByUserName": "John Doe"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to create a subscription",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/update-password": {
      "post": {
        "tags": ["users-api"],
        "summary": "UpdatePassword users-api",
        "operationId": "users-api#UpdatePassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePasswordRequest2"
              },
              "example": {
                "currentPassword": "currentPassword",
                "currentPasswordHash": "currentPasswordHash",
                "password": "password"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to update password",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/usage": {
      "get": {
        "tags": ["usage-api"],
        "summary": "GetCurrentPlanUsage usage-api",
        "operationId": "usage-api#GetCurrentPlanUsage",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCurrentUsageResult"
                },
                "example": {
                  "endTime": "2021-01-01T00:00:00.000Z",
                  "planName": "STARTER",
                  "startTime": "2021-01-01T00:00:00.000Z",
                  "usage": [
                    {
                      "dimension": "core/hours",
                      "total": 0.67
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to get usage",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/user": {
      "delete": {
        "tags": ["users-api"],
        "summary": "DeleteUser users-api",
        "operationId": "users-api#DeleteUser",
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to delete user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      },
      "get": {
        "tags": ["users-api"],
        "summary": "DescribeUser users-api",
        "operationId": "users-api#DescribeUser",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DescribeUserResult"
                },
                "example": {
                  "address": {
                    "addressLine1": "1234 Main St",
                    "addressLine2": "Apt 123",
                    "addressLine3": "Building 123",
                    "city": "San Francisco",
                    "country": "US",
                    "state": "CA",
                    "zip": "94123"
                  },
                  "createdAt": "2023-01-10T00:00:00Z",
                  "email": "abc@gmail.com",
                  "id": "user-abcd1234",
                  "lastModifiedAt": "2023-01-20T00:00:00Z",
                  "name": "John Dae",
                  "orgDescription": "ACME Inc.",
                  "orgFavIconURL": "Ut exercitationem neque occaecati explicabo.",
                  "orgId": "org-aKQ8G13QeR",
                  "orgLogoURL": "Aut itaque minus sint esse.",
                  "orgName": "ACME",
                  "orgPrivacyPolicy": "Eos fuga ut quae possimus.",
                  "orgSupportEmail": "support@example.com",
                  "orgTermsOfUse": "In nobis necessitatibus.",
                  "orgURL": "something.acme",
                  "planName": "STARTER",
                  "roleType": "reader"
                }
              }
            }
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/user/{id}": {
      "patch": {
        "tags": ["users-api"],
        "summary": "UpdateUser users-api",
        "operationId": "users-api#UpdateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The User ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The User ID",
              "example": "user-abcd1234"
            },
            "example": "user-abcd1234"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest2"
              },
              "example": {
                "address": {
                  "addressLine1": "1234 Main St",
                  "addressLine2": "Apt 123",
                  "addressLine3": "Building 123",
                  "city": "San Francisco",
                  "country": "US",
                  "state": "CA",
                  "zip": "94123"
                },
                "name": "John Dae",
                "orgDescription": "ACME Inc.",
                "orgFavIconURL": "http://kunze.info/retha",
                "orgLogoURL": "http://fritsch.org/marlene_hand",
                "orgName": "ACME",
                "orgPrivacyPolicy": "Magni qui.",
                "orgSupportEmail": "support@example.com",
                "orgTermsOfUse": "Rerum vel vero aut tempore aut dolor.",
                "orgURL": "something.acme"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to describe a user",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key_header_Authorization": []
          }
        ]
      }
    },
    "/2022-09-01-00/users/{id}/regenerate-token": {
      "post": {
        "tags": ["signup-api"],
        "summary": "RegenerateToken signup-api",
        "operationId": "signup-api#RegenerateToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "user-abcd1234",
              "minLength": 1
            },
            "example": "user-abcd1234"
          }
        ],
        "responses": {
          "200": {
            "description": "OK response."
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to regenerate token",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/validate-token": {
      "post": {
        "tags": ["signup-api"],
        "summary": "ValidateToken signup-api",
        "operationId": "signup-api#ValidateToken",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateTokenRequest"
              },
              "example": {
                "email": "abc@gmail.com",
                "token": "fc7b8dea-a50b-4c9a-8864-fc3d845a2be6"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK response."
          },
          "400": {
            "description": "bad_request: Response used on a bad request",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "auth_failure: Response used on authentication failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "forbidden: Response used on authorization failure",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "not_found: Response used when the requested resource is not found",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "invalid_state: Response used when requested resource is in an invalid state for this operation",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "failed_request: Response used on failure to validate the token",
            "content": {
              "application/vnd.goa.error": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/2022-09-01-00/version": {
      "get": {
        "tags": ["global-api"],
        "summary": "registrationServiceVersion global-api",
        "description": "Registration service version endpoint",
        "operationId": "global-api#registrationServiceVersion",
        "responses": {
          "200": {
            "description": "OK response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OmnistrateServiceVersionResult"
                },
                "example": {
                  "apiVersion": "1",
                  "buildCommitSHA": "1234567890abcdef1234567890abcdef12345678",
                  "buildTimestamp": "2020-01-01T00:00:00Z"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIEntity": {
        "type": "object",
        "properties": {
          "inputParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputParameterEntity"
            },
            "description": "The input parameters",
            "example": [
              {
                "defaultValue": null,
                "description": "The name of the server",
                "displayName": "Server Name",
                "isList": false,
                "key": "serverName",
                "modifiable": true,
                "options": null,
                "required": true,
                "type": "string"
              },
              {
                "defaultValue": "option1",
                "description": "The type of the server",
                "displayName": "Server Type",
                "isList": false,
                "key": "serverType",
                "modifiable": true,
                "options": ["option1", "option2"],
                "required": true,
                "type": "string"
              }
            ]
          },
          "outputParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutputParameterEntity"
            },
            "description": "The output parameters",
            "example": [
              {
                "description": "The name of the server",
                "displayName": "Server Name",
                "isList": false,
                "key": "serverName",
                "type": "string"
              },
              {
                "description": "The type of the server",
                "displayName": "Server Type",
                "isList": false,
                "key": "serverType",
                "type": "string"
              }
            ]
          },
          "verb": {
            "type": "string",
            "description": "The API verb",
            "example": "CREATE|DESCRIBE|LIST|UPDATE|DELETE"
          }
        },
        "example": {
          "inputParameters": [
            {
              "defaultValue": null,
              "description": "The name of the server",
              "displayName": "Server Name",
              "isList": false,
              "key": "serverName",
              "modifiable": true,
              "options": null,
              "required": true,
              "type": "string"
            },
            {
              "defaultValue": "option1",
              "description": "The type of the server",
              "displayName": "Server Type",
              "isList": false,
              "key": "serverType",
              "modifiable": true,
              "options": ["option1", "option2"],
              "required": true,
              "type": "string"
            }
          ],
          "outputParameters": [
            {
              "description": "The name of the server",
              "displayName": "Server Name",
              "isList": false,
              "key": "serverName",
              "type": "string"
            },
            {
              "description": "The type of the server",
              "displayName": "Server Type",
              "isList": false,
              "key": "serverType",
              "type": "string"
            }
          ],
          "verb": "CREATE|DESCRIBE|LIST|UPDATE|DELETE"
        },
        "required": ["verb", "inputParameters", "outputParameters"]
      },
      "AWSPrivateLinkConfiguration": {
        "type": "object",
        "properties": {
          "port": {
            "type": "integer",
            "description": "The port of the target group",
            "example": 80,
            "format": "int64"
          },
          "targetGroupName": {
            "type": "string",
            "description": "The target group name",
            "example": "my-target-group"
          }
        },
        "example": {
          "port": 80,
          "targetGroupName": "my-target-group"
        },
        "required": ["targetGroupName", "port"]
      },
      "AWSPrivateLinkConfigurations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/AWSPrivateLinkConfiguration"
        },
        "description": "The list of private link configurations",
        "example": [
          {
            "port": 80,
            "targetGroupName": "my-target-group"
          },
          {
            "port": 80,
            "targetGroupName": "my-target-group"
          },
          {
            "port": 80,
            "targetGroupName": "my-target-group"
          }
        ]
      },
      "AccountConfigIdentityIDRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "5x",
            "minLength": 1
          }
        },
        "example": {
          "token": "l"
        },
        "required": ["token"]
      },
      "AccountConfigIdentityIDResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Org",
            "example": "Dignissimos voluptas enim."
          }
        },
        "example": {
          "id": "org-12345678"
        },
        "required": ["id"]
      },
      "AcknowledgeEventRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Event",
            "example": "Consequatur recusandae excepturi velit dolore minima qui."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "n",
            "minLength": 1
          }
        },
        "example": {
          "id": "e-123456",
          "token": "1a"
        },
        "required": ["token", "id"]
      },
      "ActionHook": {
        "type": "object",
        "properties": {
          "commandTemplate": {
            "type": "string",
            "description": "The Base64 encoded command template to execute",
            "example": "ZWNobyAiaGVsbG8gd29ybGQi"
          },
          "customCommand": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Iure quis ratione provident nam voluptatibus quis."
            },
            "description": "The custom command to execute the hook with",
            "example": ["/bin/sh", "-c"]
          },
          "customImage": {
            "type": "string",
            "description": "The custom image to execute the hook",
            "example": "my-custom-image:latest"
          },
          "scope": {
            "type": "string",
            "description": "The scope of the hook",
            "example": "CLUSTER|NODE"
          },
          "type": {
            "type": "string",
            "description": "The type of hook to execute",
            "example": "INIT|ADD|REMOVE|PROMOTE|DEMOTE|HEALTH_CHECK|POST_START|POST_UPGRADE|PRE_STOP"
          }
        },
        "example": {
          "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
          "customCommand": ["/bin/sh", "-c"],
          "customImage": "my-custom-image:latest",
          "scope": "CLUSTER",
          "type": "ADD"
        },
        "required": ["type", "scope", "commandTemplate"]
      },
      "AddAccountConfigToServiceModelRequest": {
        "type": "object",
        "properties": {
          "accountConfigId": {
            "type": "string",
            "description": "ID of an Account Config",
            "example": "Incidunt veniam incidunt."
          },
          "id": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Accusamus est deserunt."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "a",
            "minLength": 1
          }
        },
        "example": {
          "accountConfigId": "ac-12345678",
          "id": "sm-12345678",
          "serviceId": "s-12345678",
          "token": "x"
        },
        "required": ["token", "accountConfigId", "id", "serviceId"]
      },
      "AddAccountConfigToServiceModelRequest2": {
        "type": "object",
        "properties": {
          "accountConfigId": {
            "type": "string",
            "description": "The infrastructure account configuration ID",
            "example": "ac-12345678"
          }
        },
        "example": {
          "accountConfigId": "ac-12345678"
        },
        "required": ["accountConfigId"]
      },
      "AddCapacityToResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "capacityToBeAdded": {
            "type": "integer",
            "description": "Number of replicas to be added",
            "example": 3,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Minima odit impedit."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "l0",
            "minLength": 1
          }
        },
        "example": {
          "capacityToBeAdded": 3,
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "sp7"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id",
          "capacityToBeAdded"
        ]
      },
      "AddCapacityToResourceInstanceRequest2": {
        "type": "object",
        "properties": {
          "capacityToBeAdded": {
            "type": "integer",
            "description": "Number of replicas to be added",
            "example": 3,
            "format": "int64"
          }
        },
        "example": {
          "capacityToBeAdded": 3
        },
        "required": ["capacityToBeAdded"]
      },
      "AddComputeInstanceTypeRequest": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "id": {
            "type": "string",
            "description": "ID of a Compute Config",
            "example": "Voluptates recusandae incidunt sint quae."
          },
          "instanceType": {
            "type": "string",
            "description": "The instance type for this compute instance type config",
            "example": "t3.micro"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "x",
            "minLength": 1
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "id": "cc-12345678",
          "instanceType": "t3.micro",
          "serviceId": "s-12345678",
          "token": "uny"
        },
        "required": ["token", "id", "serviceId", "cloudProviderName", "instanceType"]
      },
      "AddComputeInstanceTypeRequest2": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "The cloud provider for this compute instance type config",
            "example": "aws"
          },
          "instanceType": {
            "type": "string",
            "description": "The instance type for this compute instance type config",
            "example": "t3.micro"
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "instanceType": "t3.micro"
        },
        "required": ["cloudProviderName", "instanceType"]
      },
      "AddCustomDNSToResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "customDNS": {
            "type": "string",
            "description": "The custom DNS to add",
            "example": "my-custom-dns.com"
          },
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "http-service"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Aut architecto in laborum velit."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "targetPort": {
            "type": "integer",
            "description": "The target port",
            "example": 8080,
            "format": "int64"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "8yr",
            "minLength": 1
          }
        },
        "example": {
          "customDNS": "my-custom-dns.com",
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "resourceKey": "http-service",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "targetPort": 8080,
          "token": "ct"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id",
          "customDNS"
        ]
      },
      "AddCustomDNSToResourceInstanceRequest2": {
        "type": "object",
        "properties": {
          "customDNS": {
            "type": "string",
            "description": "The custom DNS to add",
            "example": "my-custom-dns.com"
          },
          "targetPort": {
            "type": "integer",
            "description": "The target port",
            "example": 8080,
            "format": "int64"
          }
        },
        "example": {
          "customDNS": "my-custom-dns.com",
          "targetPort": 8080
        },
        "required": ["customDNS"]
      },
      "AddFileRequest": {
        "type": "object",
        "properties": {
          "content_type": {
            "type": "string",
            "description": "Content-Type header, must define value for multipart boundary.",
            "default": "multipart/form-data; boundary=boundary",
            "example": "multipart/form-data; boundary=boundary",
            "pattern": "multipart/[^;]+; boundary=.+"
          },
          "description": {
            "type": "string",
            "description": "The description of the file",
            "example": "A file to store the configuration for the resource"
          },
          "fileType": {
            "type": "string",
            "description": "The type of the file",
            "example": "Config|Secret"
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Ut dolor eaque incidunt."
          },
          "mountPath": {
            "type": "string",
            "description": "The mount path of the file",
            "example": "/etc/config"
          },
          "name": {
            "type": "string",
            "description": "The name of the file",
            "example": "file.txt"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "8",
            "minLength": 1
          }
        },
        "example": {
          "content_type": "multipart/form-data; boundary=boundary",
          "description": "A file to store the configuration for the resource",
          "fileType": "Config",
          "id": "r-12345678",
          "mountPath": "/etc/config",
          "name": "file.txt",
          "serviceId": "s-12345678",
          "token": "kf"
        },
        "required": ["token", "id", "name", "description", "serviceId", "content_type", "fileType", "mountPath"]
      },
      "AddResourceDependencyRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Doloribus ipsum."
          },
          "parameterMap": {
            "type": "object",
            "description": "A map of the source parameter to the dependency resource parameter",
            "example": {
              "clusterId": "writerId",
              "clusterOrg": "userDatabase"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Omnis delectus."
            }
          },
          "resourceDependencyId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Delectus eum deleniti."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "r",
            "minLength": 1
          }
        },
        "example": {
          "id": "r-12345678",
          "parameterMap": {
            "clusterId": "writerId",
            "clusterOrg": "userDatabase"
          },
          "resourceDependencyId": "r-12345678",
          "serviceId": "s-12345678",
          "token": "d6v"
        },
        "required": ["token", "id", "serviceId", "resourceDependencyId"]
      },
      "AddResourceDependencyRequest2": {
        "type": "object",
        "properties": {
          "parameterMap": {
            "type": "object",
            "description": "A map of the source parameter to the dependency resource parameter",
            "example": {
              "clusterId": "writerId",
              "clusterOrg": "userDatabase"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Voluptatem dolorem debitis unde."
            }
          }
        },
        "example": {
          "parameterMap": {
            "clusterId": "writerId",
            "clusterOrg": "userDatabase"
          }
        }
      },
      "AddStorageVolumeConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Storage Config",
            "example": "Non molestiae vitae."
          },
          "mountPath": {
            "type": "string",
            "description": "The path where the storage volume will be mounted",
            "example": "/data"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "storageVolumeConfigId": {
            "type": "string",
            "description": "ID of a Storage Volume Config",
            "example": "Perspiciatis dolor consequatur ipsam ut quo officiis."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "2ak",
            "minLength": 1
          }
        },
        "example": {
          "id": "sc-12345678",
          "mountPath": "/data",
          "serviceId": "s-12345678",
          "storageVolumeConfigId": "svc-12345678",
          "token": "8"
        },
        "required": ["token", "id", "serviceId", "storageVolumeConfigId"]
      },
      "AddStorageVolumeConfigRequest2": {
        "type": "object",
        "properties": {
          "mountPath": {
            "type": "string",
            "description": "The path where the storage volume will be mounted",
            "example": "/data"
          }
        },
        "example": {
          "mountPath": "/data"
        }
      },
      "AdditionalSecurityContext": {
        "type": "object",
        "properties": {
          "AddCapabilities": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Cum assumenda."
            },
            "description": "Capabilities to add",
            "example": ["CAP_NET_ADMIN", "CAP_NET_RAW"]
          },
          "DropCapabilities": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Laboriosam commodi."
            },
            "description": "Capabilities to drop",
            "example": ["CAP_NET_ADMIN", "CAP_NET_RAW"]
          },
          "SupplementalGroupIDs": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 6301361185851739000,
              "format": "int64"
            },
            "description": "Supplemental group IDs",
            "example": [1001, 999]
          }
        },
        "example": {
          "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
          "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
          "SupplementalGroupIDs": [1001, 999]
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string",
            "description": "The street address",
            "example": "1234 Main St"
          },
          "addressLine2": {
            "type": "string",
            "description": "Address Line 2",
            "example": "Apt 123"
          },
          "addressLine3": {
            "type": "string",
            "description": "Address Line 3",
            "example": "Building 123"
          },
          "city": {
            "type": "string",
            "description": "Name of the City",
            "example": "San Francisco"
          },
          "country": {
            "type": "string",
            "description": "Name of the Country",
            "example": "US"
          },
          "state": {
            "type": "string",
            "description": "Name of the State/Province/Region",
            "example": "CA"
          },
          "zip": {
            "type": "string",
            "description": "Zip code",
            "example": "94123"
          }
        },
        "example": {
          "addressLine1": "1234 Main St",
          "addressLine2": "Apt 123",
          "addressLine3": "Building 123",
          "city": "San Francisco",
          "country": "US",
          "state": "CA",
          "zip": "94123"
        },
        "required": ["addressLine1", "city", "state", "zip", "country"]
      },
      "AutoScalingMetricSpec": {
        "type": "object",
        "properties": {
          "metricEndpoint": {
            "type": "string",
            "description": "The local host endpoint to supply prometheus metric",
            "example": "http://localhost:9187/metrics"
          },
          "metricLabelName": {
            "type": "string",
            "description": "The prometheus metric label name for scaling",
            "example": "label"
          },
          "metricLabelValue": {
            "type": "string",
            "description": "The prometheus metric label value for scaling",
            "example": "value"
          },
          "metricName": {
            "type": "string",
            "description": "The prometheus metric name for scaling",
            "example": "metric_name"
          }
        },
        "example": {
          "metricEndpoint": "http://localhost:9187/metrics",
          "metricLabelName": "label",
          "metricLabelValue": "value",
          "metricName": "metric_name"
        },
        "required": ["metricEndpoint", "metricName", "metricLabelName", "metricLabelValue"]
      },
      "AutoscalingPolicy": {
        "type": "object",
        "properties": {
          "idleMinutesBeforeScalingDown": {
            "type": "integer",
            "description": "Minutes before scaling down the compute nodes in idle state",
            "default": 5,
            "example": 1,
            "format": "int64"
          },
          "idleThreshold": {
            "type": "integer",
            "description": "Metric value below threshold will be considered to be idle",
            "default": 20,
            "example": 1,
            "format": "int64"
          },
          "maxReplicas": {
            "type": "string",
            "description": "Maximum number of compute nodes to provision",
            "example": "4"
          },
          "minReplicas": {
            "type": "string",
            "description": "Minimum number of compute nodes to provision",
            "example": "1"
          },
          "overUtilizedMinutesBeforeScalingUp": {
            "type": "integer",
            "description": "Minutes before scaling up the compute nodes in overUtilized state",
            "default": 5,
            "example": 1,
            "format": "int64"
          },
          "overUtilizedThreshold": {
            "type": "integer",
            "description": "Metric value beyond threshold will be considered to be overUtilized",
            "default": 80,
            "example": 1,
            "format": "int64"
          },
          "scalingMetric": {
            "$ref": "#/components/schemas/AutoScalingMetricSpec"
          }
        },
        "description": "Autoscaling policy for compute nodes",
        "example": {
          "idleMinutesBeforeScalingDown": 1,
          "idleThreshold": 1,
          "maxReplicas": "4",
          "minReplicas": "1",
          "overUtilizedMinutesBeforeScalingUp": 1,
          "overUtilizedThreshold": 1,
          "scalingMetric": {
            "metricEndpoint": "http://localhost:9187/metrics",
            "metricLabelName": "label",
            "metricLabelValue": "value",
            "metricName": "metric_name"
          }
        },
        "required": ["minReplicas", "maxReplicas"]
      },
      "BackendPortConfiguration": {
        "type": "object",
        "properties": {
          "associatedResourceIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Deleniti officiis."
            },
            "description": "The IDs of the resource associated with the backend port",
            "example": ["r-12345678", "r-abcdef12"]
          },
          "backendPort": {
            "type": "integer",
            "description": "The port to forward traffic to",
            "example": 8080,
            "format": "int64"
          },
          "ingressPort": {
            "type": "integer",
            "description": "The ingress port to configure on the load balancer",
            "example": 1234,
            "format": "int64"
          }
        },
        "example": {
          "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
          "backendPort": 8080,
          "ingressPort": 1234
        },
        "required": ["ingressPort", "backendPort", "associatedResourceIDs"]
      },
      "BackupConfiguration": {
        "type": "object",
        "properties": {
          "backupPeriodInHours": {
            "type": "integer",
            "description": "The period in hours to take backups",
            "example": 24,
            "format": "int64"
          },
          "backupRetentionInDays": {
            "type": "integer",
            "description": "The number of days to retain backups",
            "example": 7,
            "format": "int64"
          }
        },
        "example": {
          "backupPeriodInHours": 24,
          "backupRetentionInDays": 7
        },
        "required": ["backupRetentionInDays", "backupPeriodInHours"]
      },
      "BackupStatus": {
        "type": "object",
        "properties": {
          "backupPeriodInHours": {
            "type": "integer",
            "description": "The backup period in hours",
            "example": 2,
            "format": "int64"
          },
          "backupRetentionInDays": {
            "type": "integer",
            "description": "The backup retention in days",
            "example": 7,
            "format": "int64"
          },
          "earliestRestoreTime": {
            "type": "string",
            "description": "The earliest restore time",
            "example": "2021-09-01T00:00:00Z"
          },
          "lastBackupTime": {
            "type": "string",
            "description": "The last backup time",
            "example": "2021-09-01T00:00:00Z"
          }
        },
        "example": {
          "backupPeriodInHours": 2,
          "backupRetentionInDays": 7,
          "earliestRestoreTime": "2021-09-01T00:00:00Z",
          "lastBackupTime": "2021-09-01T00:00:00Z"
        },
        "required": ["backupRetentionInDays", "backupPeriodInHours"]
      },
      "BillingPlan": {
        "type": "object",
        "properties": {
          "allowCreatesWhenPaymentNotConfigured": {
            "type": "boolean",
            "description": "Allow creates when payment not configured",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "ID of a Product Tier Billing Plan",
            "example": "Dolores beatae est quae autem ducimus non."
          },
          "maxNumberofInstances": {
            "type": "integer",
            "description": "Maximum number of instances",
            "example": 5,
            "format": "int64"
          },
          "planName": {
            "type": "string",
            "description": "Plan name",
            "example": "STARTER"
          },
          "pricing": {
            "description": "Pricing in dollars.",
            "example": {
              "cpuCoreHours": "0.001",
              "memoryGiBHours": "0.0001",
              "storageGiBHours": "0.0001"
            }
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Sint labore distinctio et cupiditate."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          }
        },
        "example": {
          "allowCreatesWhenPaymentNotConfigured": true,
          "id": "bp-12345678",
          "maxNumberofInstances": 5,
          "planName": "STARTER",
          "pricing": {
            "cpuCoreHours": "0.001",
            "memoryGiBHours": "0.0001",
            "storageGiBHours": "0.0001"
          },
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678"
        },
        "required": [
          "id",
          "serviceId",
          "productTierId",
          "planName",
          "pricing",
          "allowCreatesWhenPaymentNotConfigured",
          "maxNumberofInstances"
        ]
      },
      "BlobStorageConfiguration": {
        "type": "object",
        "properties": {
          "GCSConfiguration": {
            "$ref": "#/components/schemas/GCSConfiguration"
          },
          "S3Configuration": {
            "$ref": "#/components/schemas/S3Configuration"
          }
        },
        "example": {
          "GCSConfiguration": {},
          "S3Configuration": {}
        }
      },
      "BuildServiceFromComposeSpecRequest": {
        "type": "object",
        "properties": {
          "configs": {
            "type": "object",
            "description": "Configs for the service. Key is the compose spec name of the config and value is base64 encoded config content",
            "example": {
              "Sed sint placeat qui.": "Quia itaque."
            },
            "additionalProperties": {
              "type": "string",
              "example": "Optio voluptatum odio amet asperiores veritatis in."
            }
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "environment": {
            "type": "string",
            "description": "The environment to build the service in",
            "example": "dev"
          },
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "fileContent": {
            "type": "string",
            "description": "Base64 encoded Compose Spec YAML in docker compose format",
            "example": "Est quisquam."
          },
          "name": {
            "type": "string",
            "description": "Name of the Service",
            "example": "MySQL multi-writer service"
          },
          "release": {
            "type": "boolean",
            "description": "Release the service after building",
            "example": true
          },
          "releaseAsPreferred": {
            "type": "boolean",
            "description": "Release the service as preferred",
            "example": true
          },
          "releaseVersionName": {
            "type": "string",
            "description": "Release version name",
            "example": "mysql"
          },
          "secrets": {
            "type": "object",
            "description": "Secrets for the service. Key is the compose spec name of the secret and value is base64 encoded secret content",
            "example": {
              "Et dolorum.": "Earum illum recusandae mollitia tenetur id ut.",
              "Nemo optio possimus omnis.": "Et similique quas ad.",
              "Quia culpa est dicta harum.": "Deserunt ut et ut illum."
            },
            "additionalProperties": {
              "type": "string",
              "example": "Temporibus officia."
            }
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "http://stanton.biz/aurelio_bradtke",
            "format": "uri"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "e",
            "minLength": 1
          }
        },
        "example": {
          "configs": {
            "Fuga ipsum non.": "Incidunt hic doloremque voluptatem.",
            "Id corporis dolorum sint aspernatur.": "Et quia veritatis explicabo sint in."
          },
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "environment": "dev",
          "environmentType": "DEV",
          "fileContent": "Nam quia sint quidem aut sed.",
          "name": "MySQL multi-writer service",
          "release": true,
          "releaseAsPreferred": true,
          "releaseVersionName": "mysql",
          "secrets": {
            "Omnis quisquam inventore exercitationem ducimus sed ut.": "Temporibus voluptatem qui voluptas ipsa earum."
          },
          "serviceLogoURL": "http://bayer.name/marcelina",
          "token": "2g"
        },
        "required": ["token", "name", "fileContent"]
      },
      "BuildServiceFromComposeSpecRequest2": {
        "type": "object",
        "properties": {
          "configs": {
            "type": "object",
            "description": "Configs for the service. Key is the compose spec name of the config and value is base64 encoded config content",
            "example": {
              "Et sapiente nemo.": "Accusantium ratione et et et."
            },
            "additionalProperties": {
              "type": "string",
              "example": "Id est nesciunt maxime."
            }
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "environment": {
            "type": "string",
            "description": "The environment to build the service in",
            "example": "dev"
          },
          "environmentType": {
            "type": "string",
            "description": "The type of the environment",
            "example": "DEV"
          },
          "fileContent": {
            "type": "string",
            "description": "Base64 encoded Compose Spec YAML in docker compose format",
            "example": "Et quaerat soluta qui iure."
          },
          "name": {
            "type": "string",
            "description": "Name of the Service",
            "example": "MySQL multi-writer service"
          },
          "release": {
            "type": "boolean",
            "description": "Release the service after building",
            "example": true
          },
          "releaseAsPreferred": {
            "type": "boolean",
            "description": "Release the service as preferred",
            "example": true
          },
          "releaseVersionName": {
            "type": "string",
            "description": "Release version name",
            "example": "mysql"
          },
          "secrets": {
            "type": "object",
            "description": "Secrets for the service. Key is the compose spec name of the secret and value is base64 encoded secret content",
            "example": {
              "Velit sunt est labore aut et voluptatibus.": "Accusamus ad vitae qui."
            },
            "additionalProperties": {
              "type": "string",
              "example": "Sint qui exercitationem omnis fugit eos."
            }
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "http://kuvalis.biz/forrest.berge",
            "format": "uri"
          }
        },
        "example": {
          "configs": {
            "Autem ut.": "Ipsum ut praesentium maiores.",
            "Qui quo aut.": "Velit voluptatem molestiae cumque tenetur."
          },
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "environment": "dev",
          "environmentType": "DEV",
          "fileContent": "Laudantium occaecati.",
          "name": "MySQL multi-writer service",
          "release": true,
          "releaseAsPreferred": true,
          "releaseVersionName": "mysql",
          "secrets": {
            "Labore exercitationem consectetur soluta rem.": "Nulla qui eum."
          },
          "serviceLogoURL": "http://naderwaelchi.biz/golden"
        },
        "required": ["name", "fileContent"]
      },
      "BuildServiceFromComposeSpecResult": {
        "type": "object",
        "properties": {
          "productTierID": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Quia nulla assumenda occaecati autem sint consequatur."
          },
          "serviceEnvironmentID": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceID": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "undefinedResources": {
            "type": "object",
            "description": "Resources that appear in the service plan but were not defined in the spec. These resources were not processed during the build.",
            "example": {
              "mysql": "r-12345678"
            },
            "additionalProperties": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Consequatur recusandae sit."
            }
          }
        },
        "example": {
          "productTierID": "pt-12345678",
          "serviceEnvironmentID": "se-12345678",
          "serviceID": "s-12345678",
          "undefinedResources": {
            "mysql": "r-12345678"
          }
        },
        "required": ["serviceID", "productTierID", "serviceEnvironmentID"]
      },
      "BuildServiceFromServicePlanSpecRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "environment": {
            "type": "string",
            "description": "The environment to build the service in",
            "example": "dev"
          },
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "fileContent": {
            "type": "string",
            "description": "Base64 encoded Compose Spec YAML in service plan configuration format",
            "example": "Qui in sed."
          },
          "name": {
            "type": "string",
            "description": "Name of the Service",
            "example": "MySQL multi-writer service"
          },
          "release": {
            "type": "boolean",
            "description": "Release the service after building",
            "example": true
          },
          "releaseAsPreferred": {
            "type": "boolean",
            "description": "Release the service as preferred",
            "example": true
          },
          "releaseVersionName": {
            "type": "string",
            "description": "Release version name",
            "example": "mysql"
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "http://wisozk.info/hilario.mueller",
            "format": "uri"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "k92",
            "minLength": 1
          }
        },
        "example": {
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "environment": "dev",
          "environmentType": "DEV",
          "fileContent": "Et id qui.",
          "name": "MySQL multi-writer service",
          "release": true,
          "releaseAsPreferred": true,
          "releaseVersionName": "mysql",
          "serviceLogoURL": "http://hessel.info/norberto",
          "token": "q5"
        },
        "required": ["token", "name", "fileContent"]
      },
      "BuildServiceFromServicePlanSpecRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "environment": {
            "type": "string",
            "description": "The environment to build the service in",
            "example": "dev"
          },
          "environmentType": {
            "type": "string",
            "description": "The type of the environment",
            "example": "DEV"
          },
          "fileContent": {
            "type": "string",
            "description": "Base64 encoded Compose Spec YAML in service plan configuration format",
            "example": "Enim magni."
          },
          "name": {
            "type": "string",
            "description": "Name of the Service",
            "example": "MySQL multi-writer service"
          },
          "release": {
            "type": "boolean",
            "description": "Release the service after building",
            "example": true
          },
          "releaseAsPreferred": {
            "type": "boolean",
            "description": "Release the service as preferred",
            "example": true
          },
          "releaseVersionName": {
            "type": "string",
            "description": "Release version name",
            "example": "mysql"
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "http://mannankunding.net/virginia",
            "format": "uri"
          }
        },
        "example": {
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "environment": "dev",
          "environmentType": "DEV",
          "fileContent": "Autem provident corporis.",
          "name": "MySQL multi-writer service",
          "release": true,
          "releaseAsPreferred": true,
          "releaseVersionName": "mysql",
          "serviceLogoURL": "http://casperwatsica.biz/meghan.king"
        },
        "required": ["name", "fileContent"]
      },
      "BuildServiceFromServicePlanSpecResult": {
        "type": "object",
        "properties": {
          "productTierID": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Quis inventore cum minima."
          },
          "serviceEnvironmentID": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceID": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "undefinedResources": {
            "type": "object",
            "description": "Resources that appear in the service plan but were not defined in the spec. These resources were not processed during the build.",
            "example": {
              "mysql": "r-12345678"
            },
            "additionalProperties": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Rem dicta ea laudantium sit officia."
            }
          }
        },
        "example": {
          "productTierID": "pt-12345678",
          "serviceEnvironmentID": "se-12345678",
          "serviceID": "s-12345678",
          "undefinedResources": {
            "mysql": "r-12345678"
          }
        },
        "required": ["serviceID", "productTierID", "serviceEnvironmentID"]
      },
      "CancelSubscriptionRequestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Subscription Request",
            "example": "Consequuntur adipisci et."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "c2",
            "minLength": 1
          }
        },
        "example": {
          "id": "subr-12345678",
          "token": "g4u"
        },
        "required": ["token", "id"]
      },
      "Change": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "object",
            "description": "Additional setting/component attributes",
            "example": {
              "resourceId": "r-12345678"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Et quisquam dolorum laboriosam."
            }
          },
          "changeType": {
            "type": "string",
            "description": "State of the configuration change",
            "example": "PENDING_NEW|PENDING_UPDATE|ACTIVE|PENDING_DELETE|PENDING_DEPRECATE"
          },
          "name": {
            "type": "string",
            "description": "The name of the setting/component that changed",
            "example": "Customer metrics"
          }
        },
        "example": {
          "attributes": {
            "resourceId": "r-12345678"
          },
          "changeType": "PENDING_NEW",
          "name": "Customer metrics"
        },
        "required": ["changeType", "name", "attributes"]
      },
      "ChangePasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "example": "password",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "example": "fc7b8dea-a50b-4c9a-8864-fc3d845a2be6",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "password": "password",
          "token": "fc7b8dea-a50b-4c9a-8864-fc3d845a2be6"
        },
        "required": ["password", "token", "email"]
      },
      "ChangePlanRequest": {
        "type": "object",
        "properties": {
          "planName": {
            "type": "string",
            "description": "This parameter is used to select the appropriate Product Plan",
            "example": "STARTER_NO_COMMIT|STARTER|GROWTH|ENTERPRISE"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "n3b",
            "minLength": 1
          }
        },
        "example": {
          "planName": "STARTER",
          "token": "xd"
        },
        "required": ["token", "planName"]
      },
      "ChangePlanRequest2": {
        "type": "object",
        "properties": {
          "planName": {
            "type": "string",
            "description": "The name of the plan this user is changing to",
            "example": "STARTER"
          }
        },
        "example": {
          "planName": "STARTER"
        },
        "required": ["planName"]
      },
      "ChangeSet": {
        "type": "object",
        "properties": {
          "categorizedResourceChanges": {
            "type": "object",
            "description": "Summary of all changes within a resource for each category (ie. image, infra, product tier feature, etc.)",
            "example": {
              "Officiis est nobis debitis eos qui.": {
                "changes": [
                  {
                    "attributes": {
                      "resourceId": "r-12345678"
                    },
                    "changeType": "PENDING_NEW",
                    "name": "Customer metrics"
                  },
                  {
                    "attributes": {
                      "resourceId": "r-12345678"
                    },
                    "changeType": "PENDING_NEW",
                    "name": "Customer metrics"
                  },
                  {
                    "attributes": {
                      "resourceId": "r-12345678"
                    },
                    "changeType": "PENDING_NEW",
                    "name": "Customer metrics"
                  },
                  {
                    "attributes": {
                      "resourceId": "r-12345678"
                    },
                    "changeType": "PENDING_NEW",
                    "name": "Customer metrics"
                  }
                ],
                "status": "PENDING_UPDATE"
              }
            },
            "additionalProperties": true
          },
          "imageConfigChanges": {
            "$ref": "#/components/schemas/ImageConfigChangeSummary"
          },
          "infraConfigChanges": {
            "$ref": "#/components/schemas/InfraConfigChangeSummary"
          },
          "overallResourceStatus": {
            "type": "string",
            "description": "Summary status of the changes",
            "example": "NO_CHANGE|PENDING_CHANGE|NONE"
          },
          "productTierFeatureChanges": {
            "type": "string",
            "description": "State of the configuration change",
            "example": "PENDING_NEW|PENDING_UPDATE|ACTIVE|PENDING_DELETE|PENDING_DEPRECATE"
          },
          "resourceChanges": {
            "type": "string",
            "description": "State of the configuration change",
            "example": "PENDING_NEW|PENDING_UPDATE|ACTIVE|PENDING_DELETE|PENDING_DEPRECATE"
          },
          "resourceName": {
            "type": "string",
            "description": "The name of the resource",
            "example": "Quas veritatis inventore ut sunt."
          }
        },
        "example": {
          "categorizedResourceChanges": {
            "Officiis est nobis debitis eos qui.": {
              "changes": [
                {
                  "attributes": {
                    "resourceId": "r-12345678"
                  },
                  "changeType": "PENDING_NEW",
                  "name": "Customer metrics"
                },
                {
                  "attributes": {
                    "resourceId": "r-12345678"
                  },
                  "changeType": "PENDING_NEW",
                  "name": "Customer metrics"
                },
                {
                  "attributes": {
                    "resourceId": "r-12345678"
                  },
                  "changeType": "PENDING_NEW",
                  "name": "Customer metrics"
                },
                {
                  "attributes": {
                    "resourceId": "r-12345678"
                  },
                  "changeType": "PENDING_NEW",
                  "name": "Customer metrics"
                }
              ],
              "status": "PENDING_UPDATE"
            }
          },
          "imageConfigChanges": {
            "changeState": "PENDING_NEW",
            "imageConfigId": "imgc-12345678",
            "imageName": "mysql"
          },
          "infraConfigChanges": {
            "changeState": "PENDING_NEW",
            "infraConfigId": "ic-12345678",
            "name": "MySQL Writer Infra Config"
          },
          "overallResourceStatus": "PENDING_UPDATE",
          "productTierFeatureChanges": "PENDING_UPDATE",
          "resourceChanges": "PENDING_DELETE",
          "resourceName": "Distinctio aut inventore."
        },
        "required": ["overallResourceStatus", "categorizedResourceChanges"]
      },
      "ChangeSummary": {
        "type": "object",
        "properties": {
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Change"
            },
            "description": "List of individual changes",
            "example": [
              {
                "attributes": {
                  "resourceId": "r-12345678"
                },
                "changeType": "PENDING_NEW",
                "name": "Customer metrics"
              },
              {
                "attributes": {
                  "resourceId": "r-12345678"
                },
                "changeType": "PENDING_NEW",
                "name": "Customer metrics"
              }
            ]
          },
          "status": {
            "type": "string",
            "description": "Summary status of the changes",
            "example": "NO_CHANGE|PENDING_CHANGE|NONE"
          }
        },
        "example": {
          "changes": [
            {
              "attributes": {
                "resourceId": "r-12345678"
              },
              "changeType": "PENDING_NEW",
              "name": "Customer metrics"
            },
            {
              "attributes": {
                "resourceId": "r-12345678"
              },
              "changeType": "PENDING_NEW",
              "name": "Customer metrics"
            },
            {
              "attributes": {
                "resourceId": "r-12345678"
              },
              "changeType": "PENDING_NEW",
              "name": "Customer metrics"
            },
            {
              "attributes": {
                "resourceId": "r-12345678"
              },
              "changeType": "PENDING_NEW",
              "name": "Customer metrics"
            }
          ],
          "status": "PENDING_UPDATE"
        },
        "required": ["status", "changes"]
      },
      "CheckIfContainerImageAccessibleRequest": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string",
            "description": "Name of the image along with the tag. Include the repository name if the image is not from the official repository",
            "example": "library/mysql:5.7"
          },
          "imageRegistry": {
            "type": "string",
            "description": "Registry where the image is stored",
            "example": "docker.io"
          },
          "password": {
            "type": "string",
            "description": "Password to access the image registry",
            "example": "password"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "xr",
            "minLength": 1
          },
          "username": {
            "type": "string",
            "description": "Username to access the image registry",
            "example": "username"
          }
        },
        "example": {
          "image": "library/mysql:5.7",
          "imageRegistry": "docker.io",
          "password": "password",
          "token": "o1",
          "username": "username"
        },
        "required": ["token", "imageRegistry", "image"]
      },
      "CheckIfContainerImageAccessibleResult": {
        "type": "object",
        "properties": {
          "errorMsg": {
            "type": "string",
            "description": "Error message if the image is not accessible",
            "example": "Quo reiciendis sed."
          },
          "imageAccessible": {
            "type": "boolean",
            "description": "Indicates if the image is accessible",
            "example": false
          }
        },
        "example": {
          "errorMsg": "Alias architecto.",
          "imageAccessible": true
        },
        "required": ["imageAccessible"]
      },
      "CloudProviderHealthSummary": {
        "type": "object",
        "properties": {
          "cloudProvider": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "deployingInstances": {
            "type": "integer",
            "description": "The number of instances currently deploying",
            "example": 1762287320249524700,
            "format": "int64"
          },
          "healthyInstances": {
            "type": "integer",
            "description": "The number of healthy instances in the cloud provider",
            "example": 4262402488820277000,
            "format": "int64"
          },
          "message": {
            "type": "string",
            "description": "The status message",
            "example": "Cloud provider is healthy"
          },
          "regionalHealthSummary": {
            "type": "object",
            "description": "The summary of health by region",
            "example": {
              "Soluta inventore voluptas.": {
                "deployingInstances": 4743757747627144000,
                "deploymentCellHealthSummary": {
                  "Omnis sit facilis debitis temporibus.": {
                    "deployingInstances": 1936979972301701600,
                    "healthyInstances": 1988257824015038700,
                    "hostClusterID": "hc-12345678",
                    "message": "Cell is healthy",
                    "status": "Healthy",
                    "totalInstances": 8184821500181041000,
                    "unhealthyInstances": 5543104014255075000,
                    "unknownInstances": 1050601003122845600
                  }
                },
                "healthyInstances": 1306446872922725400,
                "message": "Region is healthy",
                "region": "us-east-1",
                "status": "Healthy",
                "totalInstances": 5342646693377067000,
                "unhealthyInstances": 2004751239827191000,
                "unknownInstances": 5878741193542757000
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/RegionalHealthSummary"
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the cloud provider",
            "example": "Healthy"
          },
          "totalInstances": {
            "type": "integer",
            "description": "The total number of instances in the cloud provider",
            "example": 4012444098075834400,
            "format": "int64"
          },
          "unhealthyInstances": {
            "type": "integer",
            "description": "The number of unhealthy instances in the cloud provider",
            "example": 2157506380513546500,
            "format": "int64"
          },
          "unknownInstances": {
            "type": "integer",
            "description": "The number of instances with unknown status",
            "example": 7640083884050423000,
            "format": "int64"
          }
        },
        "example": {
          "cloudProvider": "aws",
          "deployingInstances": 2863812325181880300,
          "healthyInstances": 4358277706520904700,
          "message": "Cloud provider is healthy",
          "regionalHealthSummary": {
            "Eligendi et dolores quia molestiae aut.": {
              "deployingInstances": 4743757747627144000,
              "deploymentCellHealthSummary": {
                "Omnis sit facilis debitis temporibus.": {
                  "deployingInstances": 1936979972301701600,
                  "healthyInstances": 1988257824015038700,
                  "hostClusterID": "hc-12345678",
                  "message": "Cell is healthy",
                  "status": "Healthy",
                  "totalInstances": 8184821500181041000,
                  "unhealthyInstances": 5543104014255075000,
                  "unknownInstances": 1050601003122845600
                }
              },
              "healthyInstances": 1306446872922725400,
              "message": "Region is healthy",
              "region": "us-east-1",
              "status": "Healthy",
              "totalInstances": 5342646693377067000,
              "unhealthyInstances": 2004751239827191000,
              "unknownInstances": 5878741193542757000
            }
          },
          "status": "Healthy",
          "totalInstances": 7938095535452930000,
          "unhealthyInstances": 4906791909415008000,
          "unknownInstances": 8350680079901828000
        },
        "required": [
          "cloudProvider",
          "status",
          "message",
          "totalInstances",
          "healthyInstances",
          "unhealthyInstances",
          "regionalHealthSummary",
          "deployingInstances"
        ]
      },
      "CloudProvidersConfigReadiness": {
        "type": "object",
        "description": "The readiness of the cloud providers configurations",
        "example": {
          "aws": {
            "resourceA": "missing terraform configuration",
            "resourceB": "missing cloudformation configuration"
          }
        },
        "additionalProperties": true
      },
      "ClusterEndpoint": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string",
            "description": "The endpoint",
            "default": "",
            "example": "https://r-1234.instance-abcdefgh.region.aws.omnistrate.cloud"
          },
          "healthStatus": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "networkingType": {
            "type": "string",
            "description": "The networking type for this resource",
            "example": "PUBLIC"
          },
          "openPorts": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 7339378649478029000,
              "format": "int64"
            },
            "description": "The open ports",
            "example": [30000, 30001]
          },
          "primary": {
            "type": "boolean",
            "description": "Whether this is the primary endpoint",
            "default": false,
            "example": true
          }
        },
        "example": {
          "endpoint": "https://r-1234.instance-abcdefgh.region.aws.omnistrate.cloud",
          "healthStatus": "HEALTHY",
          "networkingType": "PUBLIC",
          "openPorts": [30000, 30001],
          "primary": true
        }
      },
      "ComputePerformanceProfile": {
        "type": "object",
        "properties": {
          "architecture": {
            "type": "string",
            "description": "Processor architecture",
            "example": "x86"
          },
          "maxInstanceAggregateThroughputMBps": {
            "type": "integer",
            "description": "Max throughput (in MBps) aggregated across all network interfaces per compute node required",
            "example": 250,
            "format": "int64"
          },
          "maxSanAggregateThroughputMBps": {
            "type": "integer",
            "description": "Max dedicated network throughput (in MBps) aggregated across all storage volumes per compute node required",
            "example": 400,
            "format": "int64"
          },
          "memoryMiB": {
            "type": "integer",
            "description": "Amount of memory (in Mi) per compute node required",
            "example": 1024,
            "format": "int64"
          },
          "tuning": {
            "type": "string",
            "description": "Tune compute in a specific dimension",
            "default": "BALANCED",
            "example": "CPU_OPTIMIZED|STORAGE_OPTIMIZED|MEMORY_OPTIMIZED|NETWORK_OPTIMIZED|BALANCED"
          },
          "virtualCores": {
            "type": "integer",
            "description": "Number of virtual CPU cores required",
            "example": 4,
            "format": "int64"
          }
        },
        "description": "Performance profile for compute nodes per replica",
        "example": {
          "architecture": "x86",
          "maxInstanceAggregateThroughputMBps": 250,
          "maxSanAggregateThroughputMBps": 400,
          "memoryMiB": 1024,
          "tuning": "CPU_OPTIMIZED|STORAGE_OPTIMIZED|MEMORY_OPTIMIZED|NETWORK_OPTIMIZED|BALANCED",
          "virtualCores": 4
        },
        "required": [
          "architecture",
          "virtualCores",
          "memoryMiB",
          "maxInstanceAggregateThroughputMBps",
          "maxSanAggregateThroughputMBps"
        ]
      },
      "ConsumptionServiceAuthRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "example": "Et autem soluta voluptatem."
          },
          "username": {
            "type": "string",
            "example": "Unde et."
          }
        },
        "example": {
          "password": "Voluptas maiores repellat.",
          "username": "Necessitatibus aspernatur mollitia tenetur et ipsam."
        },
        "required": ["username", "password"]
      },
      "ConsumptionServiceAuthResult": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "c5",
            "minLength": 1
          }
        },
        "example": {
          "token": "2"
        },
        "required": ["token"]
      },
      "ContactusRequest": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "example": "ABC",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "message": {
            "type": "string",
            "example": "this is a test",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "minLength": 1
          }
        },
        "example": {
          "company": "ABC",
          "email": "abc@gmail.com",
          "message": "this is a test",
          "name": "John Doe"
        },
        "required": ["name", "email", "company", "message"]
      },
      "CopyProductTierRequest": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "awsRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Ut magnam dolorem hic ab."
            },
            "description": "The AWS regions that this product tier is available on",
            "example": ["us-east-2", "ca-central-1"]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the product tier",
            "example": "A premium product tier"
          },
          "documentation": {
            "type": "string",
            "description": "Documentation",
            "example": "Any documentation"
          },
          "gcpRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Voluptatem consectetur et aut sequi."
            },
            "description": "The GCP regions that this product tier is available on",
            "example": ["us-central1"]
          },
          "name": {
            "type": "string",
            "description": "Name of the product tier",
            "example": "Premium"
          },
          "planDescription": {
            "type": "string",
            "description": "A brief description for the end user of the product tier",
            "example": "A premium plan"
          },
          "pricing": {
            "description": "Pricing",
            "example": {
              "price1": "value1"
            }
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceModelId": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Eveniet rerum voluptas deserunt adipisci."
          },
          "sourceId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Nihil culpa quia architecto occaecati ullam beatae."
          },
          "support": {
            "type": "string",
            "description": "Support",
            "example": "Any support"
          },
          "targetTierType": {
            "type": "string",
            "description": "ProductTierType is the type of tier for a product",
            "example": "OMNISTRATE_DEDICATED_TENANCY|OMNISTRATE_MULTI_TENANCY|CUSTOM_TENANCY"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "wqw",
            "minLength": 1
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "awsRegions": ["us-east-2", "ca-central-1"],
          "description": "A premium product tier",
          "documentation": "Any documentation",
          "gcpRegions": ["us-central1"],
          "name": "Premium",
          "planDescription": "A premium plan",
          "pricing": {
            "price1": "value1"
          },
          "serviceId": "s-12345678",
          "serviceModelId": "sm-12345678",
          "sourceId": "pt-12345678",
          "support": "Any support",
          "targetTierType": "OMNISTRATE_DEDICATED_TENANCY",
          "token": "dd"
        },
        "required": ["token", "sourceId", "name", "description", "serviceModelId", "serviceId"]
      },
      "CopyProductTierRequest2": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "awsRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Nulla at voluptas harum blanditiis."
            },
            "description": "The AWS regions that this product tier is available on",
            "example": ["us-east-2", "ca-central-1"]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the product tier",
            "example": "A premium product tier"
          },
          "documentation": {
            "type": "string",
            "description": "Documentation",
            "example": "Any documentation"
          },
          "gcpRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Aliquam quam."
            },
            "description": "The GCP regions that this product tier is available on",
            "example": ["us-central1"]
          },
          "name": {
            "type": "string",
            "description": "Name of the product tier",
            "example": "Premium"
          },
          "planDescription": {
            "type": "string",
            "description": "A brief description for the end user of the product tier",
            "example": "A premium plan"
          },
          "pricing": {
            "description": "Pricing",
            "example": {
              "price1": "value1"
            }
          },
          "serviceModelId": {
            "type": "string",
            "description": "Service model ID",
            "example": "sm-12345678"
          },
          "support": {
            "type": "string",
            "description": "Support",
            "example": "Any support"
          },
          "targetTierType": {
            "type": "string",
            "description": "Tier type",
            "example": "OMNISTRATE_DEDICATED_TENANCY"
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "awsRegions": ["us-east-2", "ca-central-1"],
          "description": "A premium product tier",
          "documentation": "Any documentation",
          "gcpRegions": ["us-central1"],
          "name": "Premium",
          "planDescription": "A premium plan",
          "pricing": {
            "price1": "value1"
          },
          "serviceModelId": "sm-12345678",
          "support": "Any support",
          "targetTierType": "OMNISTRATE_DEDICATED_TENANCY"
        },
        "required": ["name", "description", "serviceModelId"]
      },
      "CopyServiceModelRequest": {
        "type": "object",
        "properties": {
          "accountConfigIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Account Config",
              "example": "Alias ipsa quia doloribus non non."
            },
            "description": "The infrastructure account configuration ID list",
            "example": ["ac-12345678", "ac-23456789"]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service model",
            "example": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceModelFeatureDetail"
            },
            "description": "Enabled service model features",
            "example": [
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              },
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              },
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Model",
            "example": "MySQL multi-writer service hosted model"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "sourceId": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Voluptatum perferendis soluta."
          },
          "targetServiceModelType": {
            "type": "string",
            "description": "The model type encapsulating this service",
            "example": "OMNISTRATE_HOSTED|CUSTOMER_HOSTED|BYOA"
          },
          "targetTierType": {
            "type": "string",
            "description": "ProductTierType is the type of tier for a product",
            "example": "OMNISTRATE_DEDICATED_TENANCY|OMNISTRATE_MULTI_TENANCY|CUSTOM_TENANCY"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "fs4",
            "minLength": 1
          }
        },
        "example": {
          "accountConfigIds": ["ac-12345678", "ac-23456789"],
          "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
          "features": [
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            },
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            },
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            },
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            }
          ],
          "name": "MySQL multi-writer service hosted model",
          "serviceId": "s-12345678",
          "sourceId": "sm-12345678",
          "targetServiceModelType": "CUSTOMER_HOSTED",
          "targetTierType": "OMNISTRATE_DEDICATED_TENANCY",
          "token": "o1g"
        },
        "required": ["token", "sourceId", "name", "description", "serviceId", "targetServiceModelType"]
      },
      "CopyServiceModelRequest2": {
        "type": "object",
        "properties": {
          "accountConfigIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Ab modi quos id."
            },
            "description": "The infrastructure account configuration ID list",
            "example": ["ac-12345678", "ac-23456789"]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service model",
            "example": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceModelFeatureDetail"
            },
            "description": "Enabled service model features",
            "example": [
              {
                "configuration": {
                  "Sapiente ut.": "Ut qui eligendi odit."
                },
                "feature": "Quia quas saepe sequi quidem facere."
              },
              {
                "configuration": {
                  "Sapiente ut.": "Ut qui eligendi odit."
                },
                "feature": "Quia quas saepe sequi quidem facere."
              }
            ]
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Model",
            "example": "MySQL multi-writer service hosted model"
          },
          "targetServiceModelType": {
            "type": "string",
            "description": "The model type encapsulating this service",
            "example": "CUSTOMER_HOSTED"
          },
          "targetTierType": {
            "type": "string",
            "description": "Target product tier type",
            "example": "OMNISTRATE_DEDICATED_TENANCY"
          }
        },
        "example": {
          "accountConfigIds": ["ac-12345678", "ac-23456789"],
          "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
          "features": [
            {
              "configuration": {
                "Sapiente ut.": "Ut qui eligendi odit."
              },
              "feature": "Quia quas saepe sequi quidem facere."
            },
            {
              "configuration": {
                "Sapiente ut.": "Ut qui eligendi odit."
              },
              "feature": "Quia quas saepe sequi quidem facere."
            },
            {
              "configuration": {
                "Sapiente ut.": "Ut qui eligendi odit."
              },
              "feature": "Quia quas saepe sequi quidem facere."
            },
            {
              "configuration": {
                "Sapiente ut.": "Ut qui eligendi odit."
              },
              "feature": "Quia quas saepe sequi quidem facere."
            }
          ],
          "name": "MySQL multi-writer service hosted model",
          "targetServiceModelType": "CUSTOMER_HOSTED",
          "targetTierType": "OMNISTRATE_DEDICATED_TENANCY"
        },
        "required": ["name", "description", "targetServiceModelType"]
      },
      "CreateAccountConfigRequest": {
        "type": "object",
        "properties": {
          "awsAccessKey": {
            "type": "string",
            "description": "The AWS access key",
            "example": "Delectus libero."
          },
          "awsAccountID": {
            "type": "string",
            "description": "The AWS account ID",
            "example": "123456789012"
          },
          "awsBootstrapRoleARN": {
            "type": "string",
            "description": "The security role ARN or service account ARN that grants access to operate the infra",
            "example": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>"
          },
          "awsSecretKey": {
            "type": "string",
            "description": "The AWS secret key",
            "example": "Dolores velit et velit tempore sed cumque."
          },
          "byoaInstanceID": {
            "type": "string",
            "description": "The BYOA instance ID that this account config is tied to",
            "example": "instance-12345678"
          },
          "cloudProviderId": {
            "type": "string",
            "description": "ID of an CloudProvider",
            "example": "Omnis non qui fuga occaecati architecto omnis."
          },
          "description": {
            "type": "string",
            "description": "The description for the account",
            "example": "An AWS account hosting multiple dev environments"
          },
          "gcpProjectID": {
            "type": "string",
            "description": "The GCP project ID",
            "example": "my-project"
          },
          "gcpProjectNumber": {
            "type": "string",
            "description": "The GCP project number",
            "example": "123456789012"
          },
          "gcpServiceAccountEmail": {
            "type": "string",
            "description": "The GCP service account email",
            "example": "bootstrap@my-project.iam.gserviceaccount.com"
          },
          "gcpServiceAccountKey": {
            "type": "string",
            "description": "The GCP service account key",
            "example": "Consequatur quasi dignissimos inventore error."
          },
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Dev AWS account"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "r",
            "minLength": 1
          }
        },
        "description": "Account configuration including the role required to access",
        "example": {
          "awsAccessKey": "Ut repellendus.",
          "awsAccountID": "123456789012",
          "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
          "awsSecretKey": "Consequatur aliquid pariatur consequuntur nam optio ut.",
          "byoaInstanceID": "instance-12345678",
          "cloudProviderId": "infra-12345678",
          "description": "An AWS account hosting multiple dev environments",
          "gcpProjectID": "my-project",
          "gcpProjectNumber": "123456789012",
          "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
          "gcpServiceAccountKey": "Quia consequatur voluptate et ex error.",
          "name": "Dev AWS account",
          "token": "g8"
        },
        "required": ["token", "name", "description", "cloudProviderId"]
      },
      "CreateAccountConfigRequest2": {
        "type": "object",
        "properties": {
          "awsAccessKey": {
            "type": "string",
            "description": "The AWS access key",
            "example": "Perspiciatis nobis est enim est dolorem facilis."
          },
          "awsAccountID": {
            "type": "string",
            "description": "The AWS account ID",
            "example": "123456789012"
          },
          "awsBootstrapRoleARN": {
            "type": "string",
            "description": "The security role ARN or service account ARN that grants access to operate the infra",
            "example": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>"
          },
          "awsSecretKey": {
            "type": "string",
            "description": "The AWS secret key",
            "example": "Et expedita aut."
          },
          "byoaInstanceID": {
            "type": "string",
            "description": "The BYOA instance ID that this account config is tied to",
            "example": "instance-12345678"
          },
          "cloudProviderId": {
            "type": "string",
            "description": "Cloud Provider ID to operate on",
            "example": "infra-12345678"
          },
          "description": {
            "type": "string",
            "description": "The description for the account",
            "example": "An AWS account hosting multiple dev environments"
          },
          "gcpProjectID": {
            "type": "string",
            "description": "The GCP project ID",
            "example": "my-project"
          },
          "gcpProjectNumber": {
            "type": "string",
            "description": "The GCP project number",
            "example": "123456789012"
          },
          "gcpServiceAccountEmail": {
            "type": "string",
            "description": "The GCP service account email",
            "example": "bootstrap@my-project.iam.gserviceaccount.com"
          },
          "gcpServiceAccountKey": {
            "type": "string",
            "description": "The GCP service account key",
            "example": "Dolores voluptate ut est earum."
          },
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Dev AWS account"
          }
        },
        "example": {
          "awsAccessKey": "Qui reiciendis praesentium placeat voluptas sit provident.",
          "awsAccountID": "123456789012",
          "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
          "awsSecretKey": "Harum laudantium autem laborum.",
          "byoaInstanceID": "instance-12345678",
          "cloudProviderId": "infra-12345678",
          "description": "An AWS account hosting multiple dev environments",
          "gcpProjectID": "my-project",
          "gcpProjectNumber": "123456789012",
          "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
          "gcpServiceAccountKey": "Animi sit adipisci et qui ut neque.",
          "name": "Dev AWS account"
        },
        "required": ["name", "description", "cloudProviderId"]
      },
      "CreateComputeConfigRequest": {
        "type": "object",
        "properties": {
          "autoscalingPolicy": {
            "$ref": "#/components/schemas/AutoscalingPolicy"
          },
          "cpuArchitecture": {
            "type": "string",
            "description": "Processor architecture",
            "example": "X86_64|ARM64"
          },
          "description": {
            "type": "string",
            "description": "Description of the compute config",
            "example": "my compute config description",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the compute config",
            "example": "my compute config",
            "minLength": 1
          },
          "replicaCount": {
            "type": "string",
            "description": "Number of replicas to provision for this logical pool of nodes per instance of the resource",
            "example": "3"
          },
          "resources": {
            "$ref": "#/components/schemas/ResourceSpec"
          },
          "rootVolumeSizeGi": {
            "type": "integer",
            "description": "Size of the root volume in Gi",
            "example": 10,
            "format": "int64"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "y",
            "minLength": 1
          },
          "warmPoolConfiguration": {
            "$ref": "#/components/schemas/WarmPoolConfiguration"
          }
        },
        "example": {
          "autoscalingPolicy": {
            "maxReplicas": 4,
            "minReplicas": 1
          },
          "cpuArchitecture": "X86_64|ARM64",
          "description": "my compute config description",
          "name": "my compute config",
          "replicaCount": "3",
          "resources": {
            "limits": {
              "cpu": "1",
              "memory": "500Mi"
            },
            "requests": {
              "cpu": "0.5",
              "memory": "200Mi"
            }
          },
          "rootVolumeSizeGi": 10,
          "serviceId": "s-12345678",
          "token": "zn",
          "warmPoolConfiguration": {
            "minimumNodesInPool": 1
          }
        },
        "required": ["token", "name", "description", "serviceId"]
      },
      "CreateComputeConfigRequest2": {
        "type": "object",
        "properties": {
          "autoscalingPolicy": {
            "$ref": "#/components/schemas/AutoscalingPolicy"
          },
          "cpuArchitecture": {
            "type": "string",
            "description": "Processor architecture",
            "example": "X86_64|ARM64"
          },
          "description": {
            "type": "string",
            "description": "Description of the compute config",
            "example": "my compute config description",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the compute config",
            "example": "my compute config",
            "minLength": 1
          },
          "replicaCount": {
            "type": "string",
            "description": "Number of replicas to provision for this logical pool of nodes per instance of the resource",
            "example": "3"
          },
          "resources": {
            "$ref": "#/components/schemas/ResourceSpec"
          },
          "rootVolumeSizeGi": {
            "type": "integer",
            "description": "Size of the root volume in Gi",
            "example": 10,
            "format": "int64"
          },
          "warmPoolConfiguration": {
            "$ref": "#/components/schemas/WarmPoolConfiguration"
          }
        },
        "example": {
          "autoscalingPolicy": {
            "maxReplicas": 4,
            "minReplicas": 1
          },
          "cpuArchitecture": "X86_64|ARM64",
          "description": "my compute config description",
          "name": "my compute config",
          "replicaCount": "3",
          "resources": {
            "limits": {
              "cpu": "1",
              "memory": "500Mi"
            },
            "requests": {
              "cpu": "0.5",
              "memory": "200Mi"
            }
          },
          "rootVolumeSizeGi": 10,
          "warmPoolConfiguration": {
            "minimumNodesInPool": 1
          }
        },
        "required": ["name", "description"]
      },
      "CreateCustomDomainRequest": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "The root domain of the domain to use as suffix",
            "example": "mydomain.dev"
          },
          "description": {
            "type": "string",
            "description": "The description for the domain",
            "example": "Description of the domain"
          },
          "name": {
            "type": "string",
            "description": "The name of the custom domain",
            "example": "Dev domain"
          },
          "route53Configuration": {
            "$ref": "#/components/schemas/Route53Configuration"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "7i",
            "minLength": 1
          }
        },
        "description": "Custom domain including the role required to access",
        "example": {
          "customDomain": "mydomain.dev",
          "description": "Description of the domain",
          "name": "Dev domain",
          "route53Configuration": {
            "awsAccountID": "123456789012"
          },
          "token": "f"
        },
        "required": ["token", "name", "description", "customDomain", "route53Configuration"]
      },
      "CreateCustomDomainRequest2": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "The root domain of the domain to use as suffix",
            "example": "mydomain.dev"
          },
          "description": {
            "type": "string",
            "description": "The description for the domain",
            "example": "Description of the domain"
          },
          "name": {
            "type": "string",
            "description": "The name of the custom domain",
            "example": "Dev domain"
          },
          "route53Configuration": {
            "$ref": "#/components/schemas/Route53Configuration"
          }
        },
        "example": {
          "customDomain": "mydomain.dev",
          "description": "Description of the domain",
          "name": "Dev domain",
          "route53Configuration": {
            "awsAccountID": "123456789012"
          }
        },
        "required": ["name", "description", "customDomain", "route53Configuration"]
      },
      "CreateCustomNetworkRequest": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string",
            "description": "CIDR block for the network",
            "default": "10.0.0.0/16",
            "example": "10.0.0.0/16",
            "format": "cidr"
          },
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "cloudProviderRegion": {
            "type": "string",
            "description": "The region of the cloud provider that the instance is running in.",
            "example": "us-east-1"
          },
          "name": {
            "type": "string",
            "description": "User friendly network name to help distinguish networks with same CIDRs",
            "example": "Prod us-east-1"
          },
          "networkFeaturesConfiguration": {
            "$ref": "#/components/schemas/NetworkFeaturesConfiguration"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "j",
            "minLength": 1
          }
        },
        "example": {
          "cidr": "10.0.0.0/16",
          "cloudProviderName": "aws",
          "cloudProviderRegion": "us-east-1",
          "name": "Prod us-east-1",
          "networkFeaturesConfiguration": {
            "isPrivateLinkEnabled": false
          },
          "token": "tq"
        },
        "required": ["token", "cloudProviderName", "cloudProviderRegion"]
      },
      "CreateCustomNetworkRequest2": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string",
            "description": "CIDR block for the network",
            "default": "10.0.0.0/16",
            "example": "10.0.0.0/16",
            "format": "cidr"
          },
          "cloudProviderName": {
            "type": "string",
            "description": "The name of the cloud provider that the instance is running on.",
            "example": "aws"
          },
          "cloudProviderRegion": {
            "type": "string",
            "description": "The region of the cloud provider that the instance is running in.",
            "example": "us-east-1"
          },
          "name": {
            "type": "string",
            "description": "User friendly network name to help distinguish networks with same CIDRs",
            "example": "Prod us-east-1"
          },
          "networkFeaturesConfiguration": {
            "$ref": "#/components/schemas/NetworkFeaturesConfiguration"
          }
        },
        "example": {
          "cidr": "10.0.0.0/16",
          "cloudProviderName": "aws",
          "cloudProviderRegion": "us-east-1",
          "name": "Prod us-east-1",
          "networkFeaturesConfiguration": {
            "isPrivateLinkEnabled": false
          }
        },
        "required": ["cloudProviderName", "cloudProviderRegion"]
      },
      "CreateDeploymentConfigRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the deployment config",
            "example": "A production deployment config"
          },
          "infraRollConfiguration": {
            "$ref": "#/components/schemas/InfraRollConfiguration"
          },
          "name": {
            "type": "string",
            "description": "Name of the deployment config",
            "example": "Production"
          },
          "rolloutPriorityList": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Region",
              "example": "Ipsum sit aut omnis in et optio."
            },
            "example": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"]
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "ym",
            "minLength": 1
          }
        },
        "example": {
          "description": "A production deployment config",
          "infraRollConfiguration": {
            "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
            "maximumNumberOfResourceInstancesPerBatch": 1,
            "maximumUnavailableReplicas": 1
          },
          "name": "Production",
          "rolloutPriorityList": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"],
          "token": "v"
        },
        "required": ["token", "name", "description"]
      },
      "CreateDeploymentConfigRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the deployment config",
            "example": "A production deployment config"
          },
          "infraRollConfiguration": {
            "$ref": "#/components/schemas/InfraRollConfiguration"
          },
          "name": {
            "type": "string",
            "description": "Name of the deployment config",
            "example": "Production"
          },
          "rolloutPriorityList": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Distinctio dolor et sit reiciendis beatae."
            },
            "example": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"]
          }
        },
        "example": {
          "description": "A production deployment config",
          "infraRollConfiguration": {
            "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
            "maximumNumberOfResourceInstancesPerBatch": 1,
            "maximumUnavailableReplicas": 1
          },
          "name": "Production",
          "rolloutPriorityList": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"]
        },
        "required": ["name", "description"]
      },
      "CreateIdentityProviderRequest": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The Client ID of the Identity Provider",
            "example": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com"
          },
          "clientSecret": {
            "type": "string",
            "description": "The Client Secret of the Identity Provider",
            "example": "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"
          },
          "identityProviderName": {
            "type": "string",
            "description": "The name of the identity provider",
            "example": "Google|GitHub|Google for CTL|GitHub for CTL"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "6",
            "minLength": 1
          }
        },
        "example": {
          "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
          "clientSecret": "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",
          "identityProviderName": "Google",
          "token": "x"
        },
        "required": ["token", "identityProviderName", "clientId", "clientSecret"]
      },
      "CreateIdentityProviderRequest2": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The Client ID of the Identity Provider",
            "example": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com"
          },
          "clientSecret": {
            "type": "string",
            "description": "The Client Secret of the Identity Provider",
            "example": "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"
          },
          "identityProviderName": {
            "type": "string",
            "description": "The name of the Identity Provider",
            "example": "Google"
          }
        },
        "example": {
          "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
          "clientSecret": "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",
          "identityProviderName": "Google"
        },
        "required": ["identityProviderName", "clientId", "clientSecret"]
      },
      "CreateImageConfigRequest": {
        "type": "object",
        "properties": {
          "customImageCommandsAndArgs": {
            "$ref": "#/components/schemas/CustomImageCommandsAndArgs"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the image configuration",
            "example": "A image configuration for my new entity"
          },
          "imageName": {
            "type": "string",
            "description": "Name of the container image",
            "example": "mysql",
            "minLength": 1
          },
          "imageRegistryId": {
            "type": "string",
            "description": "ID of an Image Registry",
            "example": "Itaque amet ut ullam ratione."
          },
          "imageSignaturePublicKeyPEM": {
            "type": "string",
            "description": "PEM-encoded Public key part of the key used to sign the container image",
            "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n"
          },
          "imageTag": {
            "type": "string",
            "description": "Tag representing the specific software image version",
            "default": "latest",
            "example": "latest"
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "wpz",
            "minLength": 1
          }
        },
        "description": "Create the image configuration required to bring up a new entity",
        "example": {
          "customImageCommandsAndArgs": {
            "args": ["-d", "mysql"],
            "commands": ["echo", "Hello, World!"]
          },
          "description": "A image configuration for my new entity",
          "imageName": "mysql",
          "imageRegistryId": "ir-12345678",
          "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
          "imageTag": "latest",
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "token": "fm"
        },
        "required": ["token", "imageName", "serviceEnvironmentId", "description", "serviceId"]
      },
      "CreateImageConfigRequest2": {
        "type": "object",
        "properties": {
          "customImageCommandsAndArgs": {
            "$ref": "#/components/schemas/CustomImageCommandsAndArgs"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the image configuration",
            "example": "A image configuration for my new entity"
          },
          "imageName": {
            "type": "string",
            "description": "Name of the container image",
            "example": "mysql",
            "minLength": 1
          },
          "imageRegistryId": {
            "type": "string",
            "description": "The image registry ID to use for the infra",
            "example": "ir-12345678"
          },
          "imageSignaturePublicKeyPEM": {
            "type": "string",
            "description": "PEM-encoded Public key part of the key used to sign the container image",
            "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n"
          },
          "imageTag": {
            "type": "string",
            "description": "Tag representing the specific software image version",
            "default": "latest",
            "example": "latest"
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "The service environment ID",
            "example": "se-12345678"
          }
        },
        "example": {
          "customImageCommandsAndArgs": {
            "args": ["-d", "mysql"],
            "commands": ["echo", "Hello, World!"]
          },
          "description": "A image configuration for my new entity",
          "imageName": "mysql",
          "imageRegistryId": "ir-12345678",
          "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
          "imageTag": "latest",
          "serviceEnvironmentId": "se-12345678"
        },
        "required": ["imageName", "serviceEnvironmentId", "description"]
      },
      "CreateImageRegistryRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the Image Registry",
            "example": "DockerHub is a public Docker Image Registry"
          },
          "host": {
            "type": "string",
            "description": "The Image Registry host",
            "example": "docker.io"
          },
          "name": {
            "type": "string",
            "description": "Name of the Image Registry",
            "example": "DockerHub"
          },
          "password": {
            "type": "string",
            "description": "The password to use when authenticating to the Image Registry",
            "example": "mypassword"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "noa",
            "minLength": 1
          },
          "username": {
            "type": "string",
            "description": "The username to use when authenticating to the Image Registry",
            "example": "myusername"
          }
        },
        "description": "Create an HTTP API v2 Docker Image Registry",
        "example": {
          "description": "DockerHub is a public Docker Image Registry",
          "host": "docker.io",
          "name": "DockerHub",
          "password": "mypassword",
          "token": "k",
          "username": "myusername"
        },
        "required": ["token", "name", "description", "host"]
      },
      "CreateImageRegistryRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the Image Registry",
            "example": "DockerHub is a public Docker Image Registry"
          },
          "host": {
            "type": "string",
            "description": "The Image Registry host",
            "example": "docker.io"
          },
          "name": {
            "type": "string",
            "description": "Name of the Image Registry",
            "example": "DockerHub"
          },
          "password": {
            "type": "string",
            "description": "The password to use when authenticating to the Image Registry",
            "example": "mypassword"
          },
          "username": {
            "type": "string",
            "description": "The username to use when authenticating to the Image Registry",
            "example": "myusername"
          }
        },
        "example": {
          "description": "DockerHub is a public Docker Image Registry",
          "host": "docker.io",
          "name": "DockerHub",
          "password": "mypassword",
          "username": "myusername"
        },
        "required": ["name", "description", "host"]
      },
      "CreateInfraConfigRequest": {
        "type": "object",
        "properties": {
          "computeConfigId": {
            "type": "string",
            "description": "ID of a Compute Config",
            "example": "Sunt maxime atque numquam."
          },
          "customTag": {
            "$ref": "#/components/schemas/CustomTag"
          },
          "description": {
            "type": "string",
            "description": "The description for the infra config",
            "example": "Infra config used for the base tier MySQL service"
          },
          "name": {
            "type": "string",
            "description": "The name of the infra config",
            "example": "MySQL Writer Infra Config"
          },
          "networkConfigId": {
            "type": "string",
            "description": "ID of a Network Config",
            "example": "Amet ut."
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "storageConfigId": {
            "type": "string",
            "description": "ID of a Storage Config",
            "example": "Ipsa aspernatur quis consequatur assumenda et."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "kzx",
            "minLength": 1
          }
        },
        "description": "Create the infra required to host a resource",
        "example": {
          "computeConfigId": "cc-12345678",
          "customTag": {
            "key": "customKey",
            "value": "customValue"
          },
          "description": "Infra config used for the base tier MySQL service",
          "name": "MySQL Writer Infra Config",
          "networkConfigId": "nc-12345678",
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "storageConfigId": "sc-12345678",
          "token": "xt"
        },
        "required": ["token", "name", "description", "serviceId", "serviceEnvironmentId"]
      },
      "CreateInfraConfigRequest2": {
        "type": "object",
        "properties": {
          "computeConfigId": {
            "type": "string",
            "description": "The compute config ID",
            "example": "cc-12345678"
          },
          "customTag": {
            "$ref": "#/components/schemas/CustomTag"
          },
          "description": {
            "type": "string",
            "description": "The description for the infra config",
            "example": "Infra config used for the base tier MySQL service"
          },
          "name": {
            "type": "string",
            "description": "The name of the infra config",
            "example": "MySQL Writer Infra Config"
          },
          "networkConfigId": {
            "type": "string",
            "description": "The network config ID",
            "example": "nc-12345678"
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "The service environment ID",
            "example": "se-12345678"
          },
          "storageConfigId": {
            "type": "string",
            "description": "The storage config ID",
            "example": "sc-12345678"
          }
        },
        "example": {
          "computeConfigId": "cc-12345678",
          "customTag": {
            "key": "customKey",
            "value": "customValue"
          },
          "description": "Infra config used for the base tier MySQL service",
          "name": "MySQL Writer Infra Config",
          "networkConfigId": "nc-12345678",
          "serviceEnvironmentId": "se-12345678",
          "storageConfigId": "sc-12345678"
        },
        "required": ["name", "description", "serviceEnvironmentId"]
      },
      "CreateInputParameterRequest": {
        "type": "object",
        "properties": {
          "defaultValue": {
            "type": "string",
            "description": "Default value to use for an optional input parameter represented as a string",
            "example": "default value"
          },
          "dependentResourceId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Tempora illo ex."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the input parameter",
            "example": "Tempora omnis voluptatem et at."
          },
          "hasOptions": {
            "type": "boolean",
            "description": "Marks the input parameter to be selectable from a list of values",
            "default": false,
            "example": false
          },
          "isList": {
            "type": "boolean",
            "description": "Marks the input parameter as a list of values",
            "default": false,
            "example": true
          },
          "key": {
            "type": "string",
            "description": "Key of the input parameter",
            "example": "x",
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
            "minLength": 1
          },
          "labeledOptions": {
            "type": "object",
            "description": "A map for labeled options. The key is the label and the value is the option. When the option is selected, the label will be displayed to the end customer. Specify either options or labeledOptions when defining the input parameter.",
            "example": {
              "large": "t3.xlarge",
              "medium": "t3.large",
              "small": "t3.medium"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Accusantium vel illo veniam dolor quis aspernatur."
            }
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          },
          "modifiable": {
            "type": "boolean",
            "description": "Marks the input parameter as immutable",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "External name for the input parameter",
            "example": "2",
            "minLength": 1
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Ratione excepturi quas voluptatem fuga."
            },
            "description": "A list of options to restrict the value of the input parameter to (represented as a string)",
            "example": ["a", "b", "c", "default value"]
          },
          "required": {
            "type": "boolean",
            "description": "Enforces the input parameter as a required parameter",
            "example": false
          },
          "resourceId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Adipisci error."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "hb",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "description": "Type of the variable encoding the value",
            "example": "Boolean|Float64|String|Resource|Secret|Password"
          }
        },
        "example": {
          "defaultValue": "default value",
          "dependentResourceId": "r-12345678",
          "description": "Quia sint accusamus non qui beatae.",
          "hasOptions": true,
          "isList": false,
          "key": "6id",
          "labeledOptions": {
            "large": "t3.xlarge",
            "medium": "t3.large",
            "small": "t3.medium"
          },
          "limits": {
            "max": "Iure distinctio rerum provident iure eligendi facilis.",
            "maxLength": "Aspernatur enim veritatis ab et veniam.",
            "min": "Nihil hic sit.",
            "minLength": "Incidunt quibusdam et atque quia sed."
          },
          "modifiable": true,
          "name": "p",
          "options": ["a", "b", "c", "default value"],
          "required": true,
          "resourceId": "r-12345678",
          "serviceId": "s-12345678",
          "token": "sl",
          "type": "Boolean|Float64|String|Resource|Secret|Password"
        },
        "required": ["token", "key", "description", "resourceId", "type", "name", "required", "modifiable", "serviceId"]
      },
      "CreateInputParameterRequest2": {
        "type": "object",
        "properties": {
          "defaultValue": {
            "type": "string",
            "description": "Default value to use for an optional input parameter represented as a string",
            "example": "default value"
          },
          "dependentResourceId": {
            "type": "string",
            "description": "The ID of the resource whose instance this input parameter depends on",
            "example": "r-12345678"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the input parameter",
            "example": "Fugiat reprehenderit sit."
          },
          "hasOptions": {
            "type": "boolean",
            "description": "Marks the input parameter to be selectable from a list of values",
            "default": false,
            "example": true
          },
          "isList": {
            "type": "boolean",
            "description": "Marks the input parameter as a list of values",
            "default": false,
            "example": true
          },
          "key": {
            "type": "string",
            "description": "Key of the input parameter",
            "example": "b",
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
            "minLength": 1
          },
          "labeledOptions": {
            "type": "object",
            "description": "A map for labeled options. The key is the label and the value is the option. When the option is selected, the label will be displayed to the end customer. Specify either options or labeledOptions when defining the input parameter.",
            "example": {
              "large": "t3.xlarge",
              "medium": "t3.large",
              "small": "t3.medium"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Asperiores dolorum et distinctio."
            }
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          },
          "modifiable": {
            "type": "boolean",
            "description": "Marks the input parameter as immutable",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "External name for the input parameter",
            "example": "a9f",
            "minLength": 1
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Sunt maiores facere quos quibusdam."
            },
            "description": "A list of options to restrict the value of the input parameter to (represented as a string)",
            "example": ["a", "b", "c", "default value"]
          },
          "required": {
            "type": "boolean",
            "description": "Enforces the input parameter as a required parameter",
            "example": false
          },
          "resourceId": {
            "type": "string",
            "description": "The ID of the resource that this input parameter belongs to",
            "example": "r-12345678"
          },
          "type": {
            "type": "string",
            "example": "In asperiores repellendus."
          }
        },
        "example": {
          "defaultValue": "default value",
          "dependentResourceId": "r-12345678",
          "description": "Et quaerat nobis autem.",
          "hasOptions": false,
          "isList": true,
          "key": "rfa",
          "labeledOptions": {
            "large": "t3.xlarge",
            "medium": "t3.large",
            "small": "t3.medium"
          },
          "limits": {
            "max": "Sit explicabo delectus aut nisi consequuntur.",
            "maxLength": "Sunt amet provident.",
            "min": "Cumque temporibus dolores vitae dolores doloremque illum.",
            "minLength": "Qui odio laudantium illum."
          },
          "modifiable": true,
          "name": "4",
          "options": ["a", "b", "c", "default value"],
          "required": false,
          "resourceId": "r-12345678",
          "type": "Velit quia recusandae."
        },
        "required": ["key", "description", "resourceId", "type", "name", "required", "modifiable"]
      },
      "CreateNetworkConfigRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the network config",
            "example": "A multi-zone HA network config"
          },
          "endpointPerReplica": {
            "type": "boolean",
            "description": "Generates a DNS endpoint per-replica for this network config",
            "example": true
          },
          "internal": {
            "type": "boolean",
            "description": "Restrict access to this network config to the internal network",
            "default": false,
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Name of the network config",
            "example": "Multi-zone"
          },
          "openPorts": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 8442504327180392000,
              "format": "int64"
            },
            "description": "Ports to map to the generated DNS endpoint",
            "example": [1299, 3306]
          },
          "privateNetworkingConfiguration": {
            "$ref": "#/components/schemas/PrivateNetworkingConfiguration"
          },
          "publicNetworkingConfiguration": {
            "$ref": "#/components/schemas/PublicNetworkingConfiguration"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "stableEgressIP": {
            "type": "boolean",
            "description": "Enable stable egress IP",
            "example": true
          },
          "tlsTerminationPort": {
            "type": "integer",
            "description": "The port that hosts the reverse proxy for TLS termination",
            "example": 443,
            "format": "int64"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "i3b",
            "minLength": 1
          },
          "zoneConfiguration": {
            "type": "string",
            "description": "The preferred type of zonal availability for this resource and the specific zone(s) to deploy in",
            "example": "SINGLE_ZONE_OMNISTRATE_RECOMMENDED|SINGLE_ZONE_CUSTOMER_PROVIDED|MULTI_ZONE"
          }
        },
        "example": {
          "description": "A multi-zone HA network config",
          "endpointPerReplica": true,
          "internal": true,
          "name": "Multi-zone",
          "openPorts": [1299, 3306],
          "privateNetworkingConfiguration": {
            "privateLinkConfiguration": {
              "awsPrivateLinkConfigurations": [
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                },
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                }
              ]
            }
          },
          "publicNetworkingConfiguration": {
            "enableClusterLoadBalancer": true,
            "enableNodeLoadBalancer": true
          },
          "serviceId": "s-12345678",
          "stableEgressIP": true,
          "tlsTerminationPort": 443,
          "token": "sc",
          "zoneConfiguration": "SINGLE_ZONE_OMNISTRATE_RECOMMENDED|SINGLE_ZONE_CUSTOMER_PROVIDED|MULTI_ZONE"
        },
        "required": ["token", "name", "description", "serviceId", "endpointPerReplica"]
      },
      "CreateNetworkConfigRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the network config",
            "example": "A multi-zone HA network config"
          },
          "endpointPerReplica": {
            "type": "boolean",
            "description": "Generates a DNS endpoint per-replica for this network config",
            "example": true
          },
          "internal": {
            "type": "boolean",
            "description": "Restrict access to this network config to the internal network",
            "default": false,
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Name of the network config",
            "example": "Multi-zone"
          },
          "openPorts": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 6556853094788488000,
              "format": "int64"
            },
            "description": "Ports to map to the generated DNS endpoint",
            "example": [1299, 3306]
          },
          "privateNetworkingConfiguration": {
            "$ref": "#/components/schemas/PrivateNetworkingConfiguration"
          },
          "publicNetworkingConfiguration": {
            "$ref": "#/components/schemas/PublicNetworkingConfiguration"
          },
          "stableEgressIP": {
            "type": "boolean",
            "description": "Enable stable egress IP",
            "example": true
          },
          "tlsTerminationPort": {
            "type": "integer",
            "description": "The port that hosts the reverse proxy for TLS termination",
            "example": 443,
            "format": "int64"
          },
          "zoneConfiguration": {
            "type": "string",
            "description": "The preferred type of zonal availability for this resource and the specific zone(s) to deploy in",
            "example": "Repellendus facere quibusdam ab quia molestias dolorum."
          }
        },
        "example": {
          "description": "A multi-zone HA network config",
          "endpointPerReplica": true,
          "internal": true,
          "name": "Multi-zone",
          "openPorts": [1299, 3306],
          "privateNetworkingConfiguration": {
            "privateLinkConfiguration": {
              "awsPrivateLinkConfigurations": [
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                },
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                },
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                },
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                }
              ]
            }
          },
          "publicNetworkingConfiguration": {
            "enableClusterLoadBalancer": true,
            "enableNodeLoadBalancer": true
          },
          "stableEgressIP": true,
          "tlsTerminationPort": 443,
          "zoneConfiguration": "Et quam corrupti."
        },
        "required": ["name", "description", "endpointPerReplica"]
      },
      "CreateOutputParameterRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the output variable being exported",
            "example": "Username of the user created in the target system",
            "minLength": 1
          },
          "key": {
            "type": "string",
            "description": "Key of the output variable being exported",
            "example": "username",
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "External name of the output variable being exported",
            "example": "Username",
            "minLength": 1
          },
          "resourceId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Consequatur doloribus."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "zx",
            "minLength": 1
          },
          "value": {
            "type": "string",
            "description": "Value of the output variable being exported",
            "example": "johndoe"
          },
          "valueRef": {
            "type": "string",
            "description": "Reference to another variable that will be used to set the value of the output variable being exported",
            "example": "$var.username"
          },
          "valueType": {
            "type": "string",
            "description": "Type of the variable encoding the value",
            "example": "Boolean|Float64|String|Secret|Password"
          }
        },
        "example": {
          "description": "Username of the user created in the target system",
          "key": "username",
          "name": "Username",
          "resourceId": "r-12345678",
          "serviceId": "s-12345678",
          "token": "2y",
          "value": "johndoe",
          "valueRef": "$var.username",
          "valueType": "Boolean|Float64|String|Secret|Password"
        },
        "required": ["token", "key", "description", "name", "resourceId", "serviceId"]
      },
      "CreateOutputParameterRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the output variable being exported",
            "example": "Username of the user created in the target system",
            "minLength": 1
          },
          "key": {
            "type": "string",
            "description": "Key of the output variable being exported",
            "example": "username",
            "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "External name of the output variable being exported",
            "example": "Username",
            "minLength": 1
          },
          "resourceId": {
            "type": "string",
            "description": "The ID of the resource that this output parameter belongs to",
            "example": "r-12345678"
          },
          "value": {
            "type": "string",
            "description": "Value of the output variable being exported",
            "example": "johndoe"
          },
          "valueRef": {
            "type": "string",
            "description": "Reference to another variable that will be used to set the value of the output variable being exported",
            "example": "$var.username"
          },
          "valueType": {
            "type": "string",
            "example": "Ab voluptas temporibus natus delectus."
          }
        },
        "example": {
          "description": "Username of the user created in the target system",
          "key": "username",
          "name": "Username",
          "resourceId": "r-12345678",
          "value": "johndoe",
          "valueRef": "$var.username",
          "valueType": "Repellendus qui molestias officia magnam dolores molestias."
        },
        "required": ["key", "description", "name", "resourceId"]
      },
      "CreatePipelineRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the pipeline",
            "example": "MySQL SaaS promotion pipeline"
          },
          "name": {
            "type": "string",
            "description": "Name of the pipeline",
            "example": "my-pipeline"
          },
          "serviceEnvironmentSequence": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "description": "Sequence of service environments to be deployed in the pipeline",
            "example": ["se-12345678", "se-23456789"]
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "32l",
            "minLength": 1
          }
        },
        "example": {
          "description": "MySQL SaaS promotion pipeline",
          "name": "my-pipeline",
          "serviceEnvironmentSequence": ["se-12345678", "se-23456789"],
          "serviceId": "s-12345678",
          "token": "3"
        },
        "required": ["token", "name", "description", "serviceId", "serviceEnvironmentSequence"]
      },
      "CreateProductTierBillingPlanRequest": {
        "type": "object",
        "properties": {
          "allowCreatesWhenPaymentNotConfigured": {
            "type": "boolean",
            "description": "Allow creates when payment not configured",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Dolorem et nostrum quia."
          },
          "maxNumberofInstances": {
            "type": "integer",
            "description": "Maximum number of instances",
            "example": 5,
            "format": "int64"
          },
          "planName": {
            "type": "string",
            "description": "Plan name",
            "example": "STARTER"
          },
          "pricing": {
            "description": "Pricing in dollars.",
            "example": {
              "cpuCoreHours": "0.001",
              "memoryGiBHours": "0.0001",
              "storageGiBHours": "0.0001"
            }
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "vw",
            "minLength": 1
          }
        },
        "example": {
          "allowCreatesWhenPaymentNotConfigured": true,
          "id": "pt-12345678",
          "maxNumberofInstances": 5,
          "planName": "STARTER",
          "pricing": {
            "cpuCoreHours": "0.001",
            "memoryGiBHours": "0.0001",
            "storageGiBHours": "0.0001"
          },
          "serviceId": "s-12345678",
          "token": "y"
        },
        "required": [
          "token",
          "serviceId",
          "id",
          "planName",
          "pricing",
          "allowCreatesWhenPaymentNotConfigured",
          "maxNumberofInstances"
        ]
      },
      "CreateProductTierBillingPlanRequest2": {
        "type": "object",
        "properties": {
          "allowCreatesWhenPaymentNotConfigured": {
            "type": "boolean",
            "description": "Allow creates when payment not configured",
            "example": true
          },
          "maxNumberofInstances": {
            "type": "integer",
            "description": "Maximum number of instances",
            "example": 5,
            "format": "int64"
          },
          "planName": {
            "type": "string",
            "description": "Plan name",
            "example": "STARTER"
          },
          "pricing": {
            "description": "Pricing in dollars.",
            "example": {
              "cpuCoreHours": "0.001",
              "memoryGiBHours": "0.0001",
              "storageGiBHours": "0.0001"
            }
          }
        },
        "example": {
          "allowCreatesWhenPaymentNotConfigured": true,
          "maxNumberofInstances": 5,
          "planName": "STARTER",
          "pricing": {
            "cpuCoreHours": "0.001",
            "memoryGiBHours": "0.0001",
            "storageGiBHours": "0.0001"
          }
        },
        "required": ["planName", "pricing", "allowCreatesWhenPaymentNotConfigured", "maxNumberofInstances"]
      },
      "CreateProductTierRequest": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "awsRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Asperiores incidunt voluptates accusamus."
            },
            "description": "The AWS regions that this product tier is available on",
            "example": ["us-east-2", "ca-central-1"]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the product tier",
            "example": "A premium product tier"
          },
          "documentation": {
            "type": "string",
            "description": "Documentation",
            "example": "Any documentation"
          },
          "gcpRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Iure quo asperiores."
            },
            "description": "The GCP regions that this product tier is available on",
            "example": ["us-central1"]
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Create the product tier in a disabled state. Enabling the product tier will let end-customers subscribe and use the service plan.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "Name of the product tier",
            "example": "Premium"
          },
          "planDescription": {
            "type": "string",
            "description": "A brief description for the end user of the product tier",
            "example": "A premium plan"
          },
          "pricing": {
            "description": "Pricing",
            "example": {
              "price1": "value1"
            }
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceModelId": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Illum corrupti corporis."
          },
          "support": {
            "type": "string",
            "description": "Support",
            "example": "Any support"
          },
          "tierType": {
            "type": "string",
            "description": "ProductTierType is the type of tier for a product",
            "example": "OMNISTRATE_DEDICATED_TENANCY|OMNISTRATE_MULTI_TENANCY|CUSTOM_TENANCY"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "k0",
            "minLength": 1
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "awsRegions": ["us-east-2", "ca-central-1"],
          "description": "A premium product tier",
          "documentation": "Any documentation",
          "gcpRegions": ["us-central1"],
          "isDisabled": false,
          "name": "Premium",
          "planDescription": "A premium plan",
          "pricing": {
            "price1": "value1"
          },
          "serviceId": "s-12345678",
          "serviceModelId": "sm-12345678",
          "support": "Any support",
          "tierType": "OMNISTRATE_DEDICATED_TENANCY",
          "token": "u"
        },
        "required": ["token", "name", "description", "planDescription", "tierType", "serviceModelId", "serviceId"]
      },
      "CreateProductTierRequest2": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "awsRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Cupiditate quis."
            },
            "description": "The AWS regions that this product tier is available on",
            "example": ["us-east-2", "ca-central-1"]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the product tier",
            "example": "A premium product tier"
          },
          "documentation": {
            "type": "string",
            "description": "Documentation",
            "example": "Any documentation"
          },
          "gcpRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Ut fugit."
            },
            "description": "The GCP regions that this product tier is available on",
            "example": ["us-central1"]
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Create the product tier in a disabled state. Enabling the product tier will let end-customers subscribe and use the service plan.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "Name of the product tier",
            "example": "Premium"
          },
          "planDescription": {
            "type": "string",
            "description": "A brief description for the end user of the product tier",
            "example": "A premium plan"
          },
          "pricing": {
            "description": "Pricing",
            "example": {
              "price1": "value1"
            }
          },
          "serviceModelId": {
            "type": "string",
            "description": "Service model ID",
            "example": "sm-12345678"
          },
          "support": {
            "type": "string",
            "description": "Support",
            "example": "Any support"
          },
          "tierType": {
            "type": "string",
            "description": "Tier type",
            "example": "OMNISTRATE_DEDICATED_TENANCY"
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "awsRegions": ["us-east-2", "ca-central-1"],
          "description": "A premium product tier",
          "documentation": "Any documentation",
          "gcpRegions": ["us-central1"],
          "isDisabled": false,
          "name": "Premium",
          "planDescription": "A premium plan",
          "pricing": {
            "price1": "value1"
          },
          "serviceModelId": "sm-12345678",
          "support": "Any support",
          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
        },
        "required": ["name", "description", "planDescription", "tierType", "serviceModelId"]
      },
      "CreateResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "cloud_provider": {
            "type": "string",
            "description": "The cloud provider name",
            "example": "aws"
          },
          "custom_network_id": {
            "type": "string",
            "description": "Custom network for resource",
            "example": "n-1234567890"
          },
          "externalBillingId": {
            "type": "string",
            "description": "The external billing id to record which customer should pay for this resource instance",
            "example": "external-billing-id-1234"
          },
          "network_type": {
            "type": "string",
            "description": "The network type",
            "example": "PUBLIC"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "region": {
            "type": "string",
            "description": "The region code",
            "example": "us-east-1"
          },
          "requestParams": {
            "description": "The request parameters",
            "example": {
              "param1": "value1",
              "param2": "value2"
            }
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Rerum reprehenderit et at magni ea quam."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "9dp",
            "minLength": 1
          }
        },
        "example": {
          "cloud_provider": "aws",
          "custom_network_id": "n-1234567890",
          "externalBillingId": "external-billing-id-1234",
          "network_type": "PUBLIC",
          "productTierKey": "premium",
          "region": "us-east-1",
          "requestParams": {
            "param1": "value1",
            "param2": "value2"
          },
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "lel"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey"
        ]
      },
      "CreateResourceInstanceRequest2": {
        "type": "object",
        "properties": {
          "cloud_provider": {
            "type": "string",
            "description": "The cloud provider name",
            "example": "aws"
          },
          "custom_network_id": {
            "type": "string",
            "description": "Custom network for resource",
            "example": "n-1234567890"
          },
          "externalBillingId": {
            "type": "string",
            "description": "The external billing id to record which customer should pay for this resource instance",
            "example": "external-billing-id-1234"
          },
          "network_type": {
            "type": "string",
            "description": "The network type",
            "example": "PUBLIC"
          },
          "region": {
            "type": "string",
            "description": "The region code",
            "example": "us-east-1"
          },
          "requestParams": {
            "description": "The request parameters",
            "example": {
              "param1": "value1",
              "param2": "value2"
            }
          }
        },
        "example": {
          "cloud_provider": "aws",
          "custom_network_id": "n-1234567890",
          "externalBillingId": "external-billing-id-1234",
          "network_type": "PUBLIC",
          "region": "us-east-1",
          "requestParams": {
            "param1": "value1",
            "param2": "value2"
          }
        }
      },
      "CreateResourceRequest": {
        "type": "object",
        "properties": {
          "additionalSecurityContext": {
            "$ref": "#/components/schemas/AdditionalSecurityContext"
          },
          "backupConfiguration": {
            "$ref": "#/components/schemas/BackupConfiguration"
          },
          "blobStorageConfiguration": {
            "$ref": "#/components/schemas/BlobStorageConfiguration"
          },
          "customLabels": {
            "type": "object",
            "description": "Custom labels for the resource",
            "example": {
              "key": "value"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Distinctio hic sit totam nisi qui qui."
            }
          },
          "customSysCTLs": {
            "type": "object",
            "description": "Custom sysctl settings for the resource",
            "example": {
              "net.ipv4.tcp_syncookies": "1"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Perspiciatis sint ea."
            }
          },
          "customULimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomULimits"
            },
            "description": "Custom ulimits for the resource",
            "example": [
              {
                "ULimitsName": "NoProc",
                "ULimitsType": "Soft",
                "ULimitsValue": 1000
              },
              {
                "ULimitsName": "NoFile",
                "ULimitsType": "Hard",
                "ULimitsValue": 2048
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the resource",
            "example": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service"
          },
          "environmentVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            },
            "description": "The environment variables that this resource requires",
            "example": [
              {
                "key": "MYSQL_ROOT_PASSWORD",
                "value": "password"
              }
            ]
          },
          "fileSystemConfiguration": {
            "$ref": "#/components/schemas/FileSystemConfiguration"
          },
          "helmChartConfiguration": {
            "$ref": "#/components/schemas/HelmChartConfiguration"
          },
          "imageConfigId": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "Voluptas inventore eos ut molestiae."
          },
          "infraConfigId": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Et aliquam."
          },
          "internal": {
            "type": "boolean",
            "description": "Whether this resource is internal or not",
            "default": false,
            "example": true
          },
          "isProxy": {
            "type": "boolean",
            "description": "Whether this resource is a proxy or not",
            "default": false,
            "example": true
          },
          "key": {
            "type": "string",
            "description": "The key of the resource",
            "example": "galera"
          },
          "kustomizeConfiguration": {
            "$ref": "#/components/schemas/KustomizeConfiguration"
          },
          "l4LoadBalancerConfiguration": {
            "$ref": "#/components/schemas/L4LoadBalancerConfiguration"
          },
          "l7LoadBalancerConfiguration": {
            "$ref": "#/components/schemas/L7LoadBalancerConfiguration"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource",
            "example": "Galera"
          },
          "operatorCRDConfiguration": {
            "$ref": "#/components/schemas/OperatorCRDConfiguration"
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Similique distinctio voluptatum beatae iste."
          },
          "proxyType": {
            "type": "string",
            "description": "A proxy type of resource",
            "default": "PortsBasedProxy",
            "example": "PortsBasedProxy"
          },
          "resourceDependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceDependency"
            },
            "example": [
              {
                "parameterMap": {
                  "userDatabase": "clusterOrg",
                  "writerId": "clusterWriterId"
                },
                "resourceId": "r-12345678"
              },
              {
                "parameterMap": {
                  "readerId": "clusterReaderId",
                  "userDatabase": "clusterOrg"
                },
                "resourceId": "r-abcdef12"
              }
            ]
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource",
            "example": "|Generic|PortsBasedProxy|L4LoadBalancer|L7LoadBalancer|FileSystem|OperatorCRD|HelmChart|Kustomize"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "terraformConfigurations": {
            "$ref": "#/components/schemas/TerraformConfigurations"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "5l5",
            "minLength": 1
          }
        },
        "example": {
          "additionalSecurityContext": {
            "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
            "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
            "SupplementalGroupIDs": [1001, 999]
          },
          "backupConfiguration": {
            "backupPeriodInHours": 24,
            "backupRetentionInDays": 7
          },
          "blobStorageConfiguration": {
            "GCSConfiguration": {},
            "S3Configuration": {}
          },
          "customLabels": {
            "key": "value"
          },
          "customSysCTLs": {
            "net.ipv4.tcp_syncookies": "1"
          },
          "customULimits": [
            {
              "ULimitsName": "NoProc",
              "ULimitsType": "Soft",
              "ULimitsValue": 1000
            },
            {
              "ULimitsName": "NoFile",
              "ULimitsType": "Hard",
              "ULimitsValue": 2048
            }
          ],
          "description": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
          "environmentVariables": [
            {
              "key": "MYSQL_ROOT_PASSWORD",
              "value": "password"
            }
          ],
          "fileSystemConfiguration": {
            "EFSFileSystemConfiguration": {
              "PerformanceMode": "generalPurpose|maxIO",
              "ProvisionedThroughputInMibps": 125,
              "ThroughputMode": "provisioned|bursting|elastic"
            }
          },
          "helmChartConfiguration": {
            "chartName": "my-chart",
            "chartRepoName": "my-repo",
            "chartRepoUrl": "https://my-repo.com",
            "chartValues": {
              "key1": "value1",
              "key2": 3,
              "key3": {
                "key4": "value4"
              }
            },
            "chartVersion": "1.0.0",
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "password": "my-password",
            "runtimeConfiguration": {
              "disableHooks": true,
              "recreate": true,
              "resetThenReuseValues": true,
              "resetValues": true,
              "reuseValues": true,
              "skipCRDs": true,
              "timeoutNanos": 1000000000,
              "upgradeCRDs": true,
              "wait": true,
              "waitForJobs": true
            },
            "username": "my-user"
          },
          "imageConfigId": "imgc-12345678",
          "infraConfigId": "ic-12345678",
          "internal": true,
          "isProxy": true,
          "key": "galera",
          "kustomizeConfiguration": {
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "gitConfiguration": {
              "accessToken": "my-token",
              "referenceName": "tags/v1.0.0",
              "repositoryUrl": "https://github.com/username/myrepo",
              "userName": "my-user"
            },
            "helmChartDependencies": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ],
            "kustomizePath": "/kustomize"
          },
          "l4LoadBalancerConfiguration": {
            "ingressPortConfiguration": [
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8080,
                "ingressPort": 1234
              },
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8081,
                "ingressPort": 5678
              },
              {
                "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                "backendPort": 8082,
                "ingressPort": 9012
              }
            ]
          },
          "l7LoadBalancerConfiguration": {
            "paths": [
              {
                "associatedResourceID": "r-12345678",
                "path": "/path",
                "port": 8080
              }
            ]
          },
          "name": "Galera",
          "operatorCRDConfiguration": {
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "helmChartDependencies": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ],
            "outputParameters": {
              "expiresAt": "$out.status.notAfter",
              "issuerName": "letsencrypt-prod"
            },
            "readinessConditions": {
              "$out.status.conditions[?(@.type=='Ready')].status": true
            },
            "supplementalFiles": [
              "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
              "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
            ],
            "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
          },
          "productTierId": "pt-12345678",
          "proxyType": "PortsBasedProxy",
          "resourceDependencies": [
            {
              "parameterMap": {
                "userDatabase": "clusterOrg",
                "writerId": "clusterWriterId"
              },
              "resourceId": "r-12345678"
            },
            {
              "parameterMap": {
                "readerId": "clusterReaderId",
                "userDatabase": "clusterOrg"
              },
              "resourceId": "r-abcdef12"
            }
          ],
          "resourceType": "Generic",
          "serviceId": "s-12345678",
          "terraformConfigurations": {
            "aws": {
              "gitConfiguration": {
                "referenceName": "ref",
                "repositoryUrl": "gitUrl"
              },
              "privateModuleGitAccessTokens": {
                "tokenName": "accessToken"
              },
              "terraformPath": "/project1/tf"
            }
          },
          "token": "899"
        },
        "required": ["token", "name", "description", "serviceId", "productTierId"]
      },
      "CreateResourceRequest2": {
        "type": "object",
        "properties": {
          "additionalSecurityContext": {
            "$ref": "#/components/schemas/AdditionalSecurityContext"
          },
          "backupConfiguration": {
            "$ref": "#/components/schemas/BackupConfiguration"
          },
          "blobStorageConfiguration": {
            "$ref": "#/components/schemas/BlobStorageConfiguration"
          },
          "customLabels": {
            "type": "object",
            "description": "Custom labels for the resource",
            "example": {
              "key": "value"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Porro consequuntur voluptas eligendi dignissimos."
            }
          },
          "customSysCTLs": {
            "type": "object",
            "description": "Custom sysctl settings for the resource",
            "example": {
              "net.ipv4.tcp_syncookies": "1"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Aut ut aut omnis consequuntur."
            }
          },
          "customULimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomULimits"
            },
            "description": "Custom ulimits for the resource",
            "example": [
              {
                "ULimitsName": "NoProc",
                "ULimitsType": "Soft",
                "ULimitsValue": 1000
              },
              {
                "ULimitsName": "NoFile",
                "ULimitsType": "Hard",
                "ULimitsValue": 2048
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the resource",
            "example": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service"
          },
          "environmentVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            },
            "description": "The environment variables that this resource requires",
            "example": [
              {
                "key": "MYSQL_ROOT_PASSWORD",
                "value": "password"
              }
            ]
          },
          "fileSystemConfiguration": {
            "$ref": "#/components/schemas/FileSystemConfiguration"
          },
          "helmChartConfiguration": {
            "$ref": "#/components/schemas/HelmChartConfiguration"
          },
          "imageConfigId": {
            "type": "string",
            "description": "The ID of the image configuration that this resource refers to",
            "example": "imgc-12345678"
          },
          "infraConfigId": {
            "type": "string",
            "description": "The ID of the infrastructure configuration that this resource refers to",
            "example": "ic-12345678"
          },
          "internal": {
            "type": "boolean",
            "description": "Whether this resource is internal or not",
            "default": false,
            "example": true
          },
          "isProxy": {
            "type": "boolean",
            "description": "Whether this resource is a proxy or not",
            "default": false,
            "example": true
          },
          "key": {
            "type": "string",
            "description": "The key of the resource",
            "example": "galera"
          },
          "kustomizeConfiguration": {
            "$ref": "#/components/schemas/KustomizeConfiguration"
          },
          "l4LoadBalancerConfiguration": {
            "$ref": "#/components/schemas/L4LoadBalancerConfiguration"
          },
          "l7LoadBalancerConfiguration": {
            "$ref": "#/components/schemas/L7LoadBalancerConfiguration"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource",
            "example": "Galera"
          },
          "operatorCRDConfiguration": {
            "$ref": "#/components/schemas/OperatorCRDConfiguration"
          },
          "productTierId": {
            "type": "string",
            "description": "The product tier ID",
            "example": "pt-12345678"
          },
          "proxyType": {
            "type": "string",
            "description": "A proxy type of resource",
            "default": "PortsBasedProxy",
            "example": "PortsBasedProxy"
          },
          "resourceDependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceDependency"
            },
            "example": [
              {
                "parameterMap": {
                  "userDatabase": "clusterOrg",
                  "writerId": "clusterWriterId"
                },
                "resourceId": "r-12345678"
              },
              {
                "parameterMap": {
                  "readerId": "clusterReaderId",
                  "userDatabase": "clusterOrg"
                },
                "resourceId": "r-abcdef12"
              }
            ]
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource",
            "example": "Generic"
          },
          "terraformConfigurations": {
            "type": "object",
            "description": "The Terraform configurations for various cloud providers",
            "example": {
              "Non labore fuga quaerat magnam cum quos.": {
                "gitConfiguration": {
                  "accessToken": "my-token",
                  "referenceName": "tags/v1.0.0",
                  "repositoryUrl": "https://github.com/username/myrepo",
                  "userName": "my-user"
                },
                "privateModuleGitAccessTokens": {
                  "tokenName": "accessToken"
                },
                "requiredOutputKeys": ["output1"],
                "requiredOutputs": [
                  {
                    "exported": true,
                    "key": "output1"
                  }
                ],
                "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                "terraformPath": "/project1/tf"
              },
              "Possimus vel voluptas consequuntur officia aliquam.": {
                "gitConfiguration": {
                  "accessToken": "my-token",
                  "referenceName": "tags/v1.0.0",
                  "repositoryUrl": "https://github.com/username/myrepo",
                  "userName": "my-user"
                },
                "privateModuleGitAccessTokens": {
                  "tokenName": "accessToken"
                },
                "requiredOutputKeys": ["output1"],
                "requiredOutputs": [
                  {
                    "exported": true,
                    "key": "output1"
                  }
                ],
                "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                "terraformPath": "/project1/tf"
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/TerraformConfiguration"
            }
          }
        },
        "example": {
          "additionalSecurityContext": {
            "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
            "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
            "SupplementalGroupIDs": [1001, 999]
          },
          "backupConfiguration": {
            "backupPeriodInHours": 24,
            "backupRetentionInDays": 7
          },
          "blobStorageConfiguration": {
            "GCSConfiguration": {},
            "S3Configuration": {}
          },
          "customLabels": {
            "key": "value"
          },
          "customSysCTLs": {
            "net.ipv4.tcp_syncookies": "1"
          },
          "customULimits": [
            {
              "ULimitsName": "NoProc",
              "ULimitsType": "Soft",
              "ULimitsValue": 1000
            },
            {
              "ULimitsName": "NoFile",
              "ULimitsType": "Hard",
              "ULimitsValue": 2048
            }
          ],
          "description": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
          "environmentVariables": [
            {
              "key": "MYSQL_ROOT_PASSWORD",
              "value": "password"
            }
          ],
          "fileSystemConfiguration": {
            "EFSFileSystemConfiguration": {
              "PerformanceMode": "generalPurpose|maxIO",
              "ProvisionedThroughputInMibps": 125,
              "ThroughputMode": "provisioned|bursting|elastic"
            }
          },
          "helmChartConfiguration": {
            "chartName": "my-chart",
            "chartRepoName": "my-repo",
            "chartRepoUrl": "https://my-repo.com",
            "chartValues": {
              "key1": "value1",
              "key2": 3,
              "key3": {
                "key4": "value4"
              }
            },
            "chartVersion": "1.0.0",
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "password": "my-password",
            "runtimeConfiguration": {
              "disableHooks": true,
              "recreate": true,
              "resetThenReuseValues": true,
              "resetValues": true,
              "reuseValues": true,
              "skipCRDs": true,
              "timeoutNanos": 1000000000,
              "upgradeCRDs": true,
              "wait": true,
              "waitForJobs": true
            },
            "username": "my-user"
          },
          "imageConfigId": "imgc-12345678",
          "infraConfigId": "ic-12345678",
          "internal": false,
          "isProxy": false,
          "key": "galera",
          "kustomizeConfiguration": {
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "gitConfiguration": {
              "accessToken": "my-token",
              "referenceName": "tags/v1.0.0",
              "repositoryUrl": "https://github.com/username/myrepo",
              "userName": "my-user"
            },
            "helmChartDependencies": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ],
            "kustomizePath": "/kustomize"
          },
          "l4LoadBalancerConfiguration": {
            "ingressPortConfiguration": [
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8080,
                "ingressPort": 1234
              },
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8081,
                "ingressPort": 5678
              },
              {
                "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                "backendPort": 8082,
                "ingressPort": 9012
              }
            ]
          },
          "l7LoadBalancerConfiguration": {
            "paths": [
              {
                "associatedResourceID": "r-12345678",
                "path": "/path",
                "port": 8080
              }
            ]
          },
          "name": "Galera",
          "operatorCRDConfiguration": {
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "helmChartDependencies": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ],
            "outputParameters": {
              "expiresAt": "$out.status.notAfter",
              "issuerName": "letsencrypt-prod"
            },
            "readinessConditions": {
              "$out.status.conditions[?(@.type=='Ready')].status": true
            },
            "supplementalFiles": [
              "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
              "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
            ],
            "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
          },
          "productTierId": "pt-12345678",
          "proxyType": "PortsBasedProxy",
          "resourceDependencies": [
            {
              "parameterMap": {
                "userDatabase": "clusterOrg",
                "writerId": "clusterWriterId"
              },
              "resourceId": "r-12345678"
            },
            {
              "parameterMap": {
                "readerId": "clusterReaderId",
                "userDatabase": "clusterOrg"
              },
              "resourceId": "r-abcdef12"
            }
          ],
          "resourceType": "Generic",
          "terraformConfigurations": {
            "Delectus voluptatem velit facilis.": {
              "gitConfiguration": {
                "accessToken": "my-token",
                "referenceName": "tags/v1.0.0",
                "repositoryUrl": "https://github.com/username/myrepo",
                "userName": "my-user"
              },
              "privateModuleGitAccessTokens": {
                "tokenName": "accessToken"
              },
              "requiredOutputKeys": ["output1"],
              "requiredOutputs": [
                {
                  "exported": true,
                  "key": "output1"
                }
              ],
              "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
              "terraformPath": "/project1/tf"
            },
            "Id aut.": {
              "gitConfiguration": {
                "accessToken": "my-token",
                "referenceName": "tags/v1.0.0",
                "repositoryUrl": "https://github.com/username/myrepo",
                "userName": "my-user"
              },
              "privateModuleGitAccessTokens": {
                "tokenName": "accessToken"
              },
              "requiredOutputKeys": ["output1"],
              "requiredOutputs": [
                {
                  "exported": true,
                  "key": "output1"
                }
              ],
              "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
              "terraformPath": "/project1/tf"
            }
          }
        },
        "required": ["name", "description", "productTierId"]
      },
      "CreateSaaSPortalCustomDomainRequest": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "The custom domain",
            "example": "mycustomdomain.com"
          },
          "description": {
            "type": "string",
            "description": "The custom domain description",
            "example": "My custom domain description"
          },
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "name": {
            "type": "string",
            "description": "The custom domain name",
            "example": "MyCustomDomain"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "w",
            "minLength": 1
          }
        },
        "example": {
          "customDomain": "mycustomdomain.com",
          "description": "My custom domain description",
          "environmentType": "DEV",
          "name": "MyCustomDomain",
          "token": "mj"
        },
        "required": ["token", "environmentType", "name", "description", "customDomain"]
      },
      "CreateSaaSPortalCustomDomainRequest2": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "The custom domain",
            "example": "mycustomdomain.com"
          },
          "description": {
            "type": "string",
            "description": "The custom domain description",
            "example": "My custom domain description"
          },
          "environmentType": {
            "type": "string",
            "description": "The environment type for the custom domain",
            "example": "DEV"
          },
          "name": {
            "type": "string",
            "description": "The custom domain name",
            "example": "MyCustomDomain"
          }
        },
        "example": {
          "customDomain": "mycustomdomain.com",
          "description": "My custom domain description",
          "environmentType": "DEV",
          "name": "MyCustomDomain"
        },
        "required": ["environmentType", "name", "description", "customDomain"]
      },
      "CreateServiceAPIRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service API bundle",
            "example": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability"
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "b",
            "minLength": 1
          }
        },
        "example": {
          "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "token": "37"
        },
        "required": ["token", "description", "serviceId", "serviceEnvironmentId"]
      },
      "CreateServiceAPIRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service API bundle",
            "example": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability"
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "The service environment ID",
            "example": "se-12345678"
          }
        },
        "example": {
          "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
          "serviceEnvironmentId": "se-12345678"
        },
        "required": ["description", "serviceEnvironmentId"]
      },
      "CreateServiceEnvironmentRequest": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "deploymentConfigId": {
            "type": "string",
            "description": "ID of a Deployment Config",
            "example": "Rem unde veniam nihil aspernatur."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service environment",
            "example": "The production environment for the MySQL multi-writer service"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Environment",
            "example": "Production"
          },
          "serviceAuthPublicKey": {
            "type": "string",
            "description": "PEM-encoded Public key part of the key used to sign the JWT tokens for the service control plane APIs",
            "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "sourceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "kk",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "visibility": {
            "type": "string",
            "description": "This parameter is used to configure the visibility of the service control-plane APIs",
            "example": "PUBLIC"
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "deploymentConfigId": "dc-12345678",
          "description": "The production environment for the MySQL multi-writer service",
          "name": "Production",
          "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
          "serviceId": "s-12345678",
          "sourceEnvironmentId": "se-12345678",
          "token": "bcy",
          "type": "DEV",
          "visibility": "PUBLIC"
        },
        "required": ["token", "name", "description", "serviceId", "deploymentConfigId"]
      },
      "CreateServiceEnvironmentRequest2": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "deploymentConfigId": {
            "type": "string",
            "description": "The deployment configuration ID",
            "example": "dc-12345678"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service environment",
            "example": "The production environment for the MySQL multi-writer service"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Environment",
            "example": "Production"
          },
          "serviceAuthPublicKey": {
            "type": "string",
            "description": "PEM-encoded Public key part of the key used to sign the JWT tokens for the service control plane APIs",
            "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n"
          },
          "sourceEnvironmentId": {
            "type": "string",
            "description": "The ID of the service environment to use for promoting changes to this environment",
            "example": "se-12345678"
          },
          "type": {
            "type": "string",
            "example": "DEV"
          },
          "visibility": {
            "type": "string",
            "description": "This parameter is used to configure the visibility of the service control-plane APIs",
            "example": "Deserunt perferendis molestiae."
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "deploymentConfigId": "dc-12345678",
          "description": "The production environment for the MySQL multi-writer service",
          "name": "Production",
          "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
          "sourceEnvironmentId": "se-12345678",
          "type": "DEV",
          "visibility": "Eveniet officiis."
        },
        "required": ["name", "description", "deploymentConfigId"]
      },
      "CreateServiceFromComposeSpecRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "fileContent": {
            "type": "string",
            "description": "Base64 encoded Compose Spec YAML in docker compose format",
            "example": "Aspernatur sed vero excepturi."
          },
          "fileFormat": {
            "type": "string",
            "description": "MIME type of file format",
            "example": "text/plain"
          },
          "fileName": {
            "type": "string",
            "description": "Name of compose spec YAML file that is uploaded",
            "example": "mysql.yaml"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service",
            "example": "MySQL multi-writer service"
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "http://ruecker.info/ethelyn",
            "format": "uri"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "i",
            "minLength": 1
          }
        },
        "example": {
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "fileContent": "Quos ipsam repellendus quasi minima.",
          "fileFormat": "text/plain",
          "fileName": "mysql.yaml",
          "name": "MySQL multi-writer service",
          "serviceLogoURL": "http://kerlukefadel.name/tianna",
          "token": "n4"
        },
        "required": ["token", "name", "description", "fileName", "fileContent", "fileFormat"]
      },
      "CreateServiceFromComposeSpecRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "fileContent": {
            "type": "string",
            "description": "Base64 encoded Compose Spec YAML in docker compose format",
            "example": "Perspiciatis dolor ipsum quia."
          },
          "fileFormat": {
            "type": "string",
            "description": "MIME type of file format",
            "example": "text/plain"
          },
          "fileName": {
            "type": "string",
            "description": "Name of compose spec YAML file that is uploaded",
            "example": "mysql.yaml"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service",
            "example": "MySQL multi-writer service"
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "http://lesch.biz/eunice_runolfsson",
            "format": "uri"
          }
        },
        "example": {
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "fileContent": "Excepturi nisi temporibus consectetur illo.",
          "fileFormat": "text/plain",
          "fileName": "mysql.yaml",
          "name": "MySQL multi-writer service",
          "serviceLogoURL": "http://labadie.biz/dane"
        },
        "required": ["name", "description", "fileName", "fileContent", "fileFormat"]
      },
      "CreateServiceModelRequest": {
        "type": "object",
        "properties": {
          "accountConfigIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Account Config",
              "example": "Itaque est eum animi quos ut."
            },
            "description": "The infrastructure account configuration ID list",
            "example": ["ac-12345678", "ac-23456789"]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service model",
            "example": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceModelFeatureDetail"
            },
            "description": "Enabled service model features",
            "example": [
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              },
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              }
            ]
          },
          "modelType": {
            "type": "string",
            "description": "The model type encapsulating this service",
            "example": "OMNISTRATE_HOSTED|CUSTOMER_HOSTED|BYOA"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Model",
            "example": "MySQL multi-writer service hosted model"
          },
          "serviceApiId": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Expedita quam ea ut delectus et."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "b",
            "minLength": 1
          }
        },
        "example": {
          "accountConfigIds": ["ac-12345678", "ac-23456789"],
          "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
          "features": [
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            },
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            }
          ],
          "modelType": "CUSTOMER_HOSTED",
          "name": "MySQL multi-writer service hosted model",
          "serviceApiId": "sa-12345678",
          "serviceId": "s-12345678",
          "token": "y1"
        },
        "required": ["token", "name", "description", "modelType", "serviceApiId", "serviceId"]
      },
      "CreateServiceModelRequest2": {
        "type": "object",
        "properties": {
          "accountConfigIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Distinctio ex maxime quibusdam beatae architecto consequuntur."
            },
            "description": "The infrastructure account configuration ID list",
            "example": ["ac-12345678", "ac-23456789"]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service model",
            "example": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceModelFeatureDetail"
            },
            "description": "Enabled service model features",
            "example": [
              {
                "configuration": {
                  "Sapiente ut.": "Ut qui eligendi odit."
                },
                "feature": "Quia quas saepe sequi quidem facere."
              },
              {
                "configuration": {
                  "Sapiente ut.": "Ut qui eligendi odit."
                },
                "feature": "Quia quas saepe sequi quidem facere."
              }
            ]
          },
          "modelType": {
            "type": "string",
            "description": "The model type encapsulating this service",
            "example": "CUSTOMER_HOSTED"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Model",
            "example": "MySQL multi-writer service hosted model"
          },
          "serviceApiId": {
            "type": "string",
            "description": "The service API this model is for",
            "example": "sa-12345678"
          }
        },
        "example": {
          "accountConfigIds": ["ac-12345678", "ac-23456789"],
          "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
          "features": [
            {
              "configuration": {
                "Sapiente ut.": "Ut qui eligendi odit."
              },
              "feature": "Quia quas saepe sequi quidem facere."
            },
            {
              "configuration": {
                "Sapiente ut.": "Ut qui eligendi odit."
              },
              "feature": "Quia quas saepe sequi quidem facere."
            },
            {
              "configuration": {
                "Sapiente ut.": "Ut qui eligendi odit."
              },
              "feature": "Quia quas saepe sequi quidem facere."
            }
          ],
          "modelType": "CUSTOMER_HOSTED",
          "name": "MySQL multi-writer service hosted model",
          "serviceApiId": "sa-12345678"
        },
        "required": ["name", "description", "modelType", "serviceApiId"]
      },
      "CreateServiceRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service",
            "example": "MySQL multi-writer service"
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "http://heller.com/estell",
            "format": "uri"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "kh",
            "minLength": 1
          }
        },
        "example": {
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "name": "MySQL multi-writer service",
          "serviceLogoURL": "http://mills.biz/corine",
          "token": "s"
        },
        "required": ["token", "name", "description"]
      },
      "CreateServiceRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service",
            "example": "MySQL multi-writer service"
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "http://bechtelarfranecki.info/elnora",
            "format": "uri"
          }
        },
        "example": {
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "name": "MySQL multi-writer service",
          "serviceLogoURL": "http://gutmann.net/kaia.considine"
        },
        "required": ["name", "description"]
      },
      "CreateServicesOrchestrationRequest": {
        "type": "object",
        "properties": {
          "orchestrationCreateDSL": {
            "type": "string",
            "description": "base64 encoded content of service orchestration create DSL",
            "example": "Impedit similique laudantium repellat pariatur reprehenderit."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "itp",
            "minLength": 1
          }
        },
        "example": {
          "orchestrationCreateDSL": "Aspernatur dolore eius.",
          "token": "vlx"
        },
        "required": ["token", "orchestrationCreateDSL"]
      },
      "CreateServicesOrchestrationRequest2": {
        "type": "object",
        "properties": {
          "orchestrationCreateDSL": {
            "type": "string",
            "description": "base64 encoded content of service orchestration create DSL",
            "example": "Iste quia reiciendis molestiae similique voluptas laboriosam."
          }
        },
        "example": {
          "orchestrationCreateDSL": "Perferendis dolores quia similique dolorem cum."
        },
        "required": ["orchestrationCreateDSL"]
      },
      "CreateServicesOrchestrationResponseBody": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Services Orchestration Id",
            "example": "Iste iste ea aut."
          }
        },
        "example": {
          "id": "Quia facilis qui consequatur explicabo quam."
        }
      },
      "CreateStorageConfigRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the storage config",
            "example": "my-storage-config-description",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the storage config",
            "example": "my-storage-config",
            "minLength": 1
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "l",
            "minLength": 1
          }
        },
        "example": {
          "description": "my-storage-config-description",
          "name": "my-storage-config",
          "serviceId": "s-12345678",
          "token": "zpx"
        },
        "required": ["token", "name", "description", "serviceId"]
      },
      "CreateStorageConfigRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the storage config",
            "example": "my-storage-config-description",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the storage config",
            "example": "my-storage-config",
            "minLength": 1
          }
        },
        "example": {
          "description": "my-storage-config-description",
          "name": "my-storage-config"
        },
        "required": ["name", "description"]
      },
      "CreateStorageVolumeConfigRequest": {
        "type": "object",
        "properties": {
          "clusterStorageType": {
            "type": "string",
            "description": "The type of the fixed storage for the cluster",
            "example": "S3|$var.storageType|AWS::EFS"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the context for the storage volume pool",
            "example": "A storage volume set to store the MySQL data directory"
          },
          "disableBackup": {
            "type": "boolean",
            "description": "Disable backup for the storage volume",
            "example": false
          },
          "instanceStorageIops": {
            "type": "string",
            "description": "The IOPS provisioned for the configured instance storage type",
            "example": "$var.storageIops"
          },
          "instanceStorageSizeGi": {
            "type": "string",
            "description": "The storage size (in Gi) provisioned for the configured instance storage type",
            "example": "$var.storage_size"
          },
          "instanceStorageThroughputMiBps": {
            "type": "string",
            "description": "The throughput (in MiBps) provisioned for the configured instance storage type",
            "example": "128"
          },
          "instanceStorageType": {
            "type": "string",
            "description": "The type of the storage for a compute instance",
            "example": "$var.storageType"
          },
          "name": {
            "type": "string",
            "description": "Name of the storage volume pool",
            "example": "MySQL Data Volume"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "storageResourceID": {
            "type": "string",
            "description": "The storage resource ID",
            "example": "r-12345678"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "4zw",
            "minLength": 1
          }
        },
        "example": {
          "clusterStorageType": "S3|$var.storageType|AWS::EFS",
          "description": "A storage volume set to store the MySQL data directory",
          "disableBackup": false,
          "instanceStorageIops": "$var.storageIops",
          "instanceStorageSizeGi": "$var.storage_size",
          "instanceStorageThroughputMiBps": "128",
          "instanceStorageType": "$var.storageType",
          "name": "MySQL Data Volume",
          "serviceId": "s-12345678",
          "storageResourceID": "r-12345678",
          "token": "s"
        },
        "required": ["token", "name", "description", "serviceId"]
      },
      "CreateStorageVolumeConfigRequest2": {
        "type": "object",
        "properties": {
          "clusterStorageType": {
            "type": "string",
            "description": "The type of the fixed storage for the cluster",
            "example": "S3|$var.storageType|AWS::EFS"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the context for the storage volume pool",
            "example": "A storage volume set to store the MySQL data directory"
          },
          "disableBackup": {
            "type": "boolean",
            "description": "Disable backup for the storage volume",
            "example": false
          },
          "instanceStorageIops": {
            "type": "string",
            "description": "The IOPS provisioned for the configured instance storage type",
            "example": "$var.storageIops"
          },
          "instanceStorageSizeGi": {
            "type": "string",
            "description": "The storage size (in Gi) provisioned for the configured instance storage type",
            "example": "$var.storage_size"
          },
          "instanceStorageThroughputMiBps": {
            "type": "string",
            "description": "The throughput (in MiBps) provisioned for the configured instance storage type",
            "example": "128"
          },
          "instanceStorageType": {
            "type": "string",
            "description": "The type of the storage for a compute instance",
            "example": "$var.storageType"
          },
          "name": {
            "type": "string",
            "description": "Name of the storage volume pool",
            "example": "MySQL Data Volume"
          },
          "storageResourceID": {
            "type": "string",
            "description": "The storage resource ID",
            "example": "r-12345678"
          }
        },
        "example": {
          "clusterStorageType": "S3|$var.storageType|AWS::EFS",
          "description": "A storage volume set to store the MySQL data directory",
          "disableBackup": false,
          "instanceStorageIops": "$var.storageIops",
          "instanceStorageSizeGi": "$var.storage_size",
          "instanceStorageThroughputMiBps": "128",
          "instanceStorageType": "$var.storageType",
          "name": "MySQL Data Volume",
          "storageResourceID": "r-12345678"
        },
        "required": ["name", "description"]
      },
      "CreateSubscriptionRequest": {
        "type": "object",
        "properties": {
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Voluptatem vero."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "3",
            "minLength": 1
          }
        },
        "example": {
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "h"
        },
        "required": ["token", "serviceId", "productTierId"]
      },
      "CreateSubscriptionRequest2": {
        "type": "object",
        "properties": {
          "productTierId": {
            "type": "string",
            "description": "The product tier ID",
            "example": "pt-12345678"
          },
          "serviceId": {
            "type": "string",
            "description": "The service ID",
            "example": "s-12345678"
          }
        },
        "example": {
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678"
        },
        "required": ["serviceId", "productTierId"]
      },
      "CreateSubscriptionRequestRequest": {
        "type": "object",
        "properties": {
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Quaerat corporis sint."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "tmo",
            "minLength": 1
          }
        },
        "example": {
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "n"
        },
        "required": ["token", "serviceId", "productTierId"]
      },
      "CreateSubscriptionRequestRequest2": {
        "type": "object",
        "properties": {
          "productTierId": {
            "type": "string",
            "description": "The product tier ID",
            "example": "pt-12345678"
          },
          "serviceId": {
            "type": "string",
            "description": "The service ID",
            "example": "s-12345678"
          }
        },
        "example": {
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678"
        },
        "required": ["serviceId", "productTierId"]
      },
      "CreateTierVersionSetRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the product-tier version set.",
            "example": "Excepturi sed nisi quas suscipit laboriosam dolor."
          },
          "name": {
            "type": "string",
            "description": "The name of the product-tier version set.",
            "example": "Major version set"
          },
          "parentVersion": {
            "type": "string",
            "description": "The parent version of this version set.",
            "example": "2.0"
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Beatae quidem iure illo rerum quia et."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "n3",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "description": "The version-set type of the product-tier.",
            "example": "Major|Incremental|UserDefined"
          }
        },
        "example": {
          "description": "Quo dignissimos.",
          "name": "Major version set",
          "parentVersion": "2.0",
          "productTierId": "Beatae beatae.",
          "serviceId": "s-12345678",
          "token": "8",
          "type": "Major|Incremental|UserDefined"
        },
        "required": ["token", "serviceId", "productTierId", "type"]
      },
      "CreateTierVersionSetRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the product-tier version set.",
            "example": "Sint doloribus rerum harum voluptates molestiae quidem."
          },
          "name": {
            "type": "string",
            "description": "The name of the product-tier version set.",
            "example": "Major version set"
          },
          "parentVersion": {
            "type": "string",
            "description": "The parent version of this version set.",
            "example": "2.0"
          },
          "type": {
            "type": "string",
            "description": "The version-set type of the product-tier.",
            "example": "Major|Incremental|UserDefined"
          }
        },
        "example": {
          "description": "Omnis omnis non unde et dolorum omnis.",
          "name": "Major version set",
          "parentVersion": "2.0",
          "type": "Major|Incremental|UserDefined"
        },
        "required": ["type"]
      },
      "CreateTierVersionSetResult": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The version number for the specific version set.",
            "example": "3.0"
          }
        },
        "example": {
          "version": "3.0"
        },
        "required": ["version"]
      },
      "CreateUpgradePathRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the upgrade path",
            "example": "An upgrade path migrating clusters from one LTS version to another"
          },
          "name": {
            "type": "string",
            "description": "Name of the upgrade path",
            "example": "LTS upgrade path"
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "sourceVersion": {
            "type": "string",
            "description": "Version of the Entity to operate on",
            "example": "1.0",
            "minLength": 1
          },
          "targetVersion": {
            "type": "string",
            "description": "Version of the Entity to operate on",
            "example": "1.0",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "0",
            "minLength": 1
          }
        },
        "example": {
          "description": "An upgrade path migrating clusters from one LTS version to another",
          "name": "LTS upgrade path",
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "sourceVersion": "567.0",
          "targetVersion": "589.0",
          "token": "jn"
        },
        "required": ["token", "name", "description", "sourceVersion", "targetVersion", "serviceEnvironmentId"]
      },
      "CustomDNSEndpoint": {
        "type": "object",
        "properties": {
          "aRecordTarget": {
            "type": "string",
            "example": "1.1.1.1"
          },
          "cnameTarget": {
            "type": "string",
            "example": "cname-target.com"
          },
          "dnsHost": {
            "type": "string",
            "example": "https://my-custom-endpoint.com"
          },
          "dnsName": {
            "type": "string",
            "description": "DEPRECATED: Use dnsHost instead",
            "example": "https://my-custom-endpoint.com"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "name": {
            "type": "string",
            "example": "DNS to access the dashboard"
          },
          "status": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          }
        },
        "example": {
          "aRecordTarget": "1.1.1.1",
          "cnameTarget": "cname-target.com",
          "dnsHost": "https://my-custom-endpoint.com",
          "dnsName": "https://my-custom-endpoint.com",
          "enabled": true,
          "name": "DNS to access the dashboard",
          "status": "READY"
        },
        "required": ["enabled"]
      },
      "CustomDomain": {
        "type": "object",
        "properties": {
          "clusterEndpoint": {
            "type": "string",
            "description": "The cluster endpoint for the saas portal instance",
            "example": "example.com"
          },
          "customDomain": {
            "type": "string",
            "description": "The custom domain",
            "example": "mycustomdomain.com"
          },
          "description": {
            "type": "string",
            "description": "The custom domain description",
            "example": "My custom domain description"
          },
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "name": {
            "type": "string",
            "description": "The custom domain name",
            "example": "MyCustomDomain"
          },
          "status": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          }
        },
        "example": {
          "clusterEndpoint": "example.com",
          "customDomain": "mycustomdomain.com",
          "description": "My custom domain description",
          "environmentType": "DEV",
          "name": "MyCustomDomain",
          "status": "READY"
        },
        "required": ["environmentType", "name", "description", "customDomain", "status", "clusterEndpoint"]
      },
      "CustomDomainIdentityIDRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "4mi",
            "minLength": 1
          }
        },
        "example": {
          "token": "qo"
        },
        "required": ["token"]
      },
      "CustomDomainIdentityIDResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Org",
            "example": "Nemo illo."
          }
        },
        "example": {
          "id": "org-12345678"
        },
        "required": ["id"]
      },
      "CustomImageCommandsAndArgs": {
        "type": "object",
        "properties": {
          "args": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Porro aut qui."
            },
            "description": "Arguments to pass to the container",
            "example": ["-d", "mysql"]
          },
          "commands": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Ut itaque."
            },
            "description": "Commands to run in the container",
            "example": ["echo", "Hello, World!"]
          }
        },
        "description": "Commands and arguments to run in the container",
        "example": {
          "args": ["-d", "mysql"],
          "commands": ["echo", "Hello, World!"]
        }
      },
      "CustomNetwork": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string",
            "description": "CIDR block for the network",
            "default": "10.0.0.0/16",
            "example": "10.0.0.0/16"
          },
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "cloudProviderRegion": {
            "type": "string",
            "description": "The region of the cloud provider that the instance is running in.",
            "example": "us-east-1"
          },
          "id": {
            "type": "string",
            "description": "ID of a custom network",
            "example": "Sed omnis in."
          },
          "name": {
            "type": "string",
            "description": "User friendly network name to help distinguish networks with same CIDRs",
            "example": "Prod us-east-1"
          },
          "networkDefinitionType": {
            "type": "string",
            "description": "Type of the network definition",
            "example": "Default|Custom|Imported"
          },
          "networkFeaturesConfiguration": {
            "$ref": "#/components/schemas/NetworkFeaturesConfiguration"
          },
          "networkInstances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomNetworkInstance"
            },
            "description": "List of network instances created within this custom network",
            "example": [
              {
                "awsAccountID": "123456789012",
                "cloudProviderNativeNetworkId": "vpc-12345678",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "hostClusterID": "hc-12345678"
              },
              {
                "awsAccountID": "123456789012",
                "cloudProviderNativeNetworkId": "vpc-12345678",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "hostClusterID": "hc-12345678"
              },
              {
                "awsAccountID": "123456789012",
                "cloudProviderNativeNetworkId": "vpc-12345678",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "hostClusterID": "hc-12345678"
              },
              {
                "awsAccountID": "123456789012",
                "cloudProviderNativeNetworkId": "vpc-12345678",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "hostClusterID": "hc-12345678"
              }
            ]
          },
          "owningUserId": {
            "type": "string",
            "description": "ID of a User",
            "example": "Molestiae itaque cum."
          },
          "owningUserName": {
            "type": "string",
            "description": "The name of the user that created and owns the custom network",
            "example": "John Doe"
          }
        },
        "example": {
          "cidr": "10.0.0.0/16",
          "cloudProviderName": "aws",
          "cloudProviderRegion": "us-east-1",
          "id": "n-12345678",
          "name": "Prod us-east-1",
          "networkDefinitionType": "Custom",
          "networkFeaturesConfiguration": {
            "isPrivateLinkEnabled": false
          },
          "networkInstances": [
            {
              "awsAccountID": "123456789012",
              "cloudProviderNativeNetworkId": "vpc-12345678",
              "gcpProjectID": "my-project",
              "gcpProjectNumber": "123456789012",
              "hostClusterID": "hc-12345678"
            },
            {
              "awsAccountID": "123456789012",
              "cloudProviderNativeNetworkId": "vpc-12345678",
              "gcpProjectID": "my-project",
              "gcpProjectNumber": "123456789012",
              "hostClusterID": "hc-12345678"
            },
            {
              "awsAccountID": "123456789012",
              "cloudProviderNativeNetworkId": "vpc-12345678",
              "gcpProjectID": "my-project",
              "gcpProjectNumber": "123456789012",
              "hostClusterID": "hc-12345678"
            },
            {
              "awsAccountID": "123456789012",
              "cloudProviderNativeNetworkId": "vpc-12345678",
              "gcpProjectID": "my-project",
              "gcpProjectNumber": "123456789012",
              "hostClusterID": "hc-12345678"
            }
          ],
          "owningUserId": "user-12345678",
          "owningUserName": "John Doe"
        },
        "required": ["id", "cloudProviderName", "cloudProviderRegion"]
      },
      "CustomNetworkInstance": {
        "type": "object",
        "properties": {
          "awsAccountID": {
            "type": "string",
            "description": "The AWS account ID",
            "example": "123456789012"
          },
          "cloudProviderNativeNetworkId": {
            "type": "string",
            "description": "The ID of the network within cloud provider account",
            "example": "vpc-12345678"
          },
          "gcpProjectID": {
            "type": "string",
            "description": "The GCP project ID",
            "example": "my-project"
          },
          "gcpProjectNumber": {
            "type": "string",
            "description": "The GCP project number",
            "example": "123456789012"
          },
          "hostClusterID": {
            "type": "string",
            "description": "ID of a Host Cluster",
            "example": "Fuga soluta quia qui nihil."
          }
        },
        "example": {
          "awsAccountID": "123456789012",
          "cloudProviderNativeNetworkId": "vpc-12345678",
          "gcpProjectID": "my-project",
          "gcpProjectNumber": "123456789012",
          "hostClusterID": "hc-12345678"
        }
      },
      "CustomNetworkResourceDetail": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string",
            "description": "CIDR block of the network",
            "example": "10.177.0.0/16"
          },
          "id": {
            "type": "string",
            "description": "ID of a custom network",
            "example": "Illo adipisci pariatur pariatur."
          },
          "name": {
            "type": "string",
            "description": "User friendly network name",
            "example": "Prod us-east-1"
          }
        },
        "description": "Details of custom network used for instance",
        "example": {
          "cidr": "10.177.0.0/16",
          "id": "n-12345678",
          "name": "Prod us-east-1"
        }
      },
      "CustomTag": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the custom tag",
            "example": "customKey"
          },
          "value": {
            "type": "string",
            "description": "Value of the custom tag",
            "example": "customValue"
          }
        },
        "description": "Custom tag",
        "example": {
          "key": "customKey",
          "value": "customValue"
        },
        "required": ["key", "value"]
      },
      "CustomULimits": {
        "type": "object",
        "properties": {
          "ULimitsName": {
            "type": "string",
            "description": "The name of the ulimit",
            "example": "core|nofile|rss|stack|nproc|msgqueue"
          },
          "ULimitsType": {
            "type": "string",
            "example": "Soft|Hard"
          },
          "ULimitsValue": {
            "type": "integer",
            "description": "The value of the ulimit",
            "example": 1000,
            "format": "int64"
          }
        },
        "example": {
          "ULimitsName": "nofile",
          "ULimitsType": "Soft",
          "ULimitsValue": 1000
        },
        "required": ["ULimitsName", "ULimitsType", "ULimitsValue"]
      },
      "CustomerInviteUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@example.com",
            "format": "email",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "l",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@example.com",
          "token": "s25"
        },
        "required": ["token", "email"]
      },
      "CustomerInviteUserRequest2": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@example.com",
            "format": "email",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@example.com"
        },
        "required": ["email"]
      },
      "CustomerLoginWithIdentityProviderRequest": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "type": "string",
            "description": "The authorization code from the Identity Provider",
            "example": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&"
          },
          "companyDescription": {
            "type": "string",
            "example": "We sell xyz database software",
            "minLength": 1
          },
          "companyUrl": {
            "type": "string",
            "example": "https://www.mywebsite.com",
            "minLength": 1
          },
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "identityProviderName": {
            "type": "string",
            "description": "The name of the identity provider",
            "example": "Google|GitHub|Google for CTL|GitHub for CTL"
          },
          "invitedEmail": {
            "type": "string",
            "description": "Email address that the user was invited with",
            "example": "abc@gmail.com",
            "format": "email"
          },
          "legalCompanyName": {
            "type": "string",
            "example": "mywebsite",
            "minLength": 1
          },
          "redirectUri": {
            "type": "string",
            "description": "The redirect URI used to get the authorization code",
            "example": "https://www.example/redirect"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "8h",
            "minLength": 1
          }
        },
        "example": {
          "authorizationCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
          "companyDescription": "We sell xyz database software",
          "companyUrl": "https://www.mywebsite.com",
          "environmentType": "DEV",
          "identityProviderName": "Google",
          "invitedEmail": "abc@gmail.com",
          "legalCompanyName": "mywebsite",
          "redirectUri": "https://www.example/redirect",
          "token": "yd"
        },
        "required": ["token", "identityProviderName", "authorizationCode"]
      },
      "CustomerLoginWithIdentityProviderRequest2": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "type": "string",
            "description": "The authorization code from the Identity Provider",
            "example": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&"
          },
          "companyDescription": {
            "type": "string",
            "example": "We sell xyz database software",
            "minLength": 1
          },
          "companyUrl": {
            "type": "string",
            "example": "https://www.mywebsite.com",
            "minLength": 1
          },
          "environmentType": {
            "type": "string",
            "description": "The environment type of the portal that the customer is signing in to",
            "example": "DEV"
          },
          "identityProviderName": {
            "type": "string",
            "description": "The name of the Identity Provider",
            "example": "Google"
          },
          "invitedEmail": {
            "type": "string",
            "description": "Email address that the user was invited with",
            "example": "abc@gmail.com",
            "format": "email"
          },
          "legalCompanyName": {
            "type": "string",
            "example": "mywebsite",
            "minLength": 1
          },
          "redirectUri": {
            "type": "string",
            "description": "The redirect URI used to get the authorization code",
            "example": "https://www.example/redirect"
          }
        },
        "example": {
          "authorizationCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
          "companyDescription": "We sell xyz database software",
          "companyUrl": "https://www.mywebsite.com",
          "environmentType": "DEV",
          "identityProviderName": "Google",
          "invitedEmail": "abc@gmail.com",
          "legalCompanyName": "mywebsite",
          "redirectUri": "https://www.example/redirect"
        },
        "required": ["identityProviderName", "authorizationCode"]
      },
      "CustomerLoginWithIdentityProviderResult": {
        "type": "object",
        "properties": {
          "jwtToken": {
            "type": "string",
            "description": "The jwt token",
            "example": ""
          }
        },
        "example": {
          "jwtToken": ""
        },
        "required": ["jwtToken"]
      },
      "CustomerResetPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@example.com",
            "format": "email",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "4",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@example.com",
          "token": "yn"
        },
        "required": ["token", "email"]
      },
      "CustomerResetPasswordRequest2": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@example.com",
            "format": "email",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@example.com"
        },
        "required": ["email"]
      },
      "CustomerSigninRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "hashedPassword": {
            "type": "string",
            "example": "deprecated",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "example": "password",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "pb",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "environmentType": "DEV",
          "hashedPassword": "deprecated",
          "password": "password",
          "token": "1f"
        },
        "required": ["token", "email"]
      },
      "CustomerSigninRequest2": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "environmentType": {
            "type": "string",
            "description": "The environment type of the portal that the customer is signing in to",
            "example": "DEV"
          },
          "hashedPassword": {
            "type": "string",
            "example": "deprecated",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "example": "password",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "environmentType": "DEV",
          "hashedPassword": "deprecated",
          "password": "password"
        },
        "required": ["email"]
      },
      "CustomerSigninResult": {
        "type": "object",
        "properties": {
          "jwtToken": {
            "type": "string",
            "description": "The jwt token",
            "example": ""
          }
        },
        "example": {
          "jwtToken": ""
        },
        "required": ["jwtToken"]
      },
      "CustomerSignupRequest": {
        "type": "object",
        "properties": {
          "companyDescription": {
            "type": "string",
            "example": "We sell xyz database software",
            "minLength": 1
          },
          "companyUrl": {
            "type": "string",
            "example": "https://www.mywebsite.com",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "description": "Email address of the end-user",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "legalCompanyName": {
            "type": "string",
            "default": "",
            "example": "mywebsite"
          },
          "name": {
            "type": "string",
            "description": "Name of the end-user",
            "example": "John Doe",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "example": "password",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "i",
            "minLength": 1
          }
        },
        "example": {
          "companyDescription": "We sell xyz database software",
          "companyUrl": "https://www.mywebsite.com",
          "email": "abc@gmail.com",
          "legalCompanyName": "mywebsite",
          "name": "John Doe",
          "password": "password",
          "token": "v"
        },
        "required": ["token", "name", "email", "password"]
      },
      "CustomerSignupRequest2": {
        "type": "object",
        "properties": {
          "companyDescription": {
            "type": "string",
            "example": "We sell xyz database software",
            "minLength": 1
          },
          "companyUrl": {
            "type": "string",
            "example": "https://www.mywebsite.com",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "description": "Email address of the end-user",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "legalCompanyName": {
            "type": "string",
            "default": "",
            "example": "mywebsite"
          },
          "name": {
            "type": "string",
            "description": "Name of the end-user",
            "example": "John Doe",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "example": "password",
            "minLength": 1
          }
        },
        "example": {
          "companyDescription": "We sell xyz database software",
          "companyUrl": "https://www.mywebsite.com",
          "email": "abc@gmail.com",
          "legalCompanyName": "mywebsite",
          "name": "John Doe",
          "password": "password"
        },
        "required": ["name", "email", "password"]
      },
      "DeRegisterResourceMetricsConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Incidunt inventore temporibus perferendis."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "u2w",
            "minLength": 1
          }
        },
        "example": {
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "d4y"
        },
        "required": ["token", "serviceId", "id"]
      },
      "DeleteAccountConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Account Config",
            "example": "Suscipit corrupti distinctio quas voluptas."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "s7c",
            "minLength": 1
          }
        },
        "example": {
          "id": "ac-12345678",
          "token": "fyq"
        },
        "required": ["token", "id"]
      },
      "DeleteComputeConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Compute Config",
            "example": "Sequi non sint."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "n4",
            "minLength": 1
          }
        },
        "example": {
          "id": "cc-12345678",
          "serviceId": "s-12345678",
          "token": "tq"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeleteCustomDomainRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Custom Domain",
            "example": "Pariatur facere voluptatem dolorum qui corrupti ut."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "w",
            "minLength": 1
          }
        },
        "example": {
          "id": "cd-12345678",
          "token": "o8"
        },
        "required": ["token", "id"]
      },
      "DeleteCustomNetworkRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a custom network",
            "example": "Enim non."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "f",
            "minLength": 1
          }
        },
        "example": {
          "id": "n-12345678",
          "token": "54"
        },
        "required": ["token", "id"]
      },
      "DeleteDeploymentConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Deployment Config",
            "example": "Autem et quia sunt non."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "0iu",
            "minLength": 1
          }
        },
        "example": {
          "id": "dc-12345678",
          "token": "2tw"
        },
        "required": ["token", "id"]
      },
      "DeleteHelmPackageRequest": {
        "type": "object",
        "properties": {
          "chartName": {
            "type": "string",
            "description": "The chart name of the Helm package to delete",
            "example": "my-chart"
          },
          "chartVersion": {
            "type": "string",
            "description": "The chart version of the Helm package to delete",
            "example": "1.0.0"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "b0",
            "minLength": 1
          }
        },
        "example": {
          "chartName": "my-chart",
          "chartVersion": "1.0.0",
          "token": "w"
        },
        "required": ["token", "chartName", "chartVersion"]
      },
      "DeleteIdentityProviderRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Identity Provider",
            "example": "Est in aperiam."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "k",
            "minLength": 1
          }
        },
        "example": {
          "id": "idp-12345678",
          "token": "r9b"
        },
        "required": ["token", "id"]
      },
      "DeleteImageConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "Provident ratione omnis illo."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "h",
            "minLength": 1
          }
        },
        "description": "Delete an image configuration",
        "example": {
          "id": "imgc-12345678",
          "serviceId": "s-12345678",
          "token": "bu"
        },
        "required": ["token", "serviceId", "id"]
      },
      "DeleteImageRegistryRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Image Registry",
            "example": "Odit ullam vel iusto sit et."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "yh",
            "minLength": 1
          }
        },
        "description": "Delete an HTTP API v2 Docker Image Registry",
        "example": {
          "id": "ir-12345678",
          "token": "w0"
        },
        "required": ["token", "id"]
      },
      "DeleteInfraConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Molestias modi error fugiat eaque non harum."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "kwa",
            "minLength": 1
          }
        },
        "example": {
          "id": "ic-12345678",
          "serviceId": "s-12345678",
          "token": "ts"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeleteInputParameterRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Input Parameter",
            "example": "Nisi molestiae molestiae sunt quam ipsam."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "n",
            "minLength": 1
          }
        },
        "example": {
          "id": "var-12345678",
          "serviceId": "s-12345678",
          "token": "7"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeleteLimitRequest": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "description": "The limit family",
            "example": "SERVICE"
          },
          "key": {
            "type": "string",
            "description": "Unique key to identify the limit",
            "example": "MAX_VIRTUAL_CORES_PER_RESOURCE"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "x",
            "minLength": 1
          }
        },
        "example": {
          "family": "COMPUTE_INFRA",
          "key": "MAX_VIRTUAL_CORES_PER_RESOURCE",
          "token": "d"
        },
        "required": ["token", "key", "family"]
      },
      "DeleteNetworkConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Network Config",
            "example": "Mollitia consectetur dolore ullam debitis maiores molestias."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "w",
            "minLength": 1
          }
        },
        "example": {
          "id": "nc-12345678",
          "serviceId": "s-12345678",
          "token": "j8"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeleteOutputParameterRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Output Parameter",
            "example": "Et perspiciatis nostrum adipisci exercitationem."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "1ox",
            "minLength": 1
          }
        },
        "example": {
          "id": "op-12345678",
          "serviceId": "s-12345678",
          "token": "lq"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeletePipelineRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Pipeline",
            "example": "Et adipisci aliquam neque."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "n",
            "minLength": 1
          }
        },
        "example": {
          "id": "p-12345678",
          "serviceId": "s-12345678",
          "token": "e5"
        },
        "required": ["token"]
      },
      "DeleteProductTierBillingPlanRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Product Tier Billing Plan",
            "example": "Velit ad dicta repellat maiores vel."
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Eveniet esse magni et eaque est est."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "jx",
            "minLength": 1
          }
        },
        "example": {
          "id": "bp-12345678",
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "a"
        },
        "required": ["token", "id", "serviceId", "productTierId"]
      },
      "DeleteProductTierRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Quasi consequatur facilis et quod quis."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "40",
            "minLength": 1
          }
        },
        "example": {
          "id": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "55"
        },
        "required": ["token", "serviceId", "id"]
      },
      "DeleteResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Et magni."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "a6",
            "minLength": 1
          }
        },
        "example": {
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "i"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id"
        ]
      },
      "DeleteResourceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "At consequuntur deleniti nesciunt a voluptas."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "e",
            "minLength": 1
          }
        },
        "example": {
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "mr2"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeleteSaaSPortalCustomDomainRequest": {
        "type": "object",
        "properties": {
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "5h",
            "minLength": 1
          }
        },
        "example": {
          "environmentType": "DEV",
          "token": "vfj"
        },
        "required": ["token", "environmentType"]
      },
      "DeleteServiceAPIRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Dolores natus error."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "tm",
            "minLength": 1
          }
        },
        "example": {
          "id": "sa-12345678",
          "serviceId": "s-12345678",
          "token": "u"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeleteServiceEnvironmentRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "jkw",
            "minLength": 1
          }
        },
        "example": {
          "id": "se-12345678",
          "serviceId": "s-12345678",
          "token": "psy"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeleteServiceModelRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Enim aut culpa magnam."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "x6",
            "minLength": 1
          }
        },
        "example": {
          "id": "sm-12345678",
          "serviceId": "s-12345678",
          "token": "p6"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeleteServiceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "u",
            "minLength": 1
          }
        },
        "example": {
          "id": "s-12345678",
          "token": "366"
        },
        "required": ["token", "id"]
      },
      "DeleteServicesOrchestrationRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Services Orchestration",
            "example": "Excepturi esse."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "a64",
            "minLength": 1
          }
        },
        "example": {
          "id": "so-12345678",
          "token": "7"
        },
        "required": ["token", "id"]
      },
      "DeleteStorageConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Storage Config",
            "example": "Occaecati nostrum."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "0",
            "minLength": 1
          }
        },
        "example": {
          "id": "sc-12345678",
          "serviceId": "s-12345678",
          "token": "k"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeleteStorageVolumeConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Storage Volume Config",
            "example": "Nam consequatur eaque aut id rerum."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "we",
            "minLength": 1
          }
        },
        "example": {
          "id": "svc-12345678",
          "serviceId": "s-12345678",
          "token": "5bk"
        },
        "required": ["token", "serviceId", "id"]
      },
      "DeleteSubscriptionRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Subscription",
            "example": "Atque voluptatem."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "7ew",
            "minLength": 1
          }
        },
        "example": {
          "id": "sub-12345678",
          "token": "dpg"
        },
        "required": ["token", "id"]
      },
      "DeleteUpgradePathRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Upgrade Path",
            "example": "Laborum alias et nostrum inventore in saepe."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "h6",
            "minLength": 1
          }
        },
        "example": {
          "id": "up-12345678",
          "serviceId": "s-12345678",
          "token": "9p0"
        },
        "required": ["token"]
      },
      "DeleteUserRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "rb",
            "minLength": 1
          }
        },
        "example": {
          "token": "dru"
        },
        "required": ["token"]
      },
      "DemoRequest": {
        "type": "object",
        "properties": {
          "company": {
            "type": "string",
            "example": "ABC",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "minLength": 1
          },
          "phone": {
            "type": "string",
            "example": "+1-234567890"
          }
        },
        "example": {
          "company": "ABC",
          "email": "abc@gmail.com",
          "name": "John Doe",
          "phone": "+1-234567890"
        },
        "required": ["name", "email", "company"]
      },
      "DeploymentCellHealthDetail": {
        "type": "object",
        "properties": {
          "cloudProvider": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "hostClusterID": {
            "type": "string",
            "description": "ID of a Host Cluster",
            "example": "Velit maiores ex quisquam est sed dolor."
          },
          "instanceHealth": {
            "type": "object",
            "description": "The health summary of the instances by instance ID",
            "example": {
              "Expedita qui iure occaecati.": {
                "instanceID": "instance-12345678",
                "lifeCycleStatus": "RUNNING",
                "resourcesHealth": {
                  "Iste vero quo reiciendis blanditiis.": {
                    "nodesHealth": {
                      "At ut.": {
                        "availabilityZone": "us-east-2a",
                        "connectivityStatus": "HEALTHY",
                        "diskHealth": "HEALTHY",
                        "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                        "events": ["event-1", "event-2"],
                        "integrationsHealth": {
                          "CustomerObservabilityHealth": "HEALTHY",
                          "InternalObservabilityHealth": "HEALTHY"
                        },
                        "loadHealth": "LOAD_NORMAL",
                        "loadStatus": "LOAD_NORMAL",
                        "nodeHealth": "HEALTHY",
                        "nodeName": "postgres-0",
                        "ports": [80, 443],
                        "processHealth": "HEALTHY",
                        "processLiveness": "HEALTHY",
                        "recentLogs": "Log message",
                        "status": "HEALTHY"
                      }
                    },
                    "resourceID": "resource-12345678",
                    "resourceKey": "primary",
                    "resourceType": "Kustomize",
                    "status": "HEALTHY"
                  },
                  "Sed aut corrupti commodi.": {
                    "nodesHealth": {
                      "At ut.": {
                        "availabilityZone": "us-east-2a",
                        "connectivityStatus": "HEALTHY",
                        "diskHealth": "HEALTHY",
                        "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                        "events": ["event-1", "event-2"],
                        "integrationsHealth": {
                          "CustomerObservabilityHealth": "HEALTHY",
                          "InternalObservabilityHealth": "HEALTHY"
                        },
                        "loadHealth": "LOAD_NORMAL",
                        "loadStatus": "LOAD_NORMAL",
                        "nodeHealth": "HEALTHY",
                        "nodeName": "postgres-0",
                        "ports": [80, 443],
                        "processHealth": "HEALTHY",
                        "processLiveness": "HEALTHY",
                        "recentLogs": "Log message",
                        "status": "HEALTHY"
                      }
                    },
                    "resourceID": "resource-12345678",
                    "resourceKey": "primary",
                    "resourceType": "Kustomize",
                    "status": "HEALTHY"
                  },
                  "Velit velit et.": {
                    "nodesHealth": {
                      "At ut.": {
                        "availabilityZone": "us-east-2a",
                        "connectivityStatus": "HEALTHY",
                        "diskHealth": "HEALTHY",
                        "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                        "events": ["event-1", "event-2"],
                        "integrationsHealth": {
                          "CustomerObservabilityHealth": "HEALTHY",
                          "InternalObservabilityHealth": "HEALTHY"
                        },
                        "loadHealth": "LOAD_NORMAL",
                        "loadStatus": "LOAD_NORMAL",
                        "nodeHealth": "HEALTHY",
                        "nodeName": "postgres-0",
                        "ports": [80, 443],
                        "processHealth": "HEALTHY",
                        "processLiveness": "HEALTHY",
                        "recentLogs": "Log message",
                        "status": "HEALTHY"
                      }
                    },
                    "resourceID": "resource-12345678",
                    "resourceKey": "primary",
                    "resourceType": "Kustomize",
                    "status": "HEALTHY"
                  }
                },
                "status": "HEALTHY"
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/InstanceHealthSummary"
            }
          },
          "regionCode": {
            "type": "string",
            "description": "The region code of the host cluster",
            "example": "us-west-1"
          },
          "serviceEnvironmentName": {
            "type": "string",
            "description": "The name of the service environment",
            "example": "prod"
          },
          "serviceName": {
            "type": "string",
            "description": "The name of the service",
            "example": "mysql"
          }
        },
        "example": {
          "cloudProvider": "aws",
          "hostClusterID": "hc-12345678",
          "instanceHealth": {
            "Blanditiis non ut.": {
              "instanceID": "instance-12345678",
              "lifeCycleStatus": "RUNNING",
              "resourcesHealth": {
                "Iste vero quo reiciendis blanditiis.": {
                  "nodesHealth": {
                    "At ut.": {
                      "availabilityZone": "us-east-2a",
                      "connectivityStatus": "HEALTHY",
                      "diskHealth": "HEALTHY",
                      "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "events": ["event-1", "event-2"],
                      "integrationsHealth": {
                        "CustomerObservabilityHealth": "HEALTHY",
                        "InternalObservabilityHealth": "HEALTHY"
                      },
                      "loadHealth": "LOAD_NORMAL",
                      "loadStatus": "LOAD_NORMAL",
                      "nodeHealth": "HEALTHY",
                      "nodeName": "postgres-0",
                      "ports": [80, 443],
                      "processHealth": "HEALTHY",
                      "processLiveness": "HEALTHY",
                      "recentLogs": "Log message",
                      "status": "HEALTHY"
                    }
                  },
                  "resourceID": "resource-12345678",
                  "resourceKey": "primary",
                  "resourceType": "Kustomize",
                  "status": "HEALTHY"
                },
                "Sed aut corrupti commodi.": {
                  "nodesHealth": {
                    "At ut.": {
                      "availabilityZone": "us-east-2a",
                      "connectivityStatus": "HEALTHY",
                      "diskHealth": "HEALTHY",
                      "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "events": ["event-1", "event-2"],
                      "integrationsHealth": {
                        "CustomerObservabilityHealth": "HEALTHY",
                        "InternalObservabilityHealth": "HEALTHY"
                      },
                      "loadHealth": "LOAD_NORMAL",
                      "loadStatus": "LOAD_NORMAL",
                      "nodeHealth": "HEALTHY",
                      "nodeName": "postgres-0",
                      "ports": [80, 443],
                      "processHealth": "HEALTHY",
                      "processLiveness": "HEALTHY",
                      "recentLogs": "Log message",
                      "status": "HEALTHY"
                    }
                  },
                  "resourceID": "resource-12345678",
                  "resourceKey": "primary",
                  "resourceType": "Kustomize",
                  "status": "HEALTHY"
                },
                "Velit velit et.": {
                  "nodesHealth": {
                    "At ut.": {
                      "availabilityZone": "us-east-2a",
                      "connectivityStatus": "HEALTHY",
                      "diskHealth": "HEALTHY",
                      "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "events": ["event-1", "event-2"],
                      "integrationsHealth": {
                        "CustomerObservabilityHealth": "HEALTHY",
                        "InternalObservabilityHealth": "HEALTHY"
                      },
                      "loadHealth": "LOAD_NORMAL",
                      "loadStatus": "LOAD_NORMAL",
                      "nodeHealth": "HEALTHY",
                      "nodeName": "postgres-0",
                      "ports": [80, 443],
                      "processHealth": "HEALTHY",
                      "processLiveness": "HEALTHY",
                      "recentLogs": "Log message",
                      "status": "HEALTHY"
                    }
                  },
                  "resourceID": "resource-12345678",
                  "resourceKey": "primary",
                  "resourceType": "Kustomize",
                  "status": "HEALTHY"
                }
              },
              "status": "HEALTHY"
            },
            "Nulla nisi.": {
              "instanceID": "instance-12345678",
              "lifeCycleStatus": "RUNNING",
              "resourcesHealth": {
                "Iste vero quo reiciendis blanditiis.": {
                  "nodesHealth": {
                    "At ut.": {
                      "availabilityZone": "us-east-2a",
                      "connectivityStatus": "HEALTHY",
                      "diskHealth": "HEALTHY",
                      "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "events": ["event-1", "event-2"],
                      "integrationsHealth": {
                        "CustomerObservabilityHealth": "HEALTHY",
                        "InternalObservabilityHealth": "HEALTHY"
                      },
                      "loadHealth": "LOAD_NORMAL",
                      "loadStatus": "LOAD_NORMAL",
                      "nodeHealth": "HEALTHY",
                      "nodeName": "postgres-0",
                      "ports": [80, 443],
                      "processHealth": "HEALTHY",
                      "processLiveness": "HEALTHY",
                      "recentLogs": "Log message",
                      "status": "HEALTHY"
                    }
                  },
                  "resourceID": "resource-12345678",
                  "resourceKey": "primary",
                  "resourceType": "Kustomize",
                  "status": "HEALTHY"
                },
                "Sed aut corrupti commodi.": {
                  "nodesHealth": {
                    "At ut.": {
                      "availabilityZone": "us-east-2a",
                      "connectivityStatus": "HEALTHY",
                      "diskHealth": "HEALTHY",
                      "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "events": ["event-1", "event-2"],
                      "integrationsHealth": {
                        "CustomerObservabilityHealth": "HEALTHY",
                        "InternalObservabilityHealth": "HEALTHY"
                      },
                      "loadHealth": "LOAD_NORMAL",
                      "loadStatus": "LOAD_NORMAL",
                      "nodeHealth": "HEALTHY",
                      "nodeName": "postgres-0",
                      "ports": [80, 443],
                      "processHealth": "HEALTHY",
                      "processLiveness": "HEALTHY",
                      "recentLogs": "Log message",
                      "status": "HEALTHY"
                    }
                  },
                  "resourceID": "resource-12345678",
                  "resourceKey": "primary",
                  "resourceType": "Kustomize",
                  "status": "HEALTHY"
                },
                "Velit velit et.": {
                  "nodesHealth": {
                    "At ut.": {
                      "availabilityZone": "us-east-2a",
                      "connectivityStatus": "HEALTHY",
                      "diskHealth": "HEALTHY",
                      "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "events": ["event-1", "event-2"],
                      "integrationsHealth": {
                        "CustomerObservabilityHealth": "HEALTHY",
                        "InternalObservabilityHealth": "HEALTHY"
                      },
                      "loadHealth": "LOAD_NORMAL",
                      "loadStatus": "LOAD_NORMAL",
                      "nodeHealth": "HEALTHY",
                      "nodeName": "postgres-0",
                      "ports": [80, 443],
                      "processHealth": "HEALTHY",
                      "processLiveness": "HEALTHY",
                      "recentLogs": "Log message",
                      "status": "HEALTHY"
                    }
                  },
                  "resourceID": "resource-12345678",
                  "resourceKey": "primary",
                  "resourceType": "Kustomize",
                  "status": "HEALTHY"
                }
              },
              "status": "HEALTHY"
            }
          },
          "regionCode": "us-west-1",
          "serviceEnvironmentName": "prod",
          "serviceName": "mysql"
        }
      },
      "DeploymentCellHealthRequest": {
        "type": "object",
        "properties": {
          "hostClusterID": {
            "type": "string",
            "description": "ID of a Host Cluster",
            "example": "Quae officia repellendus dolores expedita nostrum ut."
          },
          "serviceEnvironmentID": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceID": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "su",
            "minLength": 1
          }
        },
        "example": {
          "hostClusterID": "hc-12345678",
          "serviceEnvironmentID": "se-12345678",
          "serviceID": "s-12345678",
          "token": "n47"
        },
        "required": ["token"]
      },
      "DeploymentCellHealthSummary": {
        "type": "object",
        "properties": {
          "deployingInstances": {
            "type": "integer",
            "description": "The number of instances currently deploying",
            "example": 5236384181412351000,
            "format": "int64"
          },
          "healthyInstances": {
            "type": "integer",
            "description": "The number of healthy instances in the cell",
            "example": 1035028458864677800,
            "format": "int64"
          },
          "hostClusterID": {
            "type": "string",
            "description": "ID of a Host Cluster",
            "example": "Molestias est doloremque ut."
          },
          "message": {
            "type": "string",
            "description": "The status message",
            "example": "Cell is healthy"
          },
          "status": {
            "type": "string",
            "description": "The status of the cell",
            "example": "Healthy"
          },
          "totalInstances": {
            "type": "integer",
            "description": "The total number of instances in the cell",
            "example": 425665229313322300,
            "format": "int64"
          },
          "unhealthyInstances": {
            "type": "integer",
            "description": "The number of unhealthy instances in the cell",
            "example": 1829644763223385600,
            "format": "int64"
          },
          "unknownInstances": {
            "type": "integer",
            "description": "The number of instances with unknown status",
            "example": 1702547447907941400,
            "format": "int64"
          }
        },
        "example": {
          "deployingInstances": 4328043965067619300,
          "healthyInstances": 41472542437337710,
          "hostClusterID": "hc-12345678",
          "message": "Cell is healthy",
          "status": "Healthy",
          "totalInstances": 1826706325936819000,
          "unhealthyInstances": 8581707099726336000,
          "unknownInstances": 4762696981967375000
        },
        "required": [
          "hostClusterID",
          "status",
          "message",
          "totalInstances",
          "healthyInstances",
          "unhealthyInstances",
          "deployingInstances"
        ]
      },
      "DeprecateResourceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Delectus asperiores fuga adipisci."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "z",
            "minLength": 1
          }
        },
        "example": {
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "de"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeprecateServiceAPIRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Rerum fuga et."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "jbw",
            "minLength": 1
          }
        },
        "example": {
          "id": "sa-12345678",
          "serviceId": "s-12345678",
          "token": "7s"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DeprecateTierVersionSetRequest": {
        "type": "object",
        "properties": {
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Exercitationem earum vel."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "fnt",
            "minLength": 1
          },
          "version": {
            "type": "string",
            "description": "The version number for the specific version set.",
            "example": "3.0"
          }
        },
        "example": {
          "productTierId": "Beatae beatae.",
          "serviceId": "s-12345678",
          "token": "jsl",
          "version": "3.0"
        },
        "required": ["token", "version", "serviceId", "productTierId"]
      },
      "DeregisterActionHookRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Sit tempore eum omnis quibusdam."
          },
          "scope": {
            "type": "string",
            "description": "The scope of the hook",
            "example": "CLUSTER|NODE"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "qot",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "description": "The type of hook to execute",
            "example": "INIT|ADD|REMOVE|PROMOTE|DEMOTE|HEALTH_CHECK|POST_START|POST_UPGRADE|PRE_STOP"
          }
        },
        "example": {
          "id": "r-12345678",
          "scope": "CLUSTER",
          "serviceId": "s-12345678",
          "token": "ou",
          "type": "ADD"
        },
        "required": ["token", "serviceId", "id", "type", "scope"]
      },
      "DeregisterActionHookRequest2": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "The scope of the hook",
            "example": "CLUSTER"
          },
          "type": {
            "type": "string",
            "description": "The type of hook to execute",
            "example": "ADD"
          }
        },
        "example": {
          "scope": "CLUSTER",
          "type": "ADD"
        },
        "required": ["type", "scope"]
      },
      "DescribeAccountConfigByAWSAccountIDRequest": {
        "type": "object",
        "properties": {
          "awsAccountID": {
            "type": "string",
            "description": "The AWS account ID",
            "example": "123456789012"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "lfi",
            "minLength": 1
          }
        },
        "example": {
          "awsAccountID": "123456789012",
          "token": "a"
        },
        "required": ["token", "awsAccountID"]
      },
      "DescribeAccountConfigByAWSAccountIDResult": {
        "type": "object",
        "properties": {
          "awsAccountID": {
            "type": "string",
            "description": "The AWS account ID",
            "example": "123456789012"
          },
          "awsBootstrapRoleARN": {
            "type": "string",
            "description": "The security role ARN or service account ARN that grants access to operate the infra",
            "example": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>"
          },
          "awsCloudFormationNoLBTemplateURL": {
            "type": "string",
            "description": "The URL to the CloudFormation template (no LoadBalancer policy version)",
            "example": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml"
          },
          "awsCloudFormationTemplateURL": {
            "type": "string",
            "description": "The URL to the CloudFormation template",
            "example": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml"
          },
          "byoaInstanceIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Sed aliquid sit quae dolorum dolorem."
            },
            "description": "The BYOA instance IDs that this account config is tied to",
            "example": ["instance-12345678", "instance-abcdefgh"]
          },
          "cloudProviderId": {
            "type": "string",
            "description": "ID of an CloudProvider",
            "example": "Quod ab et iste vel dolorem doloremque."
          },
          "description": {
            "type": "string",
            "description": "The description for the account",
            "example": "An AWS account hosting multiple dev environments"
          },
          "id": {
            "type": "string",
            "description": "ID of an Account Config",
            "example": "Voluptatum consectetur soluta."
          },
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Dev AWS account"
          },
          "status": {
            "type": "string",
            "description": "The status of the account configuration",
            "example": "PENDING|VERIFYING|READY|FAILED|DELETING"
          },
          "statusMessage": {
            "type": "string",
            "description": "The status message of the account",
            "example": "Account is ready"
          }
        },
        "description": "Account configuration including the role required to access",
        "example": {
          "awsAccountID": "123456789012",
          "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
          "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
          "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
          "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
          "cloudProviderId": "infra-12345678",
          "description": "An AWS account hosting multiple dev environments",
          "id": "ac-12345678",
          "name": "Dev AWS account",
          "status": "READY",
          "statusMessage": "Account is ready"
        },
        "required": [
          "id",
          "name",
          "description",
          "awsAccountID",
          "awsBootstrapRoleARN",
          "cloudProviderId",
          "status",
          "statusMessage"
        ]
      },
      "DescribeAccountConfigByGCPProjectIDRequest": {
        "type": "object",
        "properties": {
          "gcpProjectID": {
            "type": "string",
            "description": "The GCP project ID",
            "example": "my-project"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "124",
            "minLength": 1
          }
        },
        "example": {
          "gcpProjectID": "my-project",
          "token": "8"
        },
        "required": ["token", "gcpProjectID"]
      },
      "DescribeAccountConfigByGCPProjectIDResult": {
        "type": "object",
        "properties": {
          "byoaInstanceIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Quia quia."
            },
            "description": "The BYOA instance IDs that this account config is tied to",
            "example": ["instance-12345678", "instance-abcdefgh"]
          },
          "cloudProviderId": {
            "type": "string",
            "description": "ID of an CloudProvider",
            "example": "Eveniet sit sapiente sunt iusto voluptate."
          },
          "description": {
            "type": "string",
            "description": "The description for the account",
            "example": "An AWS account hosting multiple dev environments"
          },
          "gcpProjectID": {
            "type": "string",
            "description": "The GCP project ID",
            "example": "my-project"
          },
          "gcpProjectNumber": {
            "type": "string",
            "description": "The GCP project number",
            "example": "123456789012"
          },
          "gcpServiceAccountEmail": {
            "type": "string",
            "description": "The GCP service account email",
            "example": "bootstrap@my-project.iam.gserviceaccount.com"
          },
          "id": {
            "type": "string",
            "description": "ID of an Account Config",
            "example": "Doloremque perspiciatis itaque dolores aut corporis nisi."
          },
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Dev AWS account"
          },
          "status": {
            "type": "string",
            "description": "The status of the account configuration",
            "example": "PENDING|VERIFYING|READY|FAILED|DELETING"
          },
          "statusMessage": {
            "type": "string",
            "description": "The status message of the account",
            "example": "Account is ready"
          }
        },
        "description": "Account configuration including the role required to access",
        "example": {
          "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
          "cloudProviderId": "infra-12345678",
          "description": "An AWS account hosting multiple dev environments",
          "gcpProjectID": "my-project",
          "gcpProjectNumber": "123456789012",
          "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
          "id": "ac-12345678",
          "name": "Dev AWS account",
          "status": "READY",
          "statusMessage": "Account is ready"
        },
        "required": [
          "id",
          "name",
          "description",
          "gcpProjectID",
          "gcpProjectNumber",
          "gcpServiceAccountEmail",
          "cloudProviderId",
          "status",
          "statusMessage"
        ]
      },
      "DescribeAccountConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Account Config",
            "example": "Numquam omnis laboriosam."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "h",
            "minLength": 1
          }
        },
        "example": {
          "id": "ac-12345678",
          "token": "1"
        },
        "required": ["token", "id"]
      },
      "DescribeAccountConfigResult": {
        "type": "object",
        "properties": {
          "awsAccountID": {
            "type": "string",
            "description": "The AWS account ID",
            "example": "123456789012"
          },
          "awsBootstrapRoleARN": {
            "type": "string",
            "description": "The security role ARN or service account ARN that grants access to operate the infra",
            "example": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>"
          },
          "awsCloudFormationNoLBTemplateURL": {
            "type": "string",
            "description": "The URL to the CloudFormation template (no LoadBalancer policy version)",
            "example": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml"
          },
          "awsCloudFormationTemplateURL": {
            "type": "string",
            "description": "The URL to the CloudFormation template",
            "example": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml"
          },
          "byoaInstanceIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Maiores aut."
            },
            "description": "The BYOA instance IDs that this account config is tied to",
            "example": ["instance-12345678", "instance-abcdefgh"]
          },
          "cloudProviderId": {
            "type": "string",
            "description": "ID of an CloudProvider",
            "example": "Facere incidunt."
          },
          "description": {
            "type": "string",
            "description": "The description for the account",
            "example": "An AWS account hosting multiple dev environments"
          },
          "gcpProjectID": {
            "type": "string",
            "description": "The GCP project ID",
            "example": "my-project"
          },
          "gcpProjectNumber": {
            "type": "string",
            "description": "The GCP project number",
            "example": "123456789012"
          },
          "gcpServiceAccountEmail": {
            "type": "string",
            "description": "The GCP service account email",
            "example": "bootstrap@my-project.iam.gserviceaccount.com"
          },
          "id": {
            "type": "string",
            "description": "ID of an Account Config",
            "example": "Esse provident deserunt."
          },
          "name": {
            "type": "string",
            "description": "The name of the account",
            "example": "Dev AWS account"
          },
          "status": {
            "type": "string",
            "description": "The status of the account configuration",
            "example": "PENDING|VERIFYING|READY|FAILED|DELETING"
          },
          "statusMessage": {
            "type": "string",
            "description": "The status message of the account",
            "example": "Account is ready"
          }
        },
        "description": "Account configuration including the role required to access",
        "example": {
          "awsAccountID": "123456789012",
          "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
          "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
          "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
          "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
          "cloudProviderId": "infra-12345678",
          "description": "An AWS account hosting multiple dev environments",
          "gcpProjectID": "my-project",
          "gcpProjectNumber": "123456789012",
          "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
          "id": "ac-12345678",
          "name": "Dev AWS account",
          "status": "READY",
          "statusMessage": "Account is ready"
        },
        "required": ["id", "name", "description", "cloudProviderId", "status", "statusMessage"]
      },
      "DescribeAuditEventRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Event",
            "example": "Reprehenderit eum quaerat itaque nihil."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "wca",
            "minLength": 1
          }
        },
        "example": {
          "id": "event-12345678",
          "subscriptionId": "sub-abcd1234",
          "token": "f"
        },
        "required": ["token", "id"]
      },
      "DescribeAuditEventResult": {
        "type": "object",
        "properties": {
          "eventSource": {
            "type": "string",
            "description": "The event source",
            "example": "Customer, Infra or Maintenance"
          },
          "id": {
            "type": "string",
            "description": "ID of a Event",
            "example": "Consequatur eligendi quis nostrum tempore atque eius."
          },
          "message": {
            "type": "string",
            "description": "Resource Instance of message",
            "example": "instance-abcd1234 created"
          },
          "orgId": {
            "type": "string",
            "description": "ID of an Org",
            "example": "Vel ex quia."
          },
          "orgName": {
            "type": "string",
            "description": "The organization name of the user that caused the event",
            "example": "Acme Corporation"
          },
          "resourceInstanceId": {
            "type": "string",
            "description": "Instance Id of the resource instance",
            "example": "instance-abcd1234"
          },
          "resourceName": {
            "type": "string",
            "description": "Name of the resource",
            "example": "Galera"
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "time": {
            "type": "string",
            "description": "The event time",
            "example": "2023-01-10T00:00:00Z"
          },
          "userId": {
            "type": "string",
            "description": "ID of a User",
            "example": "Laboriosam et ut voluptas aut."
          },
          "userName": {
            "type": "string",
            "description": "The user name of the user that caused the event",
            "example": "John Doe"
          },
          "workflowFailures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowFailure"
            },
            "description": "The list of workflow events that indicate failures",
            "example": [
              {
                "eventTime": "2020-01-01T00:00:00Z",
                "message": "Bootstrap failed for reason X"
              },
              {
                "eventTime": "2020-01-01T00:01:00Z",
                "message": "Compute failed for reason Y"
              }
            ]
          }
        },
        "example": {
          "eventSource": "Customer, Infra or Maintenance",
          "id": "event-12345678",
          "message": "instance-abcd1234 created",
          "orgId": "org-12345678",
          "orgName": "Acme Corporation",
          "resourceInstanceId": "instance-abcd1234",
          "resourceName": "Galera",
          "subscriptionId": "sub-abcd1234",
          "time": "2023-01-10T00:00:00Z",
          "userId": "user-12345678",
          "userName": "John Doe",
          "workflowFailures": [
            {
              "eventTime": "2020-01-01T00:00:00Z",
              "message": "Bootstrap failed for reason X"
            },
            {
              "eventTime": "2020-01-01T00:01:00Z",
              "message": "Compute failed for reason Y"
            }
          ]
        },
        "required": ["id", "resourceName", "resourceInstanceId", "subscriptionId", "time", "message"]
      },
      "DescribeAvailabilityZoneRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an AZ",
            "example": "Enim praesentium aut eum."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "3o",
            "minLength": 1
          }
        },
        "example": {
          "id": "az-12345678",
          "token": "rhf"
        },
        "required": ["token", "id"]
      },
      "DescribeAvailabilityZoneResult": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "code": {
            "type": "string",
            "description": "Cloud-provider native availability zone code",
            "example": "us-east-1a"
          },
          "description": {
            "type": "string",
            "description": "Description of the AvailabilityZone",
            "example": "US East (N. Virginia) Availability Zone A"
          },
          "id": {
            "type": "string",
            "description": "ID of an AZ",
            "example": "Ut doloremque est ut."
          },
          "regionCode": {
            "type": "string",
            "description": "Cloud-provider native region code",
            "example": "us-east-1"
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "code": "us-east-1a",
          "description": "US East (N. Virginia) Availability Zone A",
          "id": "az-12345678",
          "regionCode": "us-east-1"
        },
        "required": ["id", "code", "description", "regionCode", "cloudProviderName"]
      },
      "DescribeCloudProviderRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an CloudProvider",
            "example": "Harum qui non voluptatum incidunt."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "2e",
            "minLength": 1
          }
        },
        "example": {
          "id": "infra-12345678",
          "token": "xa5"
        },
        "required": ["token", "id"]
      },
      "DescribeCloudProviderResult": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the CloudProvider",
            "example": "Amazon Web Services"
          },
          "id": {
            "type": "string",
            "description": "ID of an CloudProvider",
            "example": "Omnis quod."
          },
          "name": {
            "type": "string",
            "description": "Name of the CloudProvider",
            "example": "aws"
          }
        },
        "example": {
          "description": "Amazon Web Services",
          "id": "infra-12345678",
          "name": "aws"
        },
        "required": ["id", "name", "description"]
      },
      "DescribeComputeConfigRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Adipisci repellendus alias eius quo."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Et totam ut."
          },
          "id": {
            "type": "string",
            "description": "ID of a Compute Config",
            "example": "Ea optio ad impedit sed vero nulla."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "2",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Eos nesciunt laborum.",
          "id": "cc-12345678",
          "serviceId": "s-12345678",
          "token": "yw"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeComputeConfigResult": {
        "type": "object",
        "properties": {
          "autoscalingPolicy": {
            "$ref": "#/components/schemas/AutoscalingPolicy"
          },
          "cpuArchitecture": {
            "type": "string",
            "description": "Processor architecture",
            "example": "X86_64|ARM64"
          },
          "description": {
            "type": "string",
            "description": "Description of the compute config",
            "example": "my compute config description"
          },
          "id": {
            "type": "string",
            "description": "ID of a Compute Config",
            "example": "Numquam libero repudiandae consequatur dolores ipsum et."
          },
          "infraConfigIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Numquam quas ab optio vel aut provident."
            },
            "description": "The list of infra config IDs associated with the compute config.",
            "example": ["ic-12345678", "ic-abcdefgh"]
          },
          "instanceTypes": {
            "type": "object",
            "description": "The instance types for this compute config",
            "example": {
              "aws": ["t3.micro", "t3.small"],
              "azure": ["Standard_B1ls", "Standard_B1ms"],
              "gcp": ["$var.instance_type"]
            },
            "additionalProperties": true
          },
          "name": {
            "type": "string",
            "description": "Name of the compute config",
            "example": "my compute config"
          },
          "replicaCount": {
            "type": "string",
            "description": "Number of replicas to provision for this logical pool of nodes per instance of the resource",
            "example": "3"
          },
          "resources": {
            "$ref": "#/components/schemas/ResourceSpec"
          },
          "rootVolumeSizeGi": {
            "type": "integer",
            "description": "Size of the root volume in Gi",
            "example": 10,
            "format": "int64"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "warmPoolConfiguration": {
            "$ref": "#/components/schemas/WarmPoolConfiguration"
          }
        },
        "example": {
          "autoscalingPolicy": {
            "maxReplicas": 4,
            "minReplicas": 1
          },
          "cpuArchitecture": "X86_64|ARM64",
          "description": "my compute config description",
          "id": "cc-12345678",
          "infraConfigIDs": ["ic-12345678", "ic-abcdefgh"],
          "instanceTypes": {
            "aws": ["t3.micro", "t3.small"],
            "azure": ["Standard_B1ls", "Standard_B1ms"],
            "gcp": ["$var.instance_type"]
          },
          "name": "my compute config",
          "replicaCount": "3",
          "resources": {
            "limits": {
              "cpu": "1",
              "memory": "500Mi"
            },
            "requests": {
              "cpu": "0.5",
              "memory": "200Mi"
            }
          },
          "rootVolumeSizeGi": 10,
          "serviceId": "s-12345678",
          "warmPoolConfiguration": {
            "minimumNodesInPool": 1
          }
        },
        "required": ["id", "serviceId", "name", "description", "replicaCount"]
      },
      "DescribeConsumptionUserBillingDetailsRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a User",
            "example": "Quae nihil quae fugit illo."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "vx",
            "minLength": 1
          }
        },
        "example": {
          "id": "user-abcd1234",
          "token": "z"
        },
        "required": ["token", "id"]
      },
      "DescribeCustomDomainRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Custom Domain",
            "example": "Sint quod ut."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "2",
            "minLength": 1
          }
        },
        "example": {
          "id": "cd-12345678",
          "token": "8co"
        },
        "required": ["token", "id"]
      },
      "DescribeCustomDomainResult": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "The root domain of the domain to use as suffix",
            "example": "mydomain.dev"
          },
          "description": {
            "type": "string",
            "description": "The description for the domain",
            "example": "Description of the domain"
          },
          "id": {
            "type": "string",
            "description": "ID of an Custom Domain",
            "example": "Aut omnis eius qui veniam aut."
          },
          "name": {
            "type": "string",
            "description": "The name of the custom domain",
            "example": "Dev domain"
          },
          "route53Configuration": {
            "$ref": "#/components/schemas/Route53ConfigurationDescription"
          },
          "status": {
            "type": "string",
            "example": "PENDING|VERIFYING|READY|FAILED"
          },
          "statusMessage": {
            "type": "string",
            "description": "The status message of the custom domain",
            "example": "Account is ready"
          }
        },
        "description": "Custom domain including the role required to access",
        "example": {
          "customDomain": "mydomain.dev",
          "description": "Description of the domain",
          "id": "cd-12345678",
          "name": "Dev domain",
          "route53Configuration": {
            "awsAccountID": "123456789012",
            "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
          },
          "status": "READY",
          "statusMessage": "Account is ready"
        },
        "required": ["id", "name", "description", "customDomain", "route53Configuration"]
      },
      "DescribeCustomNetworkRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a custom network",
            "example": "Eveniet earum eum aperiam quasi qui et."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "8b3",
            "minLength": 1
          }
        },
        "example": {
          "id": "n-12345678",
          "token": "sel"
        },
        "required": ["token", "id"]
      },
      "DescribeDeploymentConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The deployment configuration ID",
            "example": "default"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "2x",
            "minLength": 1
          }
        },
        "example": {
          "id": "default",
          "token": "zcj"
        },
        "required": ["token", "id"]
      },
      "DescribeDeploymentConfigResult": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the deployment config",
            "example": "A production deployment config"
          },
          "id": {
            "type": "string",
            "description": "ID of a Deployment Config",
            "example": "Nesciunt recusandae cupiditate magnam occaecati non molestiae."
          },
          "infraRollConfiguration": {
            "$ref": "#/components/schemas/InfraRollConfiguration"
          },
          "name": {
            "type": "string",
            "description": "Name of the deployment config",
            "example": "Production"
          },
          "rolloutPriorityList": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Region",
              "example": "Est molestiae."
            },
            "example": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"]
          }
        },
        "example": {
          "description": "A production deployment config",
          "id": "dc-12345678",
          "infraRollConfiguration": {
            "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
            "maximumNumberOfResourceInstancesPerBatch": 1,
            "maximumUnavailableReplicas": 1
          },
          "name": "Production",
          "rolloutPriorityList": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"]
        },
        "required": ["id", "name", "description", "infraRollConfiguration", "rolloutPriorityList"]
      },
      "DescribeHelmPackageRequest": {
        "type": "object",
        "properties": {
          "chartName": {
            "type": "string",
            "description": "The chart name of the Helm package to describe",
            "example": "my-chart"
          },
          "chartVersion": {
            "type": "string",
            "description": "The chart version of the Helm package to describe",
            "example": "1.0.0"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "2e",
            "minLength": 1
          }
        },
        "example": {
          "chartName": "my-chart",
          "chartVersion": "1.0.0",
          "token": "a94"
        },
        "required": ["token", "chartName", "chartVersion"]
      },
      "DescribeIdentityProviderRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Identity Provider",
            "example": "Ex perferendis reprehenderit rerum minima voluptatem."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "ui",
            "minLength": 1
          }
        },
        "example": {
          "id": "idp-12345678",
          "token": "5"
        },
        "required": ["token", "id"]
      },
      "DescribeIdentityProviderResult": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The Client ID of the Identity Provider",
            "example": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com"
          },
          "clientSecret": {
            "type": "string",
            "description": "The Client Secret of the Identity Provider",
            "example": "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"
          },
          "id": {
            "type": "string",
            "description": "ID of an Identity Provider",
            "example": "Et deserunt est labore."
          },
          "identityProviderName": {
            "type": "string",
            "description": "The name of the identity provider",
            "example": "Google|GitHub|Google for CTL|GitHub for CTL"
          },
          "status": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          }
        },
        "example": {
          "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
          "clientSecret": "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",
          "id": "idp-12345678",
          "identityProviderName": "Google",
          "status": "Ready"
        },
        "required": ["id", "identityProviderName", "clientId", "status"]
      },
      "DescribeImageConfigRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Rem cumque aut aut sunt magnam."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Illo sed reiciendis ut."
          },
          "id": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "Officiis reprehenderit hic id quo facilis perspiciatis."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "z",
            "minLength": 1
          }
        },
        "description": "Describe an image configuration",
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Velit ut voluptatem qui voluptatibus laudantium sit.",
          "id": "imgc-12345678",
          "serviceId": "s-12345678",
          "token": "ic3"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeImageConfigResult": {
        "type": "object",
        "properties": {
          "customImageCommandsAndArgs": {
            "$ref": "#/components/schemas/CustomImageCommandsAndArgs"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the image configuration",
            "example": "An image configuration for my new entity"
          },
          "id": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "Ut hic similique pariatur laborum quaerat."
          },
          "imageName": {
            "type": "string",
            "description": "Name of the container image",
            "example": "mysql",
            "minLength": 1
          },
          "imageRegistryId": {
            "type": "string",
            "description": "ID of an Image Registry",
            "example": "Ipsa est est dolore sint."
          },
          "imageSignaturePublicKeyPEM": {
            "type": "string",
            "description": "PEM-encoded Public key part of the key used to sign the container image",
            "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n"
          },
          "imageTag": {
            "type": "string",
            "description": "Tag representing the software image version that is currently preferred",
            "default": "latest",
            "example": "v1"
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          }
        },
        "example": {
          "customImageCommandsAndArgs": {
            "args": ["-d", "mysql"],
            "commands": ["echo", "Hello, World!"]
          },
          "description": "An image configuration for my new entity",
          "id": "imgc-12345678",
          "imageName": "mysql",
          "imageRegistryId": "ir-12345678",
          "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
          "imageTag": "v1",
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678"
        },
        "required": [
          "id",
          "serviceId",
          "serviceEnvironmentId",
          "imageRegistryId",
          "imageName",
          "imageTag",
          "description"
        ]
      },
      "DescribeImageRegistryRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Image Registry",
            "example": "Enim qui."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "t",
            "minLength": 1
          }
        },
        "description": "Describe an HTTP API v2 Docker Image Registry",
        "example": {
          "id": "ir-12345678",
          "token": "f"
        },
        "required": ["token", "id"]
      },
      "DescribeImageRegistryResult": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the Image Registry",
            "example": "DockerHub is a public Docker Image Registry"
          },
          "host": {
            "type": "string",
            "description": "The Image Registry host",
            "example": "docker.io"
          },
          "id": {
            "type": "string",
            "description": "ID of an Image Registry",
            "example": "Est ut aut sit."
          },
          "name": {
            "type": "string",
            "description": "Name of the Image Registry",
            "example": "DockerHub"
          },
          "password": {
            "type": "string",
            "description": "The password to use when authenticating to the Image Registry",
            "example": "mypassword"
          },
          "username": {
            "type": "string",
            "description": "The username to use when authenticating to the Image Registry",
            "example": "myusername"
          }
        },
        "example": {
          "description": "DockerHub is a public Docker Image Registry",
          "host": "docker.io",
          "id": "ir-12345678",
          "name": "DockerHub",
          "password": "mypassword",
          "username": "myusername"
        },
        "required": ["id", "name", "description", "host"]
      },
      "DescribeInfraConfigRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Consequuntur vero."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Ratione qui odio et laboriosam."
          },
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Sunt voluptas aperiam."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "f",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Neque cum deleniti aliquid ducimus.",
          "id": "ic-12345678",
          "serviceId": "s-12345678",
          "token": "jn"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeInfraConfigResult": {
        "type": "object",
        "properties": {
          "computeConfigId": {
            "type": "string",
            "description": "ID of a Compute Config",
            "example": "Occaecati nisi deserunt molestiae."
          },
          "customTag": {
            "$ref": "#/components/schemas/CustomTag"
          },
          "description": {
            "type": "string",
            "description": "The description for the infra config",
            "example": "Infra config used for the base tier MySQL service"
          },
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Culpa dignissimos."
          },
          "name": {
            "type": "string",
            "description": "The name of the infra config",
            "example": "MySQL Writer Infra Config"
          },
          "networkConfigId": {
            "type": "string",
            "description": "ID of a Network Config",
            "example": "Debitis animi voluptates consequatur tempore ab."
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "storageConfigId": {
            "type": "string",
            "description": "ID of a Storage Config",
            "example": "Ipsam praesentium."
          }
        },
        "example": {
          "computeConfigId": "cc-12345678",
          "customTag": {
            "key": "customKey",
            "value": "customValue"
          },
          "description": "Infra config used for the base tier MySQL service",
          "id": "ic-12345678",
          "name": "MySQL Writer Infra Config",
          "networkConfigId": "nc-12345678",
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "storageConfigId": "sc-12345678"
        },
        "required": ["id", "serviceId", "name", "description", "serviceEnvironmentId"]
      },
      "DescribeInputParameterRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Culpa rerum sunt necessitatibus."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Necessitatibus provident reprehenderit."
          },
          "id": {
            "type": "string",
            "description": "ID of an Input Parameter",
            "example": "Eum soluta qui ullam."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "nqt",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Eos maiores totam quos debitis.",
          "id": "var-12345678",
          "serviceId": "s-12345678",
          "token": "ggh"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeInputParameterResult": {
        "type": "object",
        "properties": {
          "defaultValue": {
            "type": "string",
            "description": "Default value to use for an optional input parameter represented as a string",
            "example": "true"
          },
          "dependentResourceId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Nobis eos."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the input parameter",
            "example": "Nemo et perferendis adipisci dolor voluptas nulla."
          },
          "hasOptions": {
            "type": "boolean",
            "description": "Marks the input parameter to be selectable from a list of values",
            "default": false,
            "example": true
          },
          "id": {
            "type": "string",
            "description": "ID of an Input Parameter",
            "example": "Eos sapiente maxime ullam quaerat sapiente."
          },
          "isList": {
            "type": "boolean",
            "description": "Marks the input parameter as a list of values",
            "default": false,
            "example": true
          },
          "key": {
            "type": "string",
            "description": "Key of the input parameter",
            "example": "a",
            "minLength": 1
          },
          "labeledOptions": {
            "type": "object",
            "description": "A map for labeled options. The key is the label and the value is the option. When the option is selected, the label will be displayed to the end customer.",
            "example": {
              "large": "t3.xlarge",
              "medium": "t3.large",
              "small": "t3.medium"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Quia aperiam sit pariatur."
            }
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          },
          "modifiable": {
            "type": "boolean",
            "description": "Marks the input parameter as immutable",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "External name for the input parameter",
            "example": "1",
            "minLength": 1
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Aliquid quia sunt est."
            },
            "description": "A list of options to restrict the value of the input parameter to (represented as a string)",
            "example": ["true", "false"]
          },
          "required": {
            "type": "boolean",
            "description": "Enforces the input parameter as a required parameter",
            "example": true
          },
          "resourceId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Quia eos sed et quibusdam."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "type": {
            "type": "string",
            "description": "Type of the variable encoding the value",
            "example": "Boolean|Float64|String|Resource|Secret|Password"
          }
        },
        "example": {
          "defaultValue": "true",
          "dependentResourceId": "r-12345678",
          "description": "Tenetur ea.",
          "hasOptions": true,
          "id": "var-12345678",
          "isList": false,
          "key": "vq",
          "labeledOptions": {
            "large": "t3.xlarge",
            "medium": "t3.large",
            "small": "t3.medium"
          },
          "limits": {
            "max": "Iure distinctio rerum provident iure eligendi facilis.",
            "maxLength": "Aspernatur enim veritatis ab et veniam.",
            "min": "Nihil hic sit.",
            "minLength": "Incidunt quibusdam et atque quia sed."
          },
          "modifiable": false,
          "name": "hr",
          "options": ["true", "false"],
          "required": false,
          "resourceId": "r-12345678",
          "serviceId": "s-12345678",
          "type": "Boolean|Float64|String|Resource|Secret|Password"
        },
        "required": [
          "id",
          "key",
          "description",
          "resourceId",
          "type",
          "isList",
          "name",
          "required",
          "modifiable",
          "serviceId"
        ]
      },
      "DescribeLimitRequest": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "description": "The limit family",
            "example": "SERVICE"
          },
          "key": {
            "type": "string",
            "description": "Unique key to identify the limit",
            "example": "MAX_VIRTUAL_CORES_PER_RESOURCE"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "y",
            "minLength": 1
          }
        },
        "example": {
          "family": "COMPUTE_INFRA",
          "key": "MAX_VIRTUAL_CORES_PER_RESOURCE",
          "token": "nna"
        },
        "required": ["token", "key", "family"]
      },
      "DescribeLimitResult": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the limit",
            "example": "A premium limit"
          },
          "family": {
            "type": "string",
            "description": "The limit family",
            "example": "SERVICE"
          },
          "key": {
            "type": "string",
            "description": "Unique key to identify the limit",
            "example": "MAX_VIRTUAL_CORES_PER_RESOURCE"
          },
          "modifiable": {
            "type": "boolean",
            "description": "Whether the limit can be modified",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Name of the limit",
            "example": "Premium Tier"
          },
          "value": {
            "type": "integer",
            "description": "Value of the limit being enforced",
            "example": 4,
            "format": "int64"
          }
        },
        "example": {
          "description": "A premium limit",
          "family": "COMPUTE_INFRA",
          "key": "MAX_VIRTUAL_CORES_PER_RESOURCE",
          "modifiable": true,
          "name": "Premium Tier",
          "value": 4
        },
        "required": ["name", "key", "description", "value", "family", "modifiable"]
      },
      "DescribeNetworkConfigRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Quam quis eaque."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Sapiente magni in molestiae asperiores molestiae aliquam."
          },
          "id": {
            "type": "string",
            "description": "ID of a Network Config",
            "example": "Id aut explicabo."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "rb4",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Perferendis ad quam aut.",
          "id": "nc-12345678",
          "serviceId": "s-12345678",
          "token": "p7"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeNetworkConfigResult": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the network config",
            "example": "A multi-zone HA network config"
          },
          "endpointPerReplica": {
            "type": "boolean",
            "description": "Generates a DNS endpoint per-replica for this network config",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "ID of a Network Config",
            "example": "Sint minus dolore minima vel."
          },
          "infraConfigIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Eveniet officia exercitationem ut nemo."
            },
            "description": "The list of infra config IDs associated with the compute config.",
            "example": ["ic-12345678", "ic-abcdefgh"]
          },
          "internal": {
            "type": "boolean",
            "description": "Restrict access to this network config to the internal network",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Name of the network config",
            "example": "Multi-zone"
          },
          "openPorts": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 9016685337894620000,
              "format": "int64"
            },
            "description": "Ports to map to the generated DNS endpoint",
            "example": [1299, 3306]
          },
          "privateNetworkingConfiguration": {
            "$ref": "#/components/schemas/PrivateNetworkingConfiguration"
          },
          "publicNetworkingConfiguration": {
            "$ref": "#/components/schemas/PublicNetworkingConfiguration"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "stableEgressIP": {
            "type": "boolean",
            "description": "Create an external node load balancer per node rather than expose the node ip directly",
            "example": true
          },
          "tlsTerminationPort": {
            "type": "integer",
            "description": "The port that hosts the reverse proxy for TLS termination",
            "example": 443,
            "format": "int64"
          },
          "zoneConfiguration": {
            "type": "string",
            "description": "The preferred type of zonal availability for this resource and the specific zone(s) to deploy in",
            "example": "SINGLE_ZONE_OMNISTRATE_RECOMMENDED|SINGLE_ZONE_CUSTOMER_PROVIDED|MULTI_ZONE"
          }
        },
        "example": {
          "description": "A multi-zone HA network config",
          "endpointPerReplica": true,
          "id": "nc-12345678",
          "infraConfigIDs": ["ic-12345678", "ic-abcdefgh"],
          "internal": true,
          "name": "Multi-zone",
          "openPorts": [1299, 3306],
          "privateNetworkingConfiguration": {
            "privateLinkConfiguration": {
              "awsPrivateLinkConfigurations": [
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                },
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                }
              ]
            }
          },
          "publicNetworkingConfiguration": {
            "enableClusterLoadBalancer": true,
            "enableNodeLoadBalancer": true
          },
          "serviceId": "s-12345678",
          "stableEgressIP": true,
          "tlsTerminationPort": 443,
          "zoneConfiguration": "SINGLE_ZONE_OMNISTRATE_RECOMMENDED|SINGLE_ZONE_CUSTOMER_PROVIDED|MULTI_ZONE"
        },
        "required": [
          "id",
          "serviceId",
          "name",
          "description",
          "zoneConfiguration",
          "endpointPerReplica",
          "stableEgressIP",
          "openPorts",
          "internal"
        ]
      },
      "DescribeNetworkRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Network",
            "example": "Fugit repudiandae quasi non."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "m",
            "minLength": 1
          }
        },
        "example": {
          "id": "n-12345678",
          "serviceId": "s-12345678",
          "token": "lv7"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeNetworkResult": {
        "type": "object",
        "properties": {
          "cidr": {
            "type": "string",
            "description": "CIDR block for the network",
            "example": "10.0.0.0/16"
          },
          "id": {
            "type": "string",
            "description": "ID of a Network",
            "example": "Dolor quo quis corrupti."
          },
          "networkConfigId": {
            "type": "string",
            "description": "ID of a Network Config",
            "example": "Eum dignissimos natus quo sit qui qui."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "type": {
            "type": "string",
            "description": "The type of network",
            "example": "PUBLIC"
          },
          "vunitId": {
            "type": "string",
            "description": "ID of a VUnit",
            "example": "Quae quis est est."
          }
        },
        "example": {
          "cidr": "10.0.0.0/16",
          "id": "n-12345678",
          "networkConfigId": "nc-12345678",
          "serviceId": "s-12345678",
          "type": "PUBLIC",
          "vunitId": "vu-12345678"
        }
      },
      "DescribeOutputParameterRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Aliquam et recusandae id officia aut exercitationem."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Laboriosam commodi vel quas rem aut."
          },
          "id": {
            "type": "string",
            "description": "ID of an Output Parameter",
            "example": "Ut ea dolores a minus odio."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "kck",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Et esse ad inventore eos nobis.",
          "id": "op-12345678",
          "serviceId": "s-12345678",
          "token": "5k"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeOutputParameterResult": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the output variable being exported",
            "example": "Username of the user created in the target system",
            "minLength": 1
          },
          "id": {
            "type": "string",
            "description": "ID of an Output Parameter",
            "example": "Voluptatum doloribus."
          },
          "key": {
            "type": "string",
            "description": "Key of the output variable being exported",
            "example": "username",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "External name of the output variable being exported",
            "example": "Username",
            "minLength": 1
          },
          "resourceId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Quos iusto modi non."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "value": {
            "type": "string",
            "description": "Value of the output variable being exported",
            "example": "johndoe",
            "minLength": 1
          },
          "valueRef": {
            "type": "string",
            "description": "Reference to an input variable that will be used to set the value of the output variable being exported",
            "example": "$var.username"
          },
          "valueType": {
            "type": "string",
            "description": "Type of the variable encoding the value",
            "example": "Boolean|Float64|String|Secret|Password"
          }
        },
        "example": {
          "description": "Username of the user created in the target system",
          "id": "op-12345678",
          "key": "username",
          "name": "Username",
          "resourceId": "r-12345678",
          "serviceId": "s-12345678",
          "value": "johndoe",
          "valueRef": "$var.username",
          "valueType": "Boolean|Float64|String|Secret|Password"
        },
        "required": ["id", "serviceId", "resourceId", "key", "description", "name"]
      },
      "DescribePendingChangesRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Exercitationem qui saepe."
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Eaque esse laboriosam culpa et qui."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "j3d",
            "minLength": 1
          }
        },
        "example": {
          "id": "sa-12345678",
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "j88"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribePendingChangesResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Neque aspernatur et explicabo aut fugiat."
          },
          "resourceChangeSets": {
            "type": "object",
            "description": "The difference for the service API configuration per resource",
            "example": {
              "Qui consequatur a voluptatem.": {
                "categorizedResourceChanges": {
                  "Officiis est nobis debitis eos qui.": {
                    "changes": [
                      {
                        "attributes": {
                          "resourceId": "r-12345678"
                        },
                        "changeType": "PENDING_NEW",
                        "name": "Customer metrics"
                      },
                      {
                        "attributes": {
                          "resourceId": "r-12345678"
                        },
                        "changeType": "PENDING_NEW",
                        "name": "Customer metrics"
                      },
                      {
                        "attributes": {
                          "resourceId": "r-12345678"
                        },
                        "changeType": "PENDING_NEW",
                        "name": "Customer metrics"
                      },
                      {
                        "attributes": {
                          "resourceId": "r-12345678"
                        },
                        "changeType": "PENDING_NEW",
                        "name": "Customer metrics"
                      }
                    ],
                    "status": "PENDING_UPDATE"
                  }
                },
                "imageConfigChanges": {
                  "changeState": "PENDING_NEW",
                  "imageConfigId": "imgc-12345678",
                  "imageName": "mysql"
                },
                "infraConfigChanges": {
                  "changeState": "PENDING_NEW",
                  "infraConfigId": "ic-12345678",
                  "name": "MySQL Writer Infra Config"
                },
                "overallResourceStatus": "PENDING_UPDATE",
                "productTierFeatureChanges": "PENDING_UPDATE",
                "resourceChanges": "PENDING_DELETE",
                "resourceName": "Eos quaerat sed ipsam animi."
              }
            },
            "additionalProperties": true
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          }
        },
        "example": {
          "id": "sa-12345678",
          "resourceChangeSets": {
            "Qui consequatur a voluptatem.": {
              "categorizedResourceChanges": {
                "Officiis est nobis debitis eos qui.": {
                  "changes": [
                    {
                      "attributes": {
                        "resourceId": "r-12345678"
                      },
                      "changeType": "PENDING_NEW",
                      "name": "Customer metrics"
                    },
                    {
                      "attributes": {
                        "resourceId": "r-12345678"
                      },
                      "changeType": "PENDING_NEW",
                      "name": "Customer metrics"
                    },
                    {
                      "attributes": {
                        "resourceId": "r-12345678"
                      },
                      "changeType": "PENDING_NEW",
                      "name": "Customer metrics"
                    },
                    {
                      "attributes": {
                        "resourceId": "r-12345678"
                      },
                      "changeType": "PENDING_NEW",
                      "name": "Customer metrics"
                    }
                  ],
                  "status": "PENDING_UPDATE"
                }
              },
              "imageConfigChanges": {
                "changeState": "PENDING_NEW",
                "imageConfigId": "imgc-12345678",
                "imageName": "mysql"
              },
              "infraConfigChanges": {
                "changeState": "PENDING_NEW",
                "infraConfigId": "ic-12345678",
                "name": "MySQL Writer Infra Config"
              },
              "overallResourceStatus": "PENDING_UPDATE",
              "productTierFeatureChanges": "PENDING_UPDATE",
              "resourceChanges": "PENDING_DELETE",
              "resourceName": "Eos quaerat sed ipsam animi."
            }
          },
          "serviceId": "s-12345678"
        },
        "required": ["id", "serviceId", "resourceChangeSets"]
      },
      "DescribePipelineRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Pipeline",
            "example": "Quis deleniti consequuntur numquam."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "vf",
            "minLength": 1
          }
        },
        "example": {
          "id": "p-12345678",
          "serviceId": "s-12345678",
          "token": "h"
        },
        "required": ["token"]
      },
      "DescribePipelineResult": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the pipeline",
            "example": "MySQL SaaS promotion pipeline"
          },
          "id": {
            "type": "string",
            "description": "ID of a Pipeline",
            "example": "Qui vitae."
          },
          "name": {
            "type": "string",
            "description": "Name of the pipeline",
            "example": "my-pipeline"
          },
          "serviceEnvironmentSequence": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "description": "Sequence of service environments to be deployed in the pipeline",
            "example": ["se-12345678", "se-23456789"]
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          }
        },
        "example": {
          "description": "MySQL SaaS promotion pipeline",
          "id": "p-12345678",
          "name": "my-pipeline",
          "serviceEnvironmentSequence": ["se-12345678", "se-23456789"],
          "serviceId": "s-12345678"
        }
      },
      "DescribePlanRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "4",
            "minLength": 1
          }
        },
        "example": {
          "token": "u"
        },
        "required": ["token"]
      },
      "DescribePlanResult": {
        "type": "object",
        "properties": {
          "modifiedAt": {
            "type": "string",
            "description": "The time the plan was last modified",
            "example": "2023-01-01T00:00:00Z"
          },
          "nextChargeDate": {
            "type": "string",
            "description": "The next day stripe will process a charge for this plan",
            "example": "2023-02-01"
          },
          "paymentConfigured": {
            "type": "boolean",
            "description": "Whether the customer has configured their payment information.",
            "example": true
          },
          "paymentInfoPortalURL": {
            "type": "string",
            "description": "The URL from Paigo to redirect users to so they can enter their payment information.  Only present when first adding payment information",
            "example": "https://billing.paigo.com/stripe-portal?customerId=cus_xxxxxxxxxxxxxx"
          },
          "planCoreHourCost": {
            "type": "number",
            "description": "The cost per core hour of this plan",
            "example": 0.05,
            "format": "double"
          },
          "planDescription": {
            "type": "string",
            "description": "The description of the plan",
            "example": "The starter plan is priced at 'X' units"
          },
          "planFrequency": {
            "type": "string",
            "description": "This parameter tells you if the plan is charged monthly or yearly",
            "example": "MONTHLY"
          },
          "planMonthlyCost": {
            "type": "number",
            "description": "The minimum monthly cost of this plan",
            "example": 49,
            "format": "double"
          },
          "planName": {
            "type": "string",
            "description": "This parameter is used to select the appropriate Product Plan",
            "example": "STARTER_NO_COMMIT|STARTER|GROWTH|ENTERPRISE"
          },
          "remainingCredits": {
            "type": "string",
            "description": "The credits remaining for the customer for the customer in Paigo",
            "example": "100"
          },
          "startDate": {
            "type": "string",
            "description": "The date that the plan starts",
            "example": "2023-01-01"
          }
        },
        "example": {
          "modifiedAt": "2023-01-01T00:00:00Z",
          "nextChargeDate": "2023-02-01",
          "paymentConfigured": true,
          "paymentInfoPortalURL": "https://billing.paigo.com/stripe-portal?customerId=cus_xxxxxxxxxxxxxx",
          "planCoreHourCost": 0.05,
          "planDescription": "The starter plan is priced at 'X' units",
          "planFrequency": "MONTHLY",
          "planMonthlyCost": 49,
          "planName": "STARTER",
          "remainingCredits": "100",
          "startDate": "2023-01-01"
        },
        "required": ["planName"]
      },
      "DescribeProductTierBillingPlanRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Product Tier Billing Plan",
            "example": "Earum aut facere itaque quo ut."
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Ut vero vel harum sed fugit."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "0",
            "minLength": 1
          }
        },
        "example": {
          "id": "bp-12345678",
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "9"
        },
        "required": ["token", "id", "serviceId", "productTierId"]
      },
      "DescribeProductTierRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Quisquam voluptas ipsam ut quae."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "n9",
            "minLength": 1
          },
          "version": {
            "type": "string",
            "description": "The version number for the specific version set",
            "example": "3.0"
          }
        },
        "example": {
          "id": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "o4x",
          "version": "3.0"
        },
        "required": ["token", "serviceId", "id"]
      },
      "DescribeProductTierResult": {
        "type": "object",
        "properties": {
          "apiGroups": {
            "type": "object",
            "description": "The resources that belong to this service API bundle and their active versions",
            "example": {
              "r-12345678": "v1",
              "r-23456789": "v2",
              "r-34567890": "v3"
            },
            "additionalProperties": true
          },
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "awsRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Placeat dolorem explicabo dolor est."
            },
            "description": "The AWS regions that this product tier is available on",
            "example": ["us-east-2", "ca-central-1"]
          },
          "cloudProvidersConfigReadiness": {
            "$ref": "#/components/schemas/CloudProvidersConfigReadiness"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the product tier",
            "example": "A premium product tier"
          },
          "documentation": {
            "type": "string",
            "description": "Documentation",
            "example": "Any documentation"
          },
          "enabledFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTierFeatureDetail"
            },
            "description": "The features that are enabled for this product tier, including scope details and configuration",
            "example": [
              {
                "configuration": {
                  "provider": "native"
                },
                "feature": "LOGS",
                "scope": "INTERNAL"
              },
              {
                "configuration": {
                  "provider": "native"
                },
                "feature": "LOGS",
                "scope": "INTERNAL"
              }
            ]
          },
          "features": {
            "type": "object",
            "description": "The features that are enabled / disabled for this product tier",
            "example": {
              "BILLING": false,
              "LOGS": true,
              "METRICS": false
            },
            "additionalProperties": true
          },
          "gcpRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Doloremque ipsa qui deleniti labore soluta."
            },
            "description": "The GCP regions that this product tier is available on",
            "example": ["us-central1"]
          },
          "id": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Deleniti ipsa laudantium tempore."
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Flag to indicate if the product tier is disabled.",
            "example": false
          },
          "key": {
            "type": "string",
            "description": "Unique Key of the product tier",
            "example": "premium"
          },
          "name": {
            "type": "string",
            "description": "Name of the product tier",
            "example": "Premium"
          },
          "planDescription": {
            "type": "string",
            "description": "A brief description for the end user of the product tier",
            "example": "A premium plan"
          },
          "pricing": {
            "description": "Pricing",
            "example": {
              "price1": "value1"
            }
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceModelId": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Praesentium ut."
          },
          "support": {
            "type": "string",
            "description": "Support",
            "example": "Any support"
          },
          "tierType": {
            "type": "string",
            "description": "ProductTierType is the type of tier for a product",
            "example": "OMNISTRATE_DEDICATED_TENANCY|OMNISTRATE_MULTI_TENANCY|CUSTOM_TENANCY"
          }
        },
        "example": {
          "apiGroups": {
            "r-12345678": "v1",
            "r-23456789": "v2",
            "r-34567890": "v3"
          },
          "autoApproveSubscription": false,
          "awsRegions": ["us-east-2", "ca-central-1"],
          "cloudProvidersConfigReadiness": {
            "aws": {
              "resourceA": "missing terraform configuration",
              "resourceB": "missing cloudformation configuration"
            }
          },
          "description": "A premium product tier",
          "documentation": "Any documentation",
          "enabledFeatures": [
            {
              "configuration": {
                "provider": "native"
              },
              "feature": "LOGS",
              "scope": "INTERNAL"
            },
            {
              "configuration": {
                "provider": "native"
              },
              "feature": "LOGS",
              "scope": "INTERNAL"
            },
            {
              "configuration": {
                "provider": "native"
              },
              "feature": "LOGS",
              "scope": "INTERNAL"
            },
            {
              "configuration": {
                "provider": "native"
              },
              "feature": "LOGS",
              "scope": "INTERNAL"
            }
          ],
          "features": {
            "BILLING": false,
            "LOGS": true,
            "METRICS": false
          },
          "gcpRegions": ["us-central1"],
          "id": "pt-12345678",
          "isDisabled": false,
          "key": "premium",
          "name": "Premium",
          "planDescription": "A premium plan",
          "pricing": {
            "price1": "value1"
          },
          "serviceId": "s-12345678",
          "serviceModelId": "sm-12345678",
          "support": "Any support",
          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
        },
        "required": [
          "serviceId",
          "id",
          "name",
          "key",
          "description",
          "planDescription",
          "tierType",
          "serviceModelId",
          "documentation",
          "support",
          "pricing",
          "isDisabled"
        ]
      },
      "DescribeRegionRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Region",
            "example": "Repellendus quia voluptatem qui voluptatem vero."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "9",
            "minLength": 1
          }
        },
        "example": {
          "id": "region-12345678",
          "token": "d7"
        },
        "required": ["token", "id"]
      },
      "DescribeRegionResult": {
        "type": "object",
        "properties": {
          "cloudProviderId": {
            "type": "string",
            "description": "ID of an CloudProvider",
            "example": "Pariatur veniam quaerat."
          },
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "code": {
            "type": "string",
            "description": "Cloud-provider native region code",
            "example": "us-east-1",
            "minLength": 1
          },
          "description": {
            "type": "string",
            "description": "Description of the Region",
            "example": "US East (N. Virginia)",
            "minLength": 1
          },
          "id": {
            "type": "string",
            "description": "ID of a Region",
            "example": "Ea tempore quisquam eum et."
          }
        },
        "example": {
          "cloudProviderId": "infra-12345678",
          "cloudProviderName": "aws",
          "code": "us-east-1",
          "description": "US East (N. Virginia)",
          "id": "region-12345678"
        },
        "required": ["id", "code", "description", "cloudProviderId", "cloudProviderName"]
      },
      "DescribeResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Quis minus saepe placeat consequatur voluptas."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "e7",
            "minLength": 1
          }
        },
        "example": {
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "s7r"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id"
        ]
      },
      "DescribeResourceInstanceResult": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "True if this resource instance has associated infrastructure deployed",
            "example": true
          },
          "autoscalingEnabled": {
            "type": "boolean",
            "description": "Whether the instance has autoscaling enabled",
            "example": true
          },
          "awsAccountID": {
            "type": "string",
            "description": "The AWS account ID",
            "example": "123456789012"
          },
          "backupStatus": {
            "$ref": "#/components/schemas/BackupStatus"
          },
          "cloud_provider": {
            "type": "string",
            "description": "The cloud provider name",
            "example": "aws"
          },
          "created_at": {
            "type": "string",
            "description": "The instance creation time",
            "example": "2023-01-10T00:00:00Z"
          },
          "createdByUserId": {
            "type": "string",
            "description": "ID of a User",
            "example": "Ullam nam eos."
          },
          "createdByUserName": {
            "type": "string",
            "description": "The name of the user that created the resource instance",
            "example": "John Doe"
          },
          "currentReplicas": {
            "type": "string",
            "description": "The current number of replicas",
            "example": "2"
          },
          "customNetworkDetail": {
            "$ref": "#/components/schemas/CustomNetworkResourceDetail"
          },
          "detailedNetworkTopology": {
            "type": "object",
            "description": "The detailed network topology",
            "example": {
              "r-abcd1234": {
                "allowedIPRanges": ["0.0.0.0/0"],
                "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                "clusterPorts": [3306],
                "main": true,
                "networkingType": "PUBLIC",
                "nodes": [
                  {
                    "availabilityZone": "us-east-2a",
                    "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                    "healthStatus": "healthy",
                    "id": "primary-0",
                    "ports": [3306],
                    "status": "RUNNING"
                  }
                ],
                "privateNetworkCIDR": "10.0.0.2/24",
                "privateNetworkID": "n-1234abcd",
                "publiclyAccessible": true,
                "resourceKey": "primary",
                "resourceName": "Primary MySQL Instance"
              }
            },
            "additionalProperties": true
          },
          "externalPayerId": {
            "type": "string",
            "description": "The external payer id to record which customer should pay for this resource instance",
            "example": "external-payer-id-1234"
          },
          "gcpProjectID": {
            "type": "string",
            "description": "The GCP project ID",
            "example": "my-project"
          },
          "highAvailability": {
            "type": "boolean",
            "description": "Whether the instance is High Availability",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "instanceLoadStatus": {
            "type": "string",
            "description": "The load status of a pod",
            "example": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A"
          },
          "kubernetesDashboardEndpoint": {
            "$ref": "#/components/schemas/KubernetesDashboardEndpoint"
          },
          "last_modified_at": {
            "type": "string",
            "description": "The instance update time",
            "example": "2023-01-20T00:00:00Z"
          },
          "maxReplicas": {
            "type": "string",
            "description": "The maximum number of replicas",
            "example": "1"
          },
          "minReplicas": {
            "type": "string",
            "description": "The minimum number of replicas",
            "example": "1"
          },
          "network_type": {
            "type": "string",
            "description": "The network type",
            "example": "PUBLIC"
          },
          "productTierFeatures": {
            "type": "object",
            "description": "The product tier features",
            "example": {
              "BILLING": {
                "enabled": false
              },
              "LOGS": {
                "auth": {
                  "password": "px3c4d5f6g7h8i",
                  "username": "abcd1234"
                },
                "enabled": true,
                "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
              },
              "METRICS": {
                "enabled": false
              }
            },
            "additionalProperties": true
          },
          "region": {
            "type": "string",
            "description": "The region code",
            "example": "us-east-1"
          },
          "result_params": {
            "description": "Custom result parameters",
            "example": {
              "param1": "value1",
              "param2": "value2"
            }
          },
          "serverlessEnabled": {
            "type": "boolean",
            "description": "Whether the instance has serverless enabled",
            "example": true
          },
          "status": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          }
        },
        "example": {
          "active": true,
          "autoscalingEnabled": true,
          "awsAccountID": "123456789012",
          "backupStatus": {
            "backupPeriodInHours": 2,
            "backupRetentionInDays": 7,
            "earliestRestoreTime": "2021-09-01T00:00:00Z",
            "lastBackupTime": "2021-09-01T00:00:00Z"
          },
          "cloud_provider": "aws",
          "created_at": "2023-01-10T00:00:00Z",
          "createdByUserId": "user-12345678",
          "createdByUserName": "John Doe",
          "currentReplicas": "2",
          "customNetworkDetail": {
            "cidr": "10.177.0.0/16",
            "id": "n-12345678",
            "name": "Prod us-east-1"
          },
          "detailedNetworkTopology": {
            "r-abcd1234": {
              "allowedIPRanges": ["0.0.0.0/0"],
              "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
              "clusterPorts": [3306],
              "main": true,
              "networkingType": "PUBLIC",
              "nodes": [
                {
                  "availabilityZone": "us-east-2a",
                  "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                  "healthStatus": "healthy",
                  "id": "primary-0",
                  "ports": [3306],
                  "status": "RUNNING"
                }
              ],
              "privateNetworkCIDR": "10.0.0.2/24",
              "privateNetworkID": "n-1234abcd",
              "publiclyAccessible": true,
              "resourceKey": "primary",
              "resourceName": "Primary MySQL Instance"
            }
          },
          "externalPayerId": "external-payer-id-1234",
          "gcpProjectID": "my-project",
          "highAvailability": true,
          "id": "instance-abcd1234",
          "instanceLoadStatus": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A",
          "kubernetesDashboardEndpoint": {
            "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
            "deploymentCellID": "hc-12345678"
          },
          "last_modified_at": "2023-01-20T00:00:00Z",
          "maxReplicas": "1",
          "minReplicas": "1",
          "network_type": "PUBLIC",
          "productTierFeatures": {
            "BILLING": {
              "enabled": false
            },
            "LOGS": {
              "auth": {
                "password": "px3c4d5f6g7h8i",
                "username": "abcd1234"
              },
              "enabled": true,
              "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
            },
            "METRICS": {
              "enabled": false
            }
          },
          "region": "us-east-1",
          "result_params": {
            "param1": "value1",
            "param2": "value2"
          },
          "serverlessEnabled": true,
          "status": "RUNNING",
          "subscriptionId": "sub-abcd1234"
        }
      },
      "DescribeResourceMetricsConfigRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Repellendus asperiores dolorem optio esse explicabo ullam."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Ut totam quis dolores."
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "A tempora sed aut sint."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "z",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Molestias odio mollitia.",
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "1"
        },
        "required": ["token", "serviceId", "id"]
      },
      "DescribeResourceRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Sequi hic quibusdam."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Dolores porro quia doloremque."
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Eius fugiat nostrum tempora quibusdam ad qui."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "dc",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Adipisci minus est temporibus.",
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "l"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeResourceResult": {
        "type": "object",
        "properties": {
          "actionHooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionHook"
            },
            "description": "The action hooks that this resource supports",
            "example": [
              {
                "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                "scope": "CLUSTER",
                "type": "INIT"
              }
            ]
          },
          "additionalSecurityContext": {
            "$ref": "#/components/schemas/AdditionalSecurityContext"
          },
          "backupConfiguration": {
            "$ref": "#/components/schemas/BackupConfiguration"
          },
          "blobStorageConfiguration": {
            "$ref": "#/components/schemas/BlobStorageConfiguration"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceCapability"
            },
            "description": "The capabilities enabled for the resource",
            "example": [
              {
                "capability": "SERVERLESS",
                "configuration": {
                  "EnableAutoStop": true,
                  "MinimumNodesInPool": 5,
                  "PortsMappingProxyConfig": {
                    "MaxNumberOfClustersPerProxyInstance": 50,
                    "NumberOfPortsPerCluster": 4
                  },
                  "ProxyId": "r-123456",
                  "ReferenceProxyKey": "resource-proxy",
                  "TargetPort": 5432
                }
              },
              {
                "capability": "SERVERLESS",
                "configuration": {
                  "EnableAutoStop": true,
                  "MinimumNodesInPool": 5,
                  "PortsMappingProxyConfig": {
                    "MaxNumberOfClustersPerProxyInstance": 50,
                    "NumberOfPortsPerCluster": 4
                  },
                  "ProxyId": "r-123456",
                  "ReferenceProxyKey": "resource-proxy",
                  "TargetPort": 5432
                }
              }
            ]
          },
          "customLabels": {
            "type": "object",
            "description": "Custom labels for the resource",
            "example": {
              "key": "value"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Quia enim fuga ab rerum."
            }
          },
          "customSysCTLs": {
            "type": "object",
            "description": "Custom sysctl settings for the resource",
            "example": {
              "net.ipv4.tcp_syncookies": "1"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Eveniet dolorem expedita voluptatibus quaerat molestiae."
            }
          },
          "customULimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomULimits"
            },
            "description": "Custom ulimits for the resource",
            "example": [
              {
                "ULimitsName": "NoProc",
                "ULimitsType": "Soft",
                "ULimitsValue": 1000
              },
              {
                "ULimitsName": "NoFile",
                "ULimitsType": "Hard",
                "ULimitsValue": 2048
              }
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceDependency"
            },
            "example": [
              {
                "parameterMap": {
                  "clusterId": "writerId",
                  "clusterOrg": "userDatabase"
                },
                "resourceId": "r-12345678"
              },
              {
                "parameterMap": {
                  "clusterId": "readerId",
                  "clusterOrg": "userDatabase"
                },
                "resourceId": "r-abcdef12"
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the resource",
            "example": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service"
          },
          "environmentVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            },
            "description": "The environment variables that this resource requires",
            "example": [
              {
                "name": "MYSQL_ROOT_PASSWORD",
                "value": "password"
              }
            ]
          },
          "fileSystemConfiguration": {
            "$ref": "#/components/schemas/FileSystemConfiguration"
          },
          "helmChartConfiguration": {
            "$ref": "#/components/schemas/HelmChartConfiguration"
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Velit non."
          },
          "imageConfigId": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "Aliquam fuga laudantium."
          },
          "infraConfigId": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Eaque et et voluptates quae."
          },
          "internal": {
            "type": "boolean",
            "description": "Whether this resource is internal or not",
            "default": false,
            "example": false
          },
          "isDeprecated": {
            "type": "boolean",
            "description": "Whether this resource is deprecated or not",
            "default": false,
            "example": false
          },
          "key": {
            "type": "string",
            "description": "The key of the resource",
            "example": "galera"
          },
          "kustomizeConfiguration": {
            "$ref": "#/components/schemas/KustomizeConfiguration"
          },
          "l4LoadBalancerConfiguration": {
            "$ref": "#/components/schemas/L4LoadBalancerConfiguration"
          },
          "l7LoadBalancerConfiguration": {
            "$ref": "#/components/schemas/L7LoadBalancerConfiguration"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource",
            "example": "Galera"
          },
          "operatorCRDConfiguration": {
            "$ref": "#/components/schemas/OperatorCRDConfiguration"
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Aut veritatis quas."
          },
          "proxyType": {
            "type": "string",
            "description": "The proxy type of instance",
            "example": "PortsBasedProxy"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource",
            "example": "|Generic|PortsBasedProxy|L4LoadBalancer|L7LoadBalancer|FileSystem|OperatorCRD|HelmChart|Kustomize"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "terraformConfigurations": {
            "$ref": "#/components/schemas/TerraformConfigurations"
          }
        },
        "example": {
          "actionHooks": [
            {
              "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
              "scope": "CLUSTER",
              "type": "INIT"
            }
          ],
          "additionalSecurityContext": {
            "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
            "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
            "SupplementalGroupIDs": [1001, 999]
          },
          "backupConfiguration": {
            "backupPeriodInHours": 24,
            "backupRetentionInDays": 7
          },
          "blobStorageConfiguration": {
            "GCSConfiguration": {},
            "S3Configuration": {}
          },
          "capabilities": [
            {
              "capability": "SERVERLESS",
              "configuration": {
                "EnableAutoStop": true,
                "MinimumNodesInPool": 5,
                "PortsMappingProxyConfig": {
                  "MaxNumberOfClustersPerProxyInstance": 50,
                  "NumberOfPortsPerCluster": 4
                },
                "ProxyId": "r-123456",
                "ReferenceProxyKey": "resource-proxy",
                "TargetPort": 5432
              }
            },
            {
              "capability": "SERVERLESS",
              "configuration": {
                "EnableAutoStop": true,
                "MinimumNodesInPool": 5,
                "PortsMappingProxyConfig": {
                  "MaxNumberOfClustersPerProxyInstance": 50,
                  "NumberOfPortsPerCluster": 4
                },
                "ProxyId": "r-123456",
                "ReferenceProxyKey": "resource-proxy",
                "TargetPort": 5432
              }
            },
            {
              "capability": "SERVERLESS",
              "configuration": {
                "EnableAutoStop": true,
                "MinimumNodesInPool": 5,
                "PortsMappingProxyConfig": {
                  "MaxNumberOfClustersPerProxyInstance": 50,
                  "NumberOfPortsPerCluster": 4
                },
                "ProxyId": "r-123456",
                "ReferenceProxyKey": "resource-proxy",
                "TargetPort": 5432
              }
            },
            {
              "capability": "SERVERLESS",
              "configuration": {
                "EnableAutoStop": true,
                "MinimumNodesInPool": 5,
                "PortsMappingProxyConfig": {
                  "MaxNumberOfClustersPerProxyInstance": 50,
                  "NumberOfPortsPerCluster": 4
                },
                "ProxyId": "r-123456",
                "ReferenceProxyKey": "resource-proxy",
                "TargetPort": 5432
              }
            }
          ],
          "customLabels": {
            "key": "value"
          },
          "customSysCTLs": {
            "net.ipv4.tcp_syncookies": "1"
          },
          "customULimits": [
            {
              "ULimitsName": "NoProc",
              "ULimitsType": "Soft",
              "ULimitsValue": 1000
            },
            {
              "ULimitsName": "NoFile",
              "ULimitsType": "Hard",
              "ULimitsValue": 2048
            }
          ],
          "dependencies": [
            {
              "parameterMap": {
                "clusterId": "writerId",
                "clusterOrg": "userDatabase"
              },
              "resourceId": "r-12345678"
            },
            {
              "parameterMap": {
                "clusterId": "readerId",
                "clusterOrg": "userDatabase"
              },
              "resourceId": "r-abcdef12"
            }
          ],
          "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
          "environmentVariables": [
            {
              "name": "MYSQL_ROOT_PASSWORD",
              "value": "password"
            }
          ],
          "fileSystemConfiguration": {
            "EFSFileSystemConfiguration": {
              "PerformanceMode": "generalPurpose|maxIO",
              "ProvisionedThroughputInMibps": 125,
              "ThroughputMode": "provisioned|bursting|elastic"
            }
          },
          "helmChartConfiguration": {
            "chartName": "my-chart",
            "chartRepoName": "my-repo",
            "chartRepoUrl": "https://my-repo.com",
            "chartValues": {
              "key1": "value1",
              "key2": 3,
              "key3": {
                "key4": "value4"
              }
            },
            "chartVersion": "1.0.0",
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "password": "my-password",
            "runtimeConfiguration": {
              "disableHooks": true,
              "recreate": true,
              "resetThenReuseValues": true,
              "resetValues": true,
              "reuseValues": true,
              "skipCRDs": true,
              "timeoutNanos": 1000000000,
              "upgradeCRDs": true,
              "wait": true,
              "waitForJobs": true
            },
            "username": "my-user"
          },
          "id": "r-12345678",
          "imageConfigId": "imgc-12345678",
          "infraConfigId": "ic-12345678",
          "internal": true,
          "isDeprecated": false,
          "key": "galera",
          "kustomizeConfiguration": {
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "gitConfiguration": {
              "accessToken": "my-token",
              "referenceName": "tags/v1.0.0",
              "repositoryUrl": "https://github.com/username/myrepo",
              "userName": "my-user"
            },
            "helmChartDependencies": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ],
            "kustomizePath": "/kustomize"
          },
          "l4LoadBalancerConfiguration": {
            "ingressPortConfiguration": [
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8080,
                "ingressPort": 1234
              },
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8081,
                "ingressPort": 5678
              },
              {
                "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                "backendPort": 8082,
                "ingressPort": 9012
              }
            ]
          },
          "l7LoadBalancerConfiguration": {
            "paths": [
              {
                "associatedResourceID": "r-12345678",
                "path": "/path",
                "port": 8080
              }
            ]
          },
          "name": "Galera",
          "operatorCRDConfiguration": {
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "helmChartDependencies": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ],
            "outputParameters": {
              "expiresAt": "$out.status.notAfter",
              "issuerName": "letsencrypt-prod"
            },
            "readinessConditions": {
              "$out.status.conditions[?(@.type=='Ready')].status": true
            },
            "supplementalFiles": [
              "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
              "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
            ],
            "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
          },
          "productTierId": "pt-12345678",
          "proxyType": "PortsBasedProxy",
          "resourceType": "Generic",
          "serviceId": "s-12345678",
          "terraformConfigurations": {
            "aws": {
              "gitConfiguration": {
                "referenceName": "ref",
                "repositoryUrl": "gitUrl"
              },
              "privateModuleGitAccessTokens": {
                "tokenName": "accessToken"
              },
              "terraformPath": "/project1/tf"
            }
          }
        },
        "required": [
          "id",
          "key",
          "name",
          "description",
          "serviceId",
          "productTierId",
          "internal",
          "isDeprecated",
          "resourceType"
        ]
      },
      "DescribeServiceAPIRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Officiis eligendi ea non hic amet voluptatem."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "nl",
            "minLength": 1
          }
        },
        "example": {
          "id": "sa-12345678",
          "serviceId": "s-12345678",
          "token": "u"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeServiceAPIResult": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "description": "The external version of the API",
            "example": "v1"
          },
          "deploymentConfigId": {
            "type": "string",
            "description": "ID of a Deployment Config",
            "example": "Fugit doloribus fuga."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service API bundle",
            "example": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability"
          },
          "id": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Nihil quos expedita consequatur."
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceName": {
            "type": "string",
            "description": "The name of the service",
            "example": "mysql"
          }
        },
        "example": {
          "apiVersion": "v1",
          "deploymentConfigId": "dc-12345678",
          "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
          "id": "sa-12345678",
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "serviceName": "mysql"
        },
        "required": [
          "id",
          "serviceName",
          "serviceId",
          "description",
          "apiVersion",
          "serviceEnvironmentId",
          "deploymentConfigId"
        ]
      },
      "DescribeServiceEnvironmentRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "b12",
            "minLength": 1
          }
        },
        "example": {
          "id": "se-12345678",
          "serviceId": "s-12345678",
          "token": "r3"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeServiceEnvironmentResult": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "deploymentConfigId": {
            "type": "string",
            "description": "ID of a Deployment Config",
            "example": "Maiores ut temporibus dicta."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service environment",
            "example": "The production environment for the MySQL multi-writer service"
          },
          "id": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "key": {
            "type": "string",
            "description": "Unique Key of the Service Environment",
            "example": "production"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Environment",
            "example": "Production"
          },
          "roleType": {
            "type": "string",
            "description": "Type of the role",
            "example": "root|editor|reader|service_editor|service_reader|admin|service_operator"
          },
          "saasPortalStatus": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          },
          "saasPortalUrl": {
            "type": "string",
            "description": "The URL of the SaaS portal for this environment type",
            "example": "https://saas-portal.example.com"
          },
          "serviceAuthPublicKey": {
            "type": "string",
            "description": "PEM-encoded Public key part of the key used to sign the JWT tokens for the service control plane APIs",
            "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "sourceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "type": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "visibility": {
            "type": "string",
            "description": "This parameter is used to configure the visibility of the service control-plane APIs",
            "example": "PUBLIC"
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "deploymentConfigId": "dc-12345678",
          "description": "The production environment for the MySQL multi-writer service",
          "id": "se-12345678",
          "key": "production",
          "name": "Production",
          "roleType": "admin",
          "saasPortalStatus": "READY",
          "saasPortalUrl": "https://saas-portal.example.com",
          "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
          "serviceId": "s-12345678",
          "sourceEnvironmentId": "se-12345678",
          "type": "DEV",
          "visibility": "PUBLIC"
        },
        "required": ["id", "key", "serviceId", "visibility", "type", "name", "description", "deploymentConfigId"]
      },
      "DescribeServiceModelRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Sed et praesentium."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "ng",
            "minLength": 1
          }
        },
        "example": {
          "id": "sm-12345678",
          "serviceId": "s-12345678",
          "token": "zkh"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeServiceModelResult": {
        "type": "object",
        "properties": {
          "accountConfigIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Account Config",
              "example": "Numquam nulla cumque qui quaerat quia itaque."
            },
            "description": "The infrastructure account configuration ID list",
            "example": ["ac-12345678", "ac-23456789"]
          },
          "activeAccountConfigIds": {
            "type": "object",
            "description": "The active infrastructure account configuration IDs per cloud provider",
            "example": {
              "aws": "ac-12345678",
              "gcp": "ac-23456789"
            },
            "additionalProperties": true
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service model",
            "example": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceModelFeatureDetail"
            },
            "description": "Enabled service model features",
            "example": [
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              },
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              },
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              },
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Error ut et quas."
          },
          "key": {
            "type": "string",
            "description": "The unique key for this service model",
            "example": "mysql-multi-writer-service-hosted-model"
          },
          "modelType": {
            "type": "string",
            "description": "The model type encapsulating this service",
            "example": "OMNISTRATE_HOSTED|CUSTOMER_HOSTED|BYOA"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Model",
            "example": "MySQL multi-writer service hosted model"
          },
          "productTiers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Earum ut molestiae maxime qui dignissimos dolore."
            },
            "description": "The product tiers associated with this service model",
            "example": ["pt-12345678", "pt-87654321"]
          },
          "serviceApiId": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Nemo aut et perferendis."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          }
        },
        "example": {
          "accountConfigIds": ["ac-12345678", "ac-23456789"],
          "activeAccountConfigIds": {
            "aws": "ac-12345678",
            "gcp": "ac-23456789"
          },
          "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
          "features": [
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            },
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            },
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            }
          ],
          "id": "sm-12345678",
          "key": "mysql-multi-writer-service-hosted-model",
          "modelType": "CUSTOMER_HOSTED",
          "name": "MySQL multi-writer service hosted model",
          "productTiers": ["pt-12345678", "pt-87654321"],
          "serviceApiId": "sa-12345678",
          "serviceId": "s-12345678"
        },
        "required": ["id", "key", "serviceId", "serviceApiId", "modelType", "name", "description"]
      },
      "DescribeServiceOfferingRequest": {
        "type": "object",
        "properties": {
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "6",
            "minLength": 1
          },
          "visibility": {
            "type": "string",
            "description": "This parameter is used to configure the visibility of the service control-plane APIs",
            "example": "PUBLIC"
          }
        },
        "example": {
          "environmentType": "DEV",
          "serviceId": "s-12345678",
          "token": "c",
          "visibility": "PRIVATE"
        },
        "required": ["token", "serviceId"]
      },
      "DescribeServiceOfferingResourceRequest": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "description": "The instance ID",
            "default": "none",
            "example": "instance-12345678"
          },
          "resourceId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Et molestias temporibus est ea dolores aliquam."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "a",
            "minLength": 1
          }
        },
        "example": {
          "instanceId": "instance-12345678",
          "resourceId": "r-12345678",
          "serviceId": "s-12345678",
          "token": "3"
        },
        "required": ["token", "serviceId", "resourceId"]
      },
      "DescribeServiceOfferingResourceResult": {
        "type": "object",
        "properties": {
          "apis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIEntity"
            },
            "description": "The APIs",
            "example": [
              {
                "inputParameters": [
                  {
                    "defaultValue": null,
                    "description": "The name of the server",
                    "displayName": "Server Name",
                    "isList": false,
                    "key": "serverName",
                    "modifiable": true,
                    "options": null,
                    "required": true,
                    "type": "string"
                  },
                  {
                    "defaultValue": "option1",
                    "description": "The type of the server",
                    "displayName": "Server Type",
                    "isList": false,
                    "key": "serverType",
                    "modifiable": true,
                    "options": ["option1", "option2"],
                    "required": true,
                    "type": "string"
                  }
                ],
                "outputParameters": [
                  {
                    "description": "The name of the server",
                    "displayName": "Server Name",
                    "isList": false,
                    "key": "serverName",
                    "type": "string"
                  },
                  {
                    "description": "The type of the server",
                    "displayName": "Server Type",
                    "isList": false,
                    "key": "serverType",
                    "type": "string"
                  }
                ],
                "verb": "create"
              },
              {
                "inputParameters": [
                  {
                    "defaultValue": null,
                    "description": "The name of the server",
                    "displayName": "Server Name",
                    "isList": false,
                    "key": "serverName",
                    "modifiable": true,
                    "options": null,
                    "required": true,
                    "type": "string"
                  }
                ],
                "outputParameters": [
                  {
                    "description": "The name of the server",
                    "displayName": "Server Name",
                    "isList": false,
                    "key": "serverName",
                    "type": "string"
                  },
                  {
                    "description": "The type of the server",
                    "displayName": "Server Type",
                    "isList": false,
                    "key": "serverType",
                    "type": "string"
                  }
                ],
                "verb": "describe"
              }
            ]
          }
        },
        "example": {
          "apis": [
            {
              "inputParameters": [
                {
                  "defaultValue": null,
                  "description": "The name of the server",
                  "displayName": "Server Name",
                  "isList": false,
                  "key": "serverName",
                  "modifiable": true,
                  "options": null,
                  "required": true,
                  "type": "string"
                },
                {
                  "defaultValue": "option1",
                  "description": "The type of the server",
                  "displayName": "Server Type",
                  "isList": false,
                  "key": "serverType",
                  "modifiable": true,
                  "options": ["option1", "option2"],
                  "required": true,
                  "type": "string"
                }
              ],
              "outputParameters": [
                {
                  "description": "The name of the server",
                  "displayName": "Server Name",
                  "isList": false,
                  "key": "serverName",
                  "type": "string"
                },
                {
                  "description": "The type of the server",
                  "displayName": "Server Type",
                  "isList": false,
                  "key": "serverType",
                  "type": "string"
                }
              ],
              "verb": "create"
            },
            {
              "inputParameters": [
                {
                  "defaultValue": null,
                  "description": "The name of the server",
                  "displayName": "Server Name",
                  "isList": false,
                  "key": "serverName",
                  "modifiable": true,
                  "options": null,
                  "required": true,
                  "type": "string"
                }
              ],
              "outputParameters": [
                {
                  "description": "The name of the server",
                  "displayName": "Server Name",
                  "isList": false,
                  "key": "serverName",
                  "type": "string"
                },
                {
                  "description": "The type of the server",
                  "displayName": "Server Type",
                  "isList": false,
                  "key": "serverType",
                  "type": "string"
                }
              ],
              "verb": "describe"
            }
          ]
        }
      },
      "DescribeServiceOfferingResult": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "The time the service was created",
            "example": "2019-01-01T00:00:00Z"
          },
          "isDeprecated": {
            "type": "boolean",
            "description": "Whether the service offering is deprecated",
            "default": false,
            "example": false
          },
          "offerings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceOffering"
            },
            "description": "The service offerings",
            "example": [
              {
                "assets": {
                  "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                  "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                },
                "billingPlans": [
                  {
                    "maxNumberofInstances": 4
                  }
                ],
                "productTierName": "Premium",
                "productTierURLKey": "premium",
                "resourceParameters": [
                  {
                    "name": "MySQL",
                    "urlKey": "mysql"
                  },
                  {
                    "name": "Redis",
                    "urlKey": "redis"
                  }
                ],
                "serviceAPIID": "sa-12345678",
                "serviceAPIVersion": "v1",
                "serviceEnvironmentName": "Production",
                "serviceEnvironmentURLKey": "prod",
                "serviceEnvironmentVisibility": "PRIVATE",
                "serviceModelName": "Bring Your Own Account",
                "serviceModelURLKey": "byoa"
              },
              {
                "productTierName": "Basic",
                "productTierURLKey": "basic",
                "resourceParameters": [
                  {
                    "name": "MySQL",
                    "urlKey": "mysql"
                  },
                  {
                    "name": "Redis",
                    "urlKey": "redis"
                  }
                ],
                "serviceAPIID": "sa-abcdefgh",
                "serviceAPIVersion": "v1",
                "serviceEnvironmentName": "Production",
                "serviceEnvironmentURLKey": "prod",
                "serviceEnvironmentVisibility": "PUBLIC",
                "serviceModelName": "Hosted",
                "serviceModelURLKey": "hosted"
              }
            ]
          },
          "serviceDescription": {
            "type": "string",
            "description": "The service description",
            "example": "MySQL is a relational database"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceName": {
            "type": "string",
            "description": "The service name",
            "example": "MySQL"
          },
          "serviceOrgId": {
            "type": "string",
            "description": "ID of an Org",
            "example": "Rerum dolorem a itaque in ea ut."
          },
          "serviceProviderId": {
            "type": "string",
            "description": "The id of the service provider",
            "example": "sp-9zrg9W8Are"
          },
          "serviceProviderName": {
            "type": "string",
            "description": "The name of the service provider",
            "example": "Omnistrate, Inc."
          },
          "serviceURLKey": {
            "type": "string",
            "description": "The service URL key",
            "example": "mysql"
          }
        },
        "example": {
          "createdAt": "2019-01-01T00:00:00Z",
          "isDeprecated": false,
          "offerings": [
            {
              "assets": {
                "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
              },
              "billingPlans": [
                {
                  "maxNumberofInstances": 4
                }
              ],
              "productTierName": "Premium",
              "productTierURLKey": "premium",
              "resourceParameters": [
                {
                  "name": "MySQL",
                  "urlKey": "mysql"
                },
                {
                  "name": "Redis",
                  "urlKey": "redis"
                }
              ],
              "serviceAPIID": "sa-12345678",
              "serviceAPIVersion": "v1",
              "serviceEnvironmentName": "Production",
              "serviceEnvironmentURLKey": "prod",
              "serviceEnvironmentVisibility": "PRIVATE",
              "serviceModelName": "Bring Your Own Account",
              "serviceModelURLKey": "byoa"
            },
            {
              "productTierName": "Basic",
              "productTierURLKey": "basic",
              "resourceParameters": [
                {
                  "name": "MySQL",
                  "urlKey": "mysql"
                },
                {
                  "name": "Redis",
                  "urlKey": "redis"
                }
              ],
              "serviceAPIID": "sa-abcdefgh",
              "serviceAPIVersion": "v1",
              "serviceEnvironmentName": "Production",
              "serviceEnvironmentURLKey": "prod",
              "serviceEnvironmentVisibility": "PUBLIC",
              "serviceModelName": "Hosted",
              "serviceModelURLKey": "hosted"
            }
          ],
          "serviceDescription": "MySQL is a relational database",
          "serviceId": "s-12345678",
          "serviceName": "MySQL",
          "serviceOrgId": "org-12345678",
          "serviceProviderId": "sp-9zrg9W8Are",
          "serviceProviderName": "Omnistrate, Inc.",
          "serviceURLKey": "mysql"
        },
        "required": [
          "createdAt",
          "serviceId",
          "serviceName",
          "serviceURLKey",
          "serviceDescription",
          "serviceProviderName",
          "serviceProviderId",
          "offerings",
          "isDeprecated",
          "serviceOrgId"
        ]
      },
      "DescribeServiceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "9",
            "minLength": 1
          }
        },
        "example": {
          "id": "s-12345678",
          "token": "qz"
        },
        "required": ["token", "id"]
      },
      "DescribeServiceResult": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "The time the service was created",
            "example": "2019-01-01T00:00:00Z"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "id": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "key": {
            "type": "string",
            "description": "Unique key of the service",
            "example": "mysql"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service",
            "example": "MySQL multi-writer service"
          },
          "roleType": {
            "type": "string",
            "description": "Type of the role",
            "example": "root|editor|reader|service_editor|service_reader|admin|service_operator"
          },
          "serviceEnvironments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceEnvironment"
            },
            "description": "List of service environments",
            "example": [
              {
                "id": "se-12345678",
                "name": "dev",
                "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                "saasPortalStatus": "READY",
                "saasPortalUrl": "https://saas-portal.example.com",
                "servicePlans": [
                  {
                    "description": "A Basic product tier",
                    "modelType": "CUSTOMER_HOSTED",
                    "name": "Basic",
                    "productTierID": "pt-12345678",
                    "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                  },
                  {
                    "description": "A Basic product tier",
                    "modelType": "CUSTOMER_HOSTED",
                    "name": "Basic",
                    "productTierID": "pt-12345678",
                    "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                  }
                ],
                "sourceEnvironmentID": "se-12345678",
                "sourceEnvironmentName": "dev",
                "type": "DEV",
                "visibility": "private"
              },
              {
                "id": "se-12345678",
                "name": "dev",
                "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                "saasPortalStatus": "READY",
                "saasPortalUrl": "https://saas-portal.example.com",
                "servicePlans": [
                  {
                    "description": "A Basic product tier",
                    "modelType": "CUSTOMER_HOSTED",
                    "name": "Basic",
                    "productTierID": "pt-12345678",
                    "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                  },
                  {
                    "description": "A Basic product tier",
                    "modelType": "CUSTOMER_HOSTED",
                    "name": "Basic",
                    "productTierID": "pt-12345678",
                    "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                  }
                ],
                "sourceEnvironmentID": "se-12345678",
                "sourceEnvironmentName": "dev",
                "type": "DEV",
                "visibility": "private"
              }
            ]
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "Aliquam nam quasi vero non non."
          },
          "serviceProviderID": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Sint saepe quo natus quo similique."
          },
          "serviceProviderName": {
            "type": "string",
            "description": "The name of the service provider",
            "example": "Omnistrate, Inc."
          }
        },
        "example": {
          "createdAt": "2019-01-01T00:00:00Z",
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "id": "s-12345678",
          "key": "mysql",
          "name": "MySQL multi-writer service",
          "roleType": "admin",
          "serviceEnvironments": [
            {
              "id": "se-12345678",
              "name": "dev",
              "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
              "saasPortalStatus": "READY",
              "saasPortalUrl": "https://saas-portal.example.com",
              "servicePlans": [
                {
                  "description": "A Basic product tier",
                  "modelType": "CUSTOMER_HOSTED",
                  "name": "Basic",
                  "productTierID": "pt-12345678",
                  "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                },
                {
                  "description": "A Basic product tier",
                  "modelType": "CUSTOMER_HOSTED",
                  "name": "Basic",
                  "productTierID": "pt-12345678",
                  "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                }
              ],
              "sourceEnvironmentID": "se-12345678",
              "sourceEnvironmentName": "dev",
              "type": "DEV",
              "visibility": "private"
            },
            {
              "id": "se-12345678",
              "name": "dev",
              "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
              "saasPortalStatus": "READY",
              "saasPortalUrl": "https://saas-portal.example.com",
              "servicePlans": [
                {
                  "description": "A Basic product tier",
                  "modelType": "CUSTOMER_HOSTED",
                  "name": "Basic",
                  "productTierID": "pt-12345678",
                  "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                },
                {
                  "description": "A Basic product tier",
                  "modelType": "CUSTOMER_HOSTED",
                  "name": "Basic",
                  "productTierID": "pt-12345678",
                  "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                }
              ],
              "sourceEnvironmentID": "se-12345678",
              "sourceEnvironmentName": "dev",
              "type": "DEV",
              "visibility": "private"
            },
            {
              "id": "se-12345678",
              "name": "dev",
              "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
              "saasPortalStatus": "READY",
              "saasPortalUrl": "https://saas-portal.example.com",
              "servicePlans": [
                {
                  "description": "A Basic product tier",
                  "modelType": "CUSTOMER_HOSTED",
                  "name": "Basic",
                  "productTierID": "pt-12345678",
                  "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                },
                {
                  "description": "A Basic product tier",
                  "modelType": "CUSTOMER_HOSTED",
                  "name": "Basic",
                  "productTierID": "pt-12345678",
                  "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                }
              ],
              "sourceEnvironmentID": "se-12345678",
              "sourceEnvironmentName": "dev",
              "type": "DEV",
              "visibility": "private"
            },
            {
              "id": "se-12345678",
              "name": "dev",
              "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
              "saasPortalStatus": "READY",
              "saasPortalUrl": "https://saas-portal.example.com",
              "servicePlans": [
                {
                  "description": "A Basic product tier",
                  "modelType": "CUSTOMER_HOSTED",
                  "name": "Basic",
                  "productTierID": "pt-12345678",
                  "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                },
                {
                  "description": "A Basic product tier",
                  "modelType": "CUSTOMER_HOSTED",
                  "name": "Basic",
                  "productTierID": "pt-12345678",
                  "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                }
              ],
              "sourceEnvironmentID": "se-12345678",
              "sourceEnvironmentName": "dev",
              "type": "DEV",
              "visibility": "private"
            }
          ],
          "serviceLogoURL": "Explicabo architecto.",
          "serviceProviderID": "sp-12345678",
          "serviceProviderName": "Omnistrate, Inc."
        },
        "required": [
          "id",
          "createdAt",
          "name",
          "key",
          "description",
          "serviceEnvironments",
          "serviceProviderName",
          "serviceProviderID"
        ]
      },
      "DescribeServicesOrchestrationRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Services Orchestration",
            "example": "Sit consequuntur qui adipisci blanditiis quisquam accusamus."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "vzs",
            "minLength": 1
          }
        },
        "example": {
          "id": "so-12345678",
          "token": "h"
        },
        "required": ["token", "id"]
      },
      "DescribeServicesOrchestrationResult": {
        "type": "object",
        "properties": {
          "ServicesTopology": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceDeploymentDetails"
            },
            "description": "The services deployment details",
            "example": [
              {
                "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                "instanceDeploymentAlias": "instanceDeploymentAlias",
                "instanceId": "i-12345678",
                "serviceId": "s-12345678",
                "status": "PENDING",
                "statusMessage": "Creating deployment",
                "subscriptionId": "Sunt magnam aut perspiciatis saepe."
              },
              {
                "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                "instanceDeploymentAlias": "instanceDeploymentAlias",
                "instanceId": "i-12345678",
                "serviceId": "s-12345678",
                "status": "PENDING",
                "statusMessage": "Creating deployment",
                "subscriptionId": "Sunt magnam aut perspiciatis saepe."
              },
              {
                "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                "instanceDeploymentAlias": "instanceDeploymentAlias",
                "instanceId": "i-12345678",
                "serviceId": "s-12345678",
                "status": "PENDING",
                "statusMessage": "Creating deployment",
                "subscriptionId": "Sunt magnam aut perspiciatis saepe."
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "The time the services orchestration was created",
            "example": "2021-01-01T00:00:00Z"
          },
          "id": {
            "type": "string",
            "description": "ID of a Services Orchestration",
            "example": "Excepturi sit."
          },
          "orchestrationFailedReason": {
            "type": "string",
            "description": "The reason why the orchestration failed",
            "example": "Invalid DSL"
          },
          "resultParams": {
            "description": "Custom result parameters of the services orchestration",
            "example": {
              "param1": "value1",
              "param2": "value2"
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the services orchestration",
            "example": "PENDING"
          },
          "updatedAt": {
            "type": "string",
            "description": "The time the services orchestration was last updated",
            "example": "2021-01-01T00:00:00Z"
          }
        },
        "example": {
          "ServicesTopology": [
            {
              "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
              "instanceDeploymentAlias": "instanceDeploymentAlias",
              "instanceId": "i-12345678",
              "serviceId": "s-12345678",
              "status": "PENDING",
              "statusMessage": "Creating deployment",
              "subscriptionId": "Sunt magnam aut perspiciatis saepe."
            },
            {
              "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
              "instanceDeploymentAlias": "instanceDeploymentAlias",
              "instanceId": "i-12345678",
              "serviceId": "s-12345678",
              "status": "PENDING",
              "statusMessage": "Creating deployment",
              "subscriptionId": "Sunt magnam aut perspiciatis saepe."
            },
            {
              "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
              "instanceDeploymentAlias": "instanceDeploymentAlias",
              "instanceId": "i-12345678",
              "serviceId": "s-12345678",
              "status": "PENDING",
              "statusMessage": "Creating deployment",
              "subscriptionId": "Sunt magnam aut perspiciatis saepe."
            },
            {
              "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
              "instanceDeploymentAlias": "instanceDeploymentAlias",
              "instanceId": "i-12345678",
              "serviceId": "s-12345678",
              "status": "PENDING",
              "statusMessage": "Creating deployment",
              "subscriptionId": "Sunt magnam aut perspiciatis saepe."
            }
          ],
          "createdAt": "2021-01-01T00:00:00Z",
          "id": "so-12345678",
          "orchestrationFailedReason": "Invalid DSL",
          "resultParams": {
            "param1": "value1",
            "param2": "value2"
          },
          "status": "PENDING",
          "updatedAt": "2021-01-01T00:00:00Z"
        },
        "required": ["id", "status", "createdAt", "updatedAt"]
      },
      "DescribeStorageConfigRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Repellendus architecto quis."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Sint eos voluptatibus tempora voluptatum."
          },
          "id": {
            "type": "string",
            "description": "ID of a Storage Config",
            "example": "Ad doloremque officia."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "05o",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Maiores eum aperiam sunt.",
          "id": "sc-12345678",
          "serviceId": "s-12345678",
          "token": "db"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeStorageConfigResult": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the storage config",
            "example": "my-storage-config-description"
          },
          "id": {
            "type": "string",
            "description": "ID of a Storage Config",
            "example": "Velit ipsa ab officia aliquam."
          },
          "infraConfigIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Exercitationem est."
            },
            "description": "The list of infra config IDs associated with the compute config.",
            "example": ["ic-12345678", "ic-abcdefgh"]
          },
          "name": {
            "type": "string",
            "description": "Name of the storage config",
            "example": "my-storage-config"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "volumes": {
            "type": "object",
            "description": "The storage volume config IDs and the corresponding mount path",
            "example": {
              "svc-12345678": ["/data", "/mnt/logs"],
              "svc-23456789": ["/config"]
            },
            "additionalProperties": true
          }
        },
        "example": {
          "description": "my-storage-config-description",
          "id": "sc-12345678",
          "infraConfigIDs": ["ic-12345678", "ic-abcdefgh"],
          "name": "my-storage-config",
          "serviceId": "s-12345678",
          "volumes": {
            "svc-12345678": ["/data", "/mnt/logs"],
            "svc-23456789": ["/config"]
          }
        },
        "required": ["id", "name", "description", "volumes", "serviceId"]
      },
      "DescribeStorageVolumeConfigRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Dolor qui earum sed."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Rerum a."
          },
          "id": {
            "type": "string",
            "description": "ID of a Storage Volume Config",
            "example": "Sapiente nulla magnam excepturi."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "j6",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Sint tempore tempora non sed dolor rerum.",
          "id": "svc-12345678",
          "serviceId": "s-12345678",
          "token": "4bb"
        },
        "required": ["token", "serviceId", "id"]
      },
      "DescribeStorageVolumeConfigResult": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "clusterStorageType": {
            "type": "string",
            "description": "The type of the fixed storage for the cluster",
            "example": "S3|$var.storageType|AWS::EFS"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the context for the storage volume pool",
            "example": "A storage volume set to store the MySQL data directory"
          },
          "disableBackup": {
            "type": "boolean",
            "description": "Disable backup for the storage volume",
            "example": false
          },
          "id": {
            "type": "string",
            "description": "ID of a Storage Volume Config",
            "example": "Sapiente omnis aliquam."
          },
          "instanceStorageIops": {
            "type": "string",
            "description": "The IOPS provisioned for the configured instance storage type",
            "example": "7500"
          },
          "instanceStorageSizeGi": {
            "type": "string",
            "description": "The fixed storage size (in Gi) provisioned for the configured instance storage type",
            "example": "128"
          },
          "instanceStorageThroughputMiBps": {
            "type": "string",
            "description": "The throughput (in MiBps) provisioned for the configured instance storage type",
            "example": "128"
          },
          "instanceStorageType": {
            "type": "string",
            "description": "The type of the fixed storage for a compute instance",
            "example": "$var.storageType"
          },
          "name": {
            "type": "string",
            "description": "Name of the storage volume pool",
            "example": "MySQL Data Volume"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "storageResourceID": {
            "type": "string",
            "description": "The storage resource ID",
            "example": "r-12345678"
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "clusterStorageType": "S3|$var.storageType|AWS::EFS",
          "description": "A storage volume set to store the MySQL data directory",
          "disableBackup": false,
          "id": "svc-12345678",
          "instanceStorageIops": "7500",
          "instanceStorageSizeGi": "128",
          "instanceStorageThroughputMiBps": "128",
          "instanceStorageType": "$var.storageType",
          "name": "MySQL Data Volume",
          "serviceId": "s-12345678",
          "storageResourceID": "r-12345678"
        },
        "required": ["serviceId", "id", "name", "description"]
      },
      "DescribeSubscriptionRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Subscription",
            "example": "Et molestiae sit id sit ullam."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "bx",
            "minLength": 1
          }
        },
        "example": {
          "id": "sub-12345678",
          "token": "v"
        },
        "required": ["token", "id"]
      },
      "DescribeSubscriptionRequestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Subscription Request",
            "example": "Sapiente laboriosam consectetur."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "uk",
            "minLength": 1
          }
        },
        "example": {
          "id": "subr-12345678",
          "token": "8pp"
        },
        "required": ["token", "id"]
      },
      "DescribeSubscriptionRequestResult": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "The time that this subscription request was issued",
            "example": "2019-01-01T00:00:00Z"
          },
          "id": {
            "type": "string",
            "description": "ID of a Subscription Request",
            "example": "Laboriosam ducimus qui molestias recusandae recusandae."
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Aut dicta aut non iure rerum consequatur."
          },
          "productTierName": {
            "type": "string",
            "description": "The name of the product tier",
            "example": "Omnistrate Multi Tenancy"
          },
          "rootUserEmail": {
            "type": "string",
            "description": "The email of the user that issued the subscription request",
            "example": "abc@gmail.com"
          },
          "rootUserId": {
            "type": "string",
            "description": "ID of a User",
            "example": "Sapiente vel suscipit nihil similique."
          },
          "rootUserName": {
            "type": "string",
            "description": "The name of the user that issued the subscription request",
            "example": "John Doe"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "Omnis inventore."
          },
          "serviceName": {
            "type": "string",
            "description": "The name of the service",
            "example": "MySQL multi-writer service"
          },
          "status": {
            "type": "string",
            "description": "The status of the subscription request",
            "example": "PENDING|APPROVED|DENIED|CANCELLED"
          },
          "updatedAt": {
            "type": "string",
            "description": "The time that this subscription request was issued",
            "example": "2019-01-01T00:00:00Z"
          },
          "updatedByUserId": {
            "type": "string",
            "description": "ID of a User",
            "example": "Commodi quia."
          },
          "updatedByUserName": {
            "type": "string",
            "description": "The user that last updated the subscription request",
            "example": "John Doe"
          }
        },
        "example": {
          "createdAt": "2019-01-01T00:00:00Z",
          "id": "subr-12345678",
          "productTierId": "pt-12345678",
          "productTierName": "Omnistrate Multi Tenancy",
          "rootUserEmail": "abc@gmail.com",
          "rootUserId": "org-12345678",
          "rootUserName": "John Doe",
          "serviceId": "s-12345678",
          "serviceLogoURL": "Optio quam sint.",
          "serviceName": "MySQL multi-writer service",
          "status": "PENDING",
          "updatedAt": "2019-01-01T00:00:00Z",
          "updatedByUserId": "user-12345678",
          "updatedByUserName": "John Doe"
        },
        "required": [
          "id",
          "rootUserId",
          "rootUserName",
          "rootUserEmail",
          "serviceId",
          "serviceName",
          "productTierId",
          "productTierName",
          "status",
          "createdAt",
          "updatedAt",
          "updatedByUserId",
          "updatedByUserName"
        ]
      },
      "DescribeSubscriptionResult": {
        "type": "object",
        "properties": {
          "accountConfigIdentityId": {
            "type": "string",
            "description": "ID of an Org",
            "example": "Qui in aut repellat."
          },
          "cloudProviderNames": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Et blanditiis quis itaque."
            },
            "description": "List of cloud provider names",
            "example": ["aws", "gcp"]
          },
          "createdAt": {
            "type": "string",
            "description": "The time that this subscription was created",
            "example": "2019-01-01T00:00:00Z"
          },
          "defaultSubscription": {
            "type": "boolean",
            "description": "Whether this is the default subscription for the user",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "ID of a Subscription",
            "example": "Nam autem libero reiciendis molestias ipsam vel."
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Quis temporibus quod."
          },
          "productTierName": {
            "type": "string",
            "description": "The name of the product tier",
            "example": "Omnistrate Multi Tenancy"
          },
          "roleType": {
            "type": "string",
            "description": "Type of the role",
            "example": "root|editor|reader|service_editor|service_reader|admin|service_operator"
          },
          "rootUserId": {
            "type": "string",
            "description": "ID of a User",
            "example": "A porro itaque excepturi dolorem dignissimos."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "Blanditiis in ea et ut ut consequatur."
          },
          "serviceName": {
            "type": "string",
            "description": "The name of the service",
            "example": "MySQL multi-writer service"
          },
          "serviceOrgId": {
            "type": "string",
            "description": "ID of an Org",
            "example": "Dolor maiores delectus ipsa quo."
          },
          "serviceOrgName": {
            "type": "string",
            "description": "The name of the org that owns the service",
            "example": "Omnistrate"
          },
          "status": {
            "type": "string",
            "description": "Subscription Status",
            "example": "ACTIVE|SUSPENDED|TERMINATED|CANCELLED"
          },
          "subscriptionOwnerName": {
            "type": "string",
            "description": "The name of the subscription owner user",
            "example": "John Doe"
          }
        },
        "example": {
          "accountConfigIdentityId": "org-12345678",
          "cloudProviderNames": ["aws", "gcp"],
          "createdAt": "2019-01-01T00:00:00Z",
          "defaultSubscription": true,
          "id": "sub-12345678",
          "productTierId": "pt-12345678",
          "productTierName": "Omnistrate Multi Tenancy",
          "roleType": "root",
          "rootUserId": "user-12345678",
          "serviceId": "s-12345678",
          "serviceLogoURL": "Ut harum odit sit aut quasi.",
          "serviceName": "MySQL multi-writer service",
          "serviceOrgId": "org-12345678",
          "serviceOrgName": "Omnistrate",
          "status": "ACTIVE",
          "subscriptionOwnerName": "John Doe"
        },
        "required": [
          "id",
          "rootUserId",
          "serviceId",
          "productTierId",
          "serviceOrgId",
          "serviceOrgName",
          "roleType",
          "createdAt",
          "subscriptionOwnerName",
          "serviceName",
          "serviceLogoURL",
          "cloudProviderNames",
          "defaultSubscription",
          "productTierName",
          "accountConfigIdentityId",
          "status"
        ]
      },
      "DescribeTierVersionSetRequest": {
        "type": "object",
        "properties": {
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Doloribus hic id aspernatur."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "j7",
            "minLength": 1
          },
          "version": {
            "type": "string",
            "description": "The version number for the specific version set.",
            "example": "3.0"
          }
        },
        "example": {
          "productTierId": "Beatae beatae.",
          "serviceId": "s-12345678",
          "token": "5",
          "version": "3.0"
        },
        "required": ["token", "version", "serviceId", "productTierId"]
      },
      "DescribeUpgradePathRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Upgrade Path",
            "example": "Aut velit atque neque ut."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "f0",
            "minLength": 1
          }
        },
        "example": {
          "id": "up-12345678",
          "serviceId": "s-12345678",
          "token": "k"
        },
        "required": ["token"]
      },
      "DescribeUpgradePathResult": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the upgrade path",
            "example": "An upgrade path migrating clusters from one LTS version to another"
          },
          "id": {
            "type": "string",
            "description": "ID of an Upgrade Path",
            "example": "Perspiciatis vero eos ut."
          },
          "name": {
            "type": "string",
            "description": "Name of the upgrade path",
            "example": "LTS upgrade path"
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "sourceVersion": {
            "type": "string",
            "description": "Version of the Entity to operate on",
            "example": "1.0",
            "minLength": 1
          },
          "targetVersion": {
            "type": "string",
            "description": "Version of the Entity to operate on",
            "example": "1.0",
            "minLength": 1
          }
        },
        "example": {
          "description": "An upgrade path migrating clusters from one LTS version to another",
          "id": "up-12345678",
          "name": "LTS upgrade path",
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "sourceVersion": "567.0",
          "targetVersion": "589.0"
        }
      },
      "DescribeUserBillingDetailsResult": {
        "type": "object",
        "properties": {
          "billingEmbedURL": {
            "type": "string",
            "description": "The URL from the billing provider to embed in an iframe to show the user's billing information",
            "example": "https://billing.provider.com/embed?customerId=cus_xxxxxxxxxxxxxx"
          },
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Dae"
          },
          "paymentConfigured": {
            "type": "boolean",
            "description": "Whether the customer has configured their payment information.",
            "example": true
          },
          "paymentInfoPortalURL": {
            "type": "string",
            "description": "The URL from the billing provide to redirect users to so they can enter their payment information.  Only present when first adding payment information",
            "example": "https://billing.provider.com/stripe-portal?customerId=cus_xxxxxxxxxxxxxx"
          },
          "userId": {
            "type": "string",
            "description": "ID of a User",
            "example": "Perspiciatis voluptatem est velit quisquam autem qui."
          }
        },
        "example": {
          "billingEmbedURL": "https://billing.provider.com/embed?customerId=cus_xxxxxxxxxxxxxx",
          "name": "John Dae",
          "paymentConfigured": true,
          "paymentInfoPortalURL": "https://billing.provider.com/stripe-portal?customerId=cus_xxxxxxxxxxxxxx",
          "userId": "user-abcd1234"
        },
        "required": ["userId", "name", "billingEmbedURL", "paymentConfigured"]
      },
      "DescribeUserRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "63",
            "minLength": 1
          }
        },
        "example": {
          "token": "hcy"
        },
        "required": ["token"]
      },
      "DescribeUserResult": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "createdAt": {
            "type": "string",
            "description": "The user creation time",
            "example": "2023-01-10T00:00:00Z"
          },
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "abc@gmail.com"
          },
          "id": {
            "type": "string",
            "description": "The User ID",
            "example": "user-abcd1234"
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "The user update time",
            "example": "2023-01-20T00:00:00Z"
          },
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Dae"
          },
          "orgDescription": {
            "type": "string",
            "description": "The description of the org that this user owns",
            "example": "ACME Inc."
          },
          "orgFavIconURL": {
            "type": "string",
            "description": "The favicon of the org that this user owns",
            "example": "Ut illum in voluptas autem quia."
          },
          "orgId": {
            "type": "string",
            "description": "The ID of the org that this user owns",
            "example": "org-aKQ8G13QeR"
          },
          "orgLogoURL": {
            "type": "string",
            "description": "The logo of the org that this user owns",
            "example": "Et nobis."
          },
          "orgName": {
            "type": "string",
            "description": "The org name that this user owns",
            "example": "ACME"
          },
          "orgPrivacyPolicy": {
            "type": "string",
            "description": "The privacy policy for the org that this user owns",
            "example": "Tempore quis."
          },
          "orgSupportEmail": {
            "type": "string",
            "description": "The support email of the org that this user owns",
            "example": "support@example.com"
          },
          "orgTermsOfUse": {
            "type": "string",
            "description": "The terms of use for the org that this user owns",
            "example": "Assumenda odio."
          },
          "orgURL": {
            "type": "string",
            "description": "The url of the org that this user owns",
            "example": "something.acme"
          },
          "planName": {
            "type": "string",
            "description": "This parameter is used to select the appropriate Product Plan",
            "example": "STARTER_NO_COMMIT|STARTER|GROWTH|ENTERPRISE"
          },
          "roleType": {
            "type": "string",
            "description": "Type of the role",
            "example": "root|editor|reader|service_editor|service_reader|admin|service_operator"
          }
        },
        "example": {
          "address": {
            "addressLine1": "1234 Main St",
            "addressLine2": "Apt 123",
            "addressLine3": "Building 123",
            "city": "San Francisco",
            "country": "US",
            "state": "CA",
            "zip": "94123"
          },
          "createdAt": "2023-01-10T00:00:00Z",
          "email": "abc@gmail.com",
          "id": "user-abcd1234",
          "lastModifiedAt": "2023-01-20T00:00:00Z",
          "name": "John Dae",
          "orgDescription": "ACME Inc.",
          "orgFavIconURL": "Porro dolor id ut ea magnam.",
          "orgId": "org-aKQ8G13QeR",
          "orgLogoURL": "Laboriosam et consequatur omnis excepturi sed natus.",
          "orgName": "ACME",
          "orgPrivacyPolicy": "Excepturi at.",
          "orgSupportEmail": "support@example.com",
          "orgTermsOfUse": "Modi dolore qui dolores.",
          "orgURL": "something.acme",
          "planName": "STARTER",
          "roleType": "reader"
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "lastModifiedAt",
          "email",
          "orgName",
          "orgDescription",
          "orgURL",
          "orgId",
          "roleType",
          "orgSupportEmail",
          "orgLogoURL",
          "orgFavIconURL",
          "orgTermsOfUse",
          "orgPrivacyPolicy"
        ]
      },
      "DescribeUsersByOrgRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "2w",
            "minLength": 1
          }
        },
        "example": {
          "token": "3"
        },
        "required": ["token"]
      },
      "DescribeUsersByOrgResult": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The ID of the org",
            "example": "org-aKQ8G13QeR"
          },
          "orgUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgUsers"
            },
            "description": "The users associated with the corresponding org",
            "example": [
              {
                "email": "abc@gmail.com",
                "invitedAt": "2023-01-10T00:00:00Z",
                "name": "John Doe",
                "roleType": "reader",
                "userId": "user-abcd1234"
              }
            ]
          }
        },
        "example": {
          "Id": "org-aKQ8G13QeR",
          "orgUsers": [
            {
              "email": "abc@gmail.com",
              "invitedAt": "2023-01-10T00:00:00Z",
              "name": "John Doe",
              "roleType": "reader",
              "userId": "user-abcd1234"
            }
          ]
        },
        "required": ["Id", "orgUsers"]
      },
      "DescribeUsersBySubscriptionRequest": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "zt",
            "minLength": 1
          }
        },
        "example": {
          "subscriptionId": "sub-abcd1234",
          "token": "td"
        },
        "required": ["token", "subscriptionId"]
      },
      "DescribeUsersBySubscriptionResult": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "description": "The ID of the subscription",
            "example": "sub-abcd1234"
          },
          "subscriptionUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionUsers"
            },
            "description": "The users associated with the corresponding subscription",
            "example": [
              {
                "email": "abc@gmail.com",
                "name": "John Doe",
                "roleType": "reader",
                "subscriptionId": "sub-abcd1234",
                "userId": "user-abcd1234"
              }
            ]
          }
        },
        "example": {
          "Id": "sub-abcd1234",
          "subscriptionUsers": [
            {
              "email": "abc@gmail.com",
              "name": "John Doe",
              "roleType": "reader",
              "subscriptionId": "sub-abcd1234",
              "userId": "user-abcd1234"
            }
          ]
        },
        "required": ["Id", "subscriptionUsers"]
      },
      "DescribeVUnitRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a VUnit",
            "example": "Cum nihil asperiores."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "o",
            "minLength": 1
          }
        },
        "example": {
          "id": "vu-12345678",
          "serviceId": "s-12345678",
          "token": "bp"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DescribeVUnitResult": {
        "type": "object",
        "properties": {
          "cloudProvider": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "id": {
            "type": "string",
            "description": "ID of a VUnit",
            "example": "Eveniet dolore consequatur dolorem."
          },
          "networkIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Network",
              "example": "Corporis quos error quo ad."
            },
            "description": "List of network IDs in the given context",
            "example": ["n-12345678", "n-abcdefgh", "n-1234efgh"]
          },
          "region": {
            "type": "string",
            "description": "Region code specific to the cloud-provider",
            "example": "us-west-2"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceModelId": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Alias omnis voluptatem ut et quia hic."
          }
        },
        "example": {
          "cloudProvider": "aws",
          "id": "vu-12345678",
          "networkIds": ["n-12345678", "n-abcdefgh", "n-1234efgh"],
          "region": "us-west-2",
          "serviceId": "s-12345678",
          "serviceModelId": "sm-12345678"
        },
        "required": ["serviceModelId", "cloudProvider", "region", "networkIds"]
      },
      "Describeresourcemetricsconfigresult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Consequatur tenetur sit dicta tenetur praesentium totam."
          },
          "metricEndpoint": {
            "type": "string",
            "description": "The local host endpoint to supply prometheus metric",
            "example": "http://localhost:9187/metrics"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          }
        },
        "example": {
          "id": "r-12345678",
          "metricEndpoint": "http://localhost:9187/metrics",
          "serviceId": "s-12345678"
        },
        "required": ["serviceId", "id", "metricEndpoint"]
      },
      "DetachComputeConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Asperiores velit suscipit minus tenetur animi."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "l9",
            "minLength": 1
          }
        },
        "example": {
          "id": "ic-12345678",
          "serviceId": "s-12345678",
          "token": "rf"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DetachNetworkConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Voluptas quo cumque error."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "az",
            "minLength": 1
          }
        },
        "example": {
          "id": "ic-12345678",
          "serviceId": "s-12345678",
          "token": "kk4"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DetachStorageConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Dolores natus autem."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "y9a",
            "minLength": 1
          }
        },
        "example": {
          "id": "ic-12345678",
          "serviceId": "s-12345678",
          "token": "t"
        },
        "required": ["token", "id", "serviceId"]
      },
      "DetailedNodeHealthResult": {
        "type": "object",
        "properties": {
          "ConnectivityStatus": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "DiskHealth": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "IntegrationsHealth": {
            "$ref": "#/components/schemas/IntegrationsHealth"
          },
          "LoadHealth": {
            "type": "string",
            "description": "The load status of a pod",
            "example": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A"
          },
          "LoadStatus": {
            "type": "string",
            "description": "The load status of a pod",
            "example": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A"
          },
          "NodeHealth": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "ProcessHealth": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "ProcessLiveness": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          }
        },
        "example": {
          "ConnectivityStatus": "HEALTHY",
          "DiskHealth": "HEALTHY",
          "IntegrationsHealth": {
            "CustomerObservabilityHealth": "HEALTHY",
            "InternalObservabilityHealth": "HEALTHY"
          },
          "LoadHealth": "LOAD_NORMAL",
          "LoadStatus": "LOAD_NORMAL",
          "NodeHealth": "HEALTHY",
          "ProcessHealth": "HEALTHY",
          "ProcessLiveness": "HEALTHY"
        }
      },
      "DiffTierVersionSetsRequest": {
        "type": "object",
        "properties": {
          "anotherVersion": {
            "type": "string",
            "description": "The target version to compare against.",
            "example": "3.1"
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Veniam necessitatibus quia maxime corrupti."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "e",
            "minLength": 1
          },
          "version": {
            "type": "string",
            "description": "The version number for the version set.",
            "example": "3.0"
          }
        },
        "example": {
          "anotherVersion": "3.1",
          "productTierId": "Beatae beatae.",
          "serviceId": "s-12345678",
          "token": "ys",
          "version": "3.0"
        },
        "required": ["token", "version", "anotherVersion", "serviceId", "productTierId"]
      },
      "DiffTierVersionSetsResult": {
        "type": "object",
        "properties": {
          "anotherVersion": {
            "type": "string",
            "description": "The target version to compare against.",
            "example": "3.1"
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Voluptatem quis impedit hic est."
          },
          "resourceChangeSets": {
            "type": "object",
            "description": "The difference for the service API configuration per resource",
            "example": {
              "Qui consequatur a voluptatem.": {
                "categorizedResourceChanges": {
                  "Officiis est nobis debitis eos qui.": {
                    "changes": [
                      {
                        "attributes": {
                          "resourceId": "r-12345678"
                        },
                        "changeType": "PENDING_NEW",
                        "name": "Customer metrics"
                      },
                      {
                        "attributes": {
                          "resourceId": "r-12345678"
                        },
                        "changeType": "PENDING_NEW",
                        "name": "Customer metrics"
                      },
                      {
                        "attributes": {
                          "resourceId": "r-12345678"
                        },
                        "changeType": "PENDING_NEW",
                        "name": "Customer metrics"
                      },
                      {
                        "attributes": {
                          "resourceId": "r-12345678"
                        },
                        "changeType": "PENDING_NEW",
                        "name": "Customer metrics"
                      }
                    ],
                    "status": "PENDING_UPDATE"
                  }
                },
                "imageConfigChanges": {
                  "changeState": "PENDING_NEW",
                  "imageConfigId": "imgc-12345678",
                  "imageName": "mysql"
                },
                "infraConfigChanges": {
                  "changeState": "PENDING_NEW",
                  "infraConfigId": "ic-12345678",
                  "name": "MySQL Writer Infra Config"
                },
                "overallResourceStatus": "PENDING_UPDATE",
                "productTierFeatureChanges": "PENDING_UPDATE",
                "resourceChanges": "PENDING_DELETE",
                "resourceName": "Eos quaerat sed ipsam animi."
              }
            },
            "additionalProperties": true
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "version": {
            "type": "string",
            "description": "The version number for the version set.",
            "example": "3.0"
          }
        },
        "example": {
          "anotherVersion": "3.1",
          "productTierId": "Beatae beatae.",
          "resourceChangeSets": {
            "Qui consequatur a voluptatem.": {
              "categorizedResourceChanges": {
                "Officiis est nobis debitis eos qui.": {
                  "changes": [
                    {
                      "attributes": {
                        "resourceId": "r-12345678"
                      },
                      "changeType": "PENDING_NEW",
                      "name": "Customer metrics"
                    },
                    {
                      "attributes": {
                        "resourceId": "r-12345678"
                      },
                      "changeType": "PENDING_NEW",
                      "name": "Customer metrics"
                    },
                    {
                      "attributes": {
                        "resourceId": "r-12345678"
                      },
                      "changeType": "PENDING_NEW",
                      "name": "Customer metrics"
                    },
                    {
                      "attributes": {
                        "resourceId": "r-12345678"
                      },
                      "changeType": "PENDING_NEW",
                      "name": "Customer metrics"
                    }
                  ],
                  "status": "PENDING_UPDATE"
                }
              },
              "imageConfigChanges": {
                "changeState": "PENDING_NEW",
                "imageConfigId": "imgc-12345678",
                "imageName": "mysql"
              },
              "infraConfigChanges": {
                "changeState": "PENDING_NEW",
                "infraConfigId": "ic-12345678",
                "name": "MySQL Writer Infra Config"
              },
              "overallResourceStatus": "PENDING_UPDATE",
              "productTierFeatureChanges": "PENDING_UPDATE",
              "resourceChanges": "PENDING_DELETE",
              "resourceName": "Eos quaerat sed ipsam animi."
            }
          },
          "serviceId": "s-12345678",
          "version": "3.0"
        },
        "required": ["version", "anotherVersion", "serviceId", "productTierId", "resourceChangeSets"]
      },
      "DisableProductTierFeatureRequest": {
        "type": "object",
        "properties": {
          "feature": {
            "type": "string",
            "description": "ProductTierFeatureType is to enable / disable features per product tier",
            "example": "LOGS|METRICS|BILLING|CLOUD_INSURANCE|MARKETPLACE|OPERATIONAL_STATUS"
          },
          "id": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Temporibus cupiditate sed doloribus accusantium officiis."
          },
          "scope": {
            "type": "string",
            "description": "ProductTierFeatureScope defines scope of the feature within product tier",
            "example": "INTERNAL|CUSTOMER"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "g5",
            "minLength": 1
          }
        },
        "example": {
          "feature": "BILLING",
          "id": "pt-12345678",
          "scope": "INTERNAL",
          "serviceId": "s-12345678",
          "token": "nw"
        },
        "required": ["token", "serviceId", "id", "feature"]
      },
      "DisableProductTierFeatureRequest2": {
        "type": "object",
        "properties": {
          "feature": {
            "type": "string",
            "description": "Feature to disable",
            "example": "BILLING"
          },
          "scope": {
            "type": "string",
            "description": "Feature scope",
            "example": "INTERNAL"
          }
        },
        "example": {
          "feature": "BILLING",
          "scope": "INTERNAL"
        },
        "required": ["feature"]
      },
      "DisableResourceCapabilityRequest": {
        "type": "object",
        "properties": {
          "capability": {
            "type": "string",
            "description": "The type of capability of a resource",
            "example": "SERVERLESS|SERVICE_ACCOUNT_POLICIES|PROCESS_CORE_DUMP|CUSTOM_DNS|SIDECARS"
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Ad est voluptas aliquam adipisci."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "k",
            "minLength": 1
          }
        },
        "example": {
          "capability": "SERVERLESS",
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "kb"
        },
        "required": ["token", "id", "serviceId", "capability"]
      },
      "DisableResourceCapabilityRequest2": {
        "type": "object",
        "properties": {
          "capability": {
            "type": "string",
            "description": "The capability to disable",
            "example": "SERVERLESS"
          }
        },
        "example": {
          "capability": "SERVERLESS"
        },
        "required": ["capability"]
      },
      "DisableServiceModelFeatureRequest": {
        "type": "object",
        "properties": {
          "feature": {
            "type": "string",
            "description": "Name of the service model feature",
            "example": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
          },
          "id": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Harum dolorem totam alias possimus perferendis nihil."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "dvy",
            "minLength": 1
          }
        },
        "example": {
          "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY",
          "id": "sm-12345678",
          "serviceId": "s-12345678",
          "token": "1"
        },
        "required": ["token", "id", "serviceId", "feature"]
      },
      "DisableServiceModelFeatureRequest2": {
        "type": "object",
        "properties": {
          "feature": {
            "type": "string",
            "example": "Facere voluptatum aut aut perspiciatis fugiat."
          }
        },
        "example": {
          "feature": "Voluptas hic alias consequuntur."
        },
        "required": ["feature"]
      },
      "DiscardPendingChangesRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Enim vero rerum optio."
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Ut doloribus."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "4",
            "minLength": 1
          }
        },
        "example": {
          "id": "sa-12345678",
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "p"
        },
        "required": ["token", "id", "serviceId"]
      },
      "EFSFileSystemConfiguration": {
        "type": "object",
        "properties": {
          "PerformanceMode": {
            "type": "string",
            "description": "The performance mode of the EFS file system",
            "example": "generalPurpose|maxIO"
          },
          "ProvisionedThroughputInMibps": {
            "type": "number",
            "description": "The throughput, measured in MiBps, that you want to provision for the EFS file system, if throughput mode if provisioned",
            "example": 125,
            "format": "double"
          },
          "ThroughputMode": {
            "type": "string",
            "description": "The throughput mode of the EFS file system",
            "example": "provisioned|bursting|elastic"
          }
        },
        "example": {
          "PerformanceMode": "generalPurpose|maxIO",
          "ProvisionedThroughputInMibps": 125,
          "ThroughputMode": "provisioned|bursting|elastic"
        },
        "required": ["ThroughputMode", "PerformanceMode"]
      },
      "EnableProductTierFeatureRequest": {
        "type": "object",
        "properties": {
          "configuration": {
            "type": "object",
            "description": "The configuration parameters of the product tier feature",
            "example": {
              "S3BucketArn": "arn:aws:s3:::my_billing_bucket_name"
            },
            "additionalProperties": true
          },
          "feature": {
            "type": "string",
            "description": "ProductTierFeatureType is to enable / disable features per product tier",
            "example": "LOGS|METRICS|BILLING|CLOUD_INSURANCE|MARKETPLACE|OPERATIONAL_STATUS"
          },
          "id": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Maiores quis ut quidem dolor."
          },
          "scope": {
            "type": "string",
            "description": "ProductTierFeatureScope defines scope of the feature within product tier",
            "example": "INTERNAL|CUSTOMER"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "3q",
            "minLength": 1
          }
        },
        "example": {
          "configuration": {
            "S3BucketArn": "arn:aws:s3:::my_billing_bucket_name"
          },
          "feature": "BILLING",
          "id": "pt-12345678",
          "scope": "INTERNAL",
          "serviceId": "s-12345678",
          "token": "sn"
        },
        "required": ["token", "serviceId", "id", "feature"]
      },
      "EnableProductTierFeatureRequest2": {
        "type": "object",
        "properties": {
          "configuration": {
            "type": "object",
            "description": "The configuration parameters of the product tier feature",
            "example": {
              "S3BucketArn": "arn:aws:s3:::my_billing_bucket_name"
            },
            "additionalProperties": true
          },
          "feature": {
            "type": "string",
            "description": "Feature to enable",
            "example": "BILLING"
          },
          "scope": {
            "type": "string",
            "description": "Feature scope",
            "example": "INTERNAL"
          }
        },
        "example": {
          "configuration": {
            "S3BucketArn": "arn:aws:s3:::my_billing_bucket_name"
          },
          "feature": "BILLING",
          "scope": "INTERNAL"
        },
        "required": ["feature"]
      },
      "EnableResourceCapabilityRequest": {
        "type": "object",
        "properties": {
          "capability": {
            "type": "string",
            "description": "The type of capability of a resource",
            "example": "SERVERLESS|SERVICE_ACCOUNT_POLICIES|PROCESS_CORE_DUMP|CUSTOM_DNS|SIDECARS"
          },
          "configuration": {
            "type": "object",
            "description": "The configuration parameters of a capability of a resource",
            "example": {
              "EnableAutoStop": true,
              "MinimumNodesInPool": 5,
              "PortsMappingProxyConfig": {
                "MaxNumberOfClustersPerProxyInstance": 50,
                "NumberOfPortsPerCluster": 4
              },
              "ReferenceProxyKey": "resource-proxy",
              "TargetPort": 5432
            },
            "additionalProperties": true
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Non quis est illo esse perspiciatis sit."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "550",
            "minLength": 1
          }
        },
        "example": {
          "capability": "SERVERLESS",
          "configuration": {
            "EnableAutoStop": true,
            "MinimumNodesInPool": 5,
            "PortsMappingProxyConfig": {
              "MaxNumberOfClustersPerProxyInstance": 50,
              "NumberOfPortsPerCluster": 4
            },
            "ReferenceProxyKey": "resource-proxy",
            "TargetPort": 5432
          },
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "as"
        },
        "required": ["token", "id", "serviceId", "capability"]
      },
      "EnableResourceCapabilityRequest2": {
        "type": "object",
        "properties": {
          "capability": {
            "type": "string",
            "description": "The type of capability of a resource",
            "example": "SERVERLESS"
          },
          "configuration": {
            "type": "object",
            "description": "The configuration parameters of a capability of a resource",
            "example": {
              "EnableAutoStop": true,
              "MinimumNodesInPool": 5,
              "PortsMappingProxyConfig": {
                "MaxNumberOfClustersPerProxyInstance": 50,
                "NumberOfPortsPerCluster": 4
              },
              "ReferenceProxyKey": "resource-proxy",
              "TargetPort": 5432
            },
            "additionalProperties": true
          }
        },
        "example": {
          "capability": "SERVERLESS",
          "configuration": {
            "EnableAutoStop": true,
            "MinimumNodesInPool": 5,
            "PortsMappingProxyConfig": {
              "MaxNumberOfClustersPerProxyInstance": 50,
              "NumberOfPortsPerCluster": 4
            },
            "ReferenceProxyKey": "resource-proxy",
            "TargetPort": 5432
          }
        },
        "required": ["capability"]
      },
      "EnableServiceModelFeatureRequest": {
        "type": "object",
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/ServiceModelFeatureConfiguration"
          },
          "feature": {
            "type": "string",
            "description": "Name of the service model feature",
            "example": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
          },
          "id": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Quam dolorem sed."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "0c",
            "minLength": 1
          }
        },
        "example": {
          "configuration": {
            "status": "ON"
          },
          "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY",
          "id": "sm-12345678",
          "serviceId": "s-12345678",
          "token": "k4g"
        },
        "required": ["token", "id", "serviceId", "feature", "configuration"]
      },
      "EnableServiceModelFeatureRequest2": {
        "type": "object",
        "properties": {
          "configuration": {
            "type": "object",
            "example": {
              "Neque quisquam accusamus expedita maiores eos vel.": "Dolores recusandae hic nesciunt.",
              "Nihil dolore unde rem.": "Harum vel sapiente pariatur eos iste.",
              "Qui sunt vitae non ea quod sequi.": "Voluptatem nulla fugiat dolorem occaecati."
            },
            "additionalProperties": true
          },
          "feature": {
            "type": "string",
            "example": "Qui aspernatur magnam."
          }
        },
        "example": {
          "configuration": {
            "Ipsam similique ut provident.": "Mollitia asperiores qui eaque eos voluptatibus."
          },
          "feature": "In voluptatem id cupiditate delectus ratione."
        },
        "required": ["feature", "configuration"]
      },
      "EndCustomerEvent": {
        "type": "object",
        "properties": {
          "eventID": {
            "type": "string",
            "description": "ID of a Event",
            "example": "Illum nesciunt libero autem ea."
          },
          "eventPayload": {
            "type": "object",
            "description": "The event payload for a service provider.",
            "example": {
              "eventType": "CustomerSignUp",
              "token": "123456"
            },
            "additionalProperties": true
          },
          "eventType": {
            "type": "string",
            "description": "The type of the end customer specific event",
            "example": "InviteUser|RevokeUserRole|CustomerSignUp"
          },
          "orgID": {
            "type": "string",
            "description": "ID of an Org",
            "example": "Minus cupiditate quisquam quia delectus sequi maiores."
          },
          "orgName": {
            "type": "string",
            "description": "Associated organization name.",
            "example": "Acme Corp"
          },
          "orgURL": {
            "type": "string",
            "description": "Associated organization URL.",
            "example": "https://acme.com"
          },
          "priority": {
            "type": "string",
            "description": "The priority of the event",
            "example": "Critical|High|Medium|Low"
          },
          "time": {
            "type": "string",
            "description": "The event time",
            "example": "2023-01-10T00:00:00Z"
          },
          "userEmail": {
            "type": "string",
            "description": "User email associated with the event.",
            "example": "user@example.com"
          },
          "userID": {
            "type": "string",
            "description": "ID of a User",
            "example": "Harum animi dolor est et."
          },
          "userName": {
            "type": "string",
            "description": "Name of the user associated with the event.",
            "example": "user"
          }
        },
        "example": {
          "eventID": "e-123456",
          "eventPayload": {
            "eventType": "CustomerSignUp",
            "token": "123456"
          },
          "eventType": "InviteUser",
          "orgID": "o-123456",
          "orgName": "Acme Corp",
          "orgURL": "https://acme.com",
          "priority": "Critical",
          "time": "2023-01-10T00:00:00Z",
          "userEmail": "user@example.com",
          "userID": "user-123456",
          "userName": "user"
        },
        "required": ["eventID", "eventType", "orgID", "orgName", "orgURL", "time", "eventPayload", "priority"]
      },
      "Endpoint": {
        "type": "object",
        "properties": {
          "disableMonitoring": {
            "type": "boolean",
            "description": "Whether to disable monitoring for this endpoint",
            "default": false,
            "example": true
          },
          "host": {
            "type": "string",
            "description": "The host of the endpoint",
            "default": "",
            "example": "https://my-endpoint.com"
          },
          "networkingType": {
            "type": "string",
            "description": "The networking type of the endpoint",
            "default": "PUBLIC",
            "example": "PUBLIC|PRIVATE"
          },
          "ports": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 2454141554634937000,
              "format": "int64"
            },
            "description": "The ports of the endpoint",
            "example": [8080, 8081]
          },
          "primary": {
            "type": "boolean",
            "description": "Whether this is the primary endpoint to highlight",
            "default": false,
            "example": true
          }
        },
        "example": {
          "disableMonitoring": false,
          "host": "https://my-endpoint.com",
          "networkingType": "PUBLIC|PRIVATE",
          "ports": [8080, 8081],
          "primary": false
        }
      },
      "EnvironmentHealthReport": {
        "type": "object",
        "properties": {
          "models": {
            "type": "object",
            "description": "Health report for each model in the environment",
            "example": {
              "sm-12345678": {
                "vu-11111111": "UNKNOWN",
                "vu-12345678": "UP",
                "vu-87654321": "DOWN"
              }
            },
            "additionalProperties": true
          }
        },
        "example": {
          "models": {
            "sm-12345678": {
              "vu-11111111": "UNKNOWN",
              "vu-12345678": "UP",
              "vu-87654321": "DOWN"
            }
          }
        }
      },
      "EnvironmentPromotionStatus": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the promotion",
            "example": "IN_SYNC|OUT_OF_SYNC|UNKNOWN"
          },
          "targetEnvironmentID": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          }
        },
        "example": {
          "status": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
          "targetEnvironmentID": "se-12345678"
        },
        "required": ["targetEnvironmentID", "status"]
      },
      "EnvironmentVariable": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "The key of the environment variable",
            "example": "MYSQL_ROOT_PASSWORD"
          },
          "value": {
            "type": "string",
            "description": "The value of the environment variable",
            "example": "password"
          }
        },
        "description": "A service environment variable",
        "example": {
          "key": "MYSQL_ROOT_PASSWORD",
          "value": "password"
        },
        "required": ["key", "value"]
      },
      "Error": {
        "type": "object",
        "properties": {
          "fault": {
            "type": "boolean",
            "description": "Is the error a server-side fault?",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "ID is a unique identifier for this particular occurrence of the problem.",
            "example": "123abc"
          },
          "message": {
            "type": "string",
            "description": "Message is a human-readable explanation specific to this occurrence of the problem.",
            "example": "parameter 'p' must be an integer"
          },
          "name": {
            "type": "string",
            "description": "Name is the name of this class of errors.",
            "example": "bad_request"
          },
          "temporary": {
            "type": "boolean",
            "description": "Is the error temporary?",
            "example": true
          },
          "timeout": {
            "type": "boolean",
            "description": "Is the error a timeout?",
            "example": true
          }
        },
        "example": {
          "fault": true,
          "id": "123abc",
          "message": "parameter 'p' must be an integer",
          "name": "bad_request",
          "temporary": true,
          "timeout": true
        },
        "required": ["name", "id", "message", "temporary", "timeout", "fault"]
      },
      "FailoverResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "failedReplicaAction": {
            "type": "string",
            "description": "The action to take for the replica that has failed",
            "example": "FAILOVER_ONLY|FAILOVER_AND_RESTART|FAILOVER_AND_RECREATE"
          },
          "failedReplicaID": {
            "type": "string",
            "description": "The failed replica ID",
            "example": "db-0"
          },
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Odit ad consequatur et error."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "8",
            "minLength": 1
          }
        },
        "example": {
          "failedReplicaAction": "FAILOVER_AND_RESTART",
          "failedReplicaID": "db-0",
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "o"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id",
          "failedReplicaID"
        ]
      },
      "FailoverResourceInstanceRequest2": {
        "type": "object",
        "properties": {
          "failedReplicaAction": {
            "type": "string",
            "description": "The failed replica action",
            "example": "FAILOVER_AND_RESTART"
          },
          "failedReplicaID": {
            "type": "string",
            "description": "The failed replica ID",
            "example": "db-0"
          }
        },
        "example": {
          "failedReplicaAction": "FAILOVER_AND_RESTART",
          "failedReplicaID": "db-0"
        },
        "required": ["failedReplicaID"]
      },
      "FileMetadata": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the file",
            "example": "A file to store the configuration for the resource"
          },
          "fileId": {
            "type": "string",
            "description": "ID of a File",
            "example": "Illo quis molestiae."
          },
          "mountPath": {
            "type": "string",
            "description": "The mount path of the file",
            "example": "/etc/config"
          },
          "name": {
            "type": "string",
            "description": "The name of the file",
            "example": "file.txt"
          },
          "size": {
            "type": "integer",
            "description": "The size of the file",
            "example": 1234,
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "The type of the file",
            "example": "Config|Secret"
          },
          "uploadTime": {
            "type": "string",
            "description": "The time the file was uploaded",
            "example": "2023-01-10T00:00:00Z"
          },
          "uploadedBy": {
            "type": "string",
            "description": "The user who uploaded the file",
            "example": "user"
          }
        },
        "example": {
          "description": "A file to store the configuration for the resource",
          "fileId": "f-12345678",
          "mountPath": "/etc/config",
          "name": "file.txt",
          "size": 1234,
          "type": "Config",
          "uploadTime": "2023-01-10T00:00:00Z",
          "uploadedBy": "user"
        },
        "required": ["fileId", "name", "description", "size", "uploadTime", "uploadedBy", "type", "mountPath"]
      },
      "FileSystemConfiguration": {
        "type": "object",
        "properties": {
          "EFSFileSystemConfiguration": {
            "$ref": "#/components/schemas/EFSFileSystemConfiguration"
          }
        },
        "example": {
          "EFSFileSystemConfiguration": {
            "PerformanceMode": "generalPurpose|maxIO",
            "ProvisionedThroughputInMibps": 125,
            "ThroughputMode": "provisioned|bursting|elastic"
          }
        }
      },
      "GCSConfiguration": {
        "type": "object",
        "example": {}
      },
      "GenerateComposeSpecFromContainerImageRequest": {
        "type": "object",
        "properties": {
          "environmentVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            },
            "description": "Runtime environment variables needed to run the image",
            "example": [
              {
                "key": "MYSQL_ROOT_PASSWORD",
                "value": "password"
              }
            ]
          },
          "image": {
            "type": "string",
            "description": "Name of the image along with the tag. Include the repository name if the image is not from the official repository",
            "example": "library/mysql:5.7"
          },
          "imageRegistry": {
            "type": "string",
            "description": "Registry where the image is stored",
            "example": "docker.io"
          },
          "password": {
            "type": "string",
            "description": "Password to access the image registry",
            "example": "password"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "d",
            "minLength": 1
          },
          "username": {
            "type": "string",
            "description": "Username to access the image registry",
            "example": "username"
          }
        },
        "example": {
          "environmentVariables": [
            {
              "key": "MYSQL_ROOT_PASSWORD",
              "value": "password"
            }
          ],
          "image": "library/mysql:5.7",
          "imageRegistry": "docker.io",
          "password": "password",
          "token": "qbt",
          "username": "username"
        },
        "required": ["token", "imageRegistry", "image"]
      },
      "GenerateComposeSpecFromContainerImageRequest2": {
        "type": "object",
        "properties": {
          "environmentVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            },
            "description": "Runtime environment variables needed to run the image",
            "example": [
              {
                "key": "MYSQL_ROOT_PASSWORD",
                "value": "password"
              }
            ]
          },
          "image": {
            "type": "string",
            "description": "Name of the image along with the tag. Include the repository name if the image is not from the official repository",
            "example": "library/mysql:5.7"
          },
          "imageRegistry": {
            "type": "string",
            "description": "Registry where the image is stored",
            "example": "docker.io"
          },
          "password": {
            "type": "string",
            "description": "Password to access the image registry",
            "example": "password"
          },
          "username": {
            "type": "string",
            "description": "Username to access the image registry",
            "example": "username"
          }
        },
        "example": {
          "environmentVariables": [
            {
              "key": "MYSQL_ROOT_PASSWORD",
              "value": "password"
            }
          ],
          "image": "library/mysql:5.7",
          "imageRegistry": "docker.io",
          "password": "password",
          "username": "username"
        },
        "required": ["imageRegistry", "image"]
      },
      "GenerateComposeSpecFromContainerImageResult": {
        "type": "object",
        "properties": {
          "fileContent": {
            "type": "string",
            "description": "Base64 encoded Compose Spec YAML in docker compose format",
            "example": "Numquam eius consectetur et ad commodi."
          }
        },
        "example": {
          "fileContent": "Eligendi inventore ea tenetur cum."
        },
        "required": ["fileContent"]
      },
      "GenerateTokenForDeploymentCellDashboardRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Resource Instance",
            "example": "instance-12345678"
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "9",
            "minLength": 1
          }
        },
        "example": {
          "id": "instance-abcd1234",
          "subscriptionId": "sub-abcd1234",
          "token": "iw"
        },
        "required": ["token", "id", "subscriptionId"]
      },
      "GenerateTokenForDeploymentCellDashboardResult": {
        "type": "object",
        "properties": {
          "deploymentCellID": {
            "type": "string",
            "description": "The deployment cell ID",
            "example": "hc-12345678"
          },
          "expirationTimestamp": {
            "type": "string",
            "description": "The timestamp when the token expires",
            "example": "2021-01-01T00:00:00Z"
          },
          "token": {
            "type": "string",
            "description": "The token to access the dashboard",
            "example": "token"
          }
        },
        "example": {
          "deploymentCellID": "hc-12345678",
          "expirationTimestamp": "2021-01-01T00:00:00Z",
          "token": "token"
        },
        "required": ["token", "expirationTimestamp", "deploymentCellID"]
      },
      "GetAvailabilityZoneByCodeRequest": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "code": {
            "type": "string",
            "description": "Cloud-provider native availability zone code",
            "example": "us-east-1a"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "e",
            "minLength": 1
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "code": "us-east-1a",
          "token": "i0s"
        },
        "required": ["token", "code", "cloudProviderName"]
      },
      "GetCloudProviderByNameRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the CloudProvider",
            "example": "aws",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "4s",
            "minLength": 1
          }
        },
        "example": {
          "name": "aws",
          "token": "9"
        },
        "required": ["token", "name"]
      },
      "GetCurrentUsageRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "g5",
            "minLength": 1
          }
        },
        "example": {
          "token": "og"
        },
        "required": ["token"]
      },
      "GetCurrentUsageResult": {
        "type": "object",
        "properties": {
          "endTime": {
            "type": "string",
            "description": "End timestamp of usage",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "planName": {
            "type": "string",
            "description": "This parameter is used to select the appropriate Product Plan",
            "example": "STARTER_NO_COMMIT|STARTER|GROWTH|ENTERPRISE"
          },
          "startTime": {
            "type": "string",
            "description": "Start timestamp of usage",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "usage": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsagePerDimension"
            },
            "description": "Usage for the current plan",
            "example": [
              {
                "dimension": "core/hours",
                "total": 0.67
              }
            ]
          }
        },
        "example": {
          "endTime": "2021-01-01T00:00:00.000Z",
          "planName": "STARTER",
          "startTime": "2021-01-01T00:00:00.000Z",
          "usage": [
            {
              "dimension": "core/hours",
              "total": 0.67
            }
          ]
        }
      },
      "GetFileRequest": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "ID of a File",
            "example": "Voluptatem nulla deleniti eligendi."
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Voluptatem quos corporis dolores."
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Ipsa expedita laboriosam et error quaerat."
          },
          "productTierVersion": {
            "type": "string",
            "description": "Version of the product tier",
            "example": "1.0"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "8",
            "minLength": 1
          }
        },
        "example": {
          "fileId": "f-12345678",
          "id": "r-12345678",
          "productTierId": "pt-12345678",
          "productTierVersion": "1.0",
          "serviceId": "s-12345678",
          "token": "fi"
        },
        "required": ["token", "id", "serviceId", "fileId"]
      },
      "GetRegionByCodeRequest": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "code": {
            "type": "string",
            "description": "Cloud-provider native region code",
            "example": "us-east-1",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "nkt",
            "minLength": 1
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "code": "us-east-1",
          "token": "r2g"
        },
        "required": ["token", "code", "cloudProviderName"]
      },
      "GetServicePlanRequest": {
        "type": "object",
        "properties": {
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "In et et voluptate."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "n4",
            "minLength": 1
          }
        },
        "example": {
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "q"
        },
        "required": ["token", "serviceId", "productTierId"]
      },
      "GetServicePlanResult": {
        "type": "object",
        "properties": {
          "AutoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "accountConfigIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Account Config",
              "example": "Sed totam minus maxime et eos amet."
            },
            "description": "The infrastructure account configuration ID list",
            "example": ["ac-12345678", "ac-23456789"]
          },
          "activeAccountConfigIds": {
            "type": "object",
            "description": "The active infrastructure account configuration IDs per cloud provider",
            "example": {
              "aws": "ac-12345678",
              "gcp": "ac-23456789"
            },
            "additionalProperties": true
          },
          "apiVersion": {
            "type": "string",
            "description": "The external version of the API",
            "example": "v1"
          },
          "awsRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Dolorem architecto aut numquam incidunt voluptatem ad."
            },
            "description": "The AWS regions that this service plan is available on",
            "example": ["us-east-2", "ca-central-1"]
          },
          "deploymentConfigId": {
            "type": "string",
            "description": "ID of a Deployment Config",
            "example": "Hic voluptates reprehenderit saepe mollitia."
          },
          "gcpRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Hic inventore velit."
            },
            "description": "The GCP regions that this service plan is available on",
            "example": ["us-central1"]
          },
          "hasPendingChanges": {
            "type": "boolean",
            "description": "Whether there are any pending changes for the product tier configuration",
            "example": true
          },
          "isProductTierDisabled": {
            "type": "boolean",
            "description": "Whether the product tier is disabled",
            "example": true
          },
          "latestMajorVersion": {
            "type": "string",
            "description": "The version number for the latest major version set.",
            "example": "3.0"
          },
          "modelType": {
            "type": "string",
            "description": "The model type encapsulating this service",
            "example": "OMNISTRATE_HOSTED|CUSTOMER_HOSTED|BYOA"
          },
          "productTierDescription": {
            "type": "string",
            "description": "A brief description of the product tier",
            "example": "A premium product tier"
          },
          "productTierDocumentation": {
            "type": "string",
            "description": "Documentation",
            "example": "Any documentation"
          },
          "productTierFeatures": {
            "type": "object",
            "description": "The features that are enabled / disabled for this product tier",
            "example": {
              "BILLING": false,
              "LOGS": true,
              "METRICS": false
            },
            "additionalProperties": true
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Ut quasi ut iusto quasi vel."
          },
          "productTierKey": {
            "type": "string",
            "description": "Unique Key of the product tier",
            "example": "premium"
          },
          "productTierName": {
            "type": "string",
            "description": "Name of the product tier",
            "example": "Premium"
          },
          "productTierPlanDescription": {
            "type": "string",
            "description": "A brief description for the end user of the product tier",
            "example": "A premium plan"
          },
          "productTierPricing": {
            "description": "Pricing",
            "example": {
              "price1": "value1"
            }
          },
          "productTierSupport": {
            "type": "string",
            "description": "Support",
            "example": "Any support"
          },
          "serviceApiDescription": {
            "type": "string",
            "description": "A brief description of the service API bundle",
            "example": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability"
          },
          "serviceApiId": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Doloremque sit."
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceModelDescription": {
            "type": "string",
            "description": "A brief description of the service model",
            "example": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability"
          },
          "serviceModelFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceModelFeatureDetail"
            },
            "description": "Enabled service model features",
            "example": [
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              },
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              },
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              }
            ]
          },
          "serviceModelId": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Aperiam quia velit."
          },
          "serviceModelName": {
            "type": "string",
            "description": "Name of the Service Model",
            "example": "MySQL multi-writer service hosted model"
          },
          "tierType": {
            "type": "string",
            "description": "ProductTierType is the type of tier for a product",
            "example": "OMNISTRATE_DEDICATED_TENANCY|OMNISTRATE_MULTI_TENANCY|CUSTOM_TENANCY"
          },
          "versionSetStatus": {
            "type": "string",
            "description": "The tier version set status.",
            "example": "Preferred|Active|Deprecated|Pending"
          }
        },
        "example": {
          "AutoApproveSubscription": false,
          "accountConfigIds": ["ac-12345678", "ac-23456789"],
          "activeAccountConfigIds": {
            "aws": "ac-12345678",
            "gcp": "ac-23456789"
          },
          "apiVersion": "v1",
          "awsRegions": ["us-east-2", "ca-central-1"],
          "deploymentConfigId": "dc-12345678",
          "gcpRegions": ["us-central1"],
          "hasPendingChanges": true,
          "isProductTierDisabled": true,
          "latestMajorVersion": "3.0",
          "modelType": "CUSTOMER_HOSTED",
          "productTierDescription": "A premium product tier",
          "productTierDocumentation": "Any documentation",
          "productTierFeatures": {
            "BILLING": false,
            "LOGS": true,
            "METRICS": false
          },
          "productTierId": "pt-12345678",
          "productTierKey": "premium",
          "productTierName": "Premium",
          "productTierPlanDescription": "A premium plan",
          "productTierPricing": {
            "price1": "value1"
          },
          "productTierSupport": "Any support",
          "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
          "serviceApiId": "sa-12345678",
          "serviceEnvironmentId": "se-12345678",
          "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
          "serviceModelFeatures": [
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            },
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            }
          ],
          "serviceModelId": "sm-12345678",
          "serviceModelName": "MySQL multi-writer service hosted model",
          "tierType": "OMNISTRATE_DEDICATED_TENANCY",
          "versionSetStatus": "Preferred|Active|Deprecated|Pending"
        },
        "required": [
          "apiVersion",
          "deploymentConfigId",
          "serviceEnvironmentId",
          "serviceApiDescription",
          "serviceApiId",
          "serviceModelDescription",
          "serviceModelId",
          "modelType",
          "serviceModelName",
          "productTierId",
          "productTierName",
          "productTierKey",
          "productTierDescription",
          "productTierPlanDescription",
          "tierType",
          "productTierDocumentation",
          "productTierSupport",
          "productTierPricing",
          "versionSetStatus",
          "latestMajorVersion",
          "hasPendingChanges",
          "AutoApproveSubscription",
          "isProductTierDisabled"
        ]
      },
      "GitConfiguration": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "The access token",
            "example": "my-token"
          },
          "referenceName": {
            "type": "string",
            "description": "The reference name of the repository",
            "example": "tags/v1.0.0"
          },
          "repositoryUrl": {
            "type": "string",
            "description": "The URL of the repository",
            "example": "https://github.com/username/myrepo"
          },
          "userName": {
            "type": "string",
            "description": "The name of github user",
            "example": "my-user"
          }
        },
        "example": {
          "accessToken": "my-token",
          "referenceName": "tags/v1.0.0",
          "repositoryUrl": "https://github.com/username/myrepo",
          "userName": "my-user"
        },
        "required": ["repositoryUrl", "referenceName"]
      },
      "HelmChartConfiguration": {
        "type": "object",
        "properties": {
          "chartName": {
            "type": "string",
            "description": "The chart name of the Helm package",
            "example": "my-chart"
          },
          "chartRepoName": {
            "type": "string",
            "description": "The chart repository name of the Helm package",
            "example": "my-repo"
          },
          "chartRepoUrl": {
            "type": "string",
            "description": "The chart repository URL of the Helm package",
            "example": "https://my-repo.com"
          },
          "chartValues": {
            "type": "object",
            "description": "The values of the Helm package",
            "example": {
              "key1": "value1",
              "key2": 3,
              "key3": {
                "key4": "value4"
              }
            },
            "additionalProperties": true
          },
          "chartVersion": {
            "type": "string",
            "description": "The chart version of the Helm package",
            "example": "1.0.0"
          },
          "endpointConfiguration": {
            "type": "object",
            "description": "The endpoints from the Helm Deployment to expose to the customer",
            "example": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "password": {
            "type": "string",
            "description": "The password to authenticate with the registry",
            "example": "my-password"
          },
          "runtimeConfiguration": {
            "$ref": "#/components/schemas/HelmRuntimeConfiguration"
          },
          "username": {
            "type": "string",
            "description": "The username to authenticate with the registry",
            "example": "my-user"
          }
        },
        "example": {
          "chartName": "my-chart",
          "chartRepoName": "my-repo",
          "chartRepoUrl": "https://my-repo.com",
          "chartValues": {
            "key1": "value1",
            "key2": 3,
            "key3": {
              "key4": "value4"
            }
          },
          "chartVersion": "1.0.0",
          "endpointConfiguration": {
            "admin": {
              "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
              "networkingType": "PRIVATE",
              "ports": [8080, 8081],
              "primary": false
            },
            "cluster": {
              "host": "https://my-endpoint.com",
              "networkingType": "PUBLIC",
              "ports": [8080, 8081],
              "primary": true
            }
          },
          "password": "my-password",
          "runtimeConfiguration": {
            "disableHooks": true,
            "recreate": true,
            "resetThenReuseValues": true,
            "resetValues": true,
            "reuseValues": true,
            "skipCRDs": true,
            "timeoutNanos": 1000000000,
            "upgradeCRDs": true,
            "wait": true,
            "waitForJobs": true
          },
          "username": "my-user"
        },
        "required": ["chartName", "chartVersion", "chartRepoName", "chartRepoUrl"]
      },
      "HelmPackage": {
        "type": "object",
        "properties": {
          "chartName": {
            "type": "string",
            "description": "The chart name of the Helm package",
            "example": "my-chart"
          },
          "chartRepoName": {
            "type": "string",
            "description": "The chart repository name of the Helm package",
            "example": "my-repo"
          },
          "chartRepoUrl": {
            "type": "string",
            "description": "The chart repository URL of the Helm package",
            "example": "https://my-repo.com"
          },
          "chartValues": {
            "type": "object",
            "description": "The values of the Helm package",
            "example": {
              "key1": "value1",
              "key2": 3,
              "key3": {
                "key4": "value4"
              }
            },
            "additionalProperties": true
          },
          "chartVersion": {
            "type": "string",
            "description": "The chart version of the Helm package",
            "example": "1.0.0"
          },
          "namespace": {
            "type": "string",
            "description": "The namespace where the Helm package should be installed",
            "example": "default"
          },
          "password": {
            "type": "string",
            "description": "The password to authenticate with the registry",
            "example": "my-password"
          },
          "username": {
            "type": "string",
            "description": "The username to authenticate with the registry",
            "example": "my-user"
          }
        },
        "example": {
          "chartName": "my-chart",
          "chartRepoName": "my-repo",
          "chartRepoUrl": "https://my-repo.com",
          "chartValues": {
            "key1": "value1",
            "key2": 3,
            "key3": {
              "key4": "value4"
            }
          },
          "chartVersion": "1.0.0",
          "namespace": "default",
          "password": "my-password",
          "username": "my-user"
        },
        "required": ["chartName", "chartVersion", "chartRepoName", "chartRepoUrl", "namespace"]
      },
      "HelmRuntimeConfiguration": {
        "type": "object",
        "properties": {
          "disableHooks": {
            "type": "boolean",
            "description": "Disable Helm hooks",
            "example": true
          },
          "recreate": {
            "type": "boolean",
            "description": "Recreate the Helm package if it already exists",
            "example": true
          },
          "resetThenReuseValues": {
            "type": "boolean",
            "description": "Reset then reuse values for the Helm package before applying",
            "example": true
          },
          "resetValues": {
            "type": "boolean",
            "description": "Reset values for the Helm package before applying",
            "example": true
          },
          "reuseValues": {
            "type": "boolean",
            "description": "Reuse values for the Helm package before applying",
            "example": true
          },
          "skipCRDs": {
            "type": "boolean",
            "description": "Skip CRDs for the Helm package",
            "example": true
          },
          "timeoutNanos": {
            "type": "integer",
            "description": "Timeout (nanos) for the Helm package to be deployed",
            "example": 1000000000,
            "format": "int64"
          },
          "upgradeCRDs": {
            "type": "boolean",
            "description": "Upgrade CRDs for the Helm package",
            "example": true
          },
          "wait": {
            "type": "boolean",
            "description": "Wait for the Helm package to be deployed",
            "example": true
          },
          "waitForJobs": {
            "type": "boolean",
            "description": "Wait for all jobs to be completed",
            "example": true
          }
        },
        "example": {
          "disableHooks": true,
          "recreate": true,
          "resetThenReuseValues": true,
          "resetValues": true,
          "reuseValues": true,
          "skipCRDs": true,
          "timeoutNanos": 1000000000,
          "upgradeCRDs": true,
          "wait": true,
          "waitForJobs": true
        },
        "required": [
          "disableHooks",
          "wait",
          "waitForJobs",
          "timeoutNanos",
          "skipCRDs",
          "upgradeCRDs",
          "resetValues",
          "reuseValues",
          "resetThenReuseValues",
          "recreate"
        ]
      },
      "ImageConfigChangeSummary": {
        "type": "object",
        "properties": {
          "changeState": {
            "type": "string",
            "description": "State of the configuration change",
            "example": "PENDING_NEW|PENDING_UPDATE|ACTIVE|PENDING_DELETE|PENDING_DEPRECATE"
          },
          "imageConfigId": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "Nesciunt libero magni dolorum."
          },
          "imageName": {
            "type": "string",
            "description": "Name of the container image",
            "example": "mysql",
            "minLength": 1
          }
        },
        "example": {
          "changeState": "PENDING_NEW",
          "imageConfigId": "imgc-12345678",
          "imageName": "mysql"
        }
      },
      "InfraConfigChangeSummary": {
        "type": "object",
        "properties": {
          "changeState": {
            "type": "string",
            "description": "State of the configuration change",
            "example": "PENDING_NEW|PENDING_UPDATE|ACTIVE|PENDING_DELETE|PENDING_DEPRECATE"
          },
          "infraConfigId": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Explicabo mollitia nihil provident dolore dicta eveniet."
          },
          "name": {
            "type": "string",
            "description": "The name of the infra config",
            "example": "MySQL Writer Infra Config"
          }
        },
        "example": {
          "changeState": "PENDING_NEW",
          "infraConfigId": "ic-12345678",
          "name": "MySQL Writer Infra Config"
        }
      },
      "InfraRollConfiguration": {
        "type": "object",
        "properties": {
          "infraRolloutStrategy": {
            "type": "string",
            "description": "Rollout strategy to use for infra config updates",
            "example": "APPLY_IMMEDIATELY"
          },
          "maximumNumberOfResourceInstancesPerBatch": {
            "type": "integer",
            "description": "Maximum number of resource instances to update in a single batch",
            "default": 1,
            "example": 1,
            "format": "int64",
            "minimum": 1
          },
          "maximumUnavailableReplicas": {
            "type": "integer",
            "description": "Maximum number of replicas of this resource that can be unavailable before halting the rollout",
            "default": 1,
            "example": 1,
            "format": "int64",
            "minimum": 1
          }
        },
        "description": "The rollout configuration to use for making changes to the resources backed by this infra",
        "example": {
          "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
          "maximumNumberOfResourceInstancesPerBatch": 1,
          "maximumUnavailableReplicas": 1
        }
      },
      "InputParameterEntity": {
        "type": "object",
        "properties": {
          "custom": {
            "type": "boolean",
            "description": "Whether the parameter is custom",
            "example": false
          },
          "defaultValue": {
            "type": "string",
            "description": "The parameter default value",
            "example": "option1"
          },
          "dependentResourceID": {
            "type": "string",
            "description": "The parameter dependent resource ID",
            "example": "r-12345678"
          },
          "description": {
            "type": "string",
            "description": "The parameter description",
            "example": "The name of the server"
          },
          "displayName": {
            "type": "string",
            "description": "The parameter display name",
            "example": "Server Name"
          },
          "isList": {
            "type": "boolean",
            "description": "Whether the parameter is a list",
            "example": false
          },
          "key": {
            "type": "string",
            "description": "The parameter key",
            "example": "serverName"
          },
          "modifiable": {
            "type": "boolean",
            "description": "Whether the parameter is modifiable",
            "example": true
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Dolore quod labore."
            },
            "description": "The parameter options",
            "example": ["option1", "option2"]
          },
          "required": {
            "type": "boolean",
            "description": "Whether the parameter is required",
            "example": true
          },
          "type": {
            "type": "string",
            "description": "The parameter type",
            "example": "Boolean|Float64|String|JSON|Resource"
          }
        },
        "example": {
          "custom": false,
          "defaultValue": "option1",
          "dependentResourceID": "r-12345678",
          "description": "The name of the server",
          "displayName": "Server Name",
          "isList": false,
          "key": "serverName",
          "modifiable": true,
          "options": ["option1", "option2"],
          "required": true,
          "type": "Boolean|Float64|String|JSON|Resource"
        },
        "required": ["key", "displayName", "description", "type", "isList", "required", "modifiable", "custom"]
      },
      "InstanceHealthSummary": {
        "type": "object",
        "properties": {
          "instanceID": {
            "type": "string",
            "description": "ID of a Resource Instance",
            "example": "instance-12345678"
          },
          "lifeCycleStatus": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          },
          "resourcesHealth": {
            "type": "object",
            "description": "The health summary of the resources by resource ID",
            "example": {
              "Consectetur animi quis velit vel aut fuga.": {
                "nodesHealth": {
                  "At ut.": {
                    "availabilityZone": "us-east-2a",
                    "connectivityStatus": "HEALTHY",
                    "diskHealth": "HEALTHY",
                    "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                    "events": ["event-1", "event-2"],
                    "integrationsHealth": {
                      "CustomerObservabilityHealth": "HEALTHY",
                      "InternalObservabilityHealth": "HEALTHY"
                    },
                    "loadHealth": "LOAD_NORMAL",
                    "loadStatus": "LOAD_NORMAL",
                    "nodeHealth": "HEALTHY",
                    "nodeName": "postgres-0",
                    "ports": [80, 443],
                    "processHealth": "HEALTHY",
                    "processLiveness": "HEALTHY",
                    "recentLogs": "Log message",
                    "status": "HEALTHY"
                  }
                },
                "resourceID": "resource-12345678",
                "resourceKey": "primary",
                "resourceType": "Kustomize",
                "status": "HEALTHY"
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/ResourceHealthSummary"
            }
          },
          "status": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          }
        },
        "example": {
          "instanceID": "instance-12345678",
          "lifeCycleStatus": "RUNNING",
          "resourcesHealth": {
            "Maiores aliquam.": {
              "nodesHealth": {
                "At ut.": {
                  "availabilityZone": "us-east-2a",
                  "connectivityStatus": "HEALTHY",
                  "diskHealth": "HEALTHY",
                  "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                  "events": ["event-1", "event-2"],
                  "integrationsHealth": {
                    "CustomerObservabilityHealth": "HEALTHY",
                    "InternalObservabilityHealth": "HEALTHY"
                  },
                  "loadHealth": "LOAD_NORMAL",
                  "loadStatus": "LOAD_NORMAL",
                  "nodeHealth": "HEALTHY",
                  "nodeName": "postgres-0",
                  "ports": [80, 443],
                  "processHealth": "HEALTHY",
                  "processLiveness": "HEALTHY",
                  "recentLogs": "Log message",
                  "status": "HEALTHY"
                }
              },
              "resourceID": "resource-12345678",
              "resourceKey": "primary",
              "resourceType": "Kustomize",
              "status": "HEALTHY"
            }
          },
          "status": "HEALTHY"
        }
      },
      "InstanceSnapshot": {
        "type": "object",
        "properties": {
          "completeTime": {
            "type": "string",
            "description": "The snapshot time",
            "example": "2021-09-01T00:00:00Z"
          },
          "createdTime": {
            "type": "string",
            "description": "The snapshot creation time",
            "example": "2021-09-01T00:00:00Z"
          },
          "encrypted": {
            "type": "boolean",
            "description": "Whether the snapshot is encrypted",
            "example": true
          },
          "progress": {
            "type": "integer",
            "description": "The backup progress. 0-100",
            "example": 99,
            "format": "int64"
          },
          "snapshotId": {
            "type": "string",
            "description": "ID of a Resource Instance Snapshot",
            "example": "Vitae minima enim nesciunt nulla."
          },
          "status": {
            "type": "string",
            "description": "The snapshot status",
            "example": "completed"
          }
        },
        "example": {
          "completeTime": "2021-09-01T00:00:00Z",
          "createdTime": "2021-09-01T00:00:00Z",
          "encrypted": true,
          "progress": 99,
          "snapshotId": "instance-ss-12345678",
          "status": "completed"
        },
        "required": ["snapshotId", "createdTime", "completeTime", "status", "progress", "encrypted"]
      },
      "IntegrationsHealth": {
        "type": "object",
        "properties": {
          "CustomerObservabilityHealth": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "InternalObservabilityHealth": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          }
        },
        "example": {
          "CustomerObservabilityHealth": "HEALTHY",
          "InternalObservabilityHealth": "HEALTHY"
        }
      },
      "InviteConsumptionUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "roleType": {
            "type": "string",
            "description": "Type of the role",
            "example": "root|editor|reader|service_editor|service_reader|admin|service_operator"
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "gbk",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "roleType": "reader",
          "subscriptionId": "sub-abcd1234",
          "token": "0j"
        },
        "required": ["token", "email", "roleType", "subscriptionId"]
      },
      "InviteConsumptionUserRequest2": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "roleType": {
            "type": "string",
            "example": "reader"
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "roleType": "reader"
        },
        "required": ["email", "roleType"]
      },
      "InviteUserRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "roleType": {
            "type": "string",
            "description": "Type of the role",
            "example": "root|editor|reader|service_editor|service_reader|admin|service_operator"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "t",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "roleType": "reader",
          "token": "hdi"
        },
        "required": ["token", "email", "roleType"]
      },
      "InviteUserRequest2": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "roleType": {
            "type": "string",
            "example": "reader"
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "roleType": "reader"
        },
        "required": ["email", "roleType"]
      },
      "Invoice": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string",
            "description": "The currency of the charge",
            "example": "USD"
          },
          "invoiceDate": {
            "type": "string",
            "description": "Date of the invoice",
            "example": "2021-01-01T00:00:00.000Z"
          },
          "invoiceId": {
            "type": "string",
            "description": "ID of the invoice",
            "example": "123MyCoolCorp980-2021-01-01-1234567890"
          },
          "invoicePaymentTerm": {
            "type": "string",
            "description": "Invoice Payment Term",
            "example": "30"
          },
          "invoiceStatus": {
            "type": "string",
            "description": "This describes the status of the invoice and is set by the payment provider",
            "example": "Paid|Open"
          },
          "invoiceUrl": {
            "type": "string",
            "description": "URL for this invoice",
            "example": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf"
          },
          "taxAmount": {
            "type": "number",
            "description": "Amount of tax, if any",
            "example": 10,
            "format": "double"
          },
          "totalAmount": {
            "type": "number",
            "description": "Amount of Invoice",
            "example": 110,
            "format": "double"
          },
          "totalAmountWithoutTax": {
            "type": "number",
            "description": "Amount of Invoice without tax",
            "example": 100,
            "format": "double"
          }
        },
        "example": {
          "currency": "USD",
          "invoiceDate": "2021-01-01T00:00:00.000Z",
          "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
          "invoicePaymentTerm": "30",
          "invoiceStatus": "Open",
          "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
          "taxAmount": 10,
          "totalAmount": 110,
          "totalAmountWithoutTax": 100
        }
      },
      "KubernetesDashboardEndpoint": {
        "type": "object",
        "properties": {
          "dashboardEndpoint": {
            "type": "string",
            "description": "The dashboard endpoint",
            "default": "",
            "example": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh"
          },
          "deploymentCellID": {
            "type": "string",
            "description": "The deployment cell ID",
            "default": "",
            "example": "hc-12345678"
          }
        },
        "example": {
          "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
          "deploymentCellID": "hc-12345678"
        }
      },
      "KustomizeConfiguration": {
        "type": "object",
        "properties": {
          "endpointConfiguration": {
            "type": "object",
            "description": "The endpoints from the Kustomize Deployment to expose to the customer",
            "example": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "gitConfiguration": {
            "$ref": "#/components/schemas/GitConfiguration"
          },
          "helmChartDependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatorHelmChartDependency"
            },
            "description": "The helm chart dependencies for the CRD - Optional",
            "example": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ]
          },
          "kustomizePath": {
            "type": "string",
            "description": "The path to the kustomize directory",
            "example": "/kustomize"
          }
        },
        "example": {
          "endpointConfiguration": {
            "admin": {
              "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
              "networkingType": "PRIVATE",
              "ports": [8080, 8081],
              "primary": false
            },
            "cluster": {
              "host": "https://my-endpoint.com",
              "networkingType": "PUBLIC",
              "ports": [8080, 8081],
              "primary": true
            }
          },
          "gitConfiguration": {
            "accessToken": "my-token",
            "referenceName": "tags/v1.0.0",
            "repositoryUrl": "https://github.com/username/myrepo",
            "userName": "my-user"
          },
          "helmChartDependencies": [
            {
              "chartName": "cert-manager",
              "chartVersion": "v1.5.3"
            },
            {
              "chartName": "nginx-ingress",
              "chartVersion": "v0.48.1"
            },
            {
              "chartName": "external-dns",
              "chartVersion": "v0.7.0"
            },
            {
              "chartName": "cnpg-operator",
              "chartVersion": "v0.23.1"
            }
          ],
          "kustomizePath": "/kustomize"
        },
        "required": ["kustomizePath"]
      },
      "L4LoadBalancerConfiguration": {
        "type": "object",
        "properties": {
          "ingressPortConfiguration": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackendPortConfiguration"
            },
            "description": "The ingress port configuration to configure on the load balancer",
            "example": [
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8080,
                "ingressPort": 1234
              },
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8081,
                "ingressPort": 5678
              },
              {
                "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                "backendPort": 8082,
                "ingressPort": 9012
              }
            ]
          }
        },
        "example": {
          "ingressPortConfiguration": [
            {
              "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
              "backendPort": 8080,
              "ingressPort": 1234
            },
            {
              "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
              "backendPort": 8081,
              "ingressPort": 5678
            },
            {
              "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
              "backendPort": 8082,
              "ingressPort": 9012
            }
          ]
        }
      },
      "L7LoadBalancerConfiguration": {
        "type": "object",
        "properties": {
          "paths": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoadBalancerPathConfiguration"
            },
            "description": "The paths to configure on the load balancer",
            "example": [
              {
                "associatedResourceID": "r-12345678",
                "path": "/path",
                "port": 8080
              }
            ]
          }
        },
        "example": {
          "paths": [
            {
              "associatedResourceID": "r-12345678",
              "path": "/path",
              "port": 8080
            }
          ]
        }
      },
      "Limits": {
        "type": "object",
        "properties": {
          "max": {
            "type": "string",
            "description": "Maximum value for an integer or floating-point parameter",
            "example": "Quo vitae odio excepturi."
          },
          "maxLength": {
            "type": "string",
            "description": "Maximum length of a string parameter",
            "example": "Nostrum voluptatem odit consequatur nesciunt."
          },
          "min": {
            "type": "string",
            "description": "Minimum value for an integer or floating-point parameter",
            "example": "Corrupti quod magni ipsam."
          },
          "minLength": {
            "type": "string",
            "description": "Minimum length of a string parameter",
            "example": "Molestiae numquam et."
          }
        },
        "description": "Limit of a parameter",
        "example": {
          "max": "Ut accusamus officia quia dolorum.",
          "maxLength": "Et facere.",
          "min": "Est repellat a et atque possimus.",
          "minLength": "Eum iure nihil."
        }
      },
      "List": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "rmj",
            "minLength": 1
          }
        },
        "example": {
          "token": "y"
        },
        "required": ["token"]
      },
      "ListAccountConfigRequest": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "96",
            "minLength": 1
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "token": "c"
        },
        "required": ["token", "cloudProviderName"]
      },
      "ListAccountConfigResult": {
        "type": "object",
        "properties": {
          "accountConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeAccountConfigResult"
            },
            "description": "The list of account configs",
            "example": [
              {
                "awsAccountID": "123456789012",
                "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                "cloudProviderId": "infra-12345678",
                "description": "An AWS account hosting multiple dev environments",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                "id": "ac-12345678",
                "name": "Dev AWS account",
                "status": "READY",
                "statusMessage": "Account is ready"
              },
              {
                "awsAccountID": "123456789012",
                "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                "cloudProviderId": "infra-12345678",
                "description": "An AWS account hosting multiple dev environments",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                "id": "ac-12345678",
                "name": "Dev AWS account",
                "status": "READY",
                "statusMessage": "Account is ready"
              },
              {
                "awsAccountID": "123456789012",
                "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                "cloudProviderId": "infra-12345678",
                "description": "An AWS account hosting multiple dev environments",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                "id": "ac-12345678",
                "name": "Dev AWS account",
                "status": "READY",
                "statusMessage": "Account is ready"
              }
            ]
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Account Config",
              "example": "Voluptas dolores laboriosam nesciunt."
            },
            "example": ["ac-12345678", "ac-abcdefgh", "ac-1234efgh"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next page",
            "example": "next-token"
          }
        },
        "description": "List of Account Config IDs",
        "example": {
          "accountConfigs": [
            {
              "awsAccountID": "123456789012",
              "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
              "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
              "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
              "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
              "cloudProviderId": "infra-12345678",
              "description": "An AWS account hosting multiple dev environments",
              "gcpProjectID": "my-project",
              "gcpProjectNumber": "123456789012",
              "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
              "id": "ac-12345678",
              "name": "Dev AWS account",
              "status": "READY",
              "statusMessage": "Account is ready"
            },
            {
              "awsAccountID": "123456789012",
              "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
              "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
              "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
              "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
              "cloudProviderId": "infra-12345678",
              "description": "An AWS account hosting multiple dev environments",
              "gcpProjectID": "my-project",
              "gcpProjectNumber": "123456789012",
              "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
              "id": "ac-12345678",
              "name": "Dev AWS account",
              "status": "READY",
              "statusMessage": "Account is ready"
            },
            {
              "awsAccountID": "123456789012",
              "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
              "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
              "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
              "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
              "cloudProviderId": "infra-12345678",
              "description": "An AWS account hosting multiple dev environments",
              "gcpProjectID": "my-project",
              "gcpProjectNumber": "123456789012",
              "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
              "id": "ac-12345678",
              "name": "Dev AWS account",
              "status": "READY",
              "statusMessage": "Account is ready"
            }
          ],
          "ids": ["ac-12345678", "ac-abcdefgh", "ac-1234efgh"],
          "nextPageToken": "next-token"
        }
      },
      "ListActionHooksRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Voluptatem labore."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "j5",
            "minLength": 1
          }
        },
        "example": {
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "jie"
        },
        "required": ["token", "serviceId", "id"]
      },
      "ListActionHooksResult": {
        "type": "object",
        "properties": {
          "hooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionHook"
            },
            "description": "The list of action hooks",
            "example": [
              {
                "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
                "customCommand": ["/bin/sh", "-c"],
                "customImage": "my-custom-image:latest",
                "scope": "CLUSTER",
                "type": "ADD"
              },
              {
                "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
                "customCommand": ["/bin/sh", "-c"],
                "customImage": "my-custom-image:latest",
                "scope": "CLUSTER",
                "type": "ADD"
              },
              {
                "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
                "customCommand": ["/bin/sh", "-c"],
                "customImage": "my-custom-image:latest",
                "scope": "CLUSTER",
                "type": "ADD"
              },
              {
                "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
                "customCommand": ["/bin/sh", "-c"],
                "customImage": "my-custom-image:latest",
                "scope": "CLUSTER",
                "type": "ADD"
              }
            ]
          }
        },
        "example": {
          "hooks": [
            {
              "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
              "customCommand": ["/bin/sh", "-c"],
              "customImage": "my-custom-image:latest",
              "scope": "CLUSTER",
              "type": "ADD"
            },
            {
              "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
              "customCommand": ["/bin/sh", "-c"],
              "customImage": "my-custom-image:latest",
              "scope": "CLUSTER",
              "type": "ADD"
            },
            {
              "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
              "customCommand": ["/bin/sh", "-c"],
              "customImage": "my-custom-image:latest",
              "scope": "CLUSTER",
              "type": "ADD"
            }
          ]
        },
        "required": ["hooks"]
      },
      "ListAllAuditEventsRequest": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "string",
            "description": "End time of the window in ISO 8601 format. If omitted, the filter is open-ended at the start.",
            "example": "2024-01-01T10:00:00Z",
            "format": "date-time"
          },
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "eventSourceTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Eos corporis vel voluptatem aut molestiae ut."
            },
            "description": "The event types to filter by",
            "example": ["Voluptas non culpa impedit ut.", "Nulla eaque quibusdam."]
          },
          "instanceID": {
            "type": "string",
            "description": "ID of a Resource Instance",
            "example": "instance-12345678"
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use for pagination",
            "example": "token"
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of resources to return per page",
            "example": 10,
            "format": "int64"
          },
          "serviceID": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "startDate": {
            "type": "string",
            "description": "Start time of the window in ISO 8601 format. If omitted, the filter is open-ended at the start.",
            "example": "2023-01-01T10:00:00Z",
            "format": "date-time"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "k",
            "minLength": 1
          }
        },
        "example": {
          "endDate": "2024-01-01T10:00:00Z",
          "environmentType": "PROD|PRIVATE|CANARY|STAGING|QA|DEV",
          "eventSourceTypes": [
            "Nisi dignissimos placeat nihil nobis asperiores.",
            "Iure ea quo recusandae temporibus.",
            "Sit repudiandae nemo.",
            "Qui doloremque."
          ],
          "instanceID": "instance-12345678",
          "nextPageToken": "token",
          "pageSize": 10,
          "serviceID": "s-123456",
          "startDate": "2023-01-01T10:00:00Z",
          "token": "bty"
        },
        "required": ["token"]
      },
      "ListAllResourceInstancesRequest": {
        "type": "object",
        "properties": {
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "w",
            "minLength": 1
          }
        },
        "example": {
          "environmentType": "DEV",
          "token": "5q1"
        },
        "required": ["token"]
      },
      "ListAllResourceInstancesResult": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next request",
            "example": "next-token"
          },
          "resourceInstances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeResourceInstanceResult"
            },
            "description": "The list of resource instances",
            "example": [
              {
                "active": true,
                "autoscalingEnabled": true,
                "awsAccountID": "123456789012",
                "backupStatus": {
                  "backupPeriodInHours": 2,
                  "backupRetentionInDays": 7,
                  "earliestRestoreTime": "2021-09-01T00:00:00Z",
                  "lastBackupTime": "2021-09-01T00:00:00Z"
                },
                "cloud_provider": "aws",
                "created_at": "2023-01-10T00:00:00Z",
                "createdByUserId": "user-12345678",
                "createdByUserName": "John Doe",
                "currentReplicas": "2",
                "customNetworkDetail": {
                  "cidr": "10.177.0.0/16",
                  "id": "n-12345678",
                  "name": "Prod us-east-1"
                },
                "detailedNetworkTopology": {
                  "r-abcd1234": {
                    "allowedIPRanges": ["0.0.0.0/0"],
                    "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                    "clusterPorts": [3306],
                    "main": true,
                    "networkingType": "PUBLIC",
                    "nodes": [
                      {
                        "availabilityZone": "us-east-2a",
                        "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                        "healthStatus": "healthy",
                        "id": "primary-0",
                        "ports": [3306],
                        "status": "RUNNING"
                      }
                    ],
                    "privateNetworkCIDR": "10.0.0.2/24",
                    "privateNetworkID": "n-1234abcd",
                    "publiclyAccessible": true,
                    "resourceKey": "primary",
                    "resourceName": "Primary MySQL Instance"
                  }
                },
                "externalPayerId": "external-payer-id-1234",
                "gcpProjectID": "my-project",
                "highAvailability": true,
                "id": "instance-abcd1234",
                "instanceLoadStatus": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A",
                "kubernetesDashboardEndpoint": {
                  "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
                  "deploymentCellID": "hc-12345678"
                },
                "last_modified_at": "2023-01-20T00:00:00Z",
                "maxReplicas": "1",
                "minReplicas": "1",
                "network_type": "PUBLIC",
                "productTierFeatures": {
                  "BILLING": {
                    "enabled": false
                  },
                  "LOGS": {
                    "auth": {
                      "password": "px3c4d5f6g7h8i",
                      "username": "abcd1234"
                    },
                    "enabled": true,
                    "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
                  },
                  "METRICS": {
                    "enabled": false
                  }
                },
                "region": "us-east-1",
                "result_params": {
                  "param1": "value1",
                  "param2": "value2"
                },
                "serverlessEnabled": true,
                "status": "RUNNING",
                "subscriptionId": "sub-abcd1234"
              },
              {
                "active": true,
                "autoscalingEnabled": true,
                "awsAccountID": "123456789012",
                "backupStatus": {
                  "backupPeriodInHours": 2,
                  "backupRetentionInDays": 7,
                  "earliestRestoreTime": "2021-09-01T00:00:00Z",
                  "lastBackupTime": "2021-09-01T00:00:00Z"
                },
                "cloud_provider": "aws",
                "created_at": "2023-01-10T00:00:00Z",
                "createdByUserId": "user-12345678",
                "createdByUserName": "John Doe",
                "currentReplicas": "2",
                "customNetworkDetail": {
                  "cidr": "10.177.0.0/16",
                  "id": "n-12345678",
                  "name": "Prod us-east-1"
                },
                "detailedNetworkTopology": {
                  "r-abcd1234": {
                    "allowedIPRanges": ["0.0.0.0/0"],
                    "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                    "clusterPorts": [3306],
                    "main": true,
                    "networkingType": "PUBLIC",
                    "nodes": [
                      {
                        "availabilityZone": "us-east-2a",
                        "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                        "healthStatus": "healthy",
                        "id": "primary-0",
                        "ports": [3306],
                        "status": "RUNNING"
                      }
                    ],
                    "privateNetworkCIDR": "10.0.0.2/24",
                    "privateNetworkID": "n-1234abcd",
                    "publiclyAccessible": true,
                    "resourceKey": "primary",
                    "resourceName": "Primary MySQL Instance"
                  }
                },
                "externalPayerId": "external-payer-id-1234",
                "gcpProjectID": "my-project",
                "highAvailability": true,
                "id": "instance-abcd1234",
                "instanceLoadStatus": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A",
                "kubernetesDashboardEndpoint": {
                  "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
                  "deploymentCellID": "hc-12345678"
                },
                "last_modified_at": "2023-01-20T00:00:00Z",
                "maxReplicas": "1",
                "minReplicas": "1",
                "network_type": "PUBLIC",
                "productTierFeatures": {
                  "BILLING": {
                    "enabled": false
                  },
                  "LOGS": {
                    "auth": {
                      "password": "px3c4d5f6g7h8i",
                      "username": "abcd1234"
                    },
                    "enabled": true,
                    "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
                  },
                  "METRICS": {
                    "enabled": false
                  }
                },
                "region": "us-east-1",
                "result_params": {
                  "param1": "value1",
                  "param2": "value2"
                },
                "serverlessEnabled": true,
                "status": "RUNNING",
                "subscriptionId": "sub-abcd1234"
              },
              {
                "active": true,
                "autoscalingEnabled": true,
                "awsAccountID": "123456789012",
                "backupStatus": {
                  "backupPeriodInHours": 2,
                  "backupRetentionInDays": 7,
                  "earliestRestoreTime": "2021-09-01T00:00:00Z",
                  "lastBackupTime": "2021-09-01T00:00:00Z"
                },
                "cloud_provider": "aws",
                "created_at": "2023-01-10T00:00:00Z",
                "createdByUserId": "user-12345678",
                "createdByUserName": "John Doe",
                "currentReplicas": "2",
                "customNetworkDetail": {
                  "cidr": "10.177.0.0/16",
                  "id": "n-12345678",
                  "name": "Prod us-east-1"
                },
                "detailedNetworkTopology": {
                  "r-abcd1234": {
                    "allowedIPRanges": ["0.0.0.0/0"],
                    "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                    "clusterPorts": [3306],
                    "main": true,
                    "networkingType": "PUBLIC",
                    "nodes": [
                      {
                        "availabilityZone": "us-east-2a",
                        "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                        "healthStatus": "healthy",
                        "id": "primary-0",
                        "ports": [3306],
                        "status": "RUNNING"
                      }
                    ],
                    "privateNetworkCIDR": "10.0.0.2/24",
                    "privateNetworkID": "n-1234abcd",
                    "publiclyAccessible": true,
                    "resourceKey": "primary",
                    "resourceName": "Primary MySQL Instance"
                  }
                },
                "externalPayerId": "external-payer-id-1234",
                "gcpProjectID": "my-project",
                "highAvailability": true,
                "id": "instance-abcd1234",
                "instanceLoadStatus": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A",
                "kubernetesDashboardEndpoint": {
                  "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
                  "deploymentCellID": "hc-12345678"
                },
                "last_modified_at": "2023-01-20T00:00:00Z",
                "maxReplicas": "1",
                "minReplicas": "1",
                "network_type": "PUBLIC",
                "productTierFeatures": {
                  "BILLING": {
                    "enabled": false
                  },
                  "LOGS": {
                    "auth": {
                      "password": "px3c4d5f6g7h8i",
                      "username": "abcd1234"
                    },
                    "enabled": true,
                    "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
                  },
                  "METRICS": {
                    "enabled": false
                  }
                },
                "region": "us-east-1",
                "result_params": {
                  "param1": "value1",
                  "param2": "value2"
                },
                "serverlessEnabled": true,
                "status": "RUNNING",
                "subscriptionId": "sub-abcd1234"
              },
              {
                "active": true,
                "autoscalingEnabled": true,
                "awsAccountID": "123456789012",
                "backupStatus": {
                  "backupPeriodInHours": 2,
                  "backupRetentionInDays": 7,
                  "earliestRestoreTime": "2021-09-01T00:00:00Z",
                  "lastBackupTime": "2021-09-01T00:00:00Z"
                },
                "cloud_provider": "aws",
                "created_at": "2023-01-10T00:00:00Z",
                "createdByUserId": "user-12345678",
                "createdByUserName": "John Doe",
                "currentReplicas": "2",
                "customNetworkDetail": {
                  "cidr": "10.177.0.0/16",
                  "id": "n-12345678",
                  "name": "Prod us-east-1"
                },
                "detailedNetworkTopology": {
                  "r-abcd1234": {
                    "allowedIPRanges": ["0.0.0.0/0"],
                    "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                    "clusterPorts": [3306],
                    "main": true,
                    "networkingType": "PUBLIC",
                    "nodes": [
                      {
                        "availabilityZone": "us-east-2a",
                        "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                        "healthStatus": "healthy",
                        "id": "primary-0",
                        "ports": [3306],
                        "status": "RUNNING"
                      }
                    ],
                    "privateNetworkCIDR": "10.0.0.2/24",
                    "privateNetworkID": "n-1234abcd",
                    "publiclyAccessible": true,
                    "resourceKey": "primary",
                    "resourceName": "Primary MySQL Instance"
                  }
                },
                "externalPayerId": "external-payer-id-1234",
                "gcpProjectID": "my-project",
                "highAvailability": true,
                "id": "instance-abcd1234",
                "instanceLoadStatus": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A",
                "kubernetesDashboardEndpoint": {
                  "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
                  "deploymentCellID": "hc-12345678"
                },
                "last_modified_at": "2023-01-20T00:00:00Z",
                "maxReplicas": "1",
                "minReplicas": "1",
                "network_type": "PUBLIC",
                "productTierFeatures": {
                  "BILLING": {
                    "enabled": false
                  },
                  "LOGS": {
                    "auth": {
                      "password": "px3c4d5f6g7h8i",
                      "username": "abcd1234"
                    },
                    "enabled": true,
                    "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
                  },
                  "METRICS": {
                    "enabled": false
                  }
                },
                "region": "us-east-1",
                "result_params": {
                  "param1": "value1",
                  "param2": "value2"
                },
                "serverlessEnabled": true,
                "status": "RUNNING",
                "subscriptionId": "sub-abcd1234"
              }
            ]
          }
        },
        "example": {
          "nextPageToken": "next-token",
          "resourceInstances": [
            {
              "active": true,
              "autoscalingEnabled": true,
              "awsAccountID": "123456789012",
              "backupStatus": {
                "backupPeriodInHours": 2,
                "backupRetentionInDays": 7,
                "earliestRestoreTime": "2021-09-01T00:00:00Z",
                "lastBackupTime": "2021-09-01T00:00:00Z"
              },
              "cloud_provider": "aws",
              "created_at": "2023-01-10T00:00:00Z",
              "createdByUserId": "user-12345678",
              "createdByUserName": "John Doe",
              "currentReplicas": "2",
              "customNetworkDetail": {
                "cidr": "10.177.0.0/16",
                "id": "n-12345678",
                "name": "Prod us-east-1"
              },
              "detailedNetworkTopology": {
                "r-abcd1234": {
                  "allowedIPRanges": ["0.0.0.0/0"],
                  "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                  "clusterPorts": [3306],
                  "main": true,
                  "networkingType": "PUBLIC",
                  "nodes": [
                    {
                      "availabilityZone": "us-east-2a",
                      "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "healthStatus": "healthy",
                      "id": "primary-0",
                      "ports": [3306],
                      "status": "RUNNING"
                    }
                  ],
                  "privateNetworkCIDR": "10.0.0.2/24",
                  "privateNetworkID": "n-1234abcd",
                  "publiclyAccessible": true,
                  "resourceKey": "primary",
                  "resourceName": "Primary MySQL Instance"
                }
              },
              "externalPayerId": "external-payer-id-1234",
              "gcpProjectID": "my-project",
              "highAvailability": true,
              "id": "instance-abcd1234",
              "instanceLoadStatus": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A",
              "kubernetesDashboardEndpoint": {
                "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
                "deploymentCellID": "hc-12345678"
              },
              "last_modified_at": "2023-01-20T00:00:00Z",
              "maxReplicas": "1",
              "minReplicas": "1",
              "network_type": "PUBLIC",
              "productTierFeatures": {
                "BILLING": {
                  "enabled": false
                },
                "LOGS": {
                  "auth": {
                    "password": "px3c4d5f6g7h8i",
                    "username": "abcd1234"
                  },
                  "enabled": true,
                  "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
                },
                "METRICS": {
                  "enabled": false
                }
              },
              "region": "us-east-1",
              "result_params": {
                "param1": "value1",
                "param2": "value2"
              },
              "serverlessEnabled": true,
              "status": "RUNNING",
              "subscriptionId": "sub-abcd1234"
            },
            {
              "active": true,
              "autoscalingEnabled": true,
              "awsAccountID": "123456789012",
              "backupStatus": {
                "backupPeriodInHours": 2,
                "backupRetentionInDays": 7,
                "earliestRestoreTime": "2021-09-01T00:00:00Z",
                "lastBackupTime": "2021-09-01T00:00:00Z"
              },
              "cloud_provider": "aws",
              "created_at": "2023-01-10T00:00:00Z",
              "createdByUserId": "user-12345678",
              "createdByUserName": "John Doe",
              "currentReplicas": "2",
              "customNetworkDetail": {
                "cidr": "10.177.0.0/16",
                "id": "n-12345678",
                "name": "Prod us-east-1"
              },
              "detailedNetworkTopology": {
                "r-abcd1234": {
                  "allowedIPRanges": ["0.0.0.0/0"],
                  "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                  "clusterPorts": [3306],
                  "main": true,
                  "networkingType": "PUBLIC",
                  "nodes": [
                    {
                      "availabilityZone": "us-east-2a",
                      "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "healthStatus": "healthy",
                      "id": "primary-0",
                      "ports": [3306],
                      "status": "RUNNING"
                    }
                  ],
                  "privateNetworkCIDR": "10.0.0.2/24",
                  "privateNetworkID": "n-1234abcd",
                  "publiclyAccessible": true,
                  "resourceKey": "primary",
                  "resourceName": "Primary MySQL Instance"
                }
              },
              "externalPayerId": "external-payer-id-1234",
              "gcpProjectID": "my-project",
              "highAvailability": true,
              "id": "instance-abcd1234",
              "instanceLoadStatus": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A",
              "kubernetesDashboardEndpoint": {
                "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
                "deploymentCellID": "hc-12345678"
              },
              "last_modified_at": "2023-01-20T00:00:00Z",
              "maxReplicas": "1",
              "minReplicas": "1",
              "network_type": "PUBLIC",
              "productTierFeatures": {
                "BILLING": {
                  "enabled": false
                },
                "LOGS": {
                  "auth": {
                    "password": "px3c4d5f6g7h8i",
                    "username": "abcd1234"
                  },
                  "enabled": true,
                  "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
                },
                "METRICS": {
                  "enabled": false
                }
              },
              "region": "us-east-1",
              "result_params": {
                "param1": "value1",
                "param2": "value2"
              },
              "serverlessEnabled": true,
              "status": "RUNNING",
              "subscriptionId": "sub-abcd1234"
            }
          ]
        },
        "required": ["resourceInstances"]
      },
      "ListAllSubscriptionUsersRequest": {
        "type": "object",
        "properties": {
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "q",
            "minLength": 1
          }
        },
        "example": {
          "environmentType": "DEV",
          "token": "f75"
        },
        "required": ["token"]
      },
      "ListAllSubscriptionUsersResult": {
        "type": "object",
        "properties": {
          "subscriptionUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriptionUsers"
            },
            "description": "The users associated with the corresponding subscription",
            "example": [
              {
                "email": "abc@gmail.com",
                "name": "John Doe",
                "roleType": "reader",
                "userId": "user-abcd1234"
              }
            ]
          }
        },
        "example": {
          "subscriptionUsers": [
            {
              "email": "abc@gmail.com",
              "name": "John Doe",
              "roleType": "reader",
              "userId": "user-abcd1234"
            }
          ]
        },
        "required": ["subscriptionUsers"]
      },
      "ListAssociatedResourcesRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Eum rerum repudiandae iure doloremque sed."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "wy",
            "minLength": 1
          }
        },
        "example": {
          "id": "ic-12345678",
          "serviceId": "s-12345678",
          "token": "x3r"
        },
        "required": ["token", "id", "serviceId"]
      },
      "ListAssociatedResourcesResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Velit accusantium enim."
          },
          "resourceIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Neque sapiente."
            },
            "description": "The resources associated with the infra config",
            "example": ["r-12345678", "r-abcdefgh"]
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          }
        },
        "example": {
          "id": "ic-12345678",
          "resourceIds": ["r-12345678", "r-abcdefgh"],
          "serviceId": "s-12345678"
        },
        "required": ["resourceIds", "id", "serviceId"]
      },
      "ListAuditEventsForInstanceRequest": {
        "type": "object",
        "properties": {
          "instanceId": {
            "type": "string",
            "description": "The ID of the resource instance",
            "example": "instance-12345678"
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "qr",
            "minLength": 1
          }
        },
        "example": {
          "instanceId": "instance-12345678",
          "subscriptionId": "sub-abcd1234",
          "token": "dzi"
        },
        "required": ["token", "instanceId"]
      },
      "ListAuditEventsForServicePlanRequest": {
        "type": "object",
        "properties": {
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Laudantium ea animi modi id."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "9",
            "minLength": 1
          }
        },
        "example": {
          "productTierKey": "premium",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "7"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey"
        ]
      },
      "ListAuditEventsResult": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeAuditEventResult"
            },
            "description": "The list of events",
            "example": [
              {
                "eventSource": "Customer, Infra or Maintenance",
                "id": "event-12345678",
                "message": "instance-abcd1234 created",
                "orgId": "org-12345678",
                "orgName": "Acme Corporation",
                "resourceInstanceId": "instance-abcd1234",
                "resourceName": "Galera",
                "subscriptionId": "sub-abcd1234",
                "time": "2023-01-10T00:00:00Z",
                "userId": "user-12345678",
                "userName": "John Doe",
                "workflowFailures": [
                  {
                    "eventTime": "2020-01-01T00:00:00Z",
                    "message": "Bootstrap failed for reason X"
                  },
                  {
                    "eventTime": "2020-01-01T00:01:00Z",
                    "message": "Compute failed for reason Y"
                  }
                ]
              },
              {
                "eventSource": "Customer, Infra or Maintenance",
                "id": "event-12345678",
                "message": "instance-abcd1234 created",
                "orgId": "org-12345678",
                "orgName": "Acme Corporation",
                "resourceInstanceId": "instance-abcd1234",
                "resourceName": "Galera",
                "subscriptionId": "sub-abcd1234",
                "time": "2023-01-10T00:00:00Z",
                "userId": "user-12345678",
                "userName": "John Doe",
                "workflowFailures": [
                  {
                    "eventTime": "2020-01-01T00:00:00Z",
                    "message": "Bootstrap failed for reason X"
                  },
                  {
                    "eventTime": "2020-01-01T00:01:00Z",
                    "message": "Compute failed for reason Y"
                  }
                ]
              },
              {
                "eventSource": "Customer, Infra or Maintenance",
                "id": "event-12345678",
                "message": "instance-abcd1234 created",
                "orgId": "org-12345678",
                "orgName": "Acme Corporation",
                "resourceInstanceId": "instance-abcd1234",
                "resourceName": "Galera",
                "subscriptionId": "sub-abcd1234",
                "time": "2023-01-10T00:00:00Z",
                "userId": "user-12345678",
                "userName": "John Doe",
                "workflowFailures": [
                  {
                    "eventTime": "2020-01-01T00:00:00Z",
                    "message": "Bootstrap failed for reason X"
                  },
                  {
                    "eventTime": "2020-01-01T00:01:00Z",
                    "message": "Compute failed for reason Y"
                  }
                ]
              },
              {
                "eventSource": "Customer, Infra or Maintenance",
                "id": "event-12345678",
                "message": "instance-abcd1234 created",
                "orgId": "org-12345678",
                "orgName": "Acme Corporation",
                "resourceInstanceId": "instance-abcd1234",
                "resourceName": "Galera",
                "subscriptionId": "sub-abcd1234",
                "time": "2023-01-10T00:00:00Z",
                "userId": "user-12345678",
                "userName": "John Doe",
                "workflowFailures": [
                  {
                    "eventTime": "2020-01-01T00:00:00Z",
                    "message": "Bootstrap failed for reason X"
                  },
                  {
                    "eventTime": "2020-01-01T00:01:00Z",
                    "message": "Compute failed for reason Y"
                  }
                ]
              }
            ]
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Event",
              "example": "Ut sed expedita consequatur consequatur odio placeat."
            },
            "description": "The list of event IDs",
            "example": ["event-12345678"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use for pagination",
            "example": "token"
          }
        },
        "example": {
          "events": [
            {
              "eventSource": "Customer, Infra or Maintenance",
              "id": "event-12345678",
              "message": "instance-abcd1234 created",
              "orgId": "org-12345678",
              "orgName": "Acme Corporation",
              "resourceInstanceId": "instance-abcd1234",
              "resourceName": "Galera",
              "subscriptionId": "sub-abcd1234",
              "time": "2023-01-10T00:00:00Z",
              "userId": "user-12345678",
              "userName": "John Doe",
              "workflowFailures": [
                {
                  "eventTime": "2020-01-01T00:00:00Z",
                  "message": "Bootstrap failed for reason X"
                },
                {
                  "eventTime": "2020-01-01T00:01:00Z",
                  "message": "Compute failed for reason Y"
                }
              ]
            },
            {
              "eventSource": "Customer, Infra or Maintenance",
              "id": "event-12345678",
              "message": "instance-abcd1234 created",
              "orgId": "org-12345678",
              "orgName": "Acme Corporation",
              "resourceInstanceId": "instance-abcd1234",
              "resourceName": "Galera",
              "subscriptionId": "sub-abcd1234",
              "time": "2023-01-10T00:00:00Z",
              "userId": "user-12345678",
              "userName": "John Doe",
              "workflowFailures": [
                {
                  "eventTime": "2020-01-01T00:00:00Z",
                  "message": "Bootstrap failed for reason X"
                },
                {
                  "eventTime": "2020-01-01T00:01:00Z",
                  "message": "Compute failed for reason Y"
                }
              ]
            }
          ],
          "ids": ["event-12345678"],
          "nextPageToken": "token"
        },
        "required": ["ids", "events"]
      },
      "ListAvailabilityZonesByRegionCodeRequest": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "regionCode": {
            "type": "string",
            "example": "us-east-1"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "rs",
            "minLength": 1
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "regionCode": "us-east-1",
          "token": "o"
        },
        "required": ["token", "cloudProviderName", "regionCode"]
      },
      "ListAvailabilityZonesByRegionCodeResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an AZ",
              "example": "Amet qui sit ipsa iure."
            },
            "example": ["az-12345678", "az-87654321"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next request",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["az-12345678", "az-87654321"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListAvailabilityZonesRequest": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "53g",
            "minLength": 1
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "token": "n4c"
        },
        "required": ["token", "cloudProviderName"]
      },
      "ListAvailabilityZonesResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an AZ",
              "example": "Maiores optio fugit possimus dolores voluptatem."
            },
            "example": ["az-12345678", "az-87654321"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next request",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["az-12345678", "az-87654321"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListBYOAConfigRequest": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "kd",
            "minLength": 1
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "token": "j5"
        },
        "required": ["token", "cloudProviderName"]
      },
      "ListBYOAConfigRequest2": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Cloud Provider name to filter on",
            "example": "aws"
          }
        },
        "example": {
          "cloudProviderName": "aws"
        },
        "required": ["cloudProviderName"]
      },
      "ListBYOAConfigResult": {
        "type": "object",
        "properties": {
          "accountConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeAccountConfigResult"
            },
            "description": "The list of account configs",
            "example": [
              {
                "awsAccountID": "123456789012",
                "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                "cloudProviderId": "infra-12345678",
                "description": "An AWS account hosting multiple dev environments",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                "id": "ac-12345678",
                "name": "Dev AWS account",
                "status": "READY",
                "statusMessage": "Account is ready"
              },
              {
                "awsAccountID": "123456789012",
                "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                "cloudProviderId": "infra-12345678",
                "description": "An AWS account hosting multiple dev environments",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                "id": "ac-12345678",
                "name": "Dev AWS account",
                "status": "READY",
                "statusMessage": "Account is ready"
              },
              {
                "awsAccountID": "123456789012",
                "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                "cloudProviderId": "infra-12345678",
                "description": "An AWS account hosting multiple dev environments",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                "id": "ac-12345678",
                "name": "Dev AWS account",
                "status": "READY",
                "statusMessage": "Account is ready"
              },
              {
                "awsAccountID": "123456789012",
                "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
                "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
                "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
                "cloudProviderId": "infra-12345678",
                "description": "An AWS account hosting multiple dev environments",
                "gcpProjectID": "my-project",
                "gcpProjectNumber": "123456789012",
                "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                "id": "ac-12345678",
                "name": "Dev AWS account",
                "status": "READY",
                "statusMessage": "Account is ready"
              }
            ]
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Account Config",
              "example": "At maiores soluta deserunt earum unde quae."
            },
            "example": ["ac-12345678", "ac-abcdefgh", "ac-1234efgh"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next page",
            "example": "next-token"
          }
        },
        "description": "List of BYOA Config IDs",
        "example": {
          "accountConfigs": [
            {
              "awsAccountID": "123456789012",
              "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
              "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
              "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
              "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
              "cloudProviderId": "infra-12345678",
              "description": "An AWS account hosting multiple dev environments",
              "gcpProjectID": "my-project",
              "gcpProjectNumber": "123456789012",
              "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
              "id": "ac-12345678",
              "name": "Dev AWS account",
              "status": "READY",
              "statusMessage": "Account is ready"
            },
            {
              "awsAccountID": "123456789012",
              "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
              "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
              "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
              "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
              "cloudProviderId": "infra-12345678",
              "description": "An AWS account hosting multiple dev environments",
              "gcpProjectID": "my-project",
              "gcpProjectNumber": "123456789012",
              "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
              "id": "ac-12345678",
              "name": "Dev AWS account",
              "status": "READY",
              "statusMessage": "Account is ready"
            },
            {
              "awsAccountID": "123456789012",
              "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
              "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
              "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
              "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
              "cloudProviderId": "infra-12345678",
              "description": "An AWS account hosting multiple dev environments",
              "gcpProjectID": "my-project",
              "gcpProjectNumber": "123456789012",
              "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
              "id": "ac-12345678",
              "name": "Dev AWS account",
              "status": "READY",
              "statusMessage": "Account is ready"
            },
            {
              "awsAccountID": "123456789012",
              "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
              "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
              "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
              "byoaInstanceIDs": ["instance-12345678", "instance-abcdefgh"],
              "cloudProviderId": "infra-12345678",
              "description": "An AWS account hosting multiple dev environments",
              "gcpProjectID": "my-project",
              "gcpProjectNumber": "123456789012",
              "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
              "id": "ac-12345678",
              "name": "Dev AWS account",
              "status": "READY",
              "statusMessage": "Account is ready"
            }
          ],
          "ids": ["ac-12345678", "ac-abcdefgh", "ac-1234efgh"],
          "nextPageToken": "next-token"
        }
      },
      "ListCloudProvidersRequest": {
        "type": "object",
        "properties": {
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Accusantium est ipsam."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceModelId": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Maiores rerum."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "r",
            "minLength": 1
          }
        },
        "example": {
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "serviceModelId": "sm-12345678",
          "token": "z"
        },
        "required": ["token"]
      },
      "ListCloudProvidersResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an CloudProvider",
              "example": "Eligendi quis nam provident."
            },
            "example": ["infra-12345678", "infra-87654321"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next request",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["infra-12345678", "infra-87654321"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListComputeConfigsRequest": {
        "type": "object",
        "properties": {
          "managed": {
            "type": "boolean",
            "description": "Is compute config managed by omnistrate",
            "example": false
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "c",
            "minLength": 1
          }
        },
        "example": {
          "managed": false,
          "serviceId": "s-12345678",
          "token": "l5"
        },
        "required": ["token", "serviceId"]
      },
      "ListComputeConfigsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Compute Config",
              "example": "Debitis voluptas."
            },
            "description": "The list of compute config IDs",
            "example": ["cc-12345678", "cc-abcdefgh", "cc-1234efgh"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next page token",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["cc-12345678", "cc-abcdefgh", "cc-1234efgh"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListComputeInstanceTypesRequest": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "p",
            "minLength": 1
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "serviceId": "s-12345678",
          "token": "x"
        },
        "required": ["token", "serviceId", "cloudProviderName"]
      },
      "ListComputeInstanceTypesResult": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "The next page token",
            "example": "next-token"
          },
          "types": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Ut iste iusto eum quidem quod."
            },
            "description": "The list of compute instance type IDs",
            "example": ["m5.xlarge", "c5.xlarge", "r5.xlarge"]
          }
        },
        "example": {
          "nextPageToken": "next-token",
          "types": ["m5.xlarge", "c5.xlarge", "r5.xlarge"]
        },
        "required": ["types"]
      },
      "ListCustomDomainRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "u",
            "minLength": 1
          }
        },
        "example": {
          "token": "e4"
        },
        "required": ["token"]
      },
      "ListCustomDomainResult": {
        "type": "object",
        "properties": {
          "CustomDomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeCustomDomainResult"
            },
            "description": "The list of custom domains",
            "example": [
              {
                "customDomain": "mydomain.dev",
                "description": "Description of the domain",
                "id": "cd-12345678",
                "name": "Dev domain",
                "route53Configuration": {
                  "awsAccountID": "123456789012",
                  "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
                },
                "status": "READY",
                "statusMessage": "Account is ready"
              },
              {
                "customDomain": "mydomain.dev",
                "description": "Description of the domain",
                "id": "cd-12345678",
                "name": "Dev domain",
                "route53Configuration": {
                  "awsAccountID": "123456789012",
                  "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
                },
                "status": "READY",
                "statusMessage": "Account is ready"
              },
              {
                "customDomain": "mydomain.dev",
                "description": "Description of the domain",
                "id": "cd-12345678",
                "name": "Dev domain",
                "route53Configuration": {
                  "awsAccountID": "123456789012",
                  "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
                },
                "status": "READY",
                "statusMessage": "Account is ready"
              }
            ]
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Custom Domain",
              "example": "Aliquam iste vero praesentium."
            },
            "example": ["cd-12345678", "cd-abcdefgh", "cd-1234efgh"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next page",
            "example": "next-token"
          }
        },
        "description": "List of custom domain IDs",
        "example": {
          "CustomDomains": [
            {
              "customDomain": "mydomain.dev",
              "description": "Description of the domain",
              "id": "cd-12345678",
              "name": "Dev domain",
              "route53Configuration": {
                "awsAccountID": "123456789012",
                "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
              },
              "status": "READY",
              "statusMessage": "Account is ready"
            },
            {
              "customDomain": "mydomain.dev",
              "description": "Description of the domain",
              "id": "cd-12345678",
              "name": "Dev domain",
              "route53Configuration": {
                "awsAccountID": "123456789012",
                "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
              },
              "status": "READY",
              "statusMessage": "Account is ready"
            }
          ],
          "ids": ["cd-12345678", "cd-abcdefgh", "cd-1234efgh"],
          "nextPageToken": "next-token"
        }
      },
      "ListCustomNetworksRequest": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "cloudProviderRegion": {
            "type": "string",
            "description": "The region of the cloud provider that the instance is running in.",
            "example": "us-east-1"
          },
          "customNetworksOnly": {
            "type": "boolean",
            "description": "Flag indicating whether to return only custom networks, or to include default and imported networks as well",
            "example": false
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "xqn",
            "minLength": 1
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "cloudProviderRegion": "us-east-1",
          "customNetworksOnly": false,
          "token": "hs"
        },
        "required": ["token"]
      },
      "ListCustomNetworksResult": {
        "type": "object",
        "properties": {
          "customNetworks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomNetwork"
            },
            "description": "List of custom networks",
            "example": [
              {
                "cidr": "10.0.0.0/16",
                "cloudProviderName": "aws",
                "cloudProviderRegion": "us-east-1",
                "id": "n-12345678",
                "name": "Prod us-east-1",
                "networkDefinitionType": "Custom",
                "networkFeaturesConfiguration": {
                  "isPrivateLinkEnabled": false
                },
                "networkInstances": [
                  {
                    "awsAccountID": "123456789012",
                    "cloudProviderNativeNetworkId": "vpc-12345678",
                    "gcpProjectID": "my-project",
                    "gcpProjectNumber": "123456789012",
                    "hostClusterID": "hc-12345678"
                  },
                  {
                    "awsAccountID": "123456789012",
                    "cloudProviderNativeNetworkId": "vpc-12345678",
                    "gcpProjectID": "my-project",
                    "gcpProjectNumber": "123456789012",
                    "hostClusterID": "hc-12345678"
                  },
                  {
                    "awsAccountID": "123456789012",
                    "cloudProviderNativeNetworkId": "vpc-12345678",
                    "gcpProjectID": "my-project",
                    "gcpProjectNumber": "123456789012",
                    "hostClusterID": "hc-12345678"
                  }
                ],
                "owningUserId": "user-12345678",
                "owningUserName": "John Doe"
              },
              {
                "cidr": "10.0.0.0/16",
                "cloudProviderName": "aws",
                "cloudProviderRegion": "us-east-1",
                "id": "n-12345678",
                "name": "Prod us-east-1",
                "networkDefinitionType": "Custom",
                "networkFeaturesConfiguration": {
                  "isPrivateLinkEnabled": false
                },
                "networkInstances": [
                  {
                    "awsAccountID": "123456789012",
                    "cloudProviderNativeNetworkId": "vpc-12345678",
                    "gcpProjectID": "my-project",
                    "gcpProjectNumber": "123456789012",
                    "hostClusterID": "hc-12345678"
                  },
                  {
                    "awsAccountID": "123456789012",
                    "cloudProviderNativeNetworkId": "vpc-12345678",
                    "gcpProjectID": "my-project",
                    "gcpProjectNumber": "123456789012",
                    "hostClusterID": "hc-12345678"
                  },
                  {
                    "awsAccountID": "123456789012",
                    "cloudProviderNativeNetworkId": "vpc-12345678",
                    "gcpProjectID": "my-project",
                    "gcpProjectNumber": "123456789012",
                    "hostClusterID": "hc-12345678"
                  }
                ],
                "owningUserId": "user-12345678",
                "owningUserName": "John Doe"
              }
            ]
          }
        },
        "example": {
          "customNetworks": [
            {
              "cidr": "10.0.0.0/16",
              "cloudProviderName": "aws",
              "cloudProviderRegion": "us-east-1",
              "id": "n-12345678",
              "name": "Prod us-east-1",
              "networkDefinitionType": "Custom",
              "networkFeaturesConfiguration": {
                "isPrivateLinkEnabled": false
              },
              "networkInstances": [
                {
                  "awsAccountID": "123456789012",
                  "cloudProviderNativeNetworkId": "vpc-12345678",
                  "gcpProjectID": "my-project",
                  "gcpProjectNumber": "123456789012",
                  "hostClusterID": "hc-12345678"
                },
                {
                  "awsAccountID": "123456789012",
                  "cloudProviderNativeNetworkId": "vpc-12345678",
                  "gcpProjectID": "my-project",
                  "gcpProjectNumber": "123456789012",
                  "hostClusterID": "hc-12345678"
                },
                {
                  "awsAccountID": "123456789012",
                  "cloudProviderNativeNetworkId": "vpc-12345678",
                  "gcpProjectID": "my-project",
                  "gcpProjectNumber": "123456789012",
                  "hostClusterID": "hc-12345678"
                }
              ],
              "owningUserId": "user-12345678",
              "owningUserName": "John Doe"
            },
            {
              "cidr": "10.0.0.0/16",
              "cloudProviderName": "aws",
              "cloudProviderRegion": "us-east-1",
              "id": "n-12345678",
              "name": "Prod us-east-1",
              "networkDefinitionType": "Custom",
              "networkFeaturesConfiguration": {
                "isPrivateLinkEnabled": false
              },
              "networkInstances": [
                {
                  "awsAccountID": "123456789012",
                  "cloudProviderNativeNetworkId": "vpc-12345678",
                  "gcpProjectID": "my-project",
                  "gcpProjectNumber": "123456789012",
                  "hostClusterID": "hc-12345678"
                },
                {
                  "awsAccountID": "123456789012",
                  "cloudProviderNativeNetworkId": "vpc-12345678",
                  "gcpProjectID": "my-project",
                  "gcpProjectNumber": "123456789012",
                  "hostClusterID": "hc-12345678"
                },
                {
                  "awsAccountID": "123456789012",
                  "cloudProviderNativeNetworkId": "vpc-12345678",
                  "gcpProjectID": "my-project",
                  "gcpProjectNumber": "123456789012",
                  "hostClusterID": "hc-12345678"
                }
              ],
              "owningUserId": "user-12345678",
              "owningUserName": "John Doe"
            }
          ]
        },
        "required": ["customNetworks"]
      },
      "ListDependentResourcesRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Culpa perferendis ab aut odit itaque amet."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "x",
            "minLength": 1
          }
        },
        "example": {
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "b"
        },
        "required": ["token", "id", "serviceId"]
      },
      "ListDependentResourcesResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Sit quaerat."
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Et dignissimos dolore."
            },
            "description": "List of dependent resource IDs",
            "example": ["r-12345678", "r-abcdefgh", "r-1234abcd"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next page",
            "example": "next-token"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          }
        },
        "example": {
          "id": "r-12345678",
          "ids": ["r-12345678", "r-abcdefgh", "r-1234abcd"],
          "nextPageToken": "next-token",
          "serviceId": "s-12345678"
        },
        "required": ["ids"]
      },
      "ListDeploymentConfigsRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "76",
            "minLength": 1
          }
        },
        "example": {
          "token": "8"
        },
        "required": ["token"]
      },
      "ListDeploymentConfigsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Deployment Config",
              "example": "Rerum non beatae itaque sit."
            },
            "description": "The deployment config IDs",
            "example": ["dc-12345678"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use for pagination",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["dc-12345678"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListEndCustomerEvents": {
        "type": "object",
        "properties": {
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "gzg",
            "minLength": 1
          }
        },
        "example": {
          "environmentType": "DEV",
          "token": "5"
        },
        "required": ["token"]
      },
      "ListEndCustomerEventsResult": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndCustomerEvent"
            },
            "description": "List of events",
            "example": [
              {
                "eventID": "e-123456",
                "eventPayload": {
                  "eventType": "CustomerSignUp",
                  "token": "123456"
                },
                "eventType": "InviteUser",
                "orgID": "o-123456",
                "orgName": "Acme Corp",
                "orgURL": "https://acme.com",
                "priority": "Critical",
                "time": "2023-01-10T00:00:00Z",
                "userEmail": "user@example.com",
                "userID": "user-123456",
                "userName": "user"
              },
              {
                "eventID": "e-123456",
                "eventPayload": {
                  "eventType": "CustomerSignUp",
                  "token": "123456"
                },
                "eventType": "InviteUser",
                "orgID": "o-123456",
                "orgName": "Acme Corp",
                "orgURL": "https://acme.com",
                "priority": "Critical",
                "time": "2023-01-10T00:00:00Z",
                "userEmail": "user@example.com",
                "userID": "user-123456",
                "userName": "user"
              }
            ]
          }
        },
        "example": {
          "events": [
            {
              "eventID": "e-123456",
              "eventPayload": {
                "eventType": "CustomerSignUp",
                "token": "123456"
              },
              "eventType": "InviteUser",
              "orgID": "o-123456",
              "orgName": "Acme Corp",
              "orgURL": "https://acme.com",
              "priority": "Critical",
              "time": "2023-01-10T00:00:00Z",
              "userEmail": "user@example.com",
              "userID": "user-123456",
              "userName": "user"
            },
            {
              "eventID": "e-123456",
              "eventPayload": {
                "eventType": "CustomerSignUp",
                "token": "123456"
              },
              "eventType": "InviteUser",
              "orgID": "o-123456",
              "orgName": "Acme Corp",
              "orgURL": "https://acme.com",
              "priority": "Critical",
              "time": "2023-01-10T00:00:00Z",
              "userEmail": "user@example.com",
              "userID": "user-123456",
              "userName": "user"
            },
            {
              "eventID": "e-123456",
              "eventPayload": {
                "eventType": "CustomerSignUp",
                "token": "123456"
              },
              "eventType": "InviteUser",
              "orgID": "o-123456",
              "orgName": "Acme Corp",
              "orgURL": "https://acme.com",
              "priority": "Critical",
              "time": "2023-01-10T00:00:00Z",
              "userEmail": "user@example.com",
              "userID": "user-123456",
              "userName": "user"
            }
          ]
        },
        "required": ["events"]
      },
      "ListFilesRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Distinctio et numquam rerum cum voluptatem."
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Ab ipsum et provident omnis ut error."
          },
          "productTierVersion": {
            "type": "string",
            "description": "Version of the product tier",
            "example": "1.0"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "wr",
            "minLength": 1
          }
        },
        "example": {
          "id": "r-12345678",
          "productTierId": "pt-12345678",
          "productTierVersion": "1.0",
          "serviceId": "s-12345678",
          "token": "5m"
        },
        "required": ["token", "id", "serviceId"]
      },
      "ListFilesResult": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileMetadata"
            },
            "description": "List of files",
            "example": [
              {
                "description": "A file to store the configuration for the resource",
                "fileId": "f-12345678",
                "mountPath": "/etc/config",
                "name": "file.txt",
                "size": 1234,
                "type": "Config",
                "uploadTime": "2023-01-10T00:00:00Z",
                "uploadedBy": "user"
              },
              {
                "description": "A file to store the configuration for the resource",
                "fileId": "f-12345678",
                "mountPath": "/etc/config",
                "name": "file.txt",
                "size": 1234,
                "type": "Config",
                "uploadTime": "2023-01-10T00:00:00Z",
                "uploadedBy": "user"
              },
              {
                "description": "A file to store the configuration for the resource",
                "fileId": "f-12345678",
                "mountPath": "/etc/config",
                "name": "file.txt",
                "size": 1234,
                "type": "Config",
                "uploadTime": "2023-01-10T00:00:00Z",
                "uploadedBy": "user"
              },
              {
                "description": "A file to store the configuration for the resource",
                "fileId": "f-12345678",
                "mountPath": "/etc/config",
                "name": "file.txt",
                "size": 1234,
                "type": "Config",
                "uploadTime": "2023-01-10T00:00:00Z",
                "uploadedBy": "user"
              }
            ]
          }
        },
        "example": {
          "files": [
            {
              "description": "A file to store the configuration for the resource",
              "fileId": "f-12345678",
              "mountPath": "/etc/config",
              "name": "file.txt",
              "size": 1234,
              "type": "Config",
              "uploadTime": "2023-01-10T00:00:00Z",
              "uploadedBy": "user"
            },
            {
              "description": "A file to store the configuration for the resource",
              "fileId": "f-12345678",
              "mountPath": "/etc/config",
              "name": "file.txt",
              "size": 1234,
              "type": "Config",
              "uploadTime": "2023-01-10T00:00:00Z",
              "uploadedBy": "user"
            }
          ]
        },
        "required": ["files"]
      },
      "ListHelmPackagesRequest": {
        "type": "object",
        "properties": {
          "chartName": {
            "type": "string",
            "description": "The chart name of the Helm package to filter by",
            "example": "my-chart"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "eu",
            "minLength": 1
          }
        },
        "example": {
          "chartName": "my-chart",
          "token": "ac"
        },
        "required": ["token"]
      },
      "ListHelmPackagesResult": {
        "type": "object",
        "properties": {
          "helmPackages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HelmPackage"
            },
            "description": "List of Helm packages",
            "example": [
              {
                "chartName": "my-chart",
                "chartRepoName": "my-repo",
                "chartRepoUrl": "https://my-repo.com",
                "chartValues": {
                  "key1": "value1",
                  "key2": 3,
                  "key3": {
                    "key4": "value4"
                  }
                },
                "chartVersion": "1.0.0",
                "namespace": "default",
                "password": "my-password",
                "username": "my-user"
              },
              {
                "chartName": "my-chart",
                "chartRepoName": "my-repo",
                "chartRepoUrl": "https://my-repo.com",
                "chartValues": {
                  "key1": "value1",
                  "key2": 3,
                  "key3": {
                    "key4": "value4"
                  }
                },
                "chartVersion": "1.0.0",
                "namespace": "default",
                "password": "my-password",
                "username": "my-user"
              },
              {
                "chartName": "my-chart",
                "chartRepoName": "my-repo",
                "chartRepoUrl": "https://my-repo.com",
                "chartValues": {
                  "key1": "value1",
                  "key2": 3,
                  "key3": {
                    "key4": "value4"
                  }
                },
                "chartVersion": "1.0.0",
                "namespace": "default",
                "password": "my-password",
                "username": "my-user"
              },
              {
                "chartName": "my-chart",
                "chartRepoName": "my-repo",
                "chartRepoUrl": "https://my-repo.com",
                "chartValues": {
                  "key1": "value1",
                  "key2": 3,
                  "key3": {
                    "key4": "value4"
                  }
                },
                "chartVersion": "1.0.0",
                "namespace": "default",
                "password": "my-password",
                "username": "my-user"
              }
            ]
          }
        },
        "example": {
          "helmPackages": [
            {
              "chartName": "my-chart",
              "chartRepoName": "my-repo",
              "chartRepoUrl": "https://my-repo.com",
              "chartValues": {
                "key1": "value1",
                "key2": 3,
                "key3": {
                  "key4": "value4"
                }
              },
              "chartVersion": "1.0.0",
              "namespace": "default",
              "password": "my-password",
              "username": "my-user"
            },
            {
              "chartName": "my-chart",
              "chartRepoName": "my-repo",
              "chartRepoUrl": "https://my-repo.com",
              "chartValues": {
                "key1": "value1",
                "key2": 3,
                "key3": {
                  "key4": "value4"
                }
              },
              "chartVersion": "1.0.0",
              "namespace": "default",
              "password": "my-password",
              "username": "my-user"
            },
            {
              "chartName": "my-chart",
              "chartRepoName": "my-repo",
              "chartRepoUrl": "https://my-repo.com",
              "chartValues": {
                "key1": "value1",
                "key2": 3,
                "key3": {
                  "key4": "value4"
                }
              },
              "chartVersion": "1.0.0",
              "namespace": "default",
              "password": "my-password",
              "username": "my-user"
            },
            {
              "chartName": "my-chart",
              "chartRepoName": "my-repo",
              "chartRepoUrl": "https://my-repo.com",
              "chartValues": {
                "key1": "value1",
                "key2": 3,
                "key3": {
                  "key4": "value4"
                }
              },
              "chartVersion": "1.0.0",
              "namespace": "default",
              "password": "my-password",
              "username": "my-user"
            }
          ]
        }
      },
      "ListIdentityProvidersRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "gov",
            "minLength": 1
          }
        },
        "example": {
          "token": "13s"
        },
        "required": ["token"]
      },
      "ListIdentityProvidersResult": {
        "type": "object",
        "properties": {
          "identityProviders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeIdentityProviderResult"
            },
            "description": "The list of Identity Providers",
            "example": [
              {
                "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
                "clientSecret": "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",
                "id": "idp-12345678",
                "identityProviderName": "Google",
                "status": "Ready"
              },
              {
                "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
                "clientSecret": "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",
                "id": "idp-12345678",
                "identityProviderName": "Google",
                "status": "Ready"
              }
            ]
          }
        },
        "example": {
          "identityProviders": [
            {
              "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
              "clientSecret": "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",
              "id": "idp-12345678",
              "identityProviderName": "Google",
              "status": "Ready"
            },
            {
              "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
              "clientSecret": "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",
              "id": "idp-12345678",
              "identityProviderName": "Google",
              "status": "Ready"
            },
            {
              "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
              "clientSecret": "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",
              "id": "idp-12345678",
              "identityProviderName": "Google",
              "status": "Ready"
            }
          ]
        },
        "required": ["identityProviders"]
      },
      "ListImageConfigsRequest": {
        "type": "object",
        "properties": {
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "97",
            "minLength": 1
          }
        },
        "example": {
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "token": "8g"
        },
        "required": ["token", "serviceId", "serviceEnvironmentId"]
      },
      "ListImageConfigsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Image Config",
              "example": "Expedita et et et."
            },
            "description": "List of image configuration IDs",
            "example": ["imgc-12345678", "imgc-87654321"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use to get the next page of results",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["imgc-12345678", "imgc-87654321"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListImageRegistryRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "h",
            "minLength": 1
          }
        },
        "example": {
          "token": "x"
        },
        "required": ["token"]
      },
      "ListImageRegistryResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Image Registry",
              "example": "Quo consequatur vitae."
            },
            "description": "List of Image Registry IDs",
            "example": ["ir-12345678", "ir-abcdefgh", "ir-abcd5678"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next page",
            "example": "next-token"
          }
        },
        "description": "List of HTTP API v2 Docker Image Registries",
        "example": {
          "ids": ["ir-12345678", "ir-abcdefgh", "ir-abcd5678"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListInfraConfigRequest": {
        "type": "object",
        "properties": {
          "managed": {
            "type": "boolean",
            "description": "Is infra config managed by omnistrate",
            "example": false
          },
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "za",
            "minLength": 1
          }
        },
        "example": {
          "managed": false,
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "token": "6jy"
        },
        "required": ["token", "serviceId", "serviceEnvironmentId"]
      },
      "ListInfraConfigResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Infra Config",
              "example": "Et non."
            },
            "example": ["ic-12345678", "ic-abcdefgh", "ic-1234efgh"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next page",
            "example": "next-token"
          }
        },
        "description": "List of Infra Config IDs",
        "example": {
          "ids": ["ic-12345678", "ic-abcdefgh", "ic-1234efgh"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListInputParametersRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Beatae nulla molestiae."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Iure est ex."
          },
          "resourceId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Et mollitia."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "u3",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Necessitatibus commodi ut voluptas.",
          "resourceId": "r-12345678",
          "serviceId": "s-12345678",
          "token": "s"
        },
        "required": ["token", "serviceId", "resourceId"]
      },
      "ListInputParametersResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Input Parameter",
              "example": "Velit eligendi."
            },
            "description": "List of input parameter IDs",
            "example": ["ip-12345678", "ip-12345679"]
          },
          "inputParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeInputParameterResult"
            },
            "description": "The input parameters",
            "example": [
              {
                "defaultValue": "true",
                "dependentResourceId": "r-12345678",
                "description": "Voluptas nobis dolor laborum.",
                "hasOptions": false,
                "id": "var-12345678",
                "isList": false,
                "key": "0q",
                "labeledOptions": {
                  "large": "t3.xlarge",
                  "medium": "t3.large",
                  "small": "t3.medium"
                },
                "limits": {
                  "max": "Iure distinctio rerum provident iure eligendi facilis.",
                  "maxLength": "Aspernatur enim veritatis ab et veniam.",
                  "min": "Nihil hic sit.",
                  "minLength": "Incidunt quibusdam et atque quia sed."
                },
                "modifiable": false,
                "name": "ae",
                "options": ["true", "false"],
                "required": false,
                "resourceId": "r-12345678",
                "serviceId": "s-12345678",
                "type": "Boolean|Float64|String|Resource|Secret|Password"
              },
              {
                "defaultValue": "true",
                "dependentResourceId": "r-12345678",
                "description": "Voluptas nobis dolor laborum.",
                "hasOptions": false,
                "id": "var-12345678",
                "isList": false,
                "key": "0q",
                "labeledOptions": {
                  "large": "t3.xlarge",
                  "medium": "t3.large",
                  "small": "t3.medium"
                },
                "limits": {
                  "max": "Iure distinctio rerum provident iure eligendi facilis.",
                  "maxLength": "Aspernatur enim veritatis ab et veniam.",
                  "min": "Nihil hic sit.",
                  "minLength": "Incidunt quibusdam et atque quia sed."
                },
                "modifiable": false,
                "name": "ae",
                "options": ["true", "false"],
                "required": false,
                "resourceId": "r-12345678",
                "serviceId": "s-12345678",
                "type": "Boolean|Float64|String|Resource|Secret|Password"
              },
              {
                "defaultValue": "true",
                "dependentResourceId": "r-12345678",
                "description": "Voluptas nobis dolor laborum.",
                "hasOptions": false,
                "id": "var-12345678",
                "isList": false,
                "key": "0q",
                "labeledOptions": {
                  "large": "t3.xlarge",
                  "medium": "t3.large",
                  "small": "t3.medium"
                },
                "limits": {
                  "max": "Iure distinctio rerum provident iure eligendi facilis.",
                  "maxLength": "Aspernatur enim veritatis ab et veniam.",
                  "min": "Nihil hic sit.",
                  "minLength": "Incidunt quibusdam et atque quia sed."
                },
                "modifiable": false,
                "name": "ae",
                "options": ["true", "false"],
                "required": false,
                "resourceId": "r-12345678",
                "serviceId": "s-12345678",
                "type": "Boolean|Float64|String|Resource|Secret|Password"
              },
              {
                "defaultValue": "true",
                "dependentResourceId": "r-12345678",
                "description": "Voluptas nobis dolor laborum.",
                "hasOptions": false,
                "id": "var-12345678",
                "isList": false,
                "key": "0q",
                "labeledOptions": {
                  "large": "t3.xlarge",
                  "medium": "t3.large",
                  "small": "t3.medium"
                },
                "limits": {
                  "max": "Iure distinctio rerum provident iure eligendi facilis.",
                  "maxLength": "Aspernatur enim veritatis ab et veniam.",
                  "min": "Nihil hic sit.",
                  "minLength": "Incidunt quibusdam et atque quia sed."
                },
                "modifiable": false,
                "name": "ae",
                "options": ["true", "false"],
                "required": false,
                "resourceId": "r-12345678",
                "serviceId": "s-12345678",
                "type": "Boolean|Float64|String|Resource|Secret|Password"
              }
            ]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to retrieve the next page of results",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["ip-12345678", "ip-12345679"],
          "inputParameters": [
            {
              "defaultValue": "true",
              "dependentResourceId": "r-12345678",
              "description": "Voluptas nobis dolor laborum.",
              "hasOptions": false,
              "id": "var-12345678",
              "isList": false,
              "key": "0q",
              "labeledOptions": {
                "large": "t3.xlarge",
                "medium": "t3.large",
                "small": "t3.medium"
              },
              "limits": {
                "max": "Iure distinctio rerum provident iure eligendi facilis.",
                "maxLength": "Aspernatur enim veritatis ab et veniam.",
                "min": "Nihil hic sit.",
                "minLength": "Incidunt quibusdam et atque quia sed."
              },
              "modifiable": false,
              "name": "ae",
              "options": ["true", "false"],
              "required": false,
              "resourceId": "r-12345678",
              "serviceId": "s-12345678",
              "type": "Boolean|Float64|String|Resource|Secret|Password"
            },
            {
              "defaultValue": "true",
              "dependentResourceId": "r-12345678",
              "description": "Voluptas nobis dolor laborum.",
              "hasOptions": false,
              "id": "var-12345678",
              "isList": false,
              "key": "0q",
              "labeledOptions": {
                "large": "t3.xlarge",
                "medium": "t3.large",
                "small": "t3.medium"
              },
              "limits": {
                "max": "Iure distinctio rerum provident iure eligendi facilis.",
                "maxLength": "Aspernatur enim veritatis ab et veniam.",
                "min": "Nihil hic sit.",
                "minLength": "Incidunt quibusdam et atque quia sed."
              },
              "modifiable": false,
              "name": "ae",
              "options": ["true", "false"],
              "required": false,
              "resourceId": "r-12345678",
              "serviceId": "s-12345678",
              "type": "Boolean|Float64|String|Resource|Secret|Password"
            },
            {
              "defaultValue": "true",
              "dependentResourceId": "r-12345678",
              "description": "Voluptas nobis dolor laborum.",
              "hasOptions": false,
              "id": "var-12345678",
              "isList": false,
              "key": "0q",
              "labeledOptions": {
                "large": "t3.xlarge",
                "medium": "t3.large",
                "small": "t3.medium"
              },
              "limits": {
                "max": "Iure distinctio rerum provident iure eligendi facilis.",
                "maxLength": "Aspernatur enim veritatis ab et veniam.",
                "min": "Nihil hic sit.",
                "minLength": "Incidunt quibusdam et atque quia sed."
              },
              "modifiable": false,
              "name": "ae",
              "options": ["true", "false"],
              "required": false,
              "resourceId": "r-12345678",
              "serviceId": "s-12345678",
              "type": "Boolean|Float64|String|Resource|Secret|Password"
            }
          ],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListInvoicesRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "233",
            "minLength": 1
          }
        },
        "example": {
          "token": "s"
        },
        "required": ["token"]
      },
      "ListInvoicesResult": {
        "type": "object",
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice"
            },
            "description": "List of Invoices",
            "example": [
              {
                "currency": "USD",
                "invoiceDate": "2021-01-01T00:00:00.000Z",
                "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
                "invoicePaymentTerm": "30",
                "invoiceStatus": "Open",
                "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
                "taxAmount": 10,
                "totalAmount": 110,
                "totalAmountWithoutTax": 100
              },
              {
                "currency": "USD",
                "invoiceDate": "2021-01-01T00:00:00.000Z",
                "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
                "invoicePaymentTerm": "30",
                "invoiceStatus": "Open",
                "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
                "taxAmount": 10,
                "totalAmount": 110,
                "totalAmountWithoutTax": 100
              }
            ]
          }
        },
        "example": {
          "invoices": [
            {
              "currency": "USD",
              "invoiceDate": "2021-01-01T00:00:00.000Z",
              "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
              "invoicePaymentTerm": "30",
              "invoiceStatus": "Open",
              "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
              "taxAmount": 10,
              "totalAmount": 110,
              "totalAmountWithoutTax": 100
            },
            {
              "currency": "USD",
              "invoiceDate": "2021-01-01T00:00:00.000Z",
              "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
              "invoicePaymentTerm": "30",
              "invoiceStatus": "Open",
              "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
              "taxAmount": 10,
              "totalAmount": 110,
              "totalAmountWithoutTax": 100
            },
            {
              "currency": "USD",
              "invoiceDate": "2021-01-01T00:00:00.000Z",
              "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
              "invoicePaymentTerm": "30",
              "invoiceStatus": "Open",
              "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
              "taxAmount": 10,
              "totalAmount": 110,
              "totalAmountWithoutTax": 100
            },
            {
              "currency": "USD",
              "invoiceDate": "2021-01-01T00:00:00.000Z",
              "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
              "invoicePaymentTerm": "30",
              "invoiceStatus": "Open",
              "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
              "taxAmount": 10,
              "totalAmount": 110,
              "totalAmountWithoutTax": 100
            }
          ]
        }
      },
      "ListLimitRequest": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "description": "The limit family",
            "example": "SERVICE"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "7",
            "minLength": 1
          }
        },
        "example": {
          "family": "COMPUTE_INFRA",
          "token": "d"
        },
        "required": ["token", "family"]
      },
      "ListLimitRequest2": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "description": "Limit family",
            "example": "COMPUTE_INFRA"
          }
        },
        "example": {
          "family": "COMPUTE_INFRA"
        },
        "required": ["family"]
      },
      "ListLimitResult": {
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Consequuntur consequatur."
            },
            "description": "List of limit keys",
            "example": ["MAX_VIRTUAL_CORES_PER_RESOURCE"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next page",
            "example": "next-token"
          }
        },
        "example": {
          "keys": ["MAX_VIRTUAL_CORES_PER_RESOURCE"],
          "nextPageToken": "next-token"
        },
        "required": ["keys"]
      },
      "ListNetworkConfigsRequest": {
        "type": "object",
        "properties": {
          "managed": {
            "type": "boolean",
            "description": "Is network config managed by omnistrate",
            "example": false
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "5",
            "minLength": 1
          }
        },
        "example": {
          "managed": false,
          "serviceId": "s-12345678",
          "token": "q5q"
        },
        "required": ["token", "serviceId"]
      },
      "ListNetworkConfigsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Network Config",
              "example": "Rerum harum."
            },
            "description": "The list of network config IDs",
            "example": ["Deserunt dignissimos.", "Deserunt dignissimos.", "Deserunt dignissimos."]
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use for pagination",
            "example": "token"
          }
        },
        "example": {
          "ids": ["Deserunt dignissimos.", "Deserunt dignissimos.", "Deserunt dignissimos.", "Deserunt dignissimos."],
          "nextPageToken": "token"
        },
        "required": ["ids"]
      },
      "ListOutputParametersRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Quis dolorem reiciendis."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Repudiandae est sed exercitationem natus."
          },
          "resourceId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Necessitatibus ratione amet."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "3",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Enim delectus dignissimos aperiam voluptatum aut.",
          "resourceId": "r-12345678",
          "serviceId": "s-12345678",
          "token": "ent"
        },
        "required": ["token", "serviceId", "resourceId"]
      },
      "ListOutputParametersResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Output Parameter",
              "example": "Qui sed ut architecto beatae eos."
            },
            "description": "The IDs of the output parameters",
            "example": ["op-12345678"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "The token to use for the next page of results",
            "example": "next-token"
          },
          "outputParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeOutputParameterResult"
            },
            "description": "The output parameters",
            "example": [
              {
                "description": "Username of the user created in the target system",
                "id": "op-12345678",
                "key": "username",
                "name": "Username",
                "resourceId": "r-12345678",
                "serviceId": "s-12345678",
                "value": "johndoe",
                "valueRef": "$var.username",
                "valueType": "Boolean|Float64|String|Secret|Password"
              },
              {
                "description": "Username of the user created in the target system",
                "id": "op-12345678",
                "key": "username",
                "name": "Username",
                "resourceId": "r-12345678",
                "serviceId": "s-12345678",
                "value": "johndoe",
                "valueRef": "$var.username",
                "valueType": "Boolean|Float64|String|Secret|Password"
              }
            ]
          }
        },
        "example": {
          "ids": ["op-12345678"],
          "nextPageToken": "next-token",
          "outputParameters": [
            {
              "description": "Username of the user created in the target system",
              "id": "op-12345678",
              "key": "username",
              "name": "Username",
              "resourceId": "r-12345678",
              "serviceId": "s-12345678",
              "value": "johndoe",
              "valueRef": "$var.username",
              "valueType": "Boolean|Float64|String|Secret|Password"
            },
            {
              "description": "Username of the user created in the target system",
              "id": "op-12345678",
              "key": "username",
              "name": "Username",
              "resourceId": "r-12345678",
              "serviceId": "s-12345678",
              "value": "johndoe",
              "valueRef": "$var.username",
              "valueType": "Boolean|Float64|String|Secret|Password"
            },
            {
              "description": "Username of the user created in the target system",
              "id": "op-12345678",
              "key": "username",
              "name": "Username",
              "resourceId": "r-12345678",
              "serviceId": "s-12345678",
              "value": "johndoe",
              "valueRef": "$var.username",
              "valueType": "Boolean|Float64|String|Secret|Password"
            },
            {
              "description": "Username of the user created in the target system",
              "id": "op-12345678",
              "key": "username",
              "name": "Username",
              "resourceId": "r-12345678",
              "serviceId": "s-12345678",
              "value": "johndoe",
              "valueRef": "$var.username",
              "valueType": "Boolean|Float64|String|Secret|Password"
            }
          ]
        },
        "required": ["ids"]
      },
      "ListPipelinesRequest": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "9",
            "minLength": 1
          }
        },
        "example": {
          "serviceId": "s-12345678",
          "token": "qx"
        },
        "required": ["token"]
      },
      "ListPipelinesResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Pipeline",
              "example": "Pariatur ullam vero possimus fuga."
            },
            "description": "List of pipeline IDs",
            "example": ["p-12345678", "p-23456789"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Next page token",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["p-12345678", "p-23456789"],
          "nextPageToken": "next-token"
        }
      },
      "ListProductTierBillingPlanRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Maxime modi sed quo repellendus consequatur."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "w",
            "minLength": 1
          }
        },
        "example": {
          "id": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "u3"
        },
        "required": ["token", "serviceId", "id"]
      },
      "ListProductTierBillingPlanResult": {
        "type": "object",
        "properties": {
          "billingPlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingPlan"
            },
            "description": "List of product tier billing plans",
            "example": [
              {
                "allowCreatesWhenPaymentNotConfigured": true,
                "id": "bp-12345678",
                "maxNumberofInstances": 5,
                "planName": "STARTER",
                "pricing": {
                  "cpuCoreHours": "0.001",
                  "memoryGiBHours": "0.0001",
                  "storageGiBHours": "0.0001"
                },
                "productTierId": "pt-12345678",
                "serviceId": "s-12345678"
              },
              {
                "allowCreatesWhenPaymentNotConfigured": true,
                "id": "bp-12345678",
                "maxNumberofInstances": 5,
                "planName": "STARTER",
                "pricing": {
                  "cpuCoreHours": "0.001",
                  "memoryGiBHours": "0.0001",
                  "storageGiBHours": "0.0001"
                },
                "productTierId": "pt-12345678",
                "serviceId": "s-12345678"
              },
              {
                "allowCreatesWhenPaymentNotConfigured": true,
                "id": "bp-12345678",
                "maxNumberofInstances": 5,
                "planName": "STARTER",
                "pricing": {
                  "cpuCoreHours": "0.001",
                  "memoryGiBHours": "0.0001",
                  "storageGiBHours": "0.0001"
                },
                "productTierId": "pt-12345678",
                "serviceId": "s-12345678"
              },
              {
                "allowCreatesWhenPaymentNotConfigured": true,
                "id": "bp-12345678",
                "maxNumberofInstances": 5,
                "planName": "STARTER",
                "pricing": {
                  "cpuCoreHours": "0.001",
                  "memoryGiBHours": "0.0001",
                  "storageGiBHours": "0.0001"
                },
                "productTierId": "pt-12345678",
                "serviceId": "s-12345678"
              }
            ]
          }
        },
        "example": {
          "billingPlans": [
            {
              "allowCreatesWhenPaymentNotConfigured": true,
              "id": "bp-12345678",
              "maxNumberofInstances": 5,
              "planName": "STARTER",
              "pricing": {
                "cpuCoreHours": "0.001",
                "memoryGiBHours": "0.0001",
                "storageGiBHours": "0.0001"
              },
              "productTierId": "pt-12345678",
              "serviceId": "s-12345678"
            },
            {
              "allowCreatesWhenPaymentNotConfigured": true,
              "id": "bp-12345678",
              "maxNumberofInstances": 5,
              "planName": "STARTER",
              "pricing": {
                "cpuCoreHours": "0.001",
                "memoryGiBHours": "0.0001",
                "storageGiBHours": "0.0001"
              },
              "productTierId": "pt-12345678",
              "serviceId": "s-12345678"
            }
          ]
        },
        "required": ["billingPlans"]
      },
      "ListProductTiersRequest": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceModelId": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Quis repudiandae voluptates."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "y",
            "minLength": 1
          }
        },
        "example": {
          "serviceId": "s-12345678",
          "serviceModelId": "sm-12345678",
          "token": "hep"
        },
        "required": ["token", "serviceId", "serviceModelId"]
      },
      "ListProductTiersResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Product Tier",
              "example": "Adipisci ut eos porro fugiat."
            },
            "description": "List of product tier IDs",
            "example": ["Beatae beatae.", "Beatae beatae.", "Beatae beatae.", "Beatae beatae."]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next page",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["Beatae beatae.", "Beatae beatae."],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListRegionsRequest": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "modelType": {
            "type": "string",
            "description": "The model type encapsulating this service",
            "example": "OMNISTRATE_HOSTED|CUSTOMER_HOSTED|BYOA"
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Maiores et est quisquam sapiente."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceModelId": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Porro exercitationem cum vel."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "7q3",
            "minLength": 1
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "modelType": "CUSTOMER_HOSTED",
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "serviceModelId": "sm-12345678",
          "token": "s7"
        },
        "required": ["token", "cloudProviderName"]
      },
      "ListRegionsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Region",
              "example": "Incidunt cum est maiores quo."
            },
            "example": ["region-12345678", "region-87654321"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next request",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["region-12345678", "region-87654321"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListResourceCapabilitiesRequest": {
        "type": "object",
        "properties": {
          "ProductTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Quas placeat ut esse similique."
          },
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Optio sint."
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Provident est necessitatibus nemo."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "2",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierId": "Beatae beatae.",
          "ProductTierVersion": "Velit accusamus et harum.",
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "unq"
        },
        "required": ["token", "id", "serviceId"]
      },
      "ListResourceCapabilitiesResponse": {
        "type": "object",
        "properties": {
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceCapability"
            },
            "description": "The configurationParameters to enable capabilities for the resource",
            "example": [
              {
                "capability": "SERVERLESS",
                "configuration": {
                  "EnableAutoStop": true,
                  "MinimumNodesInPool": 5,
                  "PortsMappingProxyConfig": {
                    "MaxNumberOfClustersPerProxyInstance": 50,
                    "NumberOfPortsPerCluster": 4
                  },
                  "ProxyId": "r-123456",
                  "ReferenceProxyKey": "resource-proxy",
                  "TargetPort": 5432
                }
              },
              {
                "capability": "SERVERLESS",
                "configuration": {
                  "EnableAutoStop": true,
                  "MinimumNodesInPool": 5,
                  "PortsMappingProxyConfig": {
                    "MaxNumberOfClustersPerProxyInstance": 50,
                    "NumberOfPortsPerCluster": 4
                  },
                  "ProxyId": "r-123456",
                  "ReferenceProxyKey": "resource-proxy",
                  "TargetPort": 5432
                }
              },
              {
                "capability": "SERVERLESS",
                "configuration": {
                  "EnableAutoStop": true,
                  "MinimumNodesInPool": 5,
                  "PortsMappingProxyConfig": {
                    "MaxNumberOfClustersPerProxyInstance": 50,
                    "NumberOfPortsPerCluster": 4
                  },
                  "ProxyId": "r-123456",
                  "ReferenceProxyKey": "resource-proxy",
                  "TargetPort": 5432
                }
              }
            ]
          }
        },
        "example": {
          "capabilities": [
            {
              "capability": "SERVERLESS",
              "configuration": {
                "EnableAutoStop": true,
                "MinimumNodesInPool": 5,
                "PortsMappingProxyConfig": {
                  "MaxNumberOfClustersPerProxyInstance": 50,
                  "NumberOfPortsPerCluster": 4
                },
                "ProxyId": "r-123456",
                "ReferenceProxyKey": "resource-proxy",
                "TargetPort": 5432
              }
            },
            {
              "capability": "SERVERLESS",
              "configuration": {
                "EnableAutoStop": true,
                "MinimumNodesInPool": 5,
                "PortsMappingProxyConfig": {
                  "MaxNumberOfClustersPerProxyInstance": 50,
                  "NumberOfPortsPerCluster": 4
                },
                "ProxyId": "r-123456",
                "ReferenceProxyKey": "resource-proxy",
                "TargetPort": 5432
              }
            },
            {
              "capability": "SERVERLESS",
              "configuration": {
                "EnableAutoStop": true,
                "MinimumNodesInPool": 5,
                "PortsMappingProxyConfig": {
                  "MaxNumberOfClustersPerProxyInstance": 50,
                  "NumberOfPortsPerCluster": 4
                },
                "ProxyId": "r-123456",
                "ReferenceProxyKey": "resource-proxy",
                "TargetPort": 5432
              }
            },
            {
              "capability": "SERVERLESS",
              "configuration": {
                "EnableAutoStop": true,
                "MinimumNodesInPool": 5,
                "PortsMappingProxyConfig": {
                  "MaxNumberOfClustersPerProxyInstance": 50,
                  "NumberOfPortsPerCluster": 4
                },
                "ProxyId": "r-123456",
                "ReferenceProxyKey": "resource-proxy",
                "TargetPort": 5432
              }
            }
          ]
        }
      },
      "ListResourceInstanceSnapshotsRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service key",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Repellat dolorem vel nobis necessitatibus dolor."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "k9",
            "minLength": 1
          }
        },
        "example": {
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "mnh"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id"
        ]
      },
      "ListResourceInstanceSnapshotsResult": {
        "type": "object",
        "properties": {
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceSnapshot"
            },
            "description": "The instance snapshots",
            "example": [
              {
                "completeTime": "2021-09-01T00:00:00Z",
                "createdTime": "2021-09-01T00:00:00Z",
                "encrypted": true,
                "progress": 100,
                "snapshotId": "instance-ss-12345678",
                "status": "completed"
              }
            ]
          }
        },
        "example": {
          "snapshots": [
            {
              "completeTime": "2021-09-01T00:00:00Z",
              "createdTime": "2021-09-01T00:00:00Z",
              "encrypted": true,
              "progress": 100,
              "snapshotId": "instance-ss-12345678",
              "status": "completed"
            }
          ]
        }
      },
      "ListResourceInstancesRequest": {
        "type": "object",
        "properties": {
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service key",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Dolor occaecati vel."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "c32",
            "minLength": 1
          }
        },
        "example": {
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "0"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey"
        ]
      },
      "ListResourceInstancesResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Voluptas reprehenderit aperiam ut omnis quis optio."
            },
            "description": "The instance IDs",
            "example": ["instance-abcd1234", "instance-abcd1235"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next request",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["instance-abcd1234", "instance-abcd1235"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListResourcesRequest": {
        "type": "object",
        "properties": {
          "ProductTierVersion": {
            "type": "string",
            "description": "The product tier version of the infra config to describe. If not specified, the latest version is described.",
            "example": "Voluptatem atque illum inventore."
          },
          "managed": {
            "type": "boolean",
            "description": "Is resource managed by omnistrate",
            "example": false
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Sed quis eaque dignissimos deleniti."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "v3",
            "minLength": 1
          }
        },
        "example": {
          "ProductTierVersion": "Vel corporis molestias omnis.",
          "managed": false,
          "productTierId": "pt-12345678",
          "serviceId": "si-12345678",
          "token": "om"
        },
        "required": ["token", "serviceId", "productTierId"]
      },
      "ListResourcesResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a resource",
              "example": "Non voluptatum."
            },
            "description": "List of resource IDs",
            "example": ["r-12345678", "r-abcdefgh", "r-1234abcd"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next page",
            "example": "next-token"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeResourceResult"
            },
            "description": "List of resources",
            "example": [
              {
                "actionHooks": [
                  {
                    "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                    "scope": "CLUSTER",
                    "type": "INIT"
                  }
                ],
                "additionalSecurityContext": {
                  "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "SupplementalGroupIDs": [1001, 999]
                },
                "backupConfiguration": {
                  "backupPeriodInHours": 24,
                  "backupRetentionInDays": 7
                },
                "blobStorageConfiguration": {
                  "GCSConfiguration": {},
                  "S3Configuration": {}
                },
                "capabilities": [
                  {
                    "capability": "SERVERLESS",
                    "configuration": {
                      "EnableAutoStop": true,
                      "MinimumNodesInPool": 5,
                      "PortsMappingProxyConfig": {
                        "MaxNumberOfClustersPerProxyInstance": 50,
                        "NumberOfPortsPerCluster": 4
                      },
                      "ProxyId": "r-123456",
                      "ReferenceProxyKey": "resource-proxy",
                      "TargetPort": 5432
                    }
                  },
                  {
                    "capability": "SERVERLESS",
                    "configuration": {
                      "EnableAutoStop": true,
                      "MinimumNodesInPool": 5,
                      "PortsMappingProxyConfig": {
                        "MaxNumberOfClustersPerProxyInstance": 50,
                        "NumberOfPortsPerCluster": 4
                      },
                      "ProxyId": "r-123456",
                      "ReferenceProxyKey": "resource-proxy",
                      "TargetPort": 5432
                    }
                  }
                ],
                "customLabels": {
                  "key": "value"
                },
                "customSysCTLs": {
                  "net.ipv4.tcp_syncookies": "1"
                },
                "customULimits": [
                  {
                    "ULimitsName": "NoProc",
                    "ULimitsType": "Soft",
                    "ULimitsValue": 1000
                  },
                  {
                    "ULimitsName": "NoFile",
                    "ULimitsType": "Hard",
                    "ULimitsValue": 2048
                  }
                ],
                "dependencies": [
                  {
                    "parameterMap": {
                      "clusterId": "writerId",
                      "clusterOrg": "userDatabase"
                    },
                    "resourceId": "r-12345678"
                  },
                  {
                    "parameterMap": {
                      "clusterId": "readerId",
                      "clusterOrg": "userDatabase"
                    },
                    "resourceId": "r-abcdef12"
                  }
                ],
                "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                "environmentVariables": [
                  {
                    "name": "MYSQL_ROOT_PASSWORD",
                    "value": "password"
                  }
                ],
                "fileSystemConfiguration": {
                  "EFSFileSystemConfiguration": {
                    "PerformanceMode": "generalPurpose|maxIO",
                    "ProvisionedThroughputInMibps": 125,
                    "ThroughputMode": "provisioned|bursting|elastic"
                  }
                },
                "helmChartConfiguration": {
                  "chartName": "my-chart",
                  "chartRepoName": "my-repo",
                  "chartRepoUrl": "https://my-repo.com",
                  "chartValues": {
                    "key1": "value1",
                    "key2": 3,
                    "key3": {
                      "key4": "value4"
                    }
                  },
                  "chartVersion": "1.0.0",
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "password": "my-password",
                  "runtimeConfiguration": {
                    "disableHooks": true,
                    "recreate": true,
                    "resetThenReuseValues": true,
                    "resetValues": true,
                    "reuseValues": true,
                    "skipCRDs": true,
                    "timeoutNanos": 1000000000,
                    "upgradeCRDs": true,
                    "wait": true,
                    "waitForJobs": true
                  },
                  "username": "my-user"
                },
                "id": "r-12345678",
                "imageConfigId": "imgc-12345678",
                "infraConfigId": "ic-12345678",
                "internal": true,
                "isDeprecated": false,
                "key": "galera",
                "kustomizeConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "gitConfiguration": {
                    "accessToken": "my-token",
                    "referenceName": "tags/v1.0.0",
                    "repositoryUrl": "https://github.com/username/myrepo",
                    "userName": "my-user"
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "kustomizePath": "/kustomize"
                },
                "l4LoadBalancerConfiguration": {
                  "ingressPortConfiguration": [
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8080,
                      "ingressPort": 1234
                    },
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8081,
                      "ingressPort": 5678
                    },
                    {
                      "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                      "backendPort": 8082,
                      "ingressPort": 9012
                    }
                  ]
                },
                "l7LoadBalancerConfiguration": {
                  "paths": [
                    {
                      "associatedResourceID": "r-12345678",
                      "path": "/path",
                      "port": 8080
                    }
                  ]
                },
                "name": "Galera",
                "operatorCRDConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "outputParameters": {
                    "expiresAt": "$out.status.notAfter",
                    "issuerName": "letsencrypt-prod"
                  },
                  "readinessConditions": {
                    "$out.status.conditions[?(@.type=='Ready')].status": true
                  },
                  "supplementalFiles": [
                    "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                    "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                  ],
                  "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                },
                "productTierId": "pt-12345678",
                "proxyType": "PortsBasedProxy",
                "resourceType": "Generic",
                "serviceId": "s-12345678",
                "terraformConfigurations": {
                  "aws": {
                    "gitConfiguration": {
                      "referenceName": "ref",
                      "repositoryUrl": "gitUrl"
                    },
                    "privateModuleGitAccessTokens": {
                      "tokenName": "accessToken"
                    },
                    "terraformPath": "/project1/tf"
                  }
                }
              },
              {
                "actionHooks": [
                  {
                    "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                    "scope": "CLUSTER",
                    "type": "INIT"
                  }
                ],
                "additionalSecurityContext": {
                  "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "SupplementalGroupIDs": [1001, 999]
                },
                "backupConfiguration": {
                  "backupPeriodInHours": 24,
                  "backupRetentionInDays": 7
                },
                "blobStorageConfiguration": {
                  "GCSConfiguration": {},
                  "S3Configuration": {}
                },
                "capabilities": [
                  {
                    "capability": "SERVERLESS",
                    "configuration": {
                      "EnableAutoStop": true,
                      "MinimumNodesInPool": 5,
                      "PortsMappingProxyConfig": {
                        "MaxNumberOfClustersPerProxyInstance": 50,
                        "NumberOfPortsPerCluster": 4
                      },
                      "ProxyId": "r-123456",
                      "ReferenceProxyKey": "resource-proxy",
                      "TargetPort": 5432
                    }
                  },
                  {
                    "capability": "SERVERLESS",
                    "configuration": {
                      "EnableAutoStop": true,
                      "MinimumNodesInPool": 5,
                      "PortsMappingProxyConfig": {
                        "MaxNumberOfClustersPerProxyInstance": 50,
                        "NumberOfPortsPerCluster": 4
                      },
                      "ProxyId": "r-123456",
                      "ReferenceProxyKey": "resource-proxy",
                      "TargetPort": 5432
                    }
                  }
                ],
                "customLabels": {
                  "key": "value"
                },
                "customSysCTLs": {
                  "net.ipv4.tcp_syncookies": "1"
                },
                "customULimits": [
                  {
                    "ULimitsName": "NoProc",
                    "ULimitsType": "Soft",
                    "ULimitsValue": 1000
                  },
                  {
                    "ULimitsName": "NoFile",
                    "ULimitsType": "Hard",
                    "ULimitsValue": 2048
                  }
                ],
                "dependencies": [
                  {
                    "parameterMap": {
                      "clusterId": "writerId",
                      "clusterOrg": "userDatabase"
                    },
                    "resourceId": "r-12345678"
                  },
                  {
                    "parameterMap": {
                      "clusterId": "readerId",
                      "clusterOrg": "userDatabase"
                    },
                    "resourceId": "r-abcdef12"
                  }
                ],
                "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                "environmentVariables": [
                  {
                    "name": "MYSQL_ROOT_PASSWORD",
                    "value": "password"
                  }
                ],
                "fileSystemConfiguration": {
                  "EFSFileSystemConfiguration": {
                    "PerformanceMode": "generalPurpose|maxIO",
                    "ProvisionedThroughputInMibps": 125,
                    "ThroughputMode": "provisioned|bursting|elastic"
                  }
                },
                "helmChartConfiguration": {
                  "chartName": "my-chart",
                  "chartRepoName": "my-repo",
                  "chartRepoUrl": "https://my-repo.com",
                  "chartValues": {
                    "key1": "value1",
                    "key2": 3,
                    "key3": {
                      "key4": "value4"
                    }
                  },
                  "chartVersion": "1.0.0",
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "password": "my-password",
                  "runtimeConfiguration": {
                    "disableHooks": true,
                    "recreate": true,
                    "resetThenReuseValues": true,
                    "resetValues": true,
                    "reuseValues": true,
                    "skipCRDs": true,
                    "timeoutNanos": 1000000000,
                    "upgradeCRDs": true,
                    "wait": true,
                    "waitForJobs": true
                  },
                  "username": "my-user"
                },
                "id": "r-12345678",
                "imageConfigId": "imgc-12345678",
                "infraConfigId": "ic-12345678",
                "internal": true,
                "isDeprecated": false,
                "key": "galera",
                "kustomizeConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "gitConfiguration": {
                    "accessToken": "my-token",
                    "referenceName": "tags/v1.0.0",
                    "repositoryUrl": "https://github.com/username/myrepo",
                    "userName": "my-user"
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "kustomizePath": "/kustomize"
                },
                "l4LoadBalancerConfiguration": {
                  "ingressPortConfiguration": [
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8080,
                      "ingressPort": 1234
                    },
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8081,
                      "ingressPort": 5678
                    },
                    {
                      "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                      "backendPort": 8082,
                      "ingressPort": 9012
                    }
                  ]
                },
                "l7LoadBalancerConfiguration": {
                  "paths": [
                    {
                      "associatedResourceID": "r-12345678",
                      "path": "/path",
                      "port": 8080
                    }
                  ]
                },
                "name": "Galera",
                "operatorCRDConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "outputParameters": {
                    "expiresAt": "$out.status.notAfter",
                    "issuerName": "letsencrypt-prod"
                  },
                  "readinessConditions": {
                    "$out.status.conditions[?(@.type=='Ready')].status": true
                  },
                  "supplementalFiles": [
                    "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                    "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                  ],
                  "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                },
                "productTierId": "pt-12345678",
                "proxyType": "PortsBasedProxy",
                "resourceType": "Generic",
                "serviceId": "s-12345678",
                "terraformConfigurations": {
                  "aws": {
                    "gitConfiguration": {
                      "referenceName": "ref",
                      "repositoryUrl": "gitUrl"
                    },
                    "privateModuleGitAccessTokens": {
                      "tokenName": "accessToken"
                    },
                    "terraformPath": "/project1/tf"
                  }
                }
              },
              {
                "actionHooks": [
                  {
                    "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                    "scope": "CLUSTER",
                    "type": "INIT"
                  }
                ],
                "additionalSecurityContext": {
                  "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "SupplementalGroupIDs": [1001, 999]
                },
                "backupConfiguration": {
                  "backupPeriodInHours": 24,
                  "backupRetentionInDays": 7
                },
                "blobStorageConfiguration": {
                  "GCSConfiguration": {},
                  "S3Configuration": {}
                },
                "capabilities": [
                  {
                    "capability": "SERVERLESS",
                    "configuration": {
                      "EnableAutoStop": true,
                      "MinimumNodesInPool": 5,
                      "PortsMappingProxyConfig": {
                        "MaxNumberOfClustersPerProxyInstance": 50,
                        "NumberOfPortsPerCluster": 4
                      },
                      "ProxyId": "r-123456",
                      "ReferenceProxyKey": "resource-proxy",
                      "TargetPort": 5432
                    }
                  },
                  {
                    "capability": "SERVERLESS",
                    "configuration": {
                      "EnableAutoStop": true,
                      "MinimumNodesInPool": 5,
                      "PortsMappingProxyConfig": {
                        "MaxNumberOfClustersPerProxyInstance": 50,
                        "NumberOfPortsPerCluster": 4
                      },
                      "ProxyId": "r-123456",
                      "ReferenceProxyKey": "resource-proxy",
                      "TargetPort": 5432
                    }
                  }
                ],
                "customLabels": {
                  "key": "value"
                },
                "customSysCTLs": {
                  "net.ipv4.tcp_syncookies": "1"
                },
                "customULimits": [
                  {
                    "ULimitsName": "NoProc",
                    "ULimitsType": "Soft",
                    "ULimitsValue": 1000
                  },
                  {
                    "ULimitsName": "NoFile",
                    "ULimitsType": "Hard",
                    "ULimitsValue": 2048
                  }
                ],
                "dependencies": [
                  {
                    "parameterMap": {
                      "clusterId": "writerId",
                      "clusterOrg": "userDatabase"
                    },
                    "resourceId": "r-12345678"
                  },
                  {
                    "parameterMap": {
                      "clusterId": "readerId",
                      "clusterOrg": "userDatabase"
                    },
                    "resourceId": "r-abcdef12"
                  }
                ],
                "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                "environmentVariables": [
                  {
                    "name": "MYSQL_ROOT_PASSWORD",
                    "value": "password"
                  }
                ],
                "fileSystemConfiguration": {
                  "EFSFileSystemConfiguration": {
                    "PerformanceMode": "generalPurpose|maxIO",
                    "ProvisionedThroughputInMibps": 125,
                    "ThroughputMode": "provisioned|bursting|elastic"
                  }
                },
                "helmChartConfiguration": {
                  "chartName": "my-chart",
                  "chartRepoName": "my-repo",
                  "chartRepoUrl": "https://my-repo.com",
                  "chartValues": {
                    "key1": "value1",
                    "key2": 3,
                    "key3": {
                      "key4": "value4"
                    }
                  },
                  "chartVersion": "1.0.0",
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "password": "my-password",
                  "runtimeConfiguration": {
                    "disableHooks": true,
                    "recreate": true,
                    "resetThenReuseValues": true,
                    "resetValues": true,
                    "reuseValues": true,
                    "skipCRDs": true,
                    "timeoutNanos": 1000000000,
                    "upgradeCRDs": true,
                    "wait": true,
                    "waitForJobs": true
                  },
                  "username": "my-user"
                },
                "id": "r-12345678",
                "imageConfigId": "imgc-12345678",
                "infraConfigId": "ic-12345678",
                "internal": true,
                "isDeprecated": false,
                "key": "galera",
                "kustomizeConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "gitConfiguration": {
                    "accessToken": "my-token",
                    "referenceName": "tags/v1.0.0",
                    "repositoryUrl": "https://github.com/username/myrepo",
                    "userName": "my-user"
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "kustomizePath": "/kustomize"
                },
                "l4LoadBalancerConfiguration": {
                  "ingressPortConfiguration": [
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8080,
                      "ingressPort": 1234
                    },
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8081,
                      "ingressPort": 5678
                    },
                    {
                      "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                      "backendPort": 8082,
                      "ingressPort": 9012
                    }
                  ]
                },
                "l7LoadBalancerConfiguration": {
                  "paths": [
                    {
                      "associatedResourceID": "r-12345678",
                      "path": "/path",
                      "port": 8080
                    }
                  ]
                },
                "name": "Galera",
                "operatorCRDConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "outputParameters": {
                    "expiresAt": "$out.status.notAfter",
                    "issuerName": "letsencrypt-prod"
                  },
                  "readinessConditions": {
                    "$out.status.conditions[?(@.type=='Ready')].status": true
                  },
                  "supplementalFiles": [
                    "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                    "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                  ],
                  "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                },
                "productTierId": "pt-12345678",
                "proxyType": "PortsBasedProxy",
                "resourceType": "Generic",
                "serviceId": "s-12345678",
                "terraformConfigurations": {
                  "aws": {
                    "gitConfiguration": {
                      "referenceName": "ref",
                      "repositoryUrl": "gitUrl"
                    },
                    "privateModuleGitAccessTokens": {
                      "tokenName": "accessToken"
                    },
                    "terraformPath": "/project1/tf"
                  }
                }
              },
              {
                "actionHooks": [
                  {
                    "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                    "scope": "CLUSTER",
                    "type": "INIT"
                  }
                ],
                "additionalSecurityContext": {
                  "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                  "SupplementalGroupIDs": [1001, 999]
                },
                "backupConfiguration": {
                  "backupPeriodInHours": 24,
                  "backupRetentionInDays": 7
                },
                "blobStorageConfiguration": {
                  "GCSConfiguration": {},
                  "S3Configuration": {}
                },
                "capabilities": [
                  {
                    "capability": "SERVERLESS",
                    "configuration": {
                      "EnableAutoStop": true,
                      "MinimumNodesInPool": 5,
                      "PortsMappingProxyConfig": {
                        "MaxNumberOfClustersPerProxyInstance": 50,
                        "NumberOfPortsPerCluster": 4
                      },
                      "ProxyId": "r-123456",
                      "ReferenceProxyKey": "resource-proxy",
                      "TargetPort": 5432
                    }
                  },
                  {
                    "capability": "SERVERLESS",
                    "configuration": {
                      "EnableAutoStop": true,
                      "MinimumNodesInPool": 5,
                      "PortsMappingProxyConfig": {
                        "MaxNumberOfClustersPerProxyInstance": 50,
                        "NumberOfPortsPerCluster": 4
                      },
                      "ProxyId": "r-123456",
                      "ReferenceProxyKey": "resource-proxy",
                      "TargetPort": 5432
                    }
                  }
                ],
                "customLabels": {
                  "key": "value"
                },
                "customSysCTLs": {
                  "net.ipv4.tcp_syncookies": "1"
                },
                "customULimits": [
                  {
                    "ULimitsName": "NoProc",
                    "ULimitsType": "Soft",
                    "ULimitsValue": 1000
                  },
                  {
                    "ULimitsName": "NoFile",
                    "ULimitsType": "Hard",
                    "ULimitsValue": 2048
                  }
                ],
                "dependencies": [
                  {
                    "parameterMap": {
                      "clusterId": "writerId",
                      "clusterOrg": "userDatabase"
                    },
                    "resourceId": "r-12345678"
                  },
                  {
                    "parameterMap": {
                      "clusterId": "readerId",
                      "clusterOrg": "userDatabase"
                    },
                    "resourceId": "r-abcdef12"
                  }
                ],
                "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                "environmentVariables": [
                  {
                    "name": "MYSQL_ROOT_PASSWORD",
                    "value": "password"
                  }
                ],
                "fileSystemConfiguration": {
                  "EFSFileSystemConfiguration": {
                    "PerformanceMode": "generalPurpose|maxIO",
                    "ProvisionedThroughputInMibps": 125,
                    "ThroughputMode": "provisioned|bursting|elastic"
                  }
                },
                "helmChartConfiguration": {
                  "chartName": "my-chart",
                  "chartRepoName": "my-repo",
                  "chartRepoUrl": "https://my-repo.com",
                  "chartValues": {
                    "key1": "value1",
                    "key2": 3,
                    "key3": {
                      "key4": "value4"
                    }
                  },
                  "chartVersion": "1.0.0",
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "password": "my-password",
                  "runtimeConfiguration": {
                    "disableHooks": true,
                    "recreate": true,
                    "resetThenReuseValues": true,
                    "resetValues": true,
                    "reuseValues": true,
                    "skipCRDs": true,
                    "timeoutNanos": 1000000000,
                    "upgradeCRDs": true,
                    "wait": true,
                    "waitForJobs": true
                  },
                  "username": "my-user"
                },
                "id": "r-12345678",
                "imageConfigId": "imgc-12345678",
                "infraConfigId": "ic-12345678",
                "internal": true,
                "isDeprecated": false,
                "key": "galera",
                "kustomizeConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "gitConfiguration": {
                    "accessToken": "my-token",
                    "referenceName": "tags/v1.0.0",
                    "repositoryUrl": "https://github.com/username/myrepo",
                    "userName": "my-user"
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "kustomizePath": "/kustomize"
                },
                "l4LoadBalancerConfiguration": {
                  "ingressPortConfiguration": [
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8080,
                      "ingressPort": 1234
                    },
                    {
                      "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                      "backendPort": 8081,
                      "ingressPort": 5678
                    },
                    {
                      "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                      "backendPort": 8082,
                      "ingressPort": 9012
                    }
                  ]
                },
                "l7LoadBalancerConfiguration": {
                  "paths": [
                    {
                      "associatedResourceID": "r-12345678",
                      "path": "/path",
                      "port": 8080
                    }
                  ]
                },
                "name": "Galera",
                "operatorCRDConfiguration": {
                  "endpointConfiguration": {
                    "admin": {
                      "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                      "networkingType": "PRIVATE",
                      "ports": [8080, 8081],
                      "primary": false
                    },
                    "cluster": {
                      "host": "https://my-endpoint.com",
                      "networkingType": "PUBLIC",
                      "ports": [8080, 8081],
                      "primary": true
                    }
                  },
                  "helmChartDependencies": [
                    {
                      "chartName": "cert-manager",
                      "chartVersion": "v1.5.3"
                    },
                    {
                      "chartName": "nginx-ingress",
                      "chartVersion": "v0.48.1"
                    },
                    {
                      "chartName": "external-dns",
                      "chartVersion": "v0.7.0"
                    },
                    {
                      "chartName": "cnpg-operator",
                      "chartVersion": "v0.23.1"
                    }
                  ],
                  "outputParameters": {
                    "expiresAt": "$out.status.notAfter",
                    "issuerName": "letsencrypt-prod"
                  },
                  "readinessConditions": {
                    "$out.status.conditions[?(@.type=='Ready')].status": true
                  },
                  "supplementalFiles": [
                    "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                    "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                  ],
                  "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                },
                "productTierId": "pt-12345678",
                "proxyType": "PortsBasedProxy",
                "resourceType": "Generic",
                "serviceId": "s-12345678",
                "terraformConfigurations": {
                  "aws": {
                    "gitConfiguration": {
                      "referenceName": "ref",
                      "repositoryUrl": "gitUrl"
                    },
                    "privateModuleGitAccessTokens": {
                      "tokenName": "accessToken"
                    },
                    "terraformPath": "/project1/tf"
                  }
                }
              }
            ]
          }
        },
        "example": {
          "ids": ["r-12345678", "r-abcdefgh", "r-1234abcd"],
          "nextPageToken": "next-token",
          "resources": [
            {
              "actionHooks": [
                {
                  "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                  "scope": "CLUSTER",
                  "type": "INIT"
                }
              ],
              "additionalSecurityContext": {
                "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                "SupplementalGroupIDs": [1001, 999]
              },
              "backupConfiguration": {
                "backupPeriodInHours": 24,
                "backupRetentionInDays": 7
              },
              "blobStorageConfiguration": {
                "GCSConfiguration": {},
                "S3Configuration": {}
              },
              "capabilities": [
                {
                  "capability": "SERVERLESS",
                  "configuration": {
                    "EnableAutoStop": true,
                    "MinimumNodesInPool": 5,
                    "PortsMappingProxyConfig": {
                      "MaxNumberOfClustersPerProxyInstance": 50,
                      "NumberOfPortsPerCluster": 4
                    },
                    "ProxyId": "r-123456",
                    "ReferenceProxyKey": "resource-proxy",
                    "TargetPort": 5432
                  }
                },
                {
                  "capability": "SERVERLESS",
                  "configuration": {
                    "EnableAutoStop": true,
                    "MinimumNodesInPool": 5,
                    "PortsMappingProxyConfig": {
                      "MaxNumberOfClustersPerProxyInstance": 50,
                      "NumberOfPortsPerCluster": 4
                    },
                    "ProxyId": "r-123456",
                    "ReferenceProxyKey": "resource-proxy",
                    "TargetPort": 5432
                  }
                }
              ],
              "customLabels": {
                "key": "value"
              },
              "customSysCTLs": {
                "net.ipv4.tcp_syncookies": "1"
              },
              "customULimits": [
                {
                  "ULimitsName": "NoProc",
                  "ULimitsType": "Soft",
                  "ULimitsValue": 1000
                },
                {
                  "ULimitsName": "NoFile",
                  "ULimitsType": "Hard",
                  "ULimitsValue": 2048
                }
              ],
              "dependencies": [
                {
                  "parameterMap": {
                    "clusterId": "writerId",
                    "clusterOrg": "userDatabase"
                  },
                  "resourceId": "r-12345678"
                },
                {
                  "parameterMap": {
                    "clusterId": "readerId",
                    "clusterOrg": "userDatabase"
                  },
                  "resourceId": "r-abcdef12"
                }
              ],
              "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
              "environmentVariables": [
                {
                  "name": "MYSQL_ROOT_PASSWORD",
                  "value": "password"
                }
              ],
              "fileSystemConfiguration": {
                "EFSFileSystemConfiguration": {
                  "PerformanceMode": "generalPurpose|maxIO",
                  "ProvisionedThroughputInMibps": 125,
                  "ThroughputMode": "provisioned|bursting|elastic"
                }
              },
              "helmChartConfiguration": {
                "chartName": "my-chart",
                "chartRepoName": "my-repo",
                "chartRepoUrl": "https://my-repo.com",
                "chartValues": {
                  "key1": "value1",
                  "key2": 3,
                  "key3": {
                    "key4": "value4"
                  }
                },
                "chartVersion": "1.0.0",
                "endpointConfiguration": {
                  "admin": {
                    "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                    "networkingType": "PRIVATE",
                    "ports": [8080, 8081],
                    "primary": false
                  },
                  "cluster": {
                    "host": "https://my-endpoint.com",
                    "networkingType": "PUBLIC",
                    "ports": [8080, 8081],
                    "primary": true
                  }
                },
                "password": "my-password",
                "runtimeConfiguration": {
                  "disableHooks": true,
                  "recreate": true,
                  "resetThenReuseValues": true,
                  "resetValues": true,
                  "reuseValues": true,
                  "skipCRDs": true,
                  "timeoutNanos": 1000000000,
                  "upgradeCRDs": true,
                  "wait": true,
                  "waitForJobs": true
                },
                "username": "my-user"
              },
              "id": "r-12345678",
              "imageConfigId": "imgc-12345678",
              "infraConfigId": "ic-12345678",
              "internal": true,
              "isDeprecated": false,
              "key": "galera",
              "kustomizeConfiguration": {
                "endpointConfiguration": {
                  "admin": {
                    "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                    "networkingType": "PRIVATE",
                    "ports": [8080, 8081],
                    "primary": false
                  },
                  "cluster": {
                    "host": "https://my-endpoint.com",
                    "networkingType": "PUBLIC",
                    "ports": [8080, 8081],
                    "primary": true
                  }
                },
                "gitConfiguration": {
                  "accessToken": "my-token",
                  "referenceName": "tags/v1.0.0",
                  "repositoryUrl": "https://github.com/username/myrepo",
                  "userName": "my-user"
                },
                "helmChartDependencies": [
                  {
                    "chartName": "cert-manager",
                    "chartVersion": "v1.5.3"
                  },
                  {
                    "chartName": "nginx-ingress",
                    "chartVersion": "v0.48.1"
                  },
                  {
                    "chartName": "external-dns",
                    "chartVersion": "v0.7.0"
                  },
                  {
                    "chartName": "cnpg-operator",
                    "chartVersion": "v0.23.1"
                  }
                ],
                "kustomizePath": "/kustomize"
              },
              "l4LoadBalancerConfiguration": {
                "ingressPortConfiguration": [
                  {
                    "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                    "backendPort": 8080,
                    "ingressPort": 1234
                  },
                  {
                    "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                    "backendPort": 8081,
                    "ingressPort": 5678
                  },
                  {
                    "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                    "backendPort": 8082,
                    "ingressPort": 9012
                  }
                ]
              },
              "l7LoadBalancerConfiguration": {
                "paths": [
                  {
                    "associatedResourceID": "r-12345678",
                    "path": "/path",
                    "port": 8080
                  }
                ]
              },
              "name": "Galera",
              "operatorCRDConfiguration": {
                "endpointConfiguration": {
                  "admin": {
                    "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                    "networkingType": "PRIVATE",
                    "ports": [8080, 8081],
                    "primary": false
                  },
                  "cluster": {
                    "host": "https://my-endpoint.com",
                    "networkingType": "PUBLIC",
                    "ports": [8080, 8081],
                    "primary": true
                  }
                },
                "helmChartDependencies": [
                  {
                    "chartName": "cert-manager",
                    "chartVersion": "v1.5.3"
                  },
                  {
                    "chartName": "nginx-ingress",
                    "chartVersion": "v0.48.1"
                  },
                  {
                    "chartName": "external-dns",
                    "chartVersion": "v0.7.0"
                  },
                  {
                    "chartName": "cnpg-operator",
                    "chartVersion": "v0.23.1"
                  }
                ],
                "outputParameters": {
                  "expiresAt": "$out.status.notAfter",
                  "issuerName": "letsencrypt-prod"
                },
                "readinessConditions": {
                  "$out.status.conditions[?(@.type=='Ready')].status": true
                },
                "supplementalFiles": [
                  "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                  "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                ],
                "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
              },
              "productTierId": "pt-12345678",
              "proxyType": "PortsBasedProxy",
              "resourceType": "Generic",
              "serviceId": "s-12345678",
              "terraformConfigurations": {
                "aws": {
                  "gitConfiguration": {
                    "referenceName": "ref",
                    "repositoryUrl": "gitUrl"
                  },
                  "privateModuleGitAccessTokens": {
                    "tokenName": "accessToken"
                  },
                  "terraformPath": "/project1/tf"
                }
              }
            },
            {
              "actionHooks": [
                {
                  "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
                  "scope": "CLUSTER",
                  "type": "INIT"
                }
              ],
              "additionalSecurityContext": {
                "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
                "SupplementalGroupIDs": [1001, 999]
              },
              "backupConfiguration": {
                "backupPeriodInHours": 24,
                "backupRetentionInDays": 7
              },
              "blobStorageConfiguration": {
                "GCSConfiguration": {},
                "S3Configuration": {}
              },
              "capabilities": [
                {
                  "capability": "SERVERLESS",
                  "configuration": {
                    "EnableAutoStop": true,
                    "MinimumNodesInPool": 5,
                    "PortsMappingProxyConfig": {
                      "MaxNumberOfClustersPerProxyInstance": 50,
                      "NumberOfPortsPerCluster": 4
                    },
                    "ProxyId": "r-123456",
                    "ReferenceProxyKey": "resource-proxy",
                    "TargetPort": 5432
                  }
                },
                {
                  "capability": "SERVERLESS",
                  "configuration": {
                    "EnableAutoStop": true,
                    "MinimumNodesInPool": 5,
                    "PortsMappingProxyConfig": {
                      "MaxNumberOfClustersPerProxyInstance": 50,
                      "NumberOfPortsPerCluster": 4
                    },
                    "ProxyId": "r-123456",
                    "ReferenceProxyKey": "resource-proxy",
                    "TargetPort": 5432
                  }
                }
              ],
              "customLabels": {
                "key": "value"
              },
              "customSysCTLs": {
                "net.ipv4.tcp_syncookies": "1"
              },
              "customULimits": [
                {
                  "ULimitsName": "NoProc",
                  "ULimitsType": "Soft",
                  "ULimitsValue": 1000
                },
                {
                  "ULimitsName": "NoFile",
                  "ULimitsType": "Hard",
                  "ULimitsValue": 2048
                }
              ],
              "dependencies": [
                {
                  "parameterMap": {
                    "clusterId": "writerId",
                    "clusterOrg": "userDatabase"
                  },
                  "resourceId": "r-12345678"
                },
                {
                  "parameterMap": {
                    "clusterId": "readerId",
                    "clusterOrg": "userDatabase"
                  },
                  "resourceId": "r-abcdef12"
                }
              ],
              "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
              "environmentVariables": [
                {
                  "name": "MYSQL_ROOT_PASSWORD",
                  "value": "password"
                }
              ],
              "fileSystemConfiguration": {
                "EFSFileSystemConfiguration": {
                  "PerformanceMode": "generalPurpose|maxIO",
                  "ProvisionedThroughputInMibps": 125,
                  "ThroughputMode": "provisioned|bursting|elastic"
                }
              },
              "helmChartConfiguration": {
                "chartName": "my-chart",
                "chartRepoName": "my-repo",
                "chartRepoUrl": "https://my-repo.com",
                "chartValues": {
                  "key1": "value1",
                  "key2": 3,
                  "key3": {
                    "key4": "value4"
                  }
                },
                "chartVersion": "1.0.0",
                "endpointConfiguration": {
                  "admin": {
                    "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                    "networkingType": "PRIVATE",
                    "ports": [8080, 8081],
                    "primary": false
                  },
                  "cluster": {
                    "host": "https://my-endpoint.com",
                    "networkingType": "PUBLIC",
                    "ports": [8080, 8081],
                    "primary": true
                  }
                },
                "password": "my-password",
                "runtimeConfiguration": {
                  "disableHooks": true,
                  "recreate": true,
                  "resetThenReuseValues": true,
                  "resetValues": true,
                  "reuseValues": true,
                  "skipCRDs": true,
                  "timeoutNanos": 1000000000,
                  "upgradeCRDs": true,
                  "wait": true,
                  "waitForJobs": true
                },
                "username": "my-user"
              },
              "id": "r-12345678",
              "imageConfigId": "imgc-12345678",
              "infraConfigId": "ic-12345678",
              "internal": true,
              "isDeprecated": false,
              "key": "galera",
              "kustomizeConfiguration": {
                "endpointConfiguration": {
                  "admin": {
                    "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                    "networkingType": "PRIVATE",
                    "ports": [8080, 8081],
                    "primary": false
                  },
                  "cluster": {
                    "host": "https://my-endpoint.com",
                    "networkingType": "PUBLIC",
                    "ports": [8080, 8081],
                    "primary": true
                  }
                },
                "gitConfiguration": {
                  "accessToken": "my-token",
                  "referenceName": "tags/v1.0.0",
                  "repositoryUrl": "https://github.com/username/myrepo",
                  "userName": "my-user"
                },
                "helmChartDependencies": [
                  {
                    "chartName": "cert-manager",
                    "chartVersion": "v1.5.3"
                  },
                  {
                    "chartName": "nginx-ingress",
                    "chartVersion": "v0.48.1"
                  },
                  {
                    "chartName": "external-dns",
                    "chartVersion": "v0.7.0"
                  },
                  {
                    "chartName": "cnpg-operator",
                    "chartVersion": "v0.23.1"
                  }
                ],
                "kustomizePath": "/kustomize"
              },
              "l4LoadBalancerConfiguration": {
                "ingressPortConfiguration": [
                  {
                    "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                    "backendPort": 8080,
                    "ingressPort": 1234
                  },
                  {
                    "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                    "backendPort": 8081,
                    "ingressPort": 5678
                  },
                  {
                    "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                    "backendPort": 8082,
                    "ingressPort": 9012
                  }
                ]
              },
              "l7LoadBalancerConfiguration": {
                "paths": [
                  {
                    "associatedResourceID": "r-12345678",
                    "path": "/path",
                    "port": 8080
                  }
                ]
              },
              "name": "Galera",
              "operatorCRDConfiguration": {
                "endpointConfiguration": {
                  "admin": {
                    "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                    "networkingType": "PRIVATE",
                    "ports": [8080, 8081],
                    "primary": false
                  },
                  "cluster": {
                    "host": "https://my-endpoint.com",
                    "networkingType": "PUBLIC",
                    "ports": [8080, 8081],
                    "primary": true
                  }
                },
                "helmChartDependencies": [
                  {
                    "chartName": "cert-manager",
                    "chartVersion": "v1.5.3"
                  },
                  {
                    "chartName": "nginx-ingress",
                    "chartVersion": "v0.48.1"
                  },
                  {
                    "chartName": "external-dns",
                    "chartVersion": "v0.7.0"
                  },
                  {
                    "chartName": "cnpg-operator",
                    "chartVersion": "v0.23.1"
                  }
                ],
                "outputParameters": {
                  "expiresAt": "$out.status.notAfter",
                  "issuerName": "letsencrypt-prod"
                },
                "readinessConditions": {
                  "$out.status.conditions[?(@.type=='Ready')].status": true
                },
                "supplementalFiles": [
                  "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                  "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                ],
                "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
              },
              "productTierId": "pt-12345678",
              "proxyType": "PortsBasedProxy",
              "resourceType": "Generic",
              "serviceId": "s-12345678",
              "terraformConfigurations": {
                "aws": {
                  "gitConfiguration": {
                    "referenceName": "ref",
                    "repositoryUrl": "gitUrl"
                  },
                  "privateModuleGitAccessTokens": {
                    "tokenName": "accessToken"
                  },
                  "terraformPath": "/project1/tf"
                }
              }
            }
          ]
        },
        "required": ["ids"]
      },
      "ListSaaSPortalCustomDomainsRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "zse",
            "minLength": 1
          }
        },
        "example": {
          "token": "x"
        },
        "required": ["token"]
      },
      "ListSaaSPortalCustomDomainsResult": {
        "type": "object",
        "properties": {
          "customDomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomDomain"
            },
            "description": "The list of custom domains",
            "example": [
              {
                "clusterEndpoint": "example.com",
                "customDomain": "mycustomdomain.com",
                "description": "My custom domain description",
                "environmentType": "DEV",
                "name": "MyCustomDomain",
                "status": "READY"
              },
              {
                "clusterEndpoint": "example.com",
                "customDomain": "mycustomdomain.com",
                "description": "My custom domain description",
                "environmentType": "DEV",
                "name": "MyCustomDomain",
                "status": "READY"
              },
              {
                "clusterEndpoint": "example.com",
                "customDomain": "mycustomdomain.com",
                "description": "My custom domain description",
                "environmentType": "DEV",
                "name": "MyCustomDomain",
                "status": "READY"
              },
              {
                "clusterEndpoint": "example.com",
                "customDomain": "mycustomdomain.com",
                "description": "My custom domain description",
                "environmentType": "DEV",
                "name": "MyCustomDomain",
                "status": "READY"
              }
            ]
          }
        },
        "example": {
          "customDomains": [
            {
              "clusterEndpoint": "example.com",
              "customDomain": "mycustomdomain.com",
              "description": "My custom domain description",
              "environmentType": "DEV",
              "name": "MyCustomDomain",
              "status": "READY"
            },
            {
              "clusterEndpoint": "example.com",
              "customDomain": "mycustomdomain.com",
              "description": "My custom domain description",
              "environmentType": "DEV",
              "name": "MyCustomDomain",
              "status": "READY"
            },
            {
              "clusterEndpoint": "example.com",
              "customDomain": "mycustomdomain.com",
              "description": "My custom domain description",
              "environmentType": "DEV",
              "name": "MyCustomDomain",
              "status": "READY"
            }
          ]
        },
        "required": ["customDomains"]
      },
      "ListSaaSPortalsRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "g",
            "minLength": 1
          }
        },
        "example": {
          "token": "6s"
        },
        "required": ["token"]
      },
      "ListSaaSPortalsResult": {
        "type": "object",
        "properties": {
          "saasPortals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SaaSPortal"
            },
            "description": "The list of saas portals",
            "example": [
              {
                "customDomain": "mycustomdomain.com",
                "customDomainStatus": "READY",
                "detailedNetworkTopology": {
                  "r-abcd1234": {
                    "allowedIPRanges": ["0.0.0.0/0"],
                    "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                    "clusterPorts": [3306],
                    "main": true,
                    "networkingType": "PUBLIC",
                    "nodes": [
                      {
                        "availabilityZone": "us-east-2a",
                        "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                        "healthStatus": "healthy",
                        "id": "primary-0",
                        "ports": [3306],
                        "status": "RUNNING"
                      }
                    ],
                    "privateNetworkCIDR": "10.0.0.2/24",
                    "privateNetworkID": "n-1234abcd",
                    "publiclyAccessible": true,
                    "resourceKey": "saasportal",
                    "resourceName": "SaaS Portal"
                  }
                },
                "emailConfig": {
                  "smtpFromEmail": "example@gmail.com",
                  "smtpHost": "smtp.gmail.com",
                  "smtpPassword": "password",
                  "smtpPort": 587,
                  "smtpUsername": "username"
                },
                "endpoint": "https://saas-portal.example.com",
                "environmentType": "DEV",
                "googleAnalyticsTagID": "G-123456789",
                "imageConfig": {
                  "imageName": "myimage",
                  "imageRegistry": "ghcr.io",
                  "imageTag": "latest"
                },
                "status": "READY"
              },
              {
                "customDomain": "mycustomdomain.com",
                "customDomainStatus": "READY",
                "detailedNetworkTopology": {
                  "r-abcd1234": {
                    "allowedIPRanges": ["0.0.0.0/0"],
                    "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                    "clusterPorts": [3306],
                    "main": true,
                    "networkingType": "PUBLIC",
                    "nodes": [
                      {
                        "availabilityZone": "us-east-2a",
                        "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                        "healthStatus": "healthy",
                        "id": "primary-0",
                        "ports": [3306],
                        "status": "RUNNING"
                      }
                    ],
                    "privateNetworkCIDR": "10.0.0.2/24",
                    "privateNetworkID": "n-1234abcd",
                    "publiclyAccessible": true,
                    "resourceKey": "saasportal",
                    "resourceName": "SaaS Portal"
                  }
                },
                "emailConfig": {
                  "smtpFromEmail": "example@gmail.com",
                  "smtpHost": "smtp.gmail.com",
                  "smtpPassword": "password",
                  "smtpPort": 587,
                  "smtpUsername": "username"
                },
                "endpoint": "https://saas-portal.example.com",
                "environmentType": "DEV",
                "googleAnalyticsTagID": "G-123456789",
                "imageConfig": {
                  "imageName": "myimage",
                  "imageRegistry": "ghcr.io",
                  "imageTag": "latest"
                },
                "status": "READY"
              },
              {
                "customDomain": "mycustomdomain.com",
                "customDomainStatus": "READY",
                "detailedNetworkTopology": {
                  "r-abcd1234": {
                    "allowedIPRanges": ["0.0.0.0/0"],
                    "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                    "clusterPorts": [3306],
                    "main": true,
                    "networkingType": "PUBLIC",
                    "nodes": [
                      {
                        "availabilityZone": "us-east-2a",
                        "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                        "healthStatus": "healthy",
                        "id": "primary-0",
                        "ports": [3306],
                        "status": "RUNNING"
                      }
                    ],
                    "privateNetworkCIDR": "10.0.0.2/24",
                    "privateNetworkID": "n-1234abcd",
                    "publiclyAccessible": true,
                    "resourceKey": "saasportal",
                    "resourceName": "SaaS Portal"
                  }
                },
                "emailConfig": {
                  "smtpFromEmail": "example@gmail.com",
                  "smtpHost": "smtp.gmail.com",
                  "smtpPassword": "password",
                  "smtpPort": 587,
                  "smtpUsername": "username"
                },
                "endpoint": "https://saas-portal.example.com",
                "environmentType": "DEV",
                "googleAnalyticsTagID": "G-123456789",
                "imageConfig": {
                  "imageName": "myimage",
                  "imageRegistry": "ghcr.io",
                  "imageTag": "latest"
                },
                "status": "READY"
              },
              {
                "customDomain": "mycustomdomain.com",
                "customDomainStatus": "READY",
                "detailedNetworkTopology": {
                  "r-abcd1234": {
                    "allowedIPRanges": ["0.0.0.0/0"],
                    "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                    "clusterPorts": [3306],
                    "main": true,
                    "networkingType": "PUBLIC",
                    "nodes": [
                      {
                        "availabilityZone": "us-east-2a",
                        "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                        "healthStatus": "healthy",
                        "id": "primary-0",
                        "ports": [3306],
                        "status": "RUNNING"
                      }
                    ],
                    "privateNetworkCIDR": "10.0.0.2/24",
                    "privateNetworkID": "n-1234abcd",
                    "publiclyAccessible": true,
                    "resourceKey": "saasportal",
                    "resourceName": "SaaS Portal"
                  }
                },
                "emailConfig": {
                  "smtpFromEmail": "example@gmail.com",
                  "smtpHost": "smtp.gmail.com",
                  "smtpPassword": "password",
                  "smtpPort": 587,
                  "smtpUsername": "username"
                },
                "endpoint": "https://saas-portal.example.com",
                "environmentType": "DEV",
                "googleAnalyticsTagID": "G-123456789",
                "imageConfig": {
                  "imageName": "myimage",
                  "imageRegistry": "ghcr.io",
                  "imageTag": "latest"
                },
                "status": "READY"
              }
            ]
          }
        },
        "example": {
          "saasPortals": [
            {
              "customDomain": "mycustomdomain.com",
              "customDomainStatus": "READY",
              "detailedNetworkTopology": {
                "r-abcd1234": {
                  "allowedIPRanges": ["0.0.0.0/0"],
                  "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                  "clusterPorts": [3306],
                  "main": true,
                  "networkingType": "PUBLIC",
                  "nodes": [
                    {
                      "availabilityZone": "us-east-2a",
                      "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "healthStatus": "healthy",
                      "id": "primary-0",
                      "ports": [3306],
                      "status": "RUNNING"
                    }
                  ],
                  "privateNetworkCIDR": "10.0.0.2/24",
                  "privateNetworkID": "n-1234abcd",
                  "publiclyAccessible": true,
                  "resourceKey": "saasportal",
                  "resourceName": "SaaS Portal"
                }
              },
              "emailConfig": {
                "smtpFromEmail": "example@gmail.com",
                "smtpHost": "smtp.gmail.com",
                "smtpPassword": "password",
                "smtpPort": 587,
                "smtpUsername": "username"
              },
              "endpoint": "https://saas-portal.example.com",
              "environmentType": "DEV",
              "googleAnalyticsTagID": "G-123456789",
              "imageConfig": {
                "imageName": "myimage",
                "imageRegistry": "ghcr.io",
                "imageTag": "latest"
              },
              "status": "READY"
            },
            {
              "customDomain": "mycustomdomain.com",
              "customDomainStatus": "READY",
              "detailedNetworkTopology": {
                "r-abcd1234": {
                  "allowedIPRanges": ["0.0.0.0/0"],
                  "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                  "clusterPorts": [3306],
                  "main": true,
                  "networkingType": "PUBLIC",
                  "nodes": [
                    {
                      "availabilityZone": "us-east-2a",
                      "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "healthStatus": "healthy",
                      "id": "primary-0",
                      "ports": [3306],
                      "status": "RUNNING"
                    }
                  ],
                  "privateNetworkCIDR": "10.0.0.2/24",
                  "privateNetworkID": "n-1234abcd",
                  "publiclyAccessible": true,
                  "resourceKey": "saasportal",
                  "resourceName": "SaaS Portal"
                }
              },
              "emailConfig": {
                "smtpFromEmail": "example@gmail.com",
                "smtpHost": "smtp.gmail.com",
                "smtpPassword": "password",
                "smtpPort": 587,
                "smtpUsername": "username"
              },
              "endpoint": "https://saas-portal.example.com",
              "environmentType": "DEV",
              "googleAnalyticsTagID": "G-123456789",
              "imageConfig": {
                "imageName": "myimage",
                "imageRegistry": "ghcr.io",
                "imageTag": "latest"
              },
              "status": "READY"
            },
            {
              "customDomain": "mycustomdomain.com",
              "customDomainStatus": "READY",
              "detailedNetworkTopology": {
                "r-abcd1234": {
                  "allowedIPRanges": ["0.0.0.0/0"],
                  "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                  "clusterPorts": [3306],
                  "main": true,
                  "networkingType": "PUBLIC",
                  "nodes": [
                    {
                      "availabilityZone": "us-east-2a",
                      "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                      "healthStatus": "healthy",
                      "id": "primary-0",
                      "ports": [3306],
                      "status": "RUNNING"
                    }
                  ],
                  "privateNetworkCIDR": "10.0.0.2/24",
                  "privateNetworkID": "n-1234abcd",
                  "publiclyAccessible": true,
                  "resourceKey": "saasportal",
                  "resourceName": "SaaS Portal"
                }
              },
              "emailConfig": {
                "smtpFromEmail": "example@gmail.com",
                "smtpHost": "smtp.gmail.com",
                "smtpPassword": "password",
                "smtpPort": 587,
                "smtpUsername": "username"
              },
              "endpoint": "https://saas-portal.example.com",
              "environmentType": "DEV",
              "googleAnalyticsTagID": "G-123456789",
              "imageConfig": {
                "imageName": "myimage",
                "imageRegistry": "ghcr.io",
                "imageTag": "latest"
              },
              "status": "READY"
            }
          ]
        },
        "required": ["saasPortals"]
      },
      "ListServiceAPIsRequest": {
        "type": "object",
        "properties": {
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "u",
            "minLength": 1
          }
        },
        "example": {
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "token": "h"
        },
        "required": ["token", "serviceId", "serviceEnvironmentId"]
      },
      "ListServiceAPIsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Service API",
              "example": "Animi necessitatibus voluptatum esse."
            },
            "description": "The list of service API IDs",
            "example": ["sa-12345678"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use for pagination",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["sa-12345678"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListServiceEnvironmentsRequest": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "rcf",
            "minLength": 1
          }
        },
        "example": {
          "serviceId": "s-12345678",
          "token": "0"
        },
        "required": ["token", "serviceId"]
      },
      "ListServiceEnvironmentsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "description": "The list of service environment IDs",
            "example": ["se-12345678", "se-23456789"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use to retrieve the next page of results",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["se-12345678", "se-23456789"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListServiceModelsRequest": {
        "type": "object",
        "properties": {
          "serviceApiId": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "In placeat."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "h8z",
            "minLength": 1
          }
        },
        "example": {
          "serviceApiId": "sa-12345678",
          "serviceId": "s-12345678",
          "token": "2r"
        },
        "required": ["token", "serviceId", "serviceApiId"]
      },
      "ListServiceModelsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Service Model",
              "example": "Ullam fuga sit magni."
            },
            "description": "The service model IDs",
            "example": ["sm-12345678", "sm-87654321"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use when listing service models",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["sm-12345678", "sm-87654321"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListServiceOfferingsRequest": {
        "type": "object",
        "properties": {
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "orgId": {
            "type": "string",
            "description": "ID of an Org",
            "example": "Aut consequuntur adipisci pariatur vero."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "i",
            "minLength": 1
          },
          "visibility": {
            "type": "string",
            "description": "This parameter is used to configure the visibility of the service control-plane APIs",
            "example": "PUBLIC"
          }
        },
        "example": {
          "environmentType": "DEV",
          "orgId": "org-12345678",
          "token": "h",
          "visibility": "PRIVATE"
        },
        "required": ["token"]
      },
      "ListServiceOfferingsResult": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next request",
            "example": "next-token"
          },
          "serviceIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "description": "The service IDs",
            "example": ["s-12345678", "s-abcdefgh"]
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeServiceOfferingResult"
            },
            "description": "List of services",
            "example": [
              {
                "createdAt": "2019-01-01T00:00:00Z",
                "isDeprecated": false,
                "offerings": [
                  {
                    "assets": {
                      "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                      "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                    },
                    "billingPlans": [
                      {
                        "maxNumberofInstances": 4
                      }
                    ],
                    "productTierName": "Premium",
                    "productTierURLKey": "premium",
                    "resourceParameters": [
                      {
                        "name": "MySQL",
                        "urlKey": "mysql"
                      },
                      {
                        "name": "Redis",
                        "urlKey": "redis"
                      }
                    ],
                    "serviceAPIID": "sa-12345678",
                    "serviceAPIVersion": "v1",
                    "serviceEnvironmentName": "Production",
                    "serviceEnvironmentURLKey": "prod",
                    "serviceEnvironmentVisibility": "PRIVATE",
                    "serviceModelName": "Bring Your Own Account",
                    "serviceModelURLKey": "byoa"
                  },
                  {
                    "productTierName": "Basic",
                    "productTierURLKey": "basic",
                    "resourceParameters": [
                      {
                        "name": "MySQL",
                        "urlKey": "mysql"
                      },
                      {
                        "name": "Redis",
                        "urlKey": "redis"
                      }
                    ],
                    "serviceAPIID": "sa-abcdefgh",
                    "serviceAPIVersion": "v1",
                    "serviceEnvironmentName": "Production",
                    "serviceEnvironmentURLKey": "prod",
                    "serviceEnvironmentVisibility": "PUBLIC",
                    "serviceModelName": "Hosted",
                    "serviceModelURLKey": "hosted"
                  }
                ],
                "serviceDescription": "MySQL is a relational database",
                "serviceId": "s-12345678",
                "serviceName": "MySQL",
                "serviceOrgId": "org-12345678",
                "serviceProviderId": "sp-9zrg9W8Are",
                "serviceProviderName": "Omnistrate, Inc.",
                "serviceURLKey": "mysql"
              },
              {
                "createdAt": "2019-01-01T00:00:00Z",
                "isDeprecated": false,
                "offerings": [
                  {
                    "assets": {
                      "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                      "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                    },
                    "billingPlans": [
                      {
                        "maxNumberofInstances": 4
                      }
                    ],
                    "productTierName": "Premium",
                    "productTierURLKey": "premium",
                    "resourceParameters": [
                      {
                        "name": "MySQL",
                        "urlKey": "mysql"
                      },
                      {
                        "name": "Redis",
                        "urlKey": "redis"
                      }
                    ],
                    "serviceAPIID": "sa-12345678",
                    "serviceAPIVersion": "v1",
                    "serviceEnvironmentName": "Production",
                    "serviceEnvironmentURLKey": "prod",
                    "serviceEnvironmentVisibility": "PRIVATE",
                    "serviceModelName": "Bring Your Own Account",
                    "serviceModelURLKey": "byoa"
                  },
                  {
                    "productTierName": "Basic",
                    "productTierURLKey": "basic",
                    "resourceParameters": [
                      {
                        "name": "MySQL",
                        "urlKey": "mysql"
                      },
                      {
                        "name": "Redis",
                        "urlKey": "redis"
                      }
                    ],
                    "serviceAPIID": "sa-abcdefgh",
                    "serviceAPIVersion": "v1",
                    "serviceEnvironmentName": "Production",
                    "serviceEnvironmentURLKey": "prod",
                    "serviceEnvironmentVisibility": "PUBLIC",
                    "serviceModelName": "Hosted",
                    "serviceModelURLKey": "hosted"
                  }
                ],
                "serviceDescription": "MySQL is a relational database",
                "serviceId": "s-12345678",
                "serviceName": "MySQL",
                "serviceOrgId": "org-12345678",
                "serviceProviderId": "sp-9zrg9W8Are",
                "serviceProviderName": "Omnistrate, Inc.",
                "serviceURLKey": "mysql"
              },
              {
                "createdAt": "2019-01-01T00:00:00Z",
                "isDeprecated": false,
                "offerings": [
                  {
                    "assets": {
                      "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                      "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                    },
                    "billingPlans": [
                      {
                        "maxNumberofInstances": 4
                      }
                    ],
                    "productTierName": "Premium",
                    "productTierURLKey": "premium",
                    "resourceParameters": [
                      {
                        "name": "MySQL",
                        "urlKey": "mysql"
                      },
                      {
                        "name": "Redis",
                        "urlKey": "redis"
                      }
                    ],
                    "serviceAPIID": "sa-12345678",
                    "serviceAPIVersion": "v1",
                    "serviceEnvironmentName": "Production",
                    "serviceEnvironmentURLKey": "prod",
                    "serviceEnvironmentVisibility": "PRIVATE",
                    "serviceModelName": "Bring Your Own Account",
                    "serviceModelURLKey": "byoa"
                  },
                  {
                    "productTierName": "Basic",
                    "productTierURLKey": "basic",
                    "resourceParameters": [
                      {
                        "name": "MySQL",
                        "urlKey": "mysql"
                      },
                      {
                        "name": "Redis",
                        "urlKey": "redis"
                      }
                    ],
                    "serviceAPIID": "sa-abcdefgh",
                    "serviceAPIVersion": "v1",
                    "serviceEnvironmentName": "Production",
                    "serviceEnvironmentURLKey": "prod",
                    "serviceEnvironmentVisibility": "PUBLIC",
                    "serviceModelName": "Hosted",
                    "serviceModelURLKey": "hosted"
                  }
                ],
                "serviceDescription": "MySQL is a relational database",
                "serviceId": "s-12345678",
                "serviceName": "MySQL",
                "serviceOrgId": "org-12345678",
                "serviceProviderId": "sp-9zrg9W8Are",
                "serviceProviderName": "Omnistrate, Inc.",
                "serviceURLKey": "mysql"
              },
              {
                "createdAt": "2019-01-01T00:00:00Z",
                "isDeprecated": false,
                "offerings": [
                  {
                    "assets": {
                      "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                      "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                    },
                    "billingPlans": [
                      {
                        "maxNumberofInstances": 4
                      }
                    ],
                    "productTierName": "Premium",
                    "productTierURLKey": "premium",
                    "resourceParameters": [
                      {
                        "name": "MySQL",
                        "urlKey": "mysql"
                      },
                      {
                        "name": "Redis",
                        "urlKey": "redis"
                      }
                    ],
                    "serviceAPIID": "sa-12345678",
                    "serviceAPIVersion": "v1",
                    "serviceEnvironmentName": "Production",
                    "serviceEnvironmentURLKey": "prod",
                    "serviceEnvironmentVisibility": "PRIVATE",
                    "serviceModelName": "Bring Your Own Account",
                    "serviceModelURLKey": "byoa"
                  },
                  {
                    "productTierName": "Basic",
                    "productTierURLKey": "basic",
                    "resourceParameters": [
                      {
                        "name": "MySQL",
                        "urlKey": "mysql"
                      },
                      {
                        "name": "Redis",
                        "urlKey": "redis"
                      }
                    ],
                    "serviceAPIID": "sa-abcdefgh",
                    "serviceAPIVersion": "v1",
                    "serviceEnvironmentName": "Production",
                    "serviceEnvironmentURLKey": "prod",
                    "serviceEnvironmentVisibility": "PUBLIC",
                    "serviceModelName": "Hosted",
                    "serviceModelURLKey": "hosted"
                  }
                ],
                "serviceDescription": "MySQL is a relational database",
                "serviceId": "s-12345678",
                "serviceName": "MySQL",
                "serviceOrgId": "org-12345678",
                "serviceProviderId": "sp-9zrg9W8Are",
                "serviceProviderName": "Omnistrate, Inc.",
                "serviceURLKey": "mysql"
              }
            ]
          }
        },
        "example": {
          "nextPageToken": "next-token",
          "serviceIds": ["s-12345678", "s-abcdefgh"],
          "services": [
            {
              "createdAt": "2019-01-01T00:00:00Z",
              "isDeprecated": false,
              "offerings": [
                {
                  "assets": {
                    "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                    "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                  },
                  "billingPlans": [
                    {
                      "maxNumberofInstances": 4
                    }
                  ],
                  "productTierName": "Premium",
                  "productTierURLKey": "premium",
                  "resourceParameters": [
                    {
                      "name": "MySQL",
                      "urlKey": "mysql"
                    },
                    {
                      "name": "Redis",
                      "urlKey": "redis"
                    }
                  ],
                  "serviceAPIID": "sa-12345678",
                  "serviceAPIVersion": "v1",
                  "serviceEnvironmentName": "Production",
                  "serviceEnvironmentURLKey": "prod",
                  "serviceEnvironmentVisibility": "PRIVATE",
                  "serviceModelName": "Bring Your Own Account",
                  "serviceModelURLKey": "byoa"
                },
                {
                  "productTierName": "Basic",
                  "productTierURLKey": "basic",
                  "resourceParameters": [
                    {
                      "name": "MySQL",
                      "urlKey": "mysql"
                    },
                    {
                      "name": "Redis",
                      "urlKey": "redis"
                    }
                  ],
                  "serviceAPIID": "sa-abcdefgh",
                  "serviceAPIVersion": "v1",
                  "serviceEnvironmentName": "Production",
                  "serviceEnvironmentURLKey": "prod",
                  "serviceEnvironmentVisibility": "PUBLIC",
                  "serviceModelName": "Hosted",
                  "serviceModelURLKey": "hosted"
                }
              ],
              "serviceDescription": "MySQL is a relational database",
              "serviceId": "s-12345678",
              "serviceName": "MySQL",
              "serviceOrgId": "org-12345678",
              "serviceProviderId": "sp-9zrg9W8Are",
              "serviceProviderName": "Omnistrate, Inc.",
              "serviceURLKey": "mysql"
            },
            {
              "createdAt": "2019-01-01T00:00:00Z",
              "isDeprecated": false,
              "offerings": [
                {
                  "assets": {
                    "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                    "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                  },
                  "billingPlans": [
                    {
                      "maxNumberofInstances": 4
                    }
                  ],
                  "productTierName": "Premium",
                  "productTierURLKey": "premium",
                  "resourceParameters": [
                    {
                      "name": "MySQL",
                      "urlKey": "mysql"
                    },
                    {
                      "name": "Redis",
                      "urlKey": "redis"
                    }
                  ],
                  "serviceAPIID": "sa-12345678",
                  "serviceAPIVersion": "v1",
                  "serviceEnvironmentName": "Production",
                  "serviceEnvironmentURLKey": "prod",
                  "serviceEnvironmentVisibility": "PRIVATE",
                  "serviceModelName": "Bring Your Own Account",
                  "serviceModelURLKey": "byoa"
                },
                {
                  "productTierName": "Basic",
                  "productTierURLKey": "basic",
                  "resourceParameters": [
                    {
                      "name": "MySQL",
                      "urlKey": "mysql"
                    },
                    {
                      "name": "Redis",
                      "urlKey": "redis"
                    }
                  ],
                  "serviceAPIID": "sa-abcdefgh",
                  "serviceAPIVersion": "v1",
                  "serviceEnvironmentName": "Production",
                  "serviceEnvironmentURLKey": "prod",
                  "serviceEnvironmentVisibility": "PUBLIC",
                  "serviceModelName": "Hosted",
                  "serviceModelURLKey": "hosted"
                }
              ],
              "serviceDescription": "MySQL is a relational database",
              "serviceId": "s-12345678",
              "serviceName": "MySQL",
              "serviceOrgId": "org-12345678",
              "serviceProviderId": "sp-9zrg9W8Are",
              "serviceProviderName": "Omnistrate, Inc.",
              "serviceURLKey": "mysql"
            },
            {
              "createdAt": "2019-01-01T00:00:00Z",
              "isDeprecated": false,
              "offerings": [
                {
                  "assets": {
                    "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
                    "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
                  },
                  "billingPlans": [
                    {
                      "maxNumberofInstances": 4
                    }
                  ],
                  "productTierName": "Premium",
                  "productTierURLKey": "premium",
                  "resourceParameters": [
                    {
                      "name": "MySQL",
                      "urlKey": "mysql"
                    },
                    {
                      "name": "Redis",
                      "urlKey": "redis"
                    }
                  ],
                  "serviceAPIID": "sa-12345678",
                  "serviceAPIVersion": "v1",
                  "serviceEnvironmentName": "Production",
                  "serviceEnvironmentURLKey": "prod",
                  "serviceEnvironmentVisibility": "PRIVATE",
                  "serviceModelName": "Bring Your Own Account",
                  "serviceModelURLKey": "byoa"
                },
                {
                  "productTierName": "Basic",
                  "productTierURLKey": "basic",
                  "resourceParameters": [
                    {
                      "name": "MySQL",
                      "urlKey": "mysql"
                    },
                    {
                      "name": "Redis",
                      "urlKey": "redis"
                    }
                  ],
                  "serviceAPIID": "sa-abcdefgh",
                  "serviceAPIVersion": "v1",
                  "serviceEnvironmentName": "Production",
                  "serviceEnvironmentURLKey": "prod",
                  "serviceEnvironmentVisibility": "PUBLIC",
                  "serviceModelName": "Hosted",
                  "serviceModelURLKey": "hosted"
                }
              ],
              "serviceDescription": "MySQL is a relational database",
              "serviceId": "s-12345678",
              "serviceName": "MySQL",
              "serviceOrgId": "org-12345678",
              "serviceProviderId": "sp-9zrg9W8Are",
              "serviceProviderName": "Omnistrate, Inc.",
              "serviceURLKey": "mysql"
            }
          ]
        },
        "required": ["serviceIds"]
      },
      "ListServicePlansRequest": {
        "type": "object",
        "properties": {
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "yd",
            "minLength": 1
          }
        },
        "example": {
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "token": "7j1"
        },
        "required": ["token", "serviceId", "serviceEnvironmentId"]
      },
      "ListServicePlansResult": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next page",
            "example": "next-token"
          },
          "servicePlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetServicePlanResult"
            },
            "description": "List of service plans",
            "example": [
              {
                "AutoApproveSubscription": false,
                "accountConfigIds": ["ac-12345678", "ac-23456789"],
                "activeAccountConfigIds": {
                  "aws": "ac-12345678",
                  "gcp": "ac-23456789"
                },
                "apiVersion": "v1",
                "awsRegions": ["us-east-2", "ca-central-1"],
                "deploymentConfigId": "dc-12345678",
                "gcpRegions": ["us-central1"],
                "hasPendingChanges": true,
                "isProductTierDisabled": true,
                "latestMajorVersion": "3.0",
                "modelType": "CUSTOMER_HOSTED",
                "productTierDescription": "A premium product tier",
                "productTierDocumentation": "Any documentation",
                "productTierFeatures": {
                  "BILLING": false,
                  "LOGS": true,
                  "METRICS": false
                },
                "productTierId": "pt-12345678",
                "productTierKey": "premium",
                "productTierName": "Premium",
                "productTierPlanDescription": "A premium plan",
                "productTierPricing": {
                  "price1": "value1"
                },
                "productTierSupport": "Any support",
                "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
                "serviceApiId": "sa-12345678",
                "serviceEnvironmentId": "se-12345678",
                "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                "serviceModelFeatures": [
                  {
                    "configuration": {
                      "status": "ON"
                    },
                    "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                  },
                  {
                    "configuration": {
                      "status": "ON"
                    },
                    "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                  },
                  {
                    "configuration": {
                      "status": "ON"
                    },
                    "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                  }
                ],
                "serviceModelId": "sm-12345678",
                "serviceModelName": "MySQL multi-writer service hosted model",
                "tierType": "OMNISTRATE_DEDICATED_TENANCY",
                "versionSetStatus": "Preferred|Active|Deprecated|Pending"
              },
              {
                "AutoApproveSubscription": false,
                "accountConfigIds": ["ac-12345678", "ac-23456789"],
                "activeAccountConfigIds": {
                  "aws": "ac-12345678",
                  "gcp": "ac-23456789"
                },
                "apiVersion": "v1",
                "awsRegions": ["us-east-2", "ca-central-1"],
                "deploymentConfigId": "dc-12345678",
                "gcpRegions": ["us-central1"],
                "hasPendingChanges": true,
                "isProductTierDisabled": true,
                "latestMajorVersion": "3.0",
                "modelType": "CUSTOMER_HOSTED",
                "productTierDescription": "A premium product tier",
                "productTierDocumentation": "Any documentation",
                "productTierFeatures": {
                  "BILLING": false,
                  "LOGS": true,
                  "METRICS": false
                },
                "productTierId": "pt-12345678",
                "productTierKey": "premium",
                "productTierName": "Premium",
                "productTierPlanDescription": "A premium plan",
                "productTierPricing": {
                  "price1": "value1"
                },
                "productTierSupport": "Any support",
                "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
                "serviceApiId": "sa-12345678",
                "serviceEnvironmentId": "se-12345678",
                "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                "serviceModelFeatures": [
                  {
                    "configuration": {
                      "status": "ON"
                    },
                    "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                  },
                  {
                    "configuration": {
                      "status": "ON"
                    },
                    "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                  },
                  {
                    "configuration": {
                      "status": "ON"
                    },
                    "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                  }
                ],
                "serviceModelId": "sm-12345678",
                "serviceModelName": "MySQL multi-writer service hosted model",
                "tierType": "OMNISTRATE_DEDICATED_TENANCY",
                "versionSetStatus": "Preferred|Active|Deprecated|Pending"
              },
              {
                "AutoApproveSubscription": false,
                "accountConfigIds": ["ac-12345678", "ac-23456789"],
                "activeAccountConfigIds": {
                  "aws": "ac-12345678",
                  "gcp": "ac-23456789"
                },
                "apiVersion": "v1",
                "awsRegions": ["us-east-2", "ca-central-1"],
                "deploymentConfigId": "dc-12345678",
                "gcpRegions": ["us-central1"],
                "hasPendingChanges": true,
                "isProductTierDisabled": true,
                "latestMajorVersion": "3.0",
                "modelType": "CUSTOMER_HOSTED",
                "productTierDescription": "A premium product tier",
                "productTierDocumentation": "Any documentation",
                "productTierFeatures": {
                  "BILLING": false,
                  "LOGS": true,
                  "METRICS": false
                },
                "productTierId": "pt-12345678",
                "productTierKey": "premium",
                "productTierName": "Premium",
                "productTierPlanDescription": "A premium plan",
                "productTierPricing": {
                  "price1": "value1"
                },
                "productTierSupport": "Any support",
                "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
                "serviceApiId": "sa-12345678",
                "serviceEnvironmentId": "se-12345678",
                "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                "serviceModelFeatures": [
                  {
                    "configuration": {
                      "status": "ON"
                    },
                    "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                  },
                  {
                    "configuration": {
                      "status": "ON"
                    },
                    "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                  },
                  {
                    "configuration": {
                      "status": "ON"
                    },
                    "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                  }
                ],
                "serviceModelId": "sm-12345678",
                "serviceModelName": "MySQL multi-writer service hosted model",
                "tierType": "OMNISTRATE_DEDICATED_TENANCY",
                "versionSetStatus": "Preferred|Active|Deprecated|Pending"
              }
            ]
          }
        },
        "example": {
          "nextPageToken": "next-token",
          "servicePlans": [
            {
              "AutoApproveSubscription": false,
              "accountConfigIds": ["ac-12345678", "ac-23456789"],
              "activeAccountConfigIds": {
                "aws": "ac-12345678",
                "gcp": "ac-23456789"
              },
              "apiVersion": "v1",
              "awsRegions": ["us-east-2", "ca-central-1"],
              "deploymentConfigId": "dc-12345678",
              "gcpRegions": ["us-central1"],
              "hasPendingChanges": true,
              "isProductTierDisabled": true,
              "latestMajorVersion": "3.0",
              "modelType": "CUSTOMER_HOSTED",
              "productTierDescription": "A premium product tier",
              "productTierDocumentation": "Any documentation",
              "productTierFeatures": {
                "BILLING": false,
                "LOGS": true,
                "METRICS": false
              },
              "productTierId": "pt-12345678",
              "productTierKey": "premium",
              "productTierName": "Premium",
              "productTierPlanDescription": "A premium plan",
              "productTierPricing": {
                "price1": "value1"
              },
              "productTierSupport": "Any support",
              "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
              "serviceApiId": "sa-12345678",
              "serviceEnvironmentId": "se-12345678",
              "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
              "serviceModelFeatures": [
                {
                  "configuration": {
                    "status": "ON"
                  },
                  "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                },
                {
                  "configuration": {
                    "status": "ON"
                  },
                  "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                },
                {
                  "configuration": {
                    "status": "ON"
                  },
                  "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                }
              ],
              "serviceModelId": "sm-12345678",
              "serviceModelName": "MySQL multi-writer service hosted model",
              "tierType": "OMNISTRATE_DEDICATED_TENANCY",
              "versionSetStatus": "Preferred|Active|Deprecated|Pending"
            },
            {
              "AutoApproveSubscription": false,
              "accountConfigIds": ["ac-12345678", "ac-23456789"],
              "activeAccountConfigIds": {
                "aws": "ac-12345678",
                "gcp": "ac-23456789"
              },
              "apiVersion": "v1",
              "awsRegions": ["us-east-2", "ca-central-1"],
              "deploymentConfigId": "dc-12345678",
              "gcpRegions": ["us-central1"],
              "hasPendingChanges": true,
              "isProductTierDisabled": true,
              "latestMajorVersion": "3.0",
              "modelType": "CUSTOMER_HOSTED",
              "productTierDescription": "A premium product tier",
              "productTierDocumentation": "Any documentation",
              "productTierFeatures": {
                "BILLING": false,
                "LOGS": true,
                "METRICS": false
              },
              "productTierId": "pt-12345678",
              "productTierKey": "premium",
              "productTierName": "Premium",
              "productTierPlanDescription": "A premium plan",
              "productTierPricing": {
                "price1": "value1"
              },
              "productTierSupport": "Any support",
              "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
              "serviceApiId": "sa-12345678",
              "serviceEnvironmentId": "se-12345678",
              "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
              "serviceModelFeatures": [
                {
                  "configuration": {
                    "status": "ON"
                  },
                  "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                },
                {
                  "configuration": {
                    "status": "ON"
                  },
                  "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                },
                {
                  "configuration": {
                    "status": "ON"
                  },
                  "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
                }
              ],
              "serviceModelId": "sm-12345678",
              "serviceModelName": "MySQL multi-writer service hosted model",
              "tierType": "OMNISTRATE_DEDICATED_TENANCY",
              "versionSetStatus": "Preferred|Active|Deprecated|Pending"
            }
          ]
        },
        "required": ["servicePlans"]
      },
      "ListServiceProviderEvents": {
        "type": "object",
        "properties": {
          "endDate": {
            "type": "string",
            "description": "End time of the window in ISO 8601 format. If omitted, the filter is open-ended at the start.",
            "example": "2024-01-01T10:00:00Z",
            "format": "date-time"
          },
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The type of the service provider specific event",
              "example": "UnhealthyInstance|FailedDeployment|ScaleOut|UserSignUp|UserSubscription"
            },
            "description": "The event types to filter by",
            "example": [
              "UnhealthyInstance|FailedDeployment|ScaleOut|UserSignUp|UserSubscription",
              "UnhealthyInstance|FailedDeployment|ScaleOut|UserSignUp|UserSubscription"
            ]
          },
          "instanceID": {
            "type": "string",
            "description": "ID of a Resource Instance",
            "example": "instance-12345678"
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use for pagination",
            "example": "token"
          },
          "pageSize": {
            "type": "integer",
            "description": "The number of resources to return per page",
            "example": 10,
            "format": "int64"
          },
          "productTierID": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Magni porro."
          },
          "serviceEnvironmentID": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceID": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "startDate": {
            "type": "string",
            "description": "Start time of the window in ISO 8601 format. If omitted, the filter is open-ended at the start.",
            "example": "2023-01-01T10:00:00Z",
            "format": "date-time"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "4h",
            "minLength": 1
          }
        },
        "example": {
          "endDate": "2024-01-01T10:00:00Z",
          "environmentType": "PROD|PRIVATE|CANARY|STAGING|QA|DEV",
          "eventTypes": [
            "UnhealthyInstance|FailedDeployment|ScaleOut|UserSignUp|UserSubscription",
            "UnhealthyInstance|FailedDeployment|ScaleOut|UserSignUp|UserSubscription"
          ],
          "instanceID": "instance-12345678",
          "nextPageToken": "token",
          "pageSize": 10,
          "productTierID": "Beatae beatae.",
          "serviceEnvironmentID": "se-123456",
          "serviceID": "s-123456",
          "startDate": "2023-01-01T10:00:00Z",
          "token": "wj"
        },
        "required": ["token"]
      },
      "ListServiceProviderEventsResult": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceProviderEvent"
            },
            "description": "List of events",
            "example": [
              {
                "alertType": "Alarm",
                "eventCategory": "InstanceEvent",
                "eventID": "e-123456",
                "eventPayload": {
                  "Esse reiciendis.": "Libero nihil.",
                  "Rerum eligendi.": "Molestiae maxime aut."
                },
                "eventType": "UnhealthyInstance",
                "expiryTime": "2023-01-10T00:00:00Z",
                "instanceID": "instance-12345678",
                "planVersion": "v1.0",
                "priority": "Critical",
                "resourceName": "Resource-123",
                "scope": "ServiceProvider",
                "serviceEnvironmentID": "se-123456",
                "serviceID": "s-123456",
                "serviceName": "Service-123",
                "servicePlanName": "Basic Plan",
                "time": "2023-01-10T00:00:00Z"
              },
              {
                "alertType": "Alarm",
                "eventCategory": "InstanceEvent",
                "eventID": "e-123456",
                "eventPayload": {
                  "Esse reiciendis.": "Libero nihil.",
                  "Rerum eligendi.": "Molestiae maxime aut."
                },
                "eventType": "UnhealthyInstance",
                "expiryTime": "2023-01-10T00:00:00Z",
                "instanceID": "instance-12345678",
                "planVersion": "v1.0",
                "priority": "Critical",
                "resourceName": "Resource-123",
                "scope": "ServiceProvider",
                "serviceEnvironmentID": "se-123456",
                "serviceID": "s-123456",
                "serviceName": "Service-123",
                "servicePlanName": "Basic Plan",
                "time": "2023-01-10T00:00:00Z"
              },
              {
                "alertType": "Alarm",
                "eventCategory": "InstanceEvent",
                "eventID": "e-123456",
                "eventPayload": {
                  "Esse reiciendis.": "Libero nihil.",
                  "Rerum eligendi.": "Molestiae maxime aut."
                },
                "eventType": "UnhealthyInstance",
                "expiryTime": "2023-01-10T00:00:00Z",
                "instanceID": "instance-12345678",
                "planVersion": "v1.0",
                "priority": "Critical",
                "resourceName": "Resource-123",
                "scope": "ServiceProvider",
                "serviceEnvironmentID": "se-123456",
                "serviceID": "s-123456",
                "serviceName": "Service-123",
                "servicePlanName": "Basic Plan",
                "time": "2023-01-10T00:00:00Z"
              },
              {
                "alertType": "Alarm",
                "eventCategory": "InstanceEvent",
                "eventID": "e-123456",
                "eventPayload": {
                  "Esse reiciendis.": "Libero nihil.",
                  "Rerum eligendi.": "Molestiae maxime aut."
                },
                "eventType": "UnhealthyInstance",
                "expiryTime": "2023-01-10T00:00:00Z",
                "instanceID": "instance-12345678",
                "planVersion": "v1.0",
                "priority": "Critical",
                "resourceName": "Resource-123",
                "scope": "ServiceProvider",
                "serviceEnvironmentID": "se-123456",
                "serviceID": "s-123456",
                "serviceName": "Service-123",
                "servicePlanName": "Basic Plan",
                "time": "2023-01-10T00:00:00Z"
              }
            ]
          },
          "eventsSummary": {
            "$ref": "#/components/schemas/ServiceProviderEventSummary"
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use for pagination",
            "example": "token"
          }
        },
        "example": {
          "events": [
            {
              "alertType": "Alarm",
              "eventCategory": "InstanceEvent",
              "eventID": "e-123456",
              "eventPayload": {
                "Esse reiciendis.": "Libero nihil.",
                "Rerum eligendi.": "Molestiae maxime aut."
              },
              "eventType": "UnhealthyInstance",
              "expiryTime": "2023-01-10T00:00:00Z",
              "instanceID": "instance-12345678",
              "planVersion": "v1.0",
              "priority": "Critical",
              "resourceName": "Resource-123",
              "scope": "ServiceProvider",
              "serviceEnvironmentID": "se-123456",
              "serviceID": "s-123456",
              "serviceName": "Service-123",
              "servicePlanName": "Basic Plan",
              "time": "2023-01-10T00:00:00Z"
            },
            {
              "alertType": "Alarm",
              "eventCategory": "InstanceEvent",
              "eventID": "e-123456",
              "eventPayload": {
                "Esse reiciendis.": "Libero nihil.",
                "Rerum eligendi.": "Molestiae maxime aut."
              },
              "eventType": "UnhealthyInstance",
              "expiryTime": "2023-01-10T00:00:00Z",
              "instanceID": "instance-12345678",
              "planVersion": "v1.0",
              "priority": "Critical",
              "resourceName": "Resource-123",
              "scope": "ServiceProvider",
              "serviceEnvironmentID": "se-123456",
              "serviceID": "s-123456",
              "serviceName": "Service-123",
              "servicePlanName": "Basic Plan",
              "time": "2023-01-10T00:00:00Z"
            },
            {
              "alertType": "Alarm",
              "eventCategory": "InstanceEvent",
              "eventID": "e-123456",
              "eventPayload": {
                "Esse reiciendis.": "Libero nihil.",
                "Rerum eligendi.": "Molestiae maxime aut."
              },
              "eventType": "UnhealthyInstance",
              "expiryTime": "2023-01-10T00:00:00Z",
              "instanceID": "instance-12345678",
              "planVersion": "v1.0",
              "priority": "Critical",
              "resourceName": "Resource-123",
              "scope": "ServiceProvider",
              "serviceEnvironmentID": "se-123456",
              "serviceID": "s-123456",
              "serviceName": "Service-123",
              "servicePlanName": "Basic Plan",
              "time": "2023-01-10T00:00:00Z"
            },
            {
              "alertType": "Alarm",
              "eventCategory": "InstanceEvent",
              "eventID": "e-123456",
              "eventPayload": {
                "Esse reiciendis.": "Libero nihil.",
                "Rerum eligendi.": "Molestiae maxime aut."
              },
              "eventType": "UnhealthyInstance",
              "expiryTime": "2023-01-10T00:00:00Z",
              "instanceID": "instance-12345678",
              "planVersion": "v1.0",
              "priority": "Critical",
              "resourceName": "Resource-123",
              "scope": "ServiceProvider",
              "serviceEnvironmentID": "se-123456",
              "serviceID": "s-123456",
              "serviceName": "Service-123",
              "servicePlanName": "Basic Plan",
              "time": "2023-01-10T00:00:00Z"
            }
          ],
          "eventsSummary": {
            "eventsSummary": {
              "FailedDeployment": 1,
              "UnhealthyInstance": 2
            }
          },
          "nextPageToken": "token"
        },
        "required": ["events", "eventsSummary"]
      },
      "ListServiceResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Service",
              "example": "s-123456"
            },
            "description": "List of service IDs",
            "example": ["s-12345678", "s-abcdefgh", "s-1234efgh"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to retrieve the next page of results",
            "example": "next-token"
          },
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeServiceResult"
            },
            "description": "List of services",
            "example": [
              {
                "createdAt": "2019-01-01T00:00:00Z",
                "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                "id": "s-12345678",
                "key": "mysql",
                "name": "MySQL multi-writer service",
                "roleType": "admin",
                "serviceEnvironments": [
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  },
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  },
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  },
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  }
                ],
                "serviceLogoURL": "Deleniti et enim autem sunt.",
                "serviceProviderID": "sp-12345678",
                "serviceProviderName": "Omnistrate, Inc."
              },
              {
                "createdAt": "2019-01-01T00:00:00Z",
                "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                "id": "s-12345678",
                "key": "mysql",
                "name": "MySQL multi-writer service",
                "roleType": "admin",
                "serviceEnvironments": [
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  },
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  },
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  },
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  }
                ],
                "serviceLogoURL": "Deleniti et enim autem sunt.",
                "serviceProviderID": "sp-12345678",
                "serviceProviderName": "Omnistrate, Inc."
              },
              {
                "createdAt": "2019-01-01T00:00:00Z",
                "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                "id": "s-12345678",
                "key": "mysql",
                "name": "MySQL multi-writer service",
                "roleType": "admin",
                "serviceEnvironments": [
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  },
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  },
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  },
                  {
                    "id": "se-12345678",
                    "name": "dev",
                    "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                    "saasPortalStatus": "READY",
                    "saasPortalUrl": "https://saas-portal.example.com",
                    "servicePlans": [
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      },
                      {
                        "description": "A Basic product tier",
                        "modelType": "CUSTOMER_HOSTED",
                        "name": "Basic",
                        "productTierID": "pt-12345678",
                        "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                      }
                    ],
                    "sourceEnvironmentID": "se-12345678",
                    "sourceEnvironmentName": "dev",
                    "type": "DEV",
                    "visibility": "private"
                  }
                ],
                "serviceLogoURL": "Deleniti et enim autem sunt.",
                "serviceProviderID": "sp-12345678",
                "serviceProviderName": "Omnistrate, Inc."
              }
            ]
          }
        },
        "example": {
          "ids": ["s-12345678", "s-abcdefgh", "s-1234efgh"],
          "nextPageToken": "next-token",
          "services": [
            {
              "createdAt": "2019-01-01T00:00:00Z",
              "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
              "id": "s-12345678",
              "key": "mysql",
              "name": "MySQL multi-writer service",
              "roleType": "admin",
              "serviceEnvironments": [
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                }
              ],
              "serviceLogoURL": "Deleniti et enim autem sunt.",
              "serviceProviderID": "sp-12345678",
              "serviceProviderName": "Omnistrate, Inc."
            },
            {
              "createdAt": "2019-01-01T00:00:00Z",
              "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
              "id": "s-12345678",
              "key": "mysql",
              "name": "MySQL multi-writer service",
              "roleType": "admin",
              "serviceEnvironments": [
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                }
              ],
              "serviceLogoURL": "Deleniti et enim autem sunt.",
              "serviceProviderID": "sp-12345678",
              "serviceProviderName": "Omnistrate, Inc."
            },
            {
              "createdAt": "2019-01-01T00:00:00Z",
              "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
              "id": "s-12345678",
              "key": "mysql",
              "name": "MySQL multi-writer service",
              "roleType": "admin",
              "serviceEnvironments": [
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                }
              ],
              "serviceLogoURL": "Deleniti et enim autem sunt.",
              "serviceProviderID": "sp-12345678",
              "serviceProviderName": "Omnistrate, Inc."
            },
            {
              "createdAt": "2019-01-01T00:00:00Z",
              "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
              "id": "s-12345678",
              "key": "mysql",
              "name": "MySQL multi-writer service",
              "roleType": "admin",
              "serviceEnvironments": [
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                },
                {
                  "id": "se-12345678",
                  "name": "dev",
                  "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
                  "saasPortalStatus": "READY",
                  "saasPortalUrl": "https://saas-portal.example.com",
                  "servicePlans": [
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    },
                    {
                      "description": "A Basic product tier",
                      "modelType": "CUSTOMER_HOSTED",
                      "name": "Basic",
                      "productTierID": "pt-12345678",
                      "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                    }
                  ],
                  "sourceEnvironmentID": "se-12345678",
                  "sourceEnvironmentName": "dev",
                  "type": "DEV",
                  "visibility": "private"
                }
              ],
              "serviceLogoURL": "Deleniti et enim autem sunt.",
              "serviceProviderID": "sp-12345678",
              "serviceProviderName": "Omnistrate, Inc."
            }
          ]
        },
        "required": ["ids"]
      },
      "ListServicesOrchestrationsRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "ci8",
            "minLength": 1
          }
        },
        "example": {
          "token": "t"
        },
        "required": ["token"]
      },
      "ListServicesOrchestrationsResult": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/DescribeServicesOrchestrationResult"
        },
        "description": "List of service orchestrations",
        "example": [
          {
            "ServicesTopology": [
              {
                "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                "instanceDeploymentAlias": "instanceDeploymentAlias",
                "instanceId": "i-12345678",
                "serviceId": "s-12345678",
                "status": "PENDING",
                "statusMessage": "Creating deployment",
                "subscriptionId": "Sunt magnam aut perspiciatis saepe."
              },
              {
                "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                "instanceDeploymentAlias": "instanceDeploymentAlias",
                "instanceId": "i-12345678",
                "serviceId": "s-12345678",
                "status": "PENDING",
                "statusMessage": "Creating deployment",
                "subscriptionId": "Sunt magnam aut perspiciatis saepe."
              },
              {
                "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                "instanceDeploymentAlias": "instanceDeploymentAlias",
                "instanceId": "i-12345678",
                "serviceId": "s-12345678",
                "status": "PENDING",
                "statusMessage": "Creating deployment",
                "subscriptionId": "Sunt magnam aut perspiciatis saepe."
              }
            ],
            "createdAt": "2021-01-01T00:00:00Z",
            "id": "so-12345678",
            "orchestrationFailedReason": "Invalid DSL",
            "resultParams": {
              "param1": "value1",
              "param2": "value2"
            },
            "status": "PENDING",
            "updatedAt": "2021-01-01T00:00:00Z"
          },
          {
            "ServicesTopology": [
              {
                "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                "instanceDeploymentAlias": "instanceDeploymentAlias",
                "instanceId": "i-12345678",
                "serviceId": "s-12345678",
                "status": "PENDING",
                "statusMessage": "Creating deployment",
                "subscriptionId": "Sunt magnam aut perspiciatis saepe."
              },
              {
                "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                "instanceDeploymentAlias": "instanceDeploymentAlias",
                "instanceId": "i-12345678",
                "serviceId": "s-12345678",
                "status": "PENDING",
                "statusMessage": "Creating deployment",
                "subscriptionId": "Sunt magnam aut perspiciatis saepe."
              },
              {
                "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
                "instanceDeploymentAlias": "instanceDeploymentAlias",
                "instanceId": "i-12345678",
                "serviceId": "s-12345678",
                "status": "PENDING",
                "statusMessage": "Creating deployment",
                "subscriptionId": "Sunt magnam aut perspiciatis saepe."
              }
            ],
            "createdAt": "2021-01-01T00:00:00Z",
            "id": "so-12345678",
            "orchestrationFailedReason": "Invalid DSL",
            "resultParams": {
              "param1": "value1",
              "param2": "value2"
            },
            "status": "PENDING",
            "updatedAt": "2021-01-01T00:00:00Z"
          }
        ]
      },
      "ListStorageConfigsRequest": {
        "type": "object",
        "properties": {
          "managed": {
            "type": "boolean",
            "description": "Is storage config managed by omnistrate",
            "example": false
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "vk2",
            "minLength": 1
          }
        },
        "example": {
          "managed": false,
          "serviceId": "s-12345678",
          "token": "xu0"
        },
        "required": ["token", "serviceId"]
      },
      "ListStorageConfigsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Storage Config",
              "example": "Esse similique maxime id doloribus nisi."
            },
            "description": "List of storage config IDs",
            "example": ["sc-12345678"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use to get the next page of results",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["sc-12345678"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListStorageVolumeConfigsRequest": {
        "type": "object",
        "properties": {
          "managed": {
            "type": "boolean",
            "description": "Is storage volume config managed by omnistrate",
            "example": false
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "equ",
            "minLength": 1
          }
        },
        "example": {
          "managed": false,
          "serviceId": "s-12345678",
          "token": "t"
        },
        "required": ["token", "serviceId"]
      },
      "ListStorageVolumeConfigsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Storage Volume Config",
              "example": "Accusamus sed fugiat est asperiores."
            },
            "description": "The storage volume config ids to list",
            "example": ["svc-12345678"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use for pagination",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["svc-12345678"],
          "nextPageToken": "next-token"
        },
        "required": ["ids"]
      },
      "ListSubscriptionRequestsRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the subscription request",
            "example": "PENDING|APPROVED|DENIED|CANCELLED"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "ov",
            "minLength": 1
          }
        },
        "example": {
          "status": "PENDING",
          "token": "hz"
        },
        "required": ["token"]
      },
      "ListSubscriptionRequestsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Subscription Request",
              "example": "Velit ut sunt eligendi qui omnis."
            },
            "description": "List of subscription request IDs",
            "example": ["subr-12345678", "subr-abcdefgh", "subr-1234efgh"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use when listing subscription requests",
            "example": "next-token"
          },
          "subscriptionRequests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeSubscriptionRequestResult"
            },
            "description": "List of subscription requests",
            "example": [
              {
                "createdAt": "2019-01-01T00:00:00Z",
                "id": "subr-12345678",
                "productTierId": "pt-12345678",
                "productTierName": "Omnistrate Multi Tenancy",
                "rootUserEmail": "abc@gmail.com",
                "rootUserId": "org-12345678",
                "rootUserName": "John Doe",
                "serviceId": "s-12345678",
                "serviceLogoURL": "Dolor assumenda ut error.",
                "serviceName": "MySQL multi-writer service",
                "status": "PENDING",
                "updatedAt": "2019-01-01T00:00:00Z",
                "updatedByUserId": "user-12345678",
                "updatedByUserName": "John Doe"
              },
              {
                "createdAt": "2019-01-01T00:00:00Z",
                "id": "subr-12345678",
                "productTierId": "pt-12345678",
                "productTierName": "Omnistrate Multi Tenancy",
                "rootUserEmail": "abc@gmail.com",
                "rootUserId": "org-12345678",
                "rootUserName": "John Doe",
                "serviceId": "s-12345678",
                "serviceLogoURL": "Dolor assumenda ut error.",
                "serviceName": "MySQL multi-writer service",
                "status": "PENDING",
                "updatedAt": "2019-01-01T00:00:00Z",
                "updatedByUserId": "user-12345678",
                "updatedByUserName": "John Doe"
              },
              {
                "createdAt": "2019-01-01T00:00:00Z",
                "id": "subr-12345678",
                "productTierId": "pt-12345678",
                "productTierName": "Omnistrate Multi Tenancy",
                "rootUserEmail": "abc@gmail.com",
                "rootUserId": "org-12345678",
                "rootUserName": "John Doe",
                "serviceId": "s-12345678",
                "serviceLogoURL": "Dolor assumenda ut error.",
                "serviceName": "MySQL multi-writer service",
                "status": "PENDING",
                "updatedAt": "2019-01-01T00:00:00Z",
                "updatedByUserId": "user-12345678",
                "updatedByUserName": "John Doe"
              }
            ]
          }
        },
        "example": {
          "ids": ["subr-12345678", "subr-abcdefgh", "subr-1234efgh"],
          "nextPageToken": "next-token",
          "subscriptionRequests": [
            {
              "createdAt": "2019-01-01T00:00:00Z",
              "id": "subr-12345678",
              "productTierId": "pt-12345678",
              "productTierName": "Omnistrate Multi Tenancy",
              "rootUserEmail": "abc@gmail.com",
              "rootUserId": "org-12345678",
              "rootUserName": "John Doe",
              "serviceId": "s-12345678",
              "serviceLogoURL": "Dolor assumenda ut error.",
              "serviceName": "MySQL multi-writer service",
              "status": "PENDING",
              "updatedAt": "2019-01-01T00:00:00Z",
              "updatedByUserId": "user-12345678",
              "updatedByUserName": "John Doe"
            },
            {
              "createdAt": "2019-01-01T00:00:00Z",
              "id": "subr-12345678",
              "productTierId": "pt-12345678",
              "productTierName": "Omnistrate Multi Tenancy",
              "rootUserEmail": "abc@gmail.com",
              "rootUserId": "org-12345678",
              "rootUserName": "John Doe",
              "serviceId": "s-12345678",
              "serviceLogoURL": "Dolor assumenda ut error.",
              "serviceName": "MySQL multi-writer service",
              "status": "PENDING",
              "updatedAt": "2019-01-01T00:00:00Z",
              "updatedByUserId": "user-12345678",
              "updatedByUserName": "John Doe"
            }
          ]
        },
        "required": ["ids"]
      },
      "ListSubscriptionsRequest": {
        "type": "object",
        "properties": {
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "cfc",
            "minLength": 1
          }
        },
        "example": {
          "environmentType": "DEV",
          "serviceId": "service-12345678",
          "token": "8qy"
        },
        "required": ["token"]
      },
      "ListSubscriptionsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Subscription",
              "example": "In expedita omnis iste."
            },
            "description": "List of subscription IDs",
            "example": ["sub-12345678", "sub-abcdefgh", "sub-1234efgh"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "The next token to use when listing subscriptions",
            "example": "next-token"
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescribeSubscriptionResult"
            },
            "description": "List of subscriptions",
            "example": [
              {
                "accountConfigIdentityId": "org-12345678",
                "cloudProviderNames": ["aws", "gcp"],
                "createdAt": "2019-01-01T00:00:00Z",
                "defaultSubscription": true,
                "id": "sub-12345678",
                "productTierId": "pt-12345678",
                "productTierName": "Omnistrate Multi Tenancy",
                "roleType": "root",
                "rootUserId": "user-12345678",
                "serviceId": "s-12345678",
                "serviceLogoURL": "Iusto quis mollitia voluptates ratione.",
                "serviceName": "MySQL multi-writer service",
                "serviceOrgId": "org-12345678",
                "serviceOrgName": "Omnistrate",
                "status": "ACTIVE",
                "subscriptionOwnerName": "John Doe"
              },
              {
                "accountConfigIdentityId": "org-12345678",
                "cloudProviderNames": ["aws", "gcp"],
                "createdAt": "2019-01-01T00:00:00Z",
                "defaultSubscription": true,
                "id": "sub-12345678",
                "productTierId": "pt-12345678",
                "productTierName": "Omnistrate Multi Tenancy",
                "roleType": "root",
                "rootUserId": "user-12345678",
                "serviceId": "s-12345678",
                "serviceLogoURL": "Iusto quis mollitia voluptates ratione.",
                "serviceName": "MySQL multi-writer service",
                "serviceOrgId": "org-12345678",
                "serviceOrgName": "Omnistrate",
                "status": "ACTIVE",
                "subscriptionOwnerName": "John Doe"
              },
              {
                "accountConfigIdentityId": "org-12345678",
                "cloudProviderNames": ["aws", "gcp"],
                "createdAt": "2019-01-01T00:00:00Z",
                "defaultSubscription": true,
                "id": "sub-12345678",
                "productTierId": "pt-12345678",
                "productTierName": "Omnistrate Multi Tenancy",
                "roleType": "root",
                "rootUserId": "user-12345678",
                "serviceId": "s-12345678",
                "serviceLogoURL": "Iusto quis mollitia voluptates ratione.",
                "serviceName": "MySQL multi-writer service",
                "serviceOrgId": "org-12345678",
                "serviceOrgName": "Omnistrate",
                "status": "ACTIVE",
                "subscriptionOwnerName": "John Doe"
              }
            ]
          }
        },
        "example": {
          "ids": ["sub-12345678", "sub-abcdefgh", "sub-1234efgh"],
          "nextPageToken": "next-token",
          "subscriptions": [
            {
              "accountConfigIdentityId": "org-12345678",
              "cloudProviderNames": ["aws", "gcp"],
              "createdAt": "2019-01-01T00:00:00Z",
              "defaultSubscription": true,
              "id": "sub-12345678",
              "productTierId": "pt-12345678",
              "productTierName": "Omnistrate Multi Tenancy",
              "roleType": "root",
              "rootUserId": "user-12345678",
              "serviceId": "s-12345678",
              "serviceLogoURL": "Iusto quis mollitia voluptates ratione.",
              "serviceName": "MySQL multi-writer service",
              "serviceOrgId": "org-12345678",
              "serviceOrgName": "Omnistrate",
              "status": "ACTIVE",
              "subscriptionOwnerName": "John Doe"
            },
            {
              "accountConfigIdentityId": "org-12345678",
              "cloudProviderNames": ["aws", "gcp"],
              "createdAt": "2019-01-01T00:00:00Z",
              "defaultSubscription": true,
              "id": "sub-12345678",
              "productTierId": "pt-12345678",
              "productTierName": "Omnistrate Multi Tenancy",
              "roleType": "root",
              "rootUserId": "user-12345678",
              "serviceId": "s-12345678",
              "serviceLogoURL": "Iusto quis mollitia voluptates ratione.",
              "serviceName": "MySQL multi-writer service",
              "serviceOrgId": "org-12345678",
              "serviceOrgName": "Omnistrate",
              "status": "ACTIVE",
              "subscriptionOwnerName": "John Doe"
            },
            {
              "accountConfigIdentityId": "org-12345678",
              "cloudProviderNames": ["aws", "gcp"],
              "createdAt": "2019-01-01T00:00:00Z",
              "defaultSubscription": true,
              "id": "sub-12345678",
              "productTierId": "pt-12345678",
              "productTierName": "Omnistrate Multi Tenancy",
              "roleType": "root",
              "rootUserId": "user-12345678",
              "serviceId": "s-12345678",
              "serviceLogoURL": "Iusto quis mollitia voluptates ratione.",
              "serviceName": "MySQL multi-writer service",
              "serviceOrgId": "org-12345678",
              "serviceOrgName": "Omnistrate",
              "status": "ACTIVE",
              "subscriptionOwnerName": "John Doe"
            },
            {
              "accountConfigIdentityId": "org-12345678",
              "cloudProviderNames": ["aws", "gcp"],
              "createdAt": "2019-01-01T00:00:00Z",
              "defaultSubscription": true,
              "id": "sub-12345678",
              "productTierId": "pt-12345678",
              "productTierName": "Omnistrate Multi Tenancy",
              "roleType": "root",
              "rootUserId": "user-12345678",
              "serviceId": "s-12345678",
              "serviceLogoURL": "Iusto quis mollitia voluptates ratione.",
              "serviceName": "MySQL multi-writer service",
              "serviceOrgId": "org-12345678",
              "serviceOrgName": "Omnistrate",
              "status": "ACTIVE",
              "subscriptionOwnerName": "John Doe"
            }
          ]
        },
        "required": ["ids"]
      },
      "ListTierVersionSetsRequest": {
        "type": "object",
        "properties": {
          "latestIncrementalVersionForMajorVersion": {
            "type": "string",
            "description": "Returns the latest incremental version for the given major version. The parameter needs to be specified in isolation",
            "example": "3.0"
          },
          "latestMajorVersionOnly": {
            "type": "boolean",
            "description": "Indicates whether to return only the latest version set. The parameter needs to be specified in isolation.",
            "example": true
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Voluptas iure ut."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "cv",
            "minLength": 1
          }
        },
        "example": {
          "latestIncrementalVersionForMajorVersion": "3.0",
          "latestMajorVersionOnly": true,
          "productTierId": "Beatae beatae.",
          "serviceId": "s-12345678",
          "token": "3l5"
        },
        "required": ["token", "serviceId", "productTierId"]
      },
      "ListTierVersionSetsResult": {
        "type": "object",
        "properties": {
          "nextPageToken": {
            "type": "string",
            "description": "Token to use for the next request",
            "example": "next-token"
          },
          "tierVersionSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TierVersionSet"
            },
            "description": "List of product-tier version sets.",
            "example": [
              {
                "autoApproveSubscription": false,
                "baseVersion": "3.0",
                "createdAt": "2020-01-01T00:00:00Z",
                "createdBy": "John Doe",
                "description": "Eos assumenda.",
                "enabledFeatures": [
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  }
                ],
                "features": {
                  "BILLING": false,
                  "LOGS": true,
                  "METRICS": false
                },
                "instanceCount": 12,
                "latestUpgradePathId": "upgrade-12345678",
                "name": "Regular version set",
                "parentVersion": "2.0",
                "productTierId": "Beatae beatae.",
                "releasedAt": "2020-01-01T00:00:00Z",
                "releasedBy": "John Doe",
                "resources": [
                  {
                    "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                    "id": "r-12345678",
                    "imageConfigId": "imgc-12345678",
                    "infraConfigId": "ic-12345678",
                    "isExternal": true,
                    "managedResourceType": "PortsBasedProxy",
                    "name": "MySQL multi-writer service"
                  },
                  {
                    "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                    "id": "r-12345678",
                    "imageConfigId": "imgc-12345678",
                    "infraConfigId": "ic-12345678",
                    "isExternal": true,
                    "managedResourceType": "PortsBasedProxy",
                    "name": "MySQL multi-writer service"
                  }
                ],
                "serviceId": "s-12345678",
                "serviceModelId": "Ipsum velit nobis maxime.",
                "status": "Preferred|Active|Deprecated|Pending",
                "type": "Major|Incremental|UserDefined",
                "updatedAt": "2020-01-01T00:00:00Z",
                "version": "3.0"
              },
              {
                "autoApproveSubscription": false,
                "baseVersion": "3.0",
                "createdAt": "2020-01-01T00:00:00Z",
                "createdBy": "John Doe",
                "description": "Eos assumenda.",
                "enabledFeatures": [
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  }
                ],
                "features": {
                  "BILLING": false,
                  "LOGS": true,
                  "METRICS": false
                },
                "instanceCount": 12,
                "latestUpgradePathId": "upgrade-12345678",
                "name": "Regular version set",
                "parentVersion": "2.0",
                "productTierId": "Beatae beatae.",
                "releasedAt": "2020-01-01T00:00:00Z",
                "releasedBy": "John Doe",
                "resources": [
                  {
                    "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                    "id": "r-12345678",
                    "imageConfigId": "imgc-12345678",
                    "infraConfigId": "ic-12345678",
                    "isExternal": true,
                    "managedResourceType": "PortsBasedProxy",
                    "name": "MySQL multi-writer service"
                  },
                  {
                    "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                    "id": "r-12345678",
                    "imageConfigId": "imgc-12345678",
                    "infraConfigId": "ic-12345678",
                    "isExternal": true,
                    "managedResourceType": "PortsBasedProxy",
                    "name": "MySQL multi-writer service"
                  }
                ],
                "serviceId": "s-12345678",
                "serviceModelId": "Ipsum velit nobis maxime.",
                "status": "Preferred|Active|Deprecated|Pending",
                "type": "Major|Incremental|UserDefined",
                "updatedAt": "2020-01-01T00:00:00Z",
                "version": "3.0"
              },
              {
                "autoApproveSubscription": false,
                "baseVersion": "3.0",
                "createdAt": "2020-01-01T00:00:00Z",
                "createdBy": "John Doe",
                "description": "Eos assumenda.",
                "enabledFeatures": [
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  }
                ],
                "features": {
                  "BILLING": false,
                  "LOGS": true,
                  "METRICS": false
                },
                "instanceCount": 12,
                "latestUpgradePathId": "upgrade-12345678",
                "name": "Regular version set",
                "parentVersion": "2.0",
                "productTierId": "Beatae beatae.",
                "releasedAt": "2020-01-01T00:00:00Z",
                "releasedBy": "John Doe",
                "resources": [
                  {
                    "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                    "id": "r-12345678",
                    "imageConfigId": "imgc-12345678",
                    "infraConfigId": "ic-12345678",
                    "isExternal": true,
                    "managedResourceType": "PortsBasedProxy",
                    "name": "MySQL multi-writer service"
                  },
                  {
                    "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                    "id": "r-12345678",
                    "imageConfigId": "imgc-12345678",
                    "infraConfigId": "ic-12345678",
                    "isExternal": true,
                    "managedResourceType": "PortsBasedProxy",
                    "name": "MySQL multi-writer service"
                  }
                ],
                "serviceId": "s-12345678",
                "serviceModelId": "Ipsum velit nobis maxime.",
                "status": "Preferred|Active|Deprecated|Pending",
                "type": "Major|Incremental|UserDefined",
                "updatedAt": "2020-01-01T00:00:00Z",
                "version": "3.0"
              },
              {
                "autoApproveSubscription": false,
                "baseVersion": "3.0",
                "createdAt": "2020-01-01T00:00:00Z",
                "createdBy": "John Doe",
                "description": "Eos assumenda.",
                "enabledFeatures": [
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  },
                  {
                    "configuration": {
                      "provider": "native"
                    },
                    "feature": "LOGS",
                    "scope": "INTERNAL"
                  }
                ],
                "features": {
                  "BILLING": false,
                  "LOGS": true,
                  "METRICS": false
                },
                "instanceCount": 12,
                "latestUpgradePathId": "upgrade-12345678",
                "name": "Regular version set",
                "parentVersion": "2.0",
                "productTierId": "Beatae beatae.",
                "releasedAt": "2020-01-01T00:00:00Z",
                "releasedBy": "John Doe",
                "resources": [
                  {
                    "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                    "id": "r-12345678",
                    "imageConfigId": "imgc-12345678",
                    "infraConfigId": "ic-12345678",
                    "isExternal": true,
                    "managedResourceType": "PortsBasedProxy",
                    "name": "MySQL multi-writer service"
                  },
                  {
                    "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                    "id": "r-12345678",
                    "imageConfigId": "imgc-12345678",
                    "infraConfigId": "ic-12345678",
                    "isExternal": true,
                    "managedResourceType": "PortsBasedProxy",
                    "name": "MySQL multi-writer service"
                  }
                ],
                "serviceId": "s-12345678",
                "serviceModelId": "Ipsum velit nobis maxime.",
                "status": "Preferred|Active|Deprecated|Pending",
                "type": "Major|Incremental|UserDefined",
                "updatedAt": "2020-01-01T00:00:00Z",
                "version": "3.0"
              }
            ]
          }
        },
        "example": {
          "nextPageToken": "next-token",
          "tierVersionSets": [
            {
              "autoApproveSubscription": false,
              "baseVersion": "3.0",
              "createdAt": "2020-01-01T00:00:00Z",
              "createdBy": "John Doe",
              "description": "Eos assumenda.",
              "enabledFeatures": [
                {
                  "configuration": {
                    "provider": "native"
                  },
                  "feature": "LOGS",
                  "scope": "INTERNAL"
                },
                {
                  "configuration": {
                    "provider": "native"
                  },
                  "feature": "LOGS",
                  "scope": "INTERNAL"
                },
                {
                  "configuration": {
                    "provider": "native"
                  },
                  "feature": "LOGS",
                  "scope": "INTERNAL"
                },
                {
                  "configuration": {
                    "provider": "native"
                  },
                  "feature": "LOGS",
                  "scope": "INTERNAL"
                }
              ],
              "features": {
                "BILLING": false,
                "LOGS": true,
                "METRICS": false
              },
              "instanceCount": 12,
              "latestUpgradePathId": "upgrade-12345678",
              "name": "Regular version set",
              "parentVersion": "2.0",
              "productTierId": "Beatae beatae.",
              "releasedAt": "2020-01-01T00:00:00Z",
              "releasedBy": "John Doe",
              "resources": [
                {
                  "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                  "id": "r-12345678",
                  "imageConfigId": "imgc-12345678",
                  "infraConfigId": "ic-12345678",
                  "isExternal": true,
                  "managedResourceType": "PortsBasedProxy",
                  "name": "MySQL multi-writer service"
                },
                {
                  "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                  "id": "r-12345678",
                  "imageConfigId": "imgc-12345678",
                  "infraConfigId": "ic-12345678",
                  "isExternal": true,
                  "managedResourceType": "PortsBasedProxy",
                  "name": "MySQL multi-writer service"
                }
              ],
              "serviceId": "s-12345678",
              "serviceModelId": "Ipsum velit nobis maxime.",
              "status": "Preferred|Active|Deprecated|Pending",
              "type": "Major|Incremental|UserDefined",
              "updatedAt": "2020-01-01T00:00:00Z",
              "version": "3.0"
            },
            {
              "autoApproveSubscription": false,
              "baseVersion": "3.0",
              "createdAt": "2020-01-01T00:00:00Z",
              "createdBy": "John Doe",
              "description": "Eos assumenda.",
              "enabledFeatures": [
                {
                  "configuration": {
                    "provider": "native"
                  },
                  "feature": "LOGS",
                  "scope": "INTERNAL"
                },
                {
                  "configuration": {
                    "provider": "native"
                  },
                  "feature": "LOGS",
                  "scope": "INTERNAL"
                },
                {
                  "configuration": {
                    "provider": "native"
                  },
                  "feature": "LOGS",
                  "scope": "INTERNAL"
                },
                {
                  "configuration": {
                    "provider": "native"
                  },
                  "feature": "LOGS",
                  "scope": "INTERNAL"
                }
              ],
              "features": {
                "BILLING": false,
                "LOGS": true,
                "METRICS": false
              },
              "instanceCount": 12,
              "latestUpgradePathId": "upgrade-12345678",
              "name": "Regular version set",
              "parentVersion": "2.0",
              "productTierId": "Beatae beatae.",
              "releasedAt": "2020-01-01T00:00:00Z",
              "releasedBy": "John Doe",
              "resources": [
                {
                  "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                  "id": "r-12345678",
                  "imageConfigId": "imgc-12345678",
                  "infraConfigId": "ic-12345678",
                  "isExternal": true,
                  "managedResourceType": "PortsBasedProxy",
                  "name": "MySQL multi-writer service"
                },
                {
                  "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                  "id": "r-12345678",
                  "imageConfigId": "imgc-12345678",
                  "infraConfigId": "ic-12345678",
                  "isExternal": true,
                  "managedResourceType": "PortsBasedProxy",
                  "name": "MySQL multi-writer service"
                }
              ],
              "serviceId": "s-12345678",
              "serviceModelId": "Ipsum velit nobis maxime.",
              "status": "Preferred|Active|Deprecated|Pending",
              "type": "Major|Incremental|UserDefined",
              "updatedAt": "2020-01-01T00:00:00Z",
              "version": "3.0"
            }
          ]
        },
        "required": ["tierVersionSets"]
      },
      "ListUpgradePathRequest": {
        "type": "object",
        "properties": {
          "serviceEnvironmentId": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "gt",
            "minLength": 1
          }
        },
        "example": {
          "serviceEnvironmentId": "se-12345678",
          "serviceId": "s-12345678",
          "token": "ic"
        },
        "required": ["token"]
      },
      "ListUpgradePathResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of an Upgrade Path",
              "example": "Quis doloribus excepturi."
            },
            "description": "List of upgrade path IDs",
            "example": ["up-12345678", "up-87654321"]
          },
          "nextPageToken": {
            "type": "string",
            "description": "Token to use to get the next page of results",
            "example": "next-token"
          }
        },
        "example": {
          "ids": ["up-12345678", "up-87654321"],
          "nextPageToken": "next-token"
        }
      },
      "ListVUnitsRequest": {
        "type": "object",
        "properties": {
          "cloudProvider": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "region": {
            "type": "string",
            "description": "Region code specific to the cloud-provider",
            "example": "us-west-2"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceModelId": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Fugit sint ea."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "r",
            "minLength": 1
          }
        },
        "example": {
          "cloudProvider": "aws",
          "region": "us-west-2",
          "serviceId": "s-12345678",
          "serviceModelId": "sm-12345678",
          "token": "5eg"
        },
        "required": ["token", "serviceId", "serviceModelId", "cloudProvider", "region"]
      },
      "ListVUnitsRequest2": {
        "type": "object",
        "properties": {
          "cloudProvider": {
            "type": "string",
            "description": "The infra / cloud provider name",
            "example": "aws"
          },
          "region": {
            "type": "string",
            "description": "Region code specific to the cloud-provider",
            "example": "us-west-2"
          }
        },
        "example": {
          "cloudProvider": "aws",
          "region": "us-west-2"
        },
        "required": ["cloudProvider", "region"]
      },
      "ListVUnitsResult": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "object",
            "description": "List of VUnit IDs per Cloud provider",
            "example": {
              "aws": ["vu-12345678", "vu-abcdefgh"],
              "gcp": ["vu-1234efgh"]
            },
            "additionalProperties": true
          },
          "nextPageToken": {
            "type": "string",
            "description": "Next page token",
            "example": "next-token"
          }
        },
        "example": {
          "ids": {
            "aws": ["vu-12345678", "vu-abcdefgh"],
            "gcp": ["vu-1234efgh"]
          },
          "nextPageToken": "next-token"
        }
      },
      "LoadBalancerPathConfiguration": {
        "type": "object",
        "properties": {
          "associatedKubernetesServiceName": {
            "type": "string",
            "description": "Override the default target Kubernetes service name with this value",
            "example": "my-service"
          },
          "associatedResourceID": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Voluptas reiciendis."
          },
          "path": {
            "type": "string",
            "description": "The REST API path backed by the load balancer",
            "example": "/path"
          },
          "port": {
            "type": "integer",
            "description": "The port to forward traffic to",
            "example": 8080,
            "format": "int64"
          }
        },
        "example": {
          "associatedKubernetesServiceName": "my-service",
          "associatedResourceID": "r-12345678",
          "path": "/path",
          "port": 8080
        },
        "required": ["path", "associatedResourceID", "port"]
      },
      "LoginWithIdentityProviderRequest": {
        "type": "object",
        "properties": {
          "authorizationCode": {
            "type": "string",
            "description": "The authorization code from the Identity Provider",
            "example": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&"
          },
          "companyDescription": {
            "type": "string",
            "example": "We sell xyz database software",
            "minLength": 1
          },
          "companyUrl": {
            "type": "string",
            "example": "https://www.mywebsite.com",
            "minLength": 1
          },
          "deviceCode": {
            "type": "string",
            "description": "The device code from the Identity Provider",
            "example": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&"
          },
          "identityProviderName": {
            "type": "string",
            "description": "The name of the identity provider",
            "example": "Google|GitHub|Google for CTL|GitHub for CTL"
          },
          "invitedEmail": {
            "type": "string",
            "description": "Email address that the user was invited with",
            "example": "abc@gmail.com",
            "format": "email"
          },
          "legalCompanyName": {
            "type": "string",
            "example": "mywebsite",
            "minLength": 1
          },
          "redirectUri": {
            "type": "string",
            "description": "The redirect URI used to get the authorization code",
            "example": "https://www.example/redirect"
          }
        },
        "example": {
          "authorizationCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
          "companyDescription": "We sell xyz database software",
          "companyUrl": "https://www.mywebsite.com",
          "deviceCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
          "identityProviderName": "Google",
          "invitedEmail": "abc@gmail.com",
          "legalCompanyName": "mywebsite",
          "redirectUri": "https://www.example/redirect"
        },
        "required": ["identityProviderName"]
      },
      "LoginWithIdentityProviderResult": {
        "type": "object",
        "properties": {
          "jwtToken": {
            "type": "string",
            "description": "The jwt token",
            "example": ""
          }
        },
        "example": {
          "jwtToken": ""
        },
        "required": ["jwtToken"]
      },
      "LogoutRequest": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "up",
            "minLength": 1
          }
        },
        "example": {
          "token": "a"
        },
        "required": ["token"]
      },
      "ModifyServicesOrchestrationRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Services Orchestration",
            "example": "Qui placeat."
          },
          "orchestrationModifyDSL": {
            "type": "string",
            "description": "base64 encoded content of services orchestration modify DSL",
            "example": "Ea aliquid magni quaerat omnis rem."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "c",
            "minLength": 1
          }
        },
        "example": {
          "id": "so-12345678",
          "orchestrationModifyDSL": "Ad mollitia laudantium et voluptate alias.",
          "token": "x"
        },
        "required": ["token", "id", "orchestrationModifyDSL"]
      },
      "ModifyServicesOrchestrationRequest2": {
        "type": "object",
        "properties": {
          "orchestrationModifyDSL": {
            "type": "string",
            "description": "base64 encoded content of services orchestration modify DSL",
            "example": "Odit sit eum non ea quos."
          }
        },
        "example": {
          "orchestrationModifyDSL": "Fugiat voluptatibus accusamus ipsum quis atque."
        },
        "required": ["orchestrationModifyDSL"]
      },
      "NetworkFeaturesConfiguration": {
        "type": "object",
        "properties": {
          "isPrivateLinkEnabled": {
            "type": "boolean",
            "description": "Indicates if PrivateLink is enabled for the network",
            "example": true
          }
        },
        "example": {
          "isPrivateLinkEnabled": true
        }
      },
      "NodeHealthSummary": {
        "type": "object",
        "properties": {
          "availabilityZone": {
            "type": "string",
            "description": "The availability zone of the node",
            "example": "us-east-2a"
          },
          "connectivityStatus": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "diskHealth": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "endpoint": {
            "type": "string",
            "description": "The endpoint of the node",
            "example": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Velit cupiditate dolorum possimus illum itaque."
            },
            "description": "The list of process events",
            "example": ["event-1", "event-2"]
          },
          "integrationsHealth": {
            "$ref": "#/components/schemas/IntegrationsHealth"
          },
          "loadHealth": {
            "type": "string",
            "description": "The load status of a pod",
            "example": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A"
          },
          "loadStatus": {
            "type": "string",
            "description": "The load status of a pod",
            "example": "LOAD_NORMAL|LOAD_IDLE|LOAD_OVERLOADED|STOPPED|UNKNOWN|N/A"
          },
          "nodeHealth": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "nodeName": {
            "type": "string",
            "description": "The name of the node",
            "example": "postgres-0"
          },
          "ports": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 3761999949181051000,
              "format": "int64"
            },
            "description": "The ports that this node exposes",
            "example": [80, 443]
          },
          "processHealth": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "processLiveness": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "recentLogs": {
            "type": "string",
            "description": "The recent logs of the process",
            "example": "Log message"
          },
          "status": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          }
        },
        "example": {
          "availabilityZone": "us-east-2a",
          "connectivityStatus": "HEALTHY",
          "diskHealth": "HEALTHY",
          "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
          "events": ["event-1", "event-2"],
          "integrationsHealth": {
            "CustomerObservabilityHealth": "HEALTHY",
            "InternalObservabilityHealth": "HEALTHY"
          },
          "loadHealth": "LOAD_NORMAL",
          "loadStatus": "LOAD_NORMAL",
          "nodeHealth": "HEALTHY",
          "nodeName": "postgres-0",
          "ports": [80, 443],
          "processHealth": "HEALTHY",
          "processLiveness": "HEALTHY",
          "recentLogs": "Log message",
          "status": "HEALTHY"
        }
      },
      "NodeNetworkTopologyResult": {
        "type": "object",
        "properties": {
          "availabilityZone": {
            "type": "string",
            "description": "The availability zone of the node",
            "example": "us-east-2a"
          },
          "detailedHealth": {
            "$ref": "#/components/schemas/DetailedNodeHealthResult"
          },
          "endpoint": {
            "type": "string",
            "description": "The endpoint of the node",
            "example": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud"
          },
          "healthStatus": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          },
          "id": {
            "type": "string",
            "description": "The ID of the node",
            "example": "primary-0"
          },
          "kubernetesDashboardEndpoint": {
            "$ref": "#/components/schemas/KubernetesDashboardEndpoint"
          },
          "ports": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 9010065984844225000,
              "format": "int64"
            },
            "description": "The ports that this node exposes",
            "example": [80, 443]
          },
          "status": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          },
          "storageSize": {
            "type": "integer",
            "description": "The storage size of the node in GiB",
            "example": 10,
            "format": "int64"
          },
          "vmInfo": {
            "$ref": "#/components/schemas/NodeVMInfoResult"
          }
        },
        "example": {
          "availabilityZone": "us-east-2a",
          "detailedHealth": {
            "ConnectivityStatus": "UNHEALTHY",
            "DiskHealth": "UNKNOWN",
            "LoadStatus": "LOAD_NORMAL",
            "NodeHealth": "HEALTHY",
            "ProcessHealth": "HEALTHY",
            "ProcessLiveness": "HEALTHY"
          },
          "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
          "healthStatus": "HEALTHY",
          "id": "primary-0",
          "kubernetesDashboardEndpoint": {
            "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
            "deploymentCellID": "hc-12345678"
          },
          "ports": [80, 443],
          "status": "RUNNING",
          "storageSize": 10,
          "vmInfo": {
            "architecture": "amd64",
            "azCode": "us-east-1a",
            "azID": "use1-az1",
            "externalIP": "3.44.113.6",
            "instanceType": "t2.small",
            "internalIP": "192.168.1.4",
            "k8sNodeName": "my-k8s-node",
            "kernelVersion": "5.10.228",
            "kubeletVersion": "1.31.3",
            "os": "linux",
            "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
          }
        }
      },
      "NodeVMInfoResult": {
        "type": "object",
        "properties": {
          "architecture": {
            "type": "string",
            "description": "The architecture of the VM",
            "example": "amd64"
          },
          "azCode": {
            "type": "string",
            "description": "The availability zone code of the VM",
            "example": "us-east-1a"
          },
          "azID": {
            "type": "string",
            "description": "The availability zone ID of the VM",
            "example": "use1-az1"
          },
          "externalIP": {
            "type": "string",
            "description": "The external IP of the VM",
            "example": "3.44.53.111"
          },
          "instanceType": {
            "type": "string",
            "description": "The instance type of the VM",
            "example": "t2.small"
          },
          "internalIP": {
            "type": "string",
            "description": "The internal IP of the VM",
            "example": "192.168.1.4"
          },
          "k8sNodeName": {
            "type": "string",
            "description": "The k8s node name of the VM",
            "example": "my-k8s-node"
          },
          "kernelVersion": {
            "type": "string",
            "description": "The kernel version of the VM",
            "example": "5.10.228"
          },
          "kubeletVersion": {
            "type": "string",
            "description": "The kubelet version of the VM",
            "example": "1.31.3"
          },
          "os": {
            "type": "string",
            "description": "The operating system of the VM",
            "example": "linux"
          },
          "providerID": {
            "type": "string",
            "description": "The provider ID of the VM",
            "example": "aws:///ap-south-1b/i-06h696g4a643ahf01"
          }
        },
        "example": {
          "architecture": "amd64",
          "azCode": "us-east-1a",
          "azID": "use1-az1",
          "externalIP": "3.44.53.111",
          "instanceType": "t2.small",
          "internalIP": "192.168.1.4",
          "k8sNodeName": "my-k8s-node",
          "kernelVersion": "5.10.228",
          "kubeletVersion": "1.31.3",
          "os": "linux",
          "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
        },
        "required": [
          "providerID",
          "instanceType",
          "azCode",
          "architecture",
          "os",
          "internalIP",
          "kubeletVersion",
          "k8sNodeName"
        ]
      },
      "OfferingBillingPlan": {
        "type": "object",
        "properties": {
          "maxNumberofInstances": {
            "type": "integer",
            "description": "Maximum number of instances",
            "example": 5,
            "format": "int64"
          }
        },
        "example": {
          "maxNumberofInstances": 5
        }
      },
      "OmnistrateError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Application-specific error code",
            "example": "12-999"
          },
          "message": {
            "type": "string",
            "description": "More context on the error that occurred",
            "example": "Required field `x` was not provided in the request"
          },
          "name": {
            "type": "string",
            "description": "Name of the error",
            "example": "missing_field"
          }
        },
        "example": {
          "code": "12-999",
          "message": "Required field `x` was not provided in the request",
          "name": "missing_field"
        },
        "required": ["name", "code", "message"]
      },
      "OmnistrateServiceHealthResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          }
        },
        "example": {
          "status": "RUNNING"
        },
        "required": ["status"]
      },
      "OmnistrateServiceVersionResult": {
        "type": "object",
        "properties": {
          "apiVersion": {
            "type": "string",
            "description": "Version of the Entity to operate on",
            "example": "1.0",
            "minLength": 1
          },
          "buildCommitSHA": {
            "type": "string",
            "description": "The commit hash of the build",
            "example": "1234567890abcdef1234567890abcdef12345678"
          },
          "buildTimestamp": {
            "type": "string",
            "description": "The timestamp of the build",
            "example": "2020-01-01T00:00:00Z"
          }
        },
        "example": {
          "apiVersion": "1.0",
          "buildCommitSHA": "1234567890abcdef1234567890abcdef12345678",
          "buildTimestamp": "2020-01-01T00:00:00Z"
        },
        "required": ["buildCommitSHA", "buildTimestamp", "apiVersion"]
      },
      "OperatorCRDConfiguration": {
        "type": "object",
        "properties": {
          "endpointConfiguration": {
            "type": "object",
            "description": "The endpoints from the Operator CRD Deployment to expose to the customer",
            "example": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/Endpoint"
            }
          },
          "helmChartDependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatorHelmChartDependency"
            },
            "description": "The helm chart dependencies for the CRD (including charts necessary to manage the operator) - Optional",
            "example": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ]
          },
          "outputParameters": {
            "type": "object",
            "description": "The output parameters to export to the user from the CRD",
            "example": {
              "expiresAt": "$out.status.notAfter",
              "issuerName": "letsencrypt-prod"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Sunt incidunt minus."
            }
          },
          "readinessConditions": {
            "type": "object",
            "description": "The readiness conditions to check for the CRD",
            "example": {
              "$out.status.conditions[?(@.type=='Ready')].status": true
            },
            "additionalProperties": true
          },
          "supplementalFiles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Totam dolorem vero minus qui ut placeat."
            },
            "description": "The supplemental files to apply with the CRD",
            "example": [
              "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
              "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
            ]
          },
          "template": {
            "type": "string",
            "description": "The template of the CRD to apply on every deployment",
            "example": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
          }
        },
        "example": {
          "endpointConfiguration": {
            "admin": {
              "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
              "networkingType": "PRIVATE",
              "ports": [8080, 8081],
              "primary": false
            },
            "cluster": {
              "host": "https://my-endpoint.com",
              "networkingType": "PUBLIC",
              "ports": [8080, 8081],
              "primary": true
            }
          },
          "helmChartDependencies": [
            {
              "chartName": "cert-manager",
              "chartVersion": "v1.5.3"
            },
            {
              "chartName": "nginx-ingress",
              "chartVersion": "v0.48.1"
            },
            {
              "chartName": "external-dns",
              "chartVersion": "v0.7.0"
            },
            {
              "chartName": "cnpg-operator",
              "chartVersion": "v0.23.1"
            }
          ],
          "outputParameters": {
            "expiresAt": "$out.status.notAfter",
            "issuerName": "letsencrypt-prod"
          },
          "readinessConditions": {
            "$out.status.conditions[?(@.type=='Ready')].status": true
          },
          "supplementalFiles": [
            "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
            "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
          ],
          "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
        },
        "required": ["template"]
      },
      "OperatorHelmChartDependency": {
        "type": "object",
        "properties": {
          "chartName": {
            "type": "string",
            "description": "The name of the helm chart",
            "example": "cert-manager"
          },
          "chartRepoName": {
            "type": "string",
            "description": "The repository name of the Helm chart",
            "example": "my-repo"
          },
          "chartRepoUrl": {
            "type": "string",
            "description": "The repository URL of the Helm chart",
            "example": "https://my-repo.com"
          },
          "chartValues": {
            "type": "object",
            "description": "The values of the Helm chart",
            "example": {
              "key1": "value1",
              "key2": 3,
              "key3": {
                "key4": "value4"
              }
            },
            "additionalProperties": true
          },
          "chartVersion": {
            "type": "string",
            "description": "The version of the helm chart",
            "example": "v1.5.3"
          },
          "password": {
            "type": "string",
            "description": "The password to authenticate with the registry",
            "example": "my-password"
          },
          "username": {
            "type": "string",
            "description": "The username to authenticate with the registry",
            "example": "my-user"
          }
        },
        "example": {
          "chartName": "cert-manager",
          "chartRepoName": "my-repo",
          "chartRepoUrl": "https://my-repo.com",
          "chartValues": {
            "key1": "value1",
            "key2": 3,
            "key3": {
              "key4": "value4"
            }
          },
          "chartVersion": "v1.5.3",
          "password": "my-password",
          "username": "my-user"
        },
        "required": ["chartName", "chartVersion"]
      },
      "OrgUsers": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "abc@gmail.com"
          },
          "invitedAt": {
            "type": "string",
            "description": "The time when the user was invited",
            "example": "2023-01-10T00:00:00Z"
          },
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Dae"
          },
          "roleType": {
            "type": "string",
            "description": "Type of the role",
            "example": "root|editor|reader|service_editor|service_reader|admin|service_operator"
          },
          "userId": {
            "type": "string",
            "description": "The User ID",
            "example": "user-abcd1234"
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "invitedAt": "2023-01-10T00:00:00Z",
          "name": "John Dae",
          "roleType": "reader",
          "userId": "user-abcd1234"
        },
        "required": ["name", "email", "roleType", "userId", "invitedAt"]
      },
      "OutputParameterEntity": {
        "type": "object",
        "properties": {
          "custom": {
            "type": "boolean",
            "description": "Whether the parameter is custom",
            "example": false
          },
          "description": {
            "type": "string",
            "description": "The parameter description",
            "example": "The name of the server"
          },
          "displayName": {
            "type": "string",
            "description": "The parameter display name",
            "example": "Server Name"
          },
          "isList": {
            "type": "boolean",
            "description": "Whether the parameter is a list",
            "example": false
          },
          "key": {
            "type": "string",
            "description": "The parameter key",
            "example": "serverName"
          },
          "type": {
            "type": "string",
            "description": "The parameter type",
            "example": "Boolean|Float64|String|JSON|Resource"
          }
        },
        "example": {
          "custom": false,
          "description": "The name of the server",
          "displayName": "Server Name",
          "isList": false,
          "key": "serverName",
          "type": "Boolean|Float64|String|JSON|Resource"
        },
        "required": ["key", "displayName", "description", "type", "isList", "custom"]
      },
      "PerCloudProviderConfigReadiness": {
        "type": "object",
        "description": "The readiness of the cloud provider configuration",
        "example": {
          "resourceA": "missing terraform configuration",
          "resourceB": "missing cloudformation configuration"
        },
        "additionalProperties": {
          "type": "string",
          "example": "Voluptatem temporibus nam est."
        }
      },
      "PrivateLinkConfiguration": {
        "type": "object",
        "properties": {
          "awsPrivateLinkConfigurations": {
            "$ref": "#/components/schemas/AWSPrivateLinkConfigurations"
          }
        },
        "example": {
          "awsPrivateLinkConfigurations": [
            {
              "port": 80,
              "targetGroupName": "my-target-group"
            },
            {
              "port": 80,
              "targetGroupName": "my-target-group"
            }
          ]
        }
      },
      "PrivateNetworkingConfiguration": {
        "type": "object",
        "properties": {
          "privateLinkConfiguration": {
            "$ref": "#/components/schemas/PrivateLinkConfiguration"
          }
        },
        "description": "The private networking configuration for the network config",
        "example": {
          "privateLinkConfiguration": {
            "awsPrivateLinkConfigurations": [
              {
                "port": 80,
                "targetGroupName": "my-target-group"
              },
              {
                "port": 80,
                "targetGroupName": "my-target-group"
              }
            ]
          }
        }
      },
      "ProductTierFeatureDetail": {
        "type": "object",
        "properties": {
          "configuration": {
            "type": "object",
            "description": "The configuration parameters of the product tier feature",
            "example": {
              "provider": "native"
            },
            "additionalProperties": true
          },
          "feature": {
            "type": "string",
            "description": "ProductTierFeatureType is to enable / disable features per product tier",
            "example": "LOGS|METRICS|BILLING|CLOUD_INSURANCE|MARKETPLACE|OPERATIONAL_STATUS"
          },
          "scope": {
            "type": "string",
            "description": "ProductTierFeatureScope defines scope of the feature within product tier",
            "example": "INTERNAL|CUSTOMER"
          }
        },
        "example": {
          "configuration": {
            "provider": "native"
          },
          "feature": "LOGS",
          "scope": "INTERNAL"
        }
      },
      "PromoteServiceEnvironmentRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "k8",
            "minLength": 1
          }
        },
        "example": {
          "id": "se-12345678",
          "serviceId": "s-12345678",
          "token": "y"
        },
        "required": ["token", "id", "serviceId"]
      },
      "PromoteServiceEnvironmentStatusRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "ti",
            "minLength": 1
          }
        },
        "example": {
          "id": "se-12345678",
          "serviceId": "s-12345678",
          "token": "9bl"
        },
        "required": ["token", "id", "serviceId"]
      },
      "PromoteServiceEnvironmentStatusResult": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/EnvironmentPromotionStatus"
        },
        "example": [
          {
            "status": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
            "targetEnvironmentID": "se-12345678"
          },
          {
            "status": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
            "targetEnvironmentID": "se-12345678"
          },
          {
            "status": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
            "targetEnvironmentID": "se-12345678"
          }
        ]
      },
      "PromoteTierVersionSetRequest": {
        "type": "object",
        "properties": {
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Esse voluptas dolores et et dolores optio."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "j3",
            "minLength": 1
          },
          "version": {
            "type": "string",
            "description": "The version number for the specific version set.",
            "example": "3.0"
          }
        },
        "example": {
          "productTierId": "Beatae beatae.",
          "serviceId": "s-12345678",
          "token": "o9",
          "version": "3.0"
        },
        "required": ["token", "version", "serviceId", "productTierId"]
      },
      "ProxyEndpoint": {
        "type": "object",
        "properties": {
          "openPorts": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Fugiat sed."
            },
            "example": ["30000", "30001"]
          },
          "proxyEndpoint": {
            "type": "string",
            "example": "https://r-1234.instance-abcdefgh.region.aws.omnistrate.cloud"
          }
        },
        "example": {
          "openPorts": ["30000", "30001"],
          "proxyEndpoint": "https://r-1234.instance-abcdefgh.region.aws.omnistrate.cloud"
        }
      },
      "PublicNetworkingConfiguration": {
        "type": "object",
        "properties": {
          "enableClusterLoadBalancer": {
            "type": "boolean",
            "description": "Enable a single load balancer for all replicas",
            "example": true
          },
          "enableNodeLoadBalancer": {
            "type": "boolean",
            "description": "Create an external node load balancer per node rather than exposing the node ip directly",
            "example": true
          }
        },
        "description": "The public networking configuration for the network config",
        "example": {
          "enableClusterLoadBalancer": true,
          "enableNodeLoadBalancer": true
        }
      },
      "RecentDeploymentFailureStatus": {
        "type": "object",
        "properties": {
          "failedAt": {
            "type": "string",
            "description": "The time at which the deployment failed",
            "example": "2021-09-01T00:00:00Z"
          },
          "failureReason": {
            "type": "string",
            "description": "The reason for the deployment failure",
            "example": "Failed to connect to the database"
          }
        },
        "description": "The status of the recent deployment failure",
        "example": {
          "failedAt": "2021-09-01T00:00:00Z",
          "failureReason": "Failed to connect to the database"
        }
      },
      "RegenerateTokenRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "user-abcd1234",
            "minLength": 1
          }
        },
        "example": {
          "id": "user-abcd1234"
        },
        "required": ["id"]
      },
      "RegionalHealthSummary": {
        "type": "object",
        "properties": {
          "deployingInstances": {
            "type": "integer",
            "description": "The number of instances currently deploying",
            "example": 219450816776333470,
            "format": "int64"
          },
          "deploymentCellHealthSummary": {
            "type": "object",
            "description": "The summary of health by deployment cell",
            "example": {
              "Omnis sit facilis debitis temporibus.": {
                "deployingInstances": 1936979972301701600,
                "healthyInstances": 1988257824015038700,
                "hostClusterID": "hc-12345678",
                "message": "Cell is healthy",
                "status": "Healthy",
                "totalInstances": 8184821500181041000,
                "unhealthyInstances": 5543104014255075000,
                "unknownInstances": 1050601003122845600
              }
            },
            "additionalProperties": true
          },
          "healthyInstances": {
            "type": "integer",
            "description": "The number of healthy instances in the region",
            "example": 5934797175464777000,
            "format": "int64"
          },
          "message": {
            "type": "string",
            "description": "The status message",
            "example": "Region is healthy"
          },
          "region": {
            "type": "string",
            "description": "The region",
            "example": "us-east-1"
          },
          "status": {
            "type": "string",
            "description": "The status of the region",
            "example": "Healthy"
          },
          "totalInstances": {
            "type": "integer",
            "description": "The total number of instances in the region",
            "example": 1623599555766742800,
            "format": "int64"
          },
          "unhealthyInstances": {
            "type": "integer",
            "description": "The number of unhealthy instances in the region",
            "example": 4228069195285930000,
            "format": "int64"
          },
          "unknownInstances": {
            "type": "integer",
            "description": "The number of instances with unknown status",
            "example": 6863545797769623000,
            "format": "int64"
          }
        },
        "example": {
          "deployingInstances": 1758140562633051000,
          "deploymentCellHealthSummary": {
            "Omnis sit facilis debitis temporibus.": {
              "deployingInstances": 1936979972301701600,
              "healthyInstances": 1988257824015038700,
              "hostClusterID": "hc-12345678",
              "message": "Cell is healthy",
              "status": "Healthy",
              "totalInstances": 8184821500181041000,
              "unhealthyInstances": 5543104014255075000,
              "unknownInstances": 1050601003122845600
            }
          },
          "healthyInstances": 2056217965118171000,
          "message": "Region is healthy",
          "region": "us-east-1",
          "status": "Healthy",
          "totalInstances": 867336971588161700,
          "unhealthyInstances": 2527505889912490000,
          "unknownInstances": 5541104736307929000
        },
        "required": [
          "region",
          "cloudProvider",
          "status",
          "message",
          "totalInstances",
          "healthyInstances",
          "unhealthyInstances",
          "deploymentCellHealthSummary",
          "deployingInstances"
        ]
      },
      "RegisterActionHookRequest": {
        "type": "object",
        "properties": {
          "commandTemplate": {
            "type": "string",
            "description": "The Base64 encoded command template to execute",
            "example": "ZWNobyAiaGVsbG8gd29ybGQi"
          },
          "customCommand": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Sunt at rem est."
            },
            "description": "The custom command to execute the hook with",
            "example": ["/bin/sh", "-c"]
          },
          "customImage": {
            "type": "string",
            "description": "The custom image to execute the hook",
            "example": "my-custom-image:latest"
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Omnis velit."
          },
          "scope": {
            "type": "string",
            "description": "The scope of the hook",
            "example": "CLUSTER|NODE"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "bq",
            "minLength": 1
          },
          "type": {
            "type": "string",
            "description": "The type of hook to execute",
            "example": "INIT|ADD|REMOVE|PROMOTE|DEMOTE|HEALTH_CHECK|POST_START|POST_UPGRADE|PRE_STOP"
          }
        },
        "example": {
          "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
          "customCommand": ["/bin/sh", "-c"],
          "customImage": "my-custom-image:latest",
          "id": "r-12345678",
          "scope": "CLUSTER",
          "serviceId": "s-12345678",
          "token": "qz",
          "type": "ADD"
        },
        "required": ["token", "serviceId", "id", "type", "scope", "commandTemplate"]
      },
      "RegisterActionHookRequest2": {
        "type": "object",
        "properties": {
          "commandTemplate": {
            "type": "string",
            "description": "The Base64 encoded command template to execute",
            "example": "ZWNobyAiaGVsbG8gd29ybGQi"
          },
          "customCommand": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Enim dolorem consequatur consectetur non quos."
            },
            "description": "The custom command to execute the hook with",
            "example": ["/bin/sh", "-c"]
          },
          "customImage": {
            "type": "string",
            "description": "The custom image to execute the hook",
            "example": "my-custom-image:latest"
          },
          "scope": {
            "type": "string",
            "description": "The scope of the hook",
            "example": "CLUSTER"
          },
          "type": {
            "type": "string",
            "description": "The type of hook to execute",
            "example": "ADD"
          }
        },
        "example": {
          "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
          "customCommand": ["/bin/sh", "-c"],
          "customImage": "my-custom-image:latest",
          "scope": "CLUSTER",
          "type": "ADD"
        },
        "required": ["type", "scope", "commandTemplate"]
      },
      "RegisterResourceMetricsConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Et in explicabo."
          },
          "metricEndpoint": {
            "type": "string",
            "description": "The local host endpoint to supply prometheus metric",
            "example": "http://localhost:9187/metrics"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "pj",
            "minLength": 1
          }
        },
        "example": {
          "id": "r-12345678",
          "metricEndpoint": "http://localhost:9187/metrics",
          "serviceId": "s-12345678",
          "token": "gzb"
        },
        "required": ["token", "serviceId", "id", "metricEndpoint"]
      },
      "RegisterResourceMetricsConfigRequest2": {
        "type": "object",
        "properties": {
          "metricEndpoint": {
            "type": "string",
            "description": "The local host endpoint to supply prometheus metric",
            "example": "http://localhost:9187/metrics"
          }
        },
        "example": {
          "metricEndpoint": "http://localhost:9187/metrics"
        },
        "required": ["metricEndpoint"]
      },
      "ReleaseImageConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "Neque omnis quos odio eius unde dolorem."
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Delectus dolores voluptatem corporis saepe."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "l4",
            "minLength": 1
          }
        },
        "description": "Release a new image configuration",
        "example": {
          "id": "imgc-12345678",
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "r5a"
        },
        "required": ["token", "id", "serviceId"]
      },
      "ReleaseImageConfigRequest2": {
        "type": "object",
        "properties": {
          "productTierId": {
            "type": "string",
            "description": "The product tier ID",
            "example": "pt-12345678"
          }
        },
        "example": {
          "productTierId": "pt-12345678"
        }
      },
      "ReleaseInfraConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Consequatur vel sed qui dolores aspernatur omnis."
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Qui iusto."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "85x",
            "minLength": 1
          }
        },
        "example": {
          "id": "ic-12345678",
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "q"
        },
        "required": ["token", "id", "serviceId"]
      },
      "ReleaseInfraConfigRequest2": {
        "type": "object",
        "properties": {
          "productTierId": {
            "type": "string",
            "description": "The product tier ID",
            "example": "pt-12345678"
          }
        },
        "example": {
          "productTierId": "pt-12345678"
        }
      },
      "ReleaseServiceAPIRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Accusantium corrupti voluptas."
          },
          "isPreferred": {
            "type": "boolean",
            "description": "Indicates whether this version set is preferred.",
            "default": false,
            "example": true
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Explicabo nostrum sunt."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "ztf",
            "minLength": 1
          },
          "versionSetName": {
            "type": "string",
            "description": "The name of the version set to release",
            "example": "v1"
          },
          "versionSetType": {
            "type": "string",
            "description": "The version-set type of the product-tier.",
            "example": "Major|Incremental|UserDefined"
          }
        },
        "example": {
          "id": "sa-12345678",
          "isPreferred": true,
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "k",
          "versionSetName": "v1",
          "versionSetType": "Major|Incremental|UserDefined"
        },
        "required": ["token", "id", "serviceId"]
      },
      "ReleaseServiceAPIRequest2": {
        "type": "object",
        "properties": {
          "isPreferred": {
            "type": "boolean",
            "description": "Indicates whether this version set is preferred.",
            "default": false,
            "example": true
          },
          "productTierId": {
            "type": "string",
            "description": "The product tier ID",
            "example": "pt-12345678"
          },
          "versionSetName": {
            "type": "string",
            "description": "The name of the version set to release",
            "example": "v1"
          },
          "versionSetType": {
            "type": "string",
            "description": "The version-set type of the product-tier.",
            "example": "Major|Incremental|UserDefined"
          }
        },
        "example": {
          "isPreferred": true,
          "productTierId": "pt-12345678",
          "versionSetName": "v1",
          "versionSetType": "Major|Incremental|UserDefined"
        }
      },
      "ReleaseServiceModelRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Voluptas neque officia sed repellendus."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "v",
            "minLength": 1
          }
        },
        "example": {
          "id": "sm-12345678",
          "serviceId": "s-12345678",
          "token": "d"
        },
        "required": ["token", "id", "serviceId"]
      },
      "ReleaseServiceModelResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The release status of the service model",
            "example": "DEPLOYING|READY|PENDING|FAILED|NOT_CONFIGURED"
          }
        },
        "example": {
          "status": "READY"
        },
        "required": ["status"]
      },
      "ReleaseTierVersionSetRequest": {
        "type": "object",
        "properties": {
          "isPreferred": {
            "type": "boolean",
            "description": "Indicates whether this version set is preferred.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The name of the product-tier version set.",
            "example": "Major version set"
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Fuga consequatur dolor ab eos qui."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "6bp",
            "minLength": 1
          },
          "version": {
            "type": "string",
            "description": "The version number for the specific version set.",
            "example": "3.0"
          }
        },
        "example": {
          "isPreferred": true,
          "name": "Major version set",
          "productTierId": "Beatae beatae.",
          "serviceId": "s-12345678",
          "token": "f",
          "version": "3.0"
        },
        "required": ["token", "version", "serviceId", "productTierId"]
      },
      "ReleaseTierVersionSetRequest2": {
        "type": "object",
        "properties": {
          "isPreferred": {
            "type": "boolean",
            "description": "Indicates whether this version set is preferred.",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "The name of the product-tier version set.",
            "example": "Major version set"
          }
        },
        "example": {
          "isPreferred": true,
          "name": "Major version set"
        }
      },
      "RemoveAccountConfigFromServiceModelRequest": {
        "type": "object",
        "properties": {
          "accountConfigId": {
            "type": "string",
            "description": "ID of an Account Config",
            "example": "Mollitia velit nihil ut pariatur non aut."
          },
          "id": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Iste voluptatem et quod libero impedit aspernatur."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "zyb",
            "minLength": 1
          }
        },
        "example": {
          "accountConfigId": "ac-12345678",
          "id": "sm-12345678",
          "serviceId": "s-12345678",
          "token": "18"
        },
        "required": ["token", "accountConfigId", "id", "serviceId"]
      },
      "RemoveAccountConfigFromServiceModelRequest2": {
        "type": "object",
        "properties": {
          "accountConfigId": {
            "type": "string",
            "description": "The infrastructure account configuration ID",
            "example": "ac-12345678"
          }
        },
        "example": {
          "accountConfigId": "ac-12345678"
        },
        "required": ["accountConfigId"]
      },
      "RemoveCapacityFromResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "capacityToBeRemoved": {
            "type": "integer",
            "description": "Number of replicas to be removed",
            "example": 3,
            "format": "int64"
          },
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Enim sed quisquam voluptatum et quia quod."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "2",
            "minLength": 1
          }
        },
        "example": {
          "capacityToBeRemoved": 3,
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "8"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id",
          "capacityToBeRemoved"
        ]
      },
      "RemoveCapacityFromResourceInstanceRequest2": {
        "type": "object",
        "properties": {
          "capacityToBeRemoved": {
            "type": "integer",
            "description": "Number of replicas to be removed",
            "example": 3,
            "format": "int64"
          }
        },
        "example": {
          "capacityToBeRemoved": 3
        },
        "required": ["capacityToBeRemoved"]
      },
      "RemoveComputeInstanceTypeRequest": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "Name of the Infra Provider",
            "example": "aws|azure|gcp|all"
          },
          "id": {
            "type": "string",
            "description": "ID of a Compute Config",
            "example": "Atque voluptas ipsam."
          },
          "instanceType": {
            "type": "string",
            "description": "The instance type for this compute instance type config",
            "example": "t3.micro"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "xgu",
            "minLength": 1
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "id": "cc-12345678",
          "instanceType": "t3.micro",
          "serviceId": "s-12345678",
          "token": "7"
        },
        "required": ["token", "id", "serviceId", "cloudProviderName", "instanceType"]
      },
      "RemoveComputeInstanceTypeRequest2": {
        "type": "object",
        "properties": {
          "cloudProviderName": {
            "type": "string",
            "description": "The cloud provider for this compute instance type config",
            "example": "aws"
          },
          "instanceType": {
            "type": "string",
            "description": "The instance type for this compute instance type config",
            "example": "t3.micro"
          }
        },
        "example": {
          "cloudProviderName": "aws",
          "instanceType": "t3.micro"
        },
        "required": ["cloudProviderName", "instanceType"]
      },
      "RemoveCustomDNSToResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "http-service"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Autem sed voluptatem accusantium."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "cv7",
            "minLength": 1
          }
        },
        "example": {
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "resourceKey": "http-service",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "3"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id"
        ]
      },
      "RemoveFileRequest": {
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "ID of a File",
            "example": "Quasi voluptas repudiandae commodi nam."
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Laudantium et alias nihil hic blanditiis est."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "9",
            "minLength": 1
          }
        },
        "example": {
          "fileId": "file-12345678",
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "j2"
        },
        "required": ["token", "id", "serviceId", "fileId"]
      },
      "RemoveResourceDependencyRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Quia quam."
          },
          "resourceDependencyId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Omnis cumque eaque sed."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "wql",
            "minLength": 1
          }
        },
        "example": {
          "id": "r-12345678",
          "resourceDependencyId": "r-12345678",
          "serviceId": "s-12345678",
          "token": "rl"
        },
        "required": ["token", "id", "serviceId", "resourceDependencyId"]
      },
      "RemoveStorageVolumeConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Storage Config",
            "example": "Et autem vitae fuga."
          },
          "mountPath": {
            "type": "string",
            "description": "The specific mount path to remove. If not specified, all mount paths for the storage volume config will be removed",
            "example": "/data"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "storageVolumeConfigId": {
            "type": "string",
            "description": "ID of a Storage Volume Config",
            "example": "Explicabo minima eum."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "dpf",
            "minLength": 1
          }
        },
        "example": {
          "id": "sc-12345678",
          "mountPath": "/data",
          "serviceId": "s-12345678",
          "storageVolumeConfigId": "svc-12345678",
          "token": "6d6"
        },
        "required": ["token", "id", "serviceId", "storageVolumeConfigId"]
      },
      "RemoveStorageVolumeConfigRequest2": {
        "type": "object",
        "properties": {
          "mountPath": {
            "type": "string",
            "description": "The specific mount path to remove. If not specified, all mount paths for the storage volume config will be removed",
            "example": "/data"
          }
        },
        "example": {
          "mountPath": "/data"
        }
      },
      "ReportHealthRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "6",
            "minLength": 1
          }
        },
        "example": {
          "id": "s-12345678",
          "token": "m9u"
        },
        "required": ["token", "id"]
      },
      "ReportHealthResult": {
        "type": "object",
        "properties": {
          "health": {
            "type": "string",
            "description": "Service Health Status",
            "example": "UP|DOWN|UNKNOWN"
          },
          "id": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "report": {
            "type": "object",
            "description": "The health of each environment under this service",
            "example": {
              "se-12345678": {
                "sm-12345678": {
                  "vu-11111111": "UNKNOWN",
                  "vu-12345678": "UP",
                  "vu-87654321": "DOWN"
                }
              }
            },
            "additionalProperties": true
          }
        },
        "example": {
          "health": "UP",
          "id": "s-12345678",
          "report": {
            "se-12345678": {
              "sm-12345678": {
                "vu-11111111": "UNKNOWN",
                "vu-12345678": "UP",
                "vu-87654321": "DOWN"
              }
            }
          }
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@gmail.com"
        },
        "required": ["email"]
      },
      "ResourceCapability": {
        "type": "object",
        "properties": {
          "capability": {
            "type": "string",
            "description": "The type of capability of a resource",
            "example": "SERVERLESS|SERVICE_ACCOUNT_POLICIES|PROCESS_CORE_DUMP|CUSTOM_DNS|SIDECARS"
          },
          "configuration": {
            "type": "object",
            "description": "The configuration parameters of a capability of a resource",
            "example": {
              "EnableAutoStop": true,
              "MinimumNodesInPool": 5,
              "PortsMappingProxyConfig": {
                "MaxNumberOfClustersPerProxyInstance": 50,
                "NumberOfPortsPerCluster": 4
              },
              "ProxyId": "r-123456",
              "ReferenceProxyKey": "resource-proxy",
              "TargetPort": 5432
            },
            "additionalProperties": true
          }
        },
        "description": "The capability of a resource",
        "example": {
          "capability": "SERVERLESS",
          "configuration": {
            "EnableAutoStop": true,
            "MinimumNodesInPool": 5,
            "PortsMappingProxyConfig": {
              "MaxNumberOfClustersPerProxyInstance": 50,
              "NumberOfPortsPerCluster": 4
            },
            "ProxyId": "r-123456",
            "ReferenceProxyKey": "resource-proxy",
            "TargetPort": 5432
          }
        },
        "required": ["capability", "configuration"]
      },
      "ResourceDependency": {
        "type": "object",
        "properties": {
          "parameterMap": {
            "type": "object",
            "description": "A map of the source parameter to the resource dependency parameter",
            "example": {
              "Dolorum qui aut cum adipisci.": "Expedita ut et magnam atque asperiores asperiores.",
              "Saepe iste.": "Dolorem commodi."
            },
            "additionalProperties": {
              "type": "string",
              "example": "Rerum nemo natus ipsum."
            }
          },
          "resourceId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Aut vel facilis molestiae pariatur tenetur eaque."
          }
        },
        "description": "Resource dependency relation specification",
        "example": {
          "parameterMap": {
            "Eum ut.": "Assumenda expedita voluptas recusandae laudantium."
          },
          "resourceId": "Qui consequatur a voluptatem."
        },
        "required": ["resourceId"]
      },
      "ResourceEntity": {
        "type": "object",
        "properties": {
          "isAutoscalingEnabled": {
            "type": "boolean",
            "description": "Whether the resource has autoscaling enabled",
            "example": true
          },
          "isBackupEnabled": {
            "type": "boolean",
            "description": "Whether the resource has backup enabled",
            "example": true
          },
          "isDeprecated": {
            "type": "boolean",
            "description": "Whether the service offering is deprecated",
            "default": false,
            "example": false
          },
          "name": {
            "type": "string",
            "description": "The resource name",
            "example": "My Resource"
          },
          "resourceId": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Modi quidem placeat et."
          },
          "resourceType": {
            "type": "string",
            "description": "The resource type",
            "example": "Kustomize"
          },
          "urlKey": {
            "type": "string",
            "description": "The resource URL key",
            "example": "myResource"
          }
        },
        "example": {
          "isAutoscalingEnabled": true,
          "isBackupEnabled": true,
          "isDeprecated": false,
          "name": "My Resource",
          "resourceId": "r-12345678",
          "resourceType": "Kustomize",
          "urlKey": "myResource"
        },
        "required": ["urlKey", "name", "resourceId", "isDeprecated", "isBackupEnabled"]
      },
      "ResourceHealthSummary": {
        "type": "object",
        "properties": {
          "nodesHealth": {
            "type": "object",
            "description": "The health summary of the nodes by node name",
            "example": {
              "Libero rerum similique in hic dolore.": {
                "availabilityZone": "us-east-2a",
                "connectivityStatus": "HEALTHY",
                "diskHealth": "HEALTHY",
                "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                "events": ["event-1", "event-2"],
                "integrationsHealth": {
                  "CustomerObservabilityHealth": "HEALTHY",
                  "InternalObservabilityHealth": "HEALTHY"
                },
                "loadHealth": "LOAD_NORMAL",
                "loadStatus": "LOAD_NORMAL",
                "nodeHealth": "HEALTHY",
                "nodeName": "postgres-0",
                "ports": [80, 443],
                "processHealth": "HEALTHY",
                "processLiveness": "HEALTHY",
                "recentLogs": "Log message",
                "status": "HEALTHY"
              },
              "Quo unde tempora accusantium aut aliquid consequatur.": {
                "availabilityZone": "us-east-2a",
                "connectivityStatus": "HEALTHY",
                "diskHealth": "HEALTHY",
                "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                "events": ["event-1", "event-2"],
                "integrationsHealth": {
                  "CustomerObservabilityHealth": "HEALTHY",
                  "InternalObservabilityHealth": "HEALTHY"
                },
                "loadHealth": "LOAD_NORMAL",
                "loadStatus": "LOAD_NORMAL",
                "nodeHealth": "HEALTHY",
                "nodeName": "postgres-0",
                "ports": [80, 443],
                "processHealth": "HEALTHY",
                "processLiveness": "HEALTHY",
                "recentLogs": "Log message",
                "status": "HEALTHY"
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/NodeHealthSummary"
            }
          },
          "resourceID": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Enim rerum veritatis cum aut ut ducimus."
          },
          "resourceKey": {
            "type": "string",
            "description": "The key of the resource",
            "example": "primary"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource",
            "example": "Kustomize"
          },
          "status": {
            "type": "string",
            "description": "The heath status of a resource",
            "example": "HEALTHY|UNHEALTHY|UNKNOWN|STOPPED|N/A"
          }
        },
        "example": {
          "nodesHealth": {
            "Ea aliquam ducimus quia quaerat.": {
              "availabilityZone": "us-east-2a",
              "connectivityStatus": "HEALTHY",
              "diskHealth": "HEALTHY",
              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
              "events": ["event-1", "event-2"],
              "integrationsHealth": {
                "CustomerObservabilityHealth": "HEALTHY",
                "InternalObservabilityHealth": "HEALTHY"
              },
              "loadHealth": "LOAD_NORMAL",
              "loadStatus": "LOAD_NORMAL",
              "nodeHealth": "HEALTHY",
              "nodeName": "postgres-0",
              "ports": [80, 443],
              "processHealth": "HEALTHY",
              "processLiveness": "HEALTHY",
              "recentLogs": "Log message",
              "status": "HEALTHY"
            },
            "Eius facilis.": {
              "availabilityZone": "us-east-2a",
              "connectivityStatus": "HEALTHY",
              "diskHealth": "HEALTHY",
              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
              "events": ["event-1", "event-2"],
              "integrationsHealth": {
                "CustomerObservabilityHealth": "HEALTHY",
                "InternalObservabilityHealth": "HEALTHY"
              },
              "loadHealth": "LOAD_NORMAL",
              "loadStatus": "LOAD_NORMAL",
              "nodeHealth": "HEALTHY",
              "nodeName": "postgres-0",
              "ports": [80, 443],
              "processHealth": "HEALTHY",
              "processLiveness": "HEALTHY",
              "recentLogs": "Log message",
              "status": "HEALTHY"
            },
            "Quia qui.": {
              "availabilityZone": "us-east-2a",
              "connectivityStatus": "HEALTHY",
              "diskHealth": "HEALTHY",
              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
              "events": ["event-1", "event-2"],
              "integrationsHealth": {
                "CustomerObservabilityHealth": "HEALTHY",
                "InternalObservabilityHealth": "HEALTHY"
              },
              "loadHealth": "LOAD_NORMAL",
              "loadStatus": "LOAD_NORMAL",
              "nodeHealth": "HEALTHY",
              "nodeName": "postgres-0",
              "ports": [80, 443],
              "processHealth": "HEALTHY",
              "processLiveness": "HEALTHY",
              "recentLogs": "Log message",
              "status": "HEALTHY"
            }
          },
          "resourceID": "resource-12345678",
          "resourceKey": "primary",
          "resourceType": "Kustomize",
          "status": "HEALTHY"
        }
      },
      "ResourceInstanceProvisionerSetupKitRequest": {
        "type": "object",
        "properties": {
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Voluptatum eligendi autem enim."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "02j",
            "minLength": 1
          }
        },
        "example": {
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "a"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey"
        ]
      },
      "ResourceNetworkTopologyResult": {
        "type": "object",
        "properties": {
          "additionalEndpoints": {
            "type": "object",
            "description": "The additional endpoints for this resource",
            "example": {
              "admin": {
                "endpoint": "https://admin.instance-abcdefgh.region.aws.omnistrate.cloud",
                "healthStatus": "HEALTHY",
                "networkingType": "PRIVATE",
                "openPorts": [30000],
                "primary": false
              },
              "cluster": {
                "endpoint": "https://cluster.instance-abcdefgh.region.aws.omnistrate.cloud",
                "healthStatus": "HEALTHY",
                "networkingType": "PUBLIC",
                "openPorts": [443],
                "primary": true
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/ClusterEndpoint"
            }
          },
          "allowedIPRanges": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Aspernatur quam."
            },
            "description": "The allowed IP ranges for this resource",
            "example": ["0.0.0.0/0"]
          },
          "clusterEndpoint": {
            "type": "string",
            "description": "The primary cluster endpoint that load-balances across replicas of this resource",
            "example": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud"
          },
          "clusterPorts": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 5834414390373495000,
              "format": "int64"
            },
            "description": "The ports that the whole cluster exposes",
            "example": [443]
          },
          "customDNSEndpoint": {
            "$ref": "#/components/schemas/CustomDNSEndpoint"
          },
          "hasCompute": {
            "type": "boolean",
            "description": "Whether this resource has associated compute",
            "example": true
          },
          "main": {
            "type": "boolean",
            "description": "Whether this is the main resource",
            "example": true
          },
          "networkingType": {
            "type": "string",
            "description": "The networking type for this resource",
            "example": "PUBLIC"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeNetworkTopologyResult"
            },
            "description": "The nodes that this resource is deployed on",
            "example": [
              {
                "availabilityZone": "us-east-2a",
                "detailedHealth": {
                  "ConnectivityStatus": "UNHEALTHY",
                  "DiskHealth": "UNKNOWN",
                  "LoadStatus": "LOAD_NORMAL",
                  "NodeHealth": "HEALTHY",
                  "ProcessHealth": "HEALTHY",
                  "ProcessLiveness": "HEALTHY"
                },
                "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                "healthStatus": "HEALTHY",
                "id": "primary-0",
                "kubernetesDashboardEndpoint": {
                  "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
                  "deploymentCellID": "hc-12345678"
                },
                "ports": [80, 443],
                "status": "RUNNING",
                "storageSize": 10,
                "vmInfo": {
                  "architecture": "amd64",
                  "azCode": "us-east-1a",
                  "azID": "use1-az1",
                  "externalIP": "3.44.113.6",
                  "instanceType": "t2.small",
                  "internalIP": "192.168.1.4",
                  "k8sNodeName": "my-k8s-node",
                  "kernelVersion": "5.10.228",
                  "kubeletVersion": "1.31.3",
                  "os": "linux",
                  "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
                }
              },
              {
                "availabilityZone": "us-east-2a",
                "detailedHealth": {
                  "ConnectivityStatus": "UNHEALTHY",
                  "DiskHealth": "UNKNOWN",
                  "LoadStatus": "LOAD_NORMAL",
                  "NodeHealth": "HEALTHY",
                  "ProcessHealth": "HEALTHY",
                  "ProcessLiveness": "HEALTHY"
                },
                "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                "healthStatus": "HEALTHY",
                "id": "primary-0",
                "kubernetesDashboardEndpoint": {
                  "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
                  "deploymentCellID": "hc-12345678"
                },
                "ports": [80, 443],
                "status": "RUNNING",
                "storageSize": 10,
                "vmInfo": {
                  "architecture": "amd64",
                  "azCode": "us-east-1a",
                  "azID": "use1-az1",
                  "externalIP": "3.44.113.6",
                  "instanceType": "t2.small",
                  "internalIP": "192.168.1.4",
                  "k8sNodeName": "my-k8s-node",
                  "kernelVersion": "5.10.228",
                  "kubeletVersion": "1.31.3",
                  "os": "linux",
                  "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
                }
              },
              {
                "availabilityZone": "us-east-2a",
                "detailedHealth": {
                  "ConnectivityStatus": "UNHEALTHY",
                  "DiskHealth": "UNKNOWN",
                  "LoadStatus": "LOAD_NORMAL",
                  "NodeHealth": "HEALTHY",
                  "ProcessHealth": "HEALTHY",
                  "ProcessLiveness": "HEALTHY"
                },
                "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                "healthStatus": "HEALTHY",
                "id": "primary-0",
                "kubernetesDashboardEndpoint": {
                  "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
                  "deploymentCellID": "hc-12345678"
                },
                "ports": [80, 443],
                "status": "RUNNING",
                "storageSize": 10,
                "vmInfo": {
                  "architecture": "amd64",
                  "azCode": "us-east-1a",
                  "azID": "use1-az1",
                  "externalIP": "3.44.113.6",
                  "instanceType": "t2.small",
                  "internalIP": "192.168.1.4",
                  "k8sNodeName": "my-k8s-node",
                  "kernelVersion": "5.10.228",
                  "kubeletVersion": "1.31.3",
                  "os": "linux",
                  "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
                }
              },
              {
                "availabilityZone": "us-east-2a",
                "detailedHealth": {
                  "ConnectivityStatus": "UNHEALTHY",
                  "DiskHealth": "UNKNOWN",
                  "LoadStatus": "LOAD_NORMAL",
                  "NodeHealth": "HEALTHY",
                  "ProcessHealth": "HEALTHY",
                  "ProcessLiveness": "HEALTHY"
                },
                "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                "healthStatus": "HEALTHY",
                "id": "primary-0",
                "kubernetesDashboardEndpoint": {
                  "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
                  "deploymentCellID": "hc-12345678"
                },
                "ports": [80, 443],
                "status": "RUNNING",
                "storageSize": 10,
                "vmInfo": {
                  "architecture": "amd64",
                  "azCode": "us-east-1a",
                  "azID": "use1-az1",
                  "externalIP": "3.44.113.6",
                  "instanceType": "t2.small",
                  "internalIP": "192.168.1.4",
                  "k8sNodeName": "my-k8s-node",
                  "kernelVersion": "5.10.228",
                  "kubeletVersion": "1.31.3",
                  "os": "linux",
                  "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
                }
              }
            ]
          },
          "privateNetworkCIDR": {
            "type": "string",
            "description": "The private network CIDR for this resource",
            "example": "10.0.0.2/24"
          },
          "privateNetworkID": {
            "type": "string",
            "description": "ID of a Network",
            "example": "Sapiente ducimus quo nihil ea dicta veritatis."
          },
          "proxyEndpoint": {
            "$ref": "#/components/schemas/ProxyEndpoint"
          },
          "publiclyAccessible": {
            "type": "boolean",
            "description": "Whether this resource is publicly accessible",
            "example": true
          },
          "recentDeploymentFailure": {
            "$ref": "#/components/schemas/RecentDeploymentFailureStatus"
          },
          "resourceInstanceMetadata": {
            "description": "The resource instance metadata",
            "example": {
              "KustomizeGeneratedTemplates": "template"
            }
          },
          "resourceKey": {
            "type": "string",
            "description": "The key of the resource",
            "example": "primary"
          },
          "resourceName": {
            "type": "string",
            "description": "The name of the resource",
            "example": "Primary MySQL DB Node"
          },
          "resourceType": {
            "type": "string",
            "description": "The type of the resource",
            "example": "Kustomize"
          }
        },
        "example": {
          "additionalEndpoints": {
            "admin": {
              "endpoint": "https://admin.instance-abcdefgh.region.aws.omnistrate.cloud",
              "healthStatus": "HEALTHY",
              "networkingType": "PRIVATE",
              "openPorts": [30000],
              "primary": false
            },
            "cluster": {
              "endpoint": "https://cluster.instance-abcdefgh.region.aws.omnistrate.cloud",
              "healthStatus": "HEALTHY",
              "networkingType": "PUBLIC",
              "openPorts": [443],
              "primary": true
            }
          },
          "allowedIPRanges": ["0.0.0.0/0"],
          "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
          "clusterPorts": [443],
          "customDNSEndpoint": {
            "dnsHost": "my-custom-dns.com",
            "name": "DNS to access the dashboard",
            "status": "READY"
          },
          "hasCompute": true,
          "main": true,
          "networkingType": "PUBLIC",
          "nodes": [
            {
              "availabilityZone": "us-east-2a",
              "detailedHealth": {
                "ConnectivityStatus": "UNHEALTHY",
                "DiskHealth": "UNKNOWN",
                "LoadStatus": "LOAD_NORMAL",
                "NodeHealth": "HEALTHY",
                "ProcessHealth": "HEALTHY",
                "ProcessLiveness": "HEALTHY"
              },
              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
              "healthStatus": "HEALTHY",
              "id": "primary-0",
              "kubernetesDashboardEndpoint": {
                "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
                "deploymentCellID": "hc-12345678"
              },
              "ports": [80, 443],
              "status": "RUNNING",
              "storageSize": 10,
              "vmInfo": {
                "architecture": "amd64",
                "azCode": "us-east-1a",
                "azID": "use1-az1",
                "externalIP": "3.44.113.6",
                "instanceType": "t2.small",
                "internalIP": "192.168.1.4",
                "k8sNodeName": "my-k8s-node",
                "kernelVersion": "5.10.228",
                "kubeletVersion": "1.31.3",
                "os": "linux",
                "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
              }
            },
            {
              "availabilityZone": "us-east-2a",
              "detailedHealth": {
                "ConnectivityStatus": "UNHEALTHY",
                "DiskHealth": "UNKNOWN",
                "LoadStatus": "LOAD_NORMAL",
                "NodeHealth": "HEALTHY",
                "ProcessHealth": "HEALTHY",
                "ProcessLiveness": "HEALTHY"
              },
              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
              "healthStatus": "HEALTHY",
              "id": "primary-0",
              "kubernetesDashboardEndpoint": {
                "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
                "deploymentCellID": "hc-12345678"
              },
              "ports": [80, 443],
              "status": "RUNNING",
              "storageSize": 10,
              "vmInfo": {
                "architecture": "amd64",
                "azCode": "us-east-1a",
                "azID": "use1-az1",
                "externalIP": "3.44.113.6",
                "instanceType": "t2.small",
                "internalIP": "192.168.1.4",
                "k8sNodeName": "my-k8s-node",
                "kernelVersion": "5.10.228",
                "kubeletVersion": "1.31.3",
                "os": "linux",
                "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
              }
            },
            {
              "availabilityZone": "us-east-2a",
              "detailedHealth": {
                "ConnectivityStatus": "UNHEALTHY",
                "DiskHealth": "UNKNOWN",
                "LoadStatus": "LOAD_NORMAL",
                "NodeHealth": "HEALTHY",
                "ProcessHealth": "HEALTHY",
                "ProcessLiveness": "HEALTHY"
              },
              "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
              "healthStatus": "HEALTHY",
              "id": "primary-0",
              "kubernetesDashboardEndpoint": {
                "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
                "deploymentCellID": "hc-12345678"
              },
              "ports": [80, 443],
              "status": "RUNNING",
              "storageSize": 10,
              "vmInfo": {
                "architecture": "amd64",
                "azCode": "us-east-1a",
                "azID": "use1-az1",
                "externalIP": "3.44.113.6",
                "instanceType": "t2.small",
                "internalIP": "192.168.1.4",
                "k8sNodeName": "my-k8s-node",
                "kernelVersion": "5.10.228",
                "kubeletVersion": "1.31.3",
                "os": "linux",
                "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
              }
            }
          ],
          "privateNetworkCIDR": "10.0.0.2/24",
          "privateNetworkID": "n-1234abcd",
          "proxyEndpoint": {
            "openPorts": ["30000", "30001"],
            "proxyEndpoint": "https://r-1234.instance-abcdefgh.region.aws.omnistrate.cloud"
          },
          "publiclyAccessible": true,
          "recentDeploymentFailure": {
            "failedAt": "2021-09-01T00:00:00Z",
            "failureReason": "Failed to connect to the database"
          },
          "resourceInstanceMetadata": {
            "KustomizeGeneratedTemplates": "template"
          },
          "resourceKey": "primary",
          "resourceName": "Primary MySQL DB Node",
          "resourceType": "Kustomize"
        },
        "required": [
          "resourceName",
          "resourceKey",
          "clusterEndpoint",
          "hasCompute",
          "nodeEndpoints",
          "ports",
          "main",
          "networkingType",
          "publiclyAccessible",
          "allowedIPRanges"
        ]
      },
      "ResourceSpec": {
        "type": "object",
        "properties": {
          "limits": {
            "type": "object",
            "properties": {
              "cpu": {
                "type": "string",
                "description": "The maximum amount of CPU that the container can use",
                "example": "1"
              },
              "memory": {
                "type": "string",
                "description": "The maximum amount of memory that the container can use",
                "example": "500Mi"
              }
            },
            "description": "The maximum amount of CPU and memory that the container can use",
            "example": {
              "cpu": "1",
              "memory": "500Mi"
            }
          },
          "requests": {
            "type": "object",
            "properties": {
              "cpu": {
                "type": "string",
                "description": "The amount of CPU that Kubernetes will guarantee for the container",
                "example": "0.5"
              },
              "memory": {
                "type": "string",
                "description": "The amount of memory that Kubernetes will guarantee for the container",
                "example": "200Mi"
              }
            },
            "description": "The amount of CPU and memory that Kubernetes will guarantee for the container",
            "example": {
              "cpu": "0.5",
              "memory": "200Mi"
            }
          }
        },
        "description": "Resource requirements",
        "example": {
          "limits": {
            "cpu": "1",
            "memory": "500Mi"
          },
          "requests": {
            "cpu": "0.5",
            "memory": "200Mi"
          }
        }
      },
      "ResourceSummary": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the resource",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Sit rerum deleniti exercitationem natus porro."
          },
          "imageConfigId": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "Iste nulla facere quos."
          },
          "infraConfigId": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Beatae vel et."
          },
          "isExternal": {
            "type": "boolean",
            "description": "Whether the resource is external",
            "example": true
          },
          "managedResourceType": {
            "type": "string",
            "description": "The managed resource type of instance",
            "example": "PortsBasedProxy"
          },
          "name": {
            "type": "string",
            "description": "The name of the resource",
            "example": "MySQL multi-writer service"
          }
        },
        "example": {
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "id": "r-12345678",
          "imageConfigId": "imgc-12345678",
          "infraConfigId": "ic-12345678",
          "isExternal": true,
          "managedResourceType": "PortsBasedProxy",
          "name": "MySQL multi-writer service"
        },
        "required": ["id", "name", "description", "isExternal"]
      },
      "RestartResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Alias reprehenderit ut rerum esse."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "e",
            "minLength": 1
          }
        },
        "example": {
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "3x1"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id"
        ]
      },
      "RestoreResourceInstanceFromSnapshotRequest": {
        "type": "object",
        "properties": {
          "network_type": {
            "type": "string",
            "description": "The network type",
            "example": "PUBLIC"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Voluptatibus ea nihil."
          },
          "snapshotId": {
            "type": "string",
            "description": "ID of a Resource Instance Snapshot",
            "example": "Reprehenderit eum ab ut."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "q",
            "minLength": 1
          }
        },
        "example": {
          "network_type": "PUBLIC",
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "snapshotId": "instance-ss-abcd1234",
          "subscriptionId": "sub-abcd1234",
          "token": "w4"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "snapshotId"
        ]
      },
      "RestoreResourceInstanceFromSnapshotRequest2": {
        "type": "object",
        "properties": {
          "network_type": {
            "type": "string",
            "description": "The network type",
            "example": "PUBLIC"
          }
        },
        "example": {
          "network_type": "PUBLIC"
        }
      },
      "RestoreResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "network_type": {
            "type": "string",
            "description": "The network type",
            "example": "PUBLIC"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Consequatur nemo dolor."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "targetRestoreTime": {
            "type": "string",
            "description": "The target restore time",
            "example": "2021-09-01T00:00:00Z"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "o",
            "minLength": 1
          }
        },
        "example": {
          "id": "instance-abcd1234",
          "network_type": "PUBLIC",
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "targetRestoreTime": "2021-09-01T00:00:00Z",
          "token": "3b"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id",
          "targetRestoreTime"
        ]
      },
      "RestoreResourceInstanceRequest2": {
        "type": "object",
        "properties": {
          "network_type": {
            "type": "string",
            "description": "The network type",
            "example": "PUBLIC"
          },
          "targetRestoreTime": {
            "type": "string",
            "description": "The target restore time",
            "example": "2021-09-01T00:00:00Z"
          }
        },
        "example": {
          "network_type": "PUBLIC",
          "targetRestoreTime": "2021-09-01T00:00:00Z"
        },
        "required": ["targetRestoreTime"]
      },
      "RevokeConsumptionUserRoleRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "roleType": {
            "type": "string",
            "description": "Type of the role",
            "example": "root|editor|reader|service_editor|service_reader|admin|service_operator"
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "qg",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "roleType": "reader",
          "subscriptionId": "sub-abcd1234",
          "token": "3r"
        },
        "required": ["token", "email", "roleType", "subscriptionId"]
      },
      "RevokeConsumptionUserRoleRequest2": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "roleType": {
            "type": "string",
            "example": "reader"
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "roleType": "reader"
        },
        "required": ["email", "roleType"]
      },
      "RevokeUserRoleRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "roleType": {
            "type": "string",
            "description": "Type of the role",
            "example": "root|editor|reader|service_editor|service_reader|admin|service_operator"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "sdk",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "roleType": "reader",
          "token": "v"
        },
        "required": ["token", "email", "roleType"]
      },
      "RevokeUserRoleRequest2": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "roleType": {
            "type": "string",
            "example": "reader"
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "roleType": "reader"
        },
        "required": ["email", "roleType"]
      },
      "RolloutFleetImageConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "Temporibus beatae exercitationem sit."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "k5",
            "minLength": 1
          }
        },
        "description": "Rollout the image configuration to all existing entities using this image configuration",
        "example": {
          "id": "imgc-12345678",
          "serviceId": "s-12345678",
          "token": "9jd"
        },
        "required": ["token", "serviceId", "id"]
      },
      "RolloutFleetImageStatusRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "Et harum at odio ut hic."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "b9",
            "minLength": 1
          }
        },
        "example": {
          "id": "imgc-12345678",
          "serviceId": "s-12345678",
          "token": "hf4"
        },
        "required": ["token", "serviceId", "id"]
      },
      "RolloutFleetImageStatusResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "UpgradeStatus is the status of an upgrade path",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING"
          }
        },
        "example": {
          "status": "IN_PROGRESS"
        },
        "required": ["status"]
      },
      "RolloutFleetInfraRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Quia hic qui aliquid voluptas repellat hic."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "zu",
            "minLength": 1
          }
        },
        "example": {
          "id": "ic-12345678",
          "serviceId": "s-12345678",
          "token": "k6"
        },
        "required": ["token", "id", "serviceId"]
      },
      "RolloutFleetInfraStatusRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Ab cumque voluptates ut quam."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "5",
            "minLength": 1
          }
        },
        "example": {
          "id": "ic-12345678",
          "serviceId": "s-12345678",
          "token": "w"
        },
        "required": ["token", "id", "serviceId"]
      },
      "RolloutFleetInfraStatusResult": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "UpgradeStatus is the status of an upgrade path",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING"
          }
        },
        "example": {
          "status": "IN_PROGRESS"
        },
        "required": ["status"]
      },
      "Route53Configuration": {
        "type": "object",
        "properties": {
          "awsAccountID": {
            "type": "string",
            "description": "The AWS account hosting the the hosted zone for the domain",
            "example": "123456789012"
          }
        },
        "example": {
          "awsAccountID": "123456789012"
        },
        "required": ["awsAccountID"]
      },
      "Route53ConfigurationDescription": {
        "type": "object",
        "properties": {
          "awsAccountID": {
            "type": "string",
            "description": "The AWS account hosting the the hosted zone for the domain",
            "example": "123456789012"
          },
          "awsCloudFormationTemplateURL": {
            "type": "string",
            "description": "The URL to the CloudFormation template",
            "example": "https://s3.amazonaws.com/my-bucket/my-template.json"
          }
        },
        "example": {
          "awsAccountID": "123456789012",
          "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
        },
        "required": ["awsAccountID", "awsCloudFormationTemplateURL"]
      },
      "S3Configuration": {
        "type": "object",
        "example": {}
      },
      "SaaSPortal": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "The custom domain of the SaaS portal",
            "example": "mycustomdomain.com"
          },
          "customDomainStatus": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          },
          "detailedNetworkTopology": {
            "type": "object",
            "description": "The detailed network topology of the SaaS portal",
            "example": {
              "r-abcd1234": {
                "allowedIPRanges": ["0.0.0.0/0"],
                "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                "clusterPorts": [3306],
                "main": true,
                "networkingType": "PUBLIC",
                "nodes": [
                  {
                    "availabilityZone": "us-east-2a",
                    "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                    "healthStatus": "healthy",
                    "id": "primary-0",
                    "ports": [3306],
                    "status": "RUNNING"
                  }
                ],
                "privateNetworkCIDR": "10.0.0.2/24",
                "privateNetworkID": "n-1234abcd",
                "publiclyAccessible": true,
                "resourceKey": "saasportal",
                "resourceName": "SaaS Portal"
              }
            },
            "additionalProperties": true
          },
          "emailConfig": {
            "$ref": "#/components/schemas/SaaSPortalEmailConfig"
          },
          "endpoint": {
            "type": "string",
            "description": "The endpoint of the SaaS portal for this environment type",
            "example": "https://saas-portal.example.com"
          },
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "googleAnalyticsTagID": {
            "type": "string",
            "description": "The Google Analytics tag ID for the SaaS portal",
            "example": "G-123456789"
          },
          "imageConfig": {
            "$ref": "#/components/schemas/SaaSPortalImageConfig"
          },
          "status": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          }
        },
        "example": {
          "customDomain": "mycustomdomain.com",
          "customDomainStatus": "READY",
          "detailedNetworkTopology": {
            "r-abcd1234": {
              "allowedIPRanges": ["0.0.0.0/0"],
              "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
              "clusterPorts": [3306],
              "main": true,
              "networkingType": "PUBLIC",
              "nodes": [
                {
                  "availabilityZone": "us-east-2a",
                  "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
                  "healthStatus": "healthy",
                  "id": "primary-0",
                  "ports": [3306],
                  "status": "RUNNING"
                }
              ],
              "privateNetworkCIDR": "10.0.0.2/24",
              "privateNetworkID": "n-1234abcd",
              "publiclyAccessible": true,
              "resourceKey": "saasportal",
              "resourceName": "SaaS Portal"
            }
          },
          "emailConfig": {
            "smtpFromEmail": "example@gmail.com",
            "smtpHost": "smtp.gmail.com",
            "smtpPassword": "password",
            "smtpPort": 587,
            "smtpUsername": "username"
          },
          "endpoint": "https://saas-portal.example.com",
          "environmentType": "DEV",
          "googleAnalyticsTagID": "G-123456789",
          "imageConfig": {
            "imageName": "myimage",
            "imageRegistry": "ghcr.io",
            "imageTag": "latest"
          },
          "status": "READY"
        },
        "required": ["environmentType", "status"]
      },
      "SaaSPortalEmailConfig": {
        "type": "object",
        "properties": {
          "smtpFromEmail": {
            "type": "string",
            "description": "The SMTP from email",
            "example": "example@gmail.com"
          },
          "smtpHost": {
            "type": "string",
            "description": "The SMTP host",
            "example": "smtp.gmail.com"
          },
          "smtpPassword": {
            "type": "string",
            "description": "The SMTP password",
            "example": "password"
          },
          "smtpPort": {
            "type": "integer",
            "description": "The SMTP port",
            "example": 587,
            "format": "int64"
          },
          "smtpUsername": {
            "type": "string",
            "description": "The SMTP username",
            "example": "username"
          }
        },
        "example": {
          "smtpFromEmail": "example@gmail.com",
          "smtpHost": "smtp.gmail.com",
          "smtpPassword": "password",
          "smtpPort": 587,
          "smtpUsername": "username"
        },
        "required": ["smtpUsername", "smtpPassword", "smtpFromEmail", "smtpHost"]
      },
      "SaaSPortalImageConfig": {
        "type": "object",
        "properties": {
          "imageName": {
            "type": "string",
            "description": "The image name for the SaaS portal",
            "example": "myimage"
          },
          "imageRegistry": {
            "type": "string",
            "description": "The image registry for the SaaS portal",
            "example": "ghcr.io"
          },
          "imageTag": {
            "type": "string",
            "description": "The image tag for the SaaS portal",
            "example": "latest"
          }
        },
        "example": {
          "imageName": "myimage",
          "imageRegistry": "ghcr.io",
          "imageTag": "latest"
        },
        "required": ["imageRegistry", "imageName", "imageTag"]
      },
      "SaveHelmPackageRequest": {
        "type": "object",
        "properties": {
          "helmPackage": {
            "$ref": "#/components/schemas/HelmPackage"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "em2",
            "minLength": 1
          }
        },
        "example": {
          "helmPackage": {
            "chartName": "my-chart",
            "chartRepoName": "my-repo",
            "chartRepoUrl": "https://my-repo.com",
            "chartValues": {
              "key1": "value1",
              "key2": 3,
              "key3": {
                "key4": "value4"
              }
            },
            "chartVersion": "1.0.0",
            "namespace": "default",
            "password": "my-password",
            "username": "my-user"
          },
          "token": "gs"
        },
        "required": ["token", "helmPackage"]
      },
      "SaveHelmPackageRequest2": {
        "type": "object",
        "properties": {
          "helmPackage": {
            "$ref": "#/components/schemas/HelmPackage"
          }
        },
        "example": {
          "helmPackage": {
            "chartName": "my-chart",
            "chartRepoName": "my-repo",
            "chartRepoUrl": "https://my-repo.com",
            "chartValues": {
              "key1": "value1",
              "key2": 3,
              "key3": {
                "key4": "value4"
              }
            },
            "chartVersion": "1.0.0",
            "namespace": "default",
            "password": "my-password",
            "username": "my-user"
          }
        },
        "required": ["helmPackage"]
      },
      "ServiceAssets": {
        "type": "object",
        "properties": {
          "cloudFormationURL": {
            "type": "string",
            "description": "The URL for CloudFormation onboarding",
            "example": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa"
          },
          "cloudFormationURLNoLB": {
            "type": "string",
            "description": "The URL for CloudFormation onboarding without LoadBalancer policy",
            "example": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
          }
        },
        "example": {
          "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
          "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
        }
      },
      "ServiceDeploymentDetails": {
        "type": "object",
        "properties": {
          "dependsOnDeployment": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Commodi dolore et."
            },
            "description": "The deployment keys that this deployment depends on",
            "example": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"]
          },
          "instanceDeploymentAlias": {
            "type": "string",
            "description": "The instance deployment alias",
            "example": "instanceDeploymentAlias"
          },
          "instanceId": {
            "type": "string",
            "description": "ID of a Resource Instance",
            "example": "instance-12345678"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "status": {
            "type": "string",
            "description": "The status of the service deployment",
            "example": "PENDING"
          },
          "statusMessage": {
            "type": "string",
            "description": "The status message of the service deployment",
            "example": "Creating deployment"
          },
          "subscriptionId": {
            "type": "string",
            "description": "ID of a Subscription",
            "example": "Itaque mollitia delectus minima excepturi qui recusandae."
          }
        },
        "example": {
          "dependsOnDeployment": ["instanceDeploymentAlias1", "instanceDeploymentAlias2"],
          "instanceDeploymentAlias": "instanceDeploymentAlias",
          "instanceId": "i-12345678",
          "serviceId": "s-12345678",
          "status": "PENDING",
          "statusMessage": "Creating deployment",
          "subscriptionId": "Sunt magnam aut perspiciatis saepe."
        },
        "required": ["instanceDeploymentAlias", "serviceId", "subscriptionId"]
      },
      "ServiceEnvironment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Environment",
            "example": "dev"
          },
          "promoteStatus": {
            "type": "string",
            "description": "The status of the promotion",
            "example": "IN_SYNC|OUT_OF_SYNC|UNKNOWN"
          },
          "saasPortalStatus": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          },
          "saasPortalUrl": {
            "type": "string",
            "description": "The URL of the SaaS portal for this environment type",
            "example": "https://saas-portal.example.com"
          },
          "servicePlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServicePlan"
            },
            "description": "List of service plans",
            "example": [
              {
                "description": "A Basic product tier",
                "modelType": "CUSTOMER_HOSTED",
                "name": "Basic",
                "productTierID": "pt-12345678",
                "tierType": "OMNISTRATE_DEDICATED_TENANCY"
              },
              {
                "description": "A Basic product tier",
                "modelType": "CUSTOMER_HOSTED",
                "name": "Basic",
                "productTierID": "pt-12345678",
                "tierType": "OMNISTRATE_DEDICATED_TENANCY"
              },
              {
                "description": "A Basic product tier",
                "modelType": "CUSTOMER_HOSTED",
                "name": "Basic",
                "productTierID": "pt-12345678",
                "tierType": "OMNISTRATE_DEDICATED_TENANCY"
              }
            ]
          },
          "sourceEnvironmentID": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "sourceEnvironmentName": {
            "type": "string",
            "description": "The source environment name",
            "example": "dev"
          },
          "type": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "visibility": {
            "type": "string",
            "description": "This parameter is used to configure the visibility of the service control-plane APIs",
            "example": "PUBLIC"
          }
        },
        "example": {
          "id": "se-12345678",
          "name": "dev",
          "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
          "saasPortalStatus": "READY",
          "saasPortalUrl": "https://saas-portal.example.com",
          "servicePlans": [
            {
              "description": "A Basic product tier",
              "modelType": "CUSTOMER_HOSTED",
              "name": "Basic",
              "productTierID": "pt-12345678",
              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
            },
            {
              "description": "A Basic product tier",
              "modelType": "CUSTOMER_HOSTED",
              "name": "Basic",
              "productTierID": "pt-12345678",
              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
            },
            {
              "description": "A Basic product tier",
              "modelType": "CUSTOMER_HOSTED",
              "name": "Basic",
              "productTierID": "pt-12345678",
              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
            },
            {
              "description": "A Basic product tier",
              "modelType": "CUSTOMER_HOSTED",
              "name": "Basic",
              "productTierID": "pt-12345678",
              "tierType": "OMNISTRATE_DEDICATED_TENANCY"
            }
          ],
          "sourceEnvironmentID": "se-12345678",
          "sourceEnvironmentName": "dev",
          "type": "DEV",
          "visibility": "private"
        },
        "required": ["id", "name", "visibility", "servicePlans"]
      },
      "ServiceHealthRequest": {
        "type": "object",
        "properties": {
          "serviceEnvironmentID": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceID": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "p",
            "minLength": 1
          }
        },
        "example": {
          "serviceEnvironmentID": "se-123456",
          "serviceID": "s-123456",
          "token": "yh"
        },
        "required": ["token", "serviceID", "serviceEnvironmentID"]
      },
      "ServiceHealthSummary": {
        "type": "object",
        "properties": {
          "cloudProviderHealthSummary": {
            "type": "object",
            "description": "The summary of health by cloud provider",
            "example": {
              "aws|azure|gcp|all": {
                "cloudProvider": "aws",
                "deployingInstances": 2778036134541598000,
                "healthyInstances": 2560336174227553300,
                "message": "Cloud provider is healthy",
                "regionalHealthSummary": {
                  "Quia explicabo qui ut dicta omnis.": {
                    "deployingInstances": 4743757747627144000,
                    "deploymentCellHealthSummary": {
                      "Omnis sit facilis debitis temporibus.": {
                        "deployingInstances": 1936979972301701600,
                        "healthyInstances": 1988257824015038700,
                        "hostClusterID": "hc-12345678",
                        "message": "Cell is healthy",
                        "status": "Healthy",
                        "totalInstances": 8184821500181041000,
                        "unhealthyInstances": 5543104014255075000,
                        "unknownInstances": 1050601003122845600
                      }
                    },
                    "healthyInstances": 1306446872922725400,
                    "message": "Region is healthy",
                    "region": "us-east-1",
                    "status": "Healthy",
                    "totalInstances": 5342646693377067000,
                    "unhealthyInstances": 2004751239827191000,
                    "unknownInstances": 5878741193542757000
                  }
                },
                "status": "Healthy",
                "totalInstances": 2851051305072088000,
                "unhealthyInstances": 956184717608472400,
                "unknownInstances": 4277008956250192400
              }
            },
            "additionalProperties": true
          },
          "deployingInstances": {
            "type": "integer",
            "description": "The number of instances currently deploying",
            "example": 1623597908175618000,
            "format": "int64"
          },
          "healthyInstances": {
            "type": "integer",
            "description": "The number of healthy instances in the region",
            "example": 6680978997321610000,
            "format": "int64"
          },
          "message": {
            "type": "string",
            "description": "The status message",
            "example": "Service is healthy"
          },
          "serviceEnvironmentID": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceID": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "status": {
            "type": "string",
            "description": "The status of the service",
            "example": "Healthy"
          },
          "totalInstances": {
            "type": "integer",
            "description": "The total number of instances in the region",
            "example": 1169752865413673200,
            "format": "int64"
          },
          "unhealthyInstances": {
            "type": "integer",
            "description": "The number of unhealthy instances in the region",
            "example": 564279613502775500,
            "format": "int64"
          },
          "unknownInstances": {
            "type": "integer",
            "description": "The number of instances with unknown status",
            "example": 3841772247363567600,
            "format": "int64"
          }
        },
        "example": {
          "cloudProviderHealthSummary": {
            "aws|azure|gcp|all": {
              "cloudProvider": "aws",
              "deployingInstances": 2778036134541598000,
              "healthyInstances": 2560336174227553300,
              "message": "Cloud provider is healthy",
              "regionalHealthSummary": {
                "Quia explicabo qui ut dicta omnis.": {
                  "deployingInstances": 4743757747627144000,
                  "deploymentCellHealthSummary": {
                    "Omnis sit facilis debitis temporibus.": {
                      "deployingInstances": 1936979972301701600,
                      "healthyInstances": 1988257824015038700,
                      "hostClusterID": "hc-12345678",
                      "message": "Cell is healthy",
                      "status": "Healthy",
                      "totalInstances": 8184821500181041000,
                      "unhealthyInstances": 5543104014255075000,
                      "unknownInstances": 1050601003122845600
                    }
                  },
                  "healthyInstances": 1306446872922725400,
                  "message": "Region is healthy",
                  "region": "us-east-1",
                  "status": "Healthy",
                  "totalInstances": 5342646693377067000,
                  "unhealthyInstances": 2004751239827191000,
                  "unknownInstances": 5878741193542757000
                }
              },
              "status": "Healthy",
              "totalInstances": 2851051305072088000,
              "unhealthyInstances": 956184717608472400,
              "unknownInstances": 4277008956250192400
            }
          },
          "deployingInstances": 9072146777712569000,
          "healthyInstances": 3797260709472341000,
          "message": "Service is healthy",
          "serviceEnvironmentID": "se-123456",
          "serviceID": "s-123456",
          "status": "Healthy",
          "totalInstances": 7238464055100483000,
          "unhealthyInstances": 8043843747476355000,
          "unknownInstances": 5873647237304390000
        },
        "required": [
          "serviceID",
          "serviceEnvironmentID",
          "status",
          "message",
          "totalInstances",
          "healthyInstances",
          "unhealthyInstances",
          "cloudProviderHealthSummary",
          "deployingInstances"
        ]
      },
      "ServiceModelFeatureConfiguration": {
        "type": "object",
        "description": "The configuration parameters of the service model feature",
        "example": {
          "status": "ON"
        },
        "additionalProperties": true
      },
      "ServiceModelFeatureDetail": {
        "type": "object",
        "properties": {
          "configuration": {
            "$ref": "#/components/schemas/ServiceModelFeatureConfiguration"
          },
          "feature": {
            "type": "string",
            "description": "Name of the service model feature",
            "example": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
          }
        },
        "example": {
          "configuration": {
            "status": "ON"
          },
          "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
        },
        "required": ["feature", "configuration"]
      },
      "ServiceOffering": {
        "type": "object",
        "properties": {
          "AutoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "assets": {
            "$ref": "#/components/schemas/ServiceAssets"
          },
          "awsRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Atque illo ea molestias."
            },
            "description": "The AWS regions that this service offering is available on",
            "example": ["us-east-2", "ca-central-1"]
          },
          "billingPlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferingBillingPlan"
            },
            "description": "List of billing plans for this product tier.",
            "example": [
              {
                "maxNumberofInstances": 5
              },
              {
                "maxNumberofInstances": 5
              },
              {
                "maxNumberofInstances": 5
              }
            ]
          },
          "cloudProviders": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Perspiciatis et."
            },
            "description": "List of supported cloud providers for this product tier.",
            "example": ["AWS", "GCP", "Azure"]
          },
          "gcpRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Aut maxime."
            },
            "description": "The GCP regions that this service offering is available on",
            "example": ["us-central1"]
          },
          "productTierDescription": {
            "type": "string",
            "description": "A brief description of the product tier",
            "example": "A premium product tier"
          },
          "productTierDocumentation": {
            "type": "string",
            "description": "Documentation",
            "example": "Any documentation"
          },
          "productTierID": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Omnis pariatur natus aperiam ipsam aut pariatur."
          },
          "productTierName": {
            "type": "string",
            "description": "The product tier name",
            "example": "Premium"
          },
          "productTierPlanDescription": {
            "type": "string",
            "description": "A brief description for the end user of the product tier",
            "example": "A premium plan"
          },
          "productTierPricing": {
            "description": "Pricing",
            "example": {
              "price1": "value1"
            }
          },
          "productTierSupport": {
            "type": "string",
            "description": "Support",
            "example": "Any support"
          },
          "productTierType": {
            "type": "string",
            "description": "ProductTierType is the type of tier for a product",
            "example": "OMNISTRATE_DEDICATED_TENANCY|OMNISTRATE_MULTI_TENANCY|CUSTOM_TENANCY"
          },
          "productTierURLKey": {
            "type": "string",
            "description": "The product tier URL key",
            "example": "premium"
          },
          "productTierVersion": {
            "type": "string",
            "description": "The product tier version",
            "example": "1.0.0"
          },
          "resourceParameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceEntity"
            },
            "description": "The resource parameters",
            "example": [
              {
                "name": "MySQL",
                "resourceId": "r-12345678",
                "urlKey": "mysql"
              },
              {
                "name": "Redis",
                "resourceId": "r-abcdefgh",
                "urlKey": "redis"
              }
            ]
          },
          "serviceAPIID": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Dolore magnam."
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentID": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceEnvironmentName": {
            "type": "string",
            "description": "The service environment name",
            "example": "Development"
          },
          "serviceEnvironmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "serviceEnvironmentURLKey": {
            "type": "string",
            "description": "The service environment URL key",
            "example": "dev"
          },
          "serviceEnvironmentVisibility": {
            "type": "string",
            "description": "This parameter is used to configure the visibility of the service control-plane APIs",
            "example": "PUBLIC"
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "Sit quas et non et."
          },
          "serviceModelFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceModelFeatureDetail"
            },
            "description": "Enabled service model features",
            "example": [
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              },
              {
                "configuration": {
                  "status": "ON"
                },
                "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
              }
            ]
          },
          "serviceModelID": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Autem delectus quae magnam excepturi odit."
          },
          "serviceModelName": {
            "type": "string",
            "description": "The service model name",
            "example": "Hosted"
          },
          "serviceModelStatus": {
            "type": "string",
            "description": "The service model status",
            "example": "Ready"
          },
          "serviceModelType": {
            "type": "string",
            "description": "The model type encapsulating this service",
            "example": "OMNISTRATE_HOSTED|CUSTOMER_HOSTED|BYOA"
          },
          "serviceModelURLKey": {
            "type": "string",
            "description": "The service model URL key",
            "example": "hosted"
          },
          "supportsPublicNetwork": {
            "type": "boolean",
            "description": "Indicates whether any of the resources in the product tier support public network",
            "example": false
          }
        },
        "example": {
          "AutoApproveSubscription": false,
          "assets": {
            "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
            "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
          },
          "awsRegions": ["us-east-2", "ca-central-1"],
          "billingPlans": [
            {
              "maxNumberofInstances": 5
            },
            {
              "maxNumberofInstances": 5
            },
            {
              "maxNumberofInstances": 5
            },
            {
              "maxNumberofInstances": 5
            }
          ],
          "cloudProviders": ["AWS", "GCP", "Azure"],
          "gcpRegions": ["us-central1"],
          "productTierDescription": "A premium product tier",
          "productTierDocumentation": "Any documentation",
          "productTierID": "pt-12345678",
          "productTierName": "Premium",
          "productTierPlanDescription": "A premium plan",
          "productTierPricing": {
            "price1": "value1"
          },
          "productTierSupport": "Any support",
          "productTierType": "OMNISTRATE_DEDICATED_TENANCY",
          "productTierURLKey": "premium",
          "productTierVersion": "1.0.0",
          "resourceParameters": [
            {
              "name": "MySQL",
              "resourceId": "r-12345678",
              "urlKey": "mysql"
            },
            {
              "name": "Redis",
              "resourceId": "r-abcdefgh",
              "urlKey": "redis"
            }
          ],
          "serviceAPIID": "sa-12345678",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentID": "se-12345678",
          "serviceEnvironmentName": "Development",
          "serviceEnvironmentType": "DEV",
          "serviceEnvironmentURLKey": "dev",
          "serviceEnvironmentVisibility": "PRIVATE",
          "serviceLogoURL": "Voluptatem hic alias dolores magnam.",
          "serviceModelFeatures": [
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            },
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            },
            {
              "configuration": {
                "status": "ON"
              },
              "feature": "CUSTOM_NETWORKS|CUSTOM_TERRAFORM_POLICY"
            }
          ],
          "serviceModelID": "sm-12345678",
          "serviceModelName": "Hosted",
          "serviceModelStatus": "Ready",
          "serviceModelType": "CUSTOMER_HOSTED, OMNISTRATE_HOSTED, BYOA",
          "serviceModelURLKey": "hosted",
          "supportsPublicNetwork": false
        },
        "required": [
          "serviceEnvironmentURLKey",
          "serviceEnvironmentName",
          "serviceEnvironmentVisibility",
          "serviceEnvironmentType",
          "serviceAPIVersion",
          "serviceAPIID",
          "serviceModelURLKey",
          "serviceModelName",
          "serviceModelType",
          "serviceModelStatus",
          "productTierURLKey",
          "productTierName",
          "resourceParameters",
          "productTierID",
          "productTierVersion",
          "productTierType",
          "serviceModelID",
          "serviceEnvironmentID",
          "serviceLogoURL",
          "productTierDocumentation",
          "productTierSupport",
          "productTierPricing",
          "AutoApproveSubscription"
        ]
      },
      "ServicePlan": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the Product Tier",
            "example": "A Basic product tier"
          },
          "modelType": {
            "type": "string",
            "description": "The model type encapsulating this service",
            "example": "OMNISTRATE_HOSTED|CUSTOMER_HOSTED|BYOA"
          },
          "name": {
            "type": "string",
            "description": "Name of the Product Tier",
            "example": "Basic"
          },
          "productTierID": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Quae quidem."
          },
          "tierType": {
            "type": "string",
            "description": "ProductTierType is the type of tier for a product",
            "example": "OMNISTRATE_DEDICATED_TENANCY|OMNISTRATE_MULTI_TENANCY|CUSTOM_TENANCY"
          }
        },
        "example": {
          "description": "A Basic product tier",
          "modelType": "CUSTOMER_HOSTED",
          "name": "Basic",
          "productTierID": "pt-12345678",
          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
        },
        "required": ["name", "description", "tierType", "modelType", "productTierID"]
      },
      "ServiceProviderEvent": {
        "type": "object",
        "properties": {
          "alertType": {
            "type": "string",
            "description": "The type of the alert",
            "example": "Alarm|Notification"
          },
          "eventCategory": {
            "type": "string",
            "description": "The category of the service provider specific event",
            "example": "InstanceEvent|ServiceEvent|UserEvent|IdentityProviderEvent"
          },
          "eventID": {
            "type": "string",
            "description": "ID of a Event",
            "example": "Numquam nemo quia incidunt voluptas."
          },
          "eventPayload": {
            "type": "object",
            "description": "The event payload for a service provider",
            "example": {
              "Officia a qui possimus nostrum quod.": "Id veniam voluptas.",
              "Sit alias exercitationem.": "Eos eaque fugit laudantium."
            },
            "additionalProperties": true
          },
          "eventType": {
            "type": "string",
            "description": "The type of the service provider specific event",
            "example": "UnhealthyInstance|FailedDeployment|ScaleOut|UserSignUp|UserSubscription"
          },
          "expiryTime": {
            "type": "string",
            "description": "The expiry time of the event",
            "example": "2023-01-10T00:00:00Z"
          },
          "instanceID": {
            "type": "string",
            "description": "ID of a Resource Instance",
            "example": "instance-12345678"
          },
          "planVersion": {
            "type": "string",
            "description": "The version of the plan",
            "example": "v1.0"
          },
          "priority": {
            "type": "string",
            "description": "The priority of the event",
            "example": "Critical|High|Medium|Low"
          },
          "resourceName": {
            "type": "string",
            "description": "The name of the resource",
            "example": "Resource-123"
          },
          "scope": {
            "type": "string",
            "description": "The scope of the event",
            "example": "ServiceProvider|EndCustomer"
          },
          "serviceEnvironmentID": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "serviceID": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceName": {
            "type": "string",
            "description": "The name of the service",
            "example": "Service-123"
          },
          "servicePlanName": {
            "type": "string",
            "description": "The name of the service plan",
            "example": "Basic Plan"
          },
          "time": {
            "type": "string",
            "description": "The event time",
            "example": "2023-01-10T00:00:00Z"
          }
        },
        "example": {
          "alertType": "Alarm",
          "eventCategory": "InstanceEvent",
          "eventID": "e-123456",
          "eventPayload": {
            "Sit rerum quo veritatis eum aperiam doloremque.": "Exercitationem et qui."
          },
          "eventType": "UnhealthyInstance",
          "expiryTime": "2023-01-10T00:00:00Z",
          "instanceID": "instance-12345678",
          "planVersion": "v1.0",
          "priority": "Critical",
          "resourceName": "Resource-123",
          "scope": "ServiceProvider",
          "serviceEnvironmentID": "se-123456",
          "serviceID": "s-123456",
          "serviceName": "Service-123",
          "servicePlanName": "Basic Plan",
          "time": "2023-01-10T00:00:00Z"
        },
        "required": [
          "eventID",
          "eventType",
          "alertType",
          "expiryTime",
          "eventCategory",
          "time",
          "eventPayload",
          "priority",
          "scope"
        ]
      },
      "ServiceProviderEventSummary": {
        "type": "object",
        "properties": {
          "eventsSummary": {
            "type": "object",
            "description": "The number of outstanding events by type",
            "example": {
              "FailedDeployment": 1,
              "UnhealthyInstance": 2
            },
            "additionalProperties": true
          }
        },
        "example": {
          "eventsSummary": {
            "FailedDeployment": 1,
            "UnhealthyInstance": 2
          }
        }
      },
      "SetActiveAccountConfigRequest": {
        "type": "object",
        "properties": {
          "accountConfigId": {
            "type": "string",
            "description": "ID of an Account Config",
            "example": "Voluptatem omnis praesentium sunt qui voluptate nihil."
          },
          "id": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Dolorem rerum."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "g",
            "minLength": 1
          }
        },
        "example": {
          "accountConfigId": "ac-12345678",
          "id": "sm-12345678",
          "serviceId": "s-12345678",
          "token": "h"
        },
        "required": ["token", "accountConfigId", "id", "serviceId"]
      },
      "SetEnvironmentVariablesRequest": {
        "type": "object",
        "properties": {
          "environmentVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            },
            "description": "The environment variables that this resource requires",
            "example": [
              {
                "key": "MYSQL_ROOT_PASSWORD",
                "value": "password"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Ratione ut."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "r",
            "minLength": 1
          }
        },
        "example": {
          "environmentVariables": [
            {
              "key": "MYSQL_ROOT_PASSWORD",
              "value": "password"
            }
          ],
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "7b8"
        },
        "required": ["token", "id", "serviceId"]
      },
      "SetEnvironmentVariablesRequest2": {
        "type": "object",
        "properties": {
          "environmentVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            },
            "description": "The environment variables that this resource requires",
            "example": [
              {
                "key": "MYSQL_ROOT_PASSWORD",
                "value": "password"
              }
            ]
          }
        },
        "example": {
          "environmentVariables": [
            {
              "key": "MYSQL_ROOT_PASSWORD",
              "value": "password"
            }
          ]
        }
      },
      "SigninRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "hashedPassword": {
            "type": "string",
            "example": "deprecated",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "example": "password",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "hashedPassword": "deprecated",
          "password": "password"
        },
        "required": ["email"]
      },
      "SigninResult": {
        "type": "object",
        "properties": {
          "jwtToken": {
            "type": "string",
            "description": "The jwt token",
            "example": ""
          }
        },
        "example": {
          "jwtToken": ""
        },
        "required": ["jwtToken"]
      },
      "SignupRequest": {
        "type": "object",
        "properties": {
          "companyDescription": {
            "type": "string",
            "example": "We sell xyz database software",
            "minLength": 1
          },
          "companyUrl": {
            "type": "string",
            "example": "https://www.mywebsite.com",
            "minLength": 1
          },
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "legalCompanyName": {
            "type": "string",
            "default": "",
            "example": "mywebsite"
          },
          "name": {
            "type": "string",
            "example": "John Doe",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "example": "password",
            "minLength": 1
          }
        },
        "example": {
          "companyDescription": "We sell xyz database software",
          "companyUrl": "https://www.mywebsite.com",
          "email": "abc@gmail.com",
          "legalCompanyName": "mywebsite",
          "name": "John Doe",
          "password": "password"
        },
        "required": ["name", "email", "password"]
      },
      "StartResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Veritatis commodi quas ducimus."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "q9",
            "minLength": 1
          }
        },
        "example": {
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "kw"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id"
        ]
      },
      "StopResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Qui autem."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "2",
            "minLength": 1
          }
        },
        "example": {
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "s72"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id"
        ]
      },
      "SubscriptionUsers": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "The email of the user",
            "example": "abc@gmail.com"
          },
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Dae"
          },
          "roleType": {
            "type": "string",
            "description": "Type of the role",
            "example": "root|editor|reader|service_editor|service_reader|admin|service_operator"
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "userId": {
            "type": "string",
            "description": "The User ID",
            "example": "user-abcd1234"
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "name": "John Dae",
          "roleType": "reader",
          "subscriptionId": "sub-abcd1234",
          "userId": "user-abcd1234"
        },
        "required": ["subscriptionId", "name", "email", "roleType", "userId"]
      },
      "TerraformConfiguration": {
        "type": "object",
        "properties": {
          "gitConfiguration": {
            "$ref": "#/components/schemas/GitConfiguration"
          },
          "privateModuleGitAccessTokens": {
            "type": "object",
            "description": "The git access tokens for private modules",
            "example": {
              "tokenName": "accessToken"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Et ullam aut qui asperiores impedit accusamus."
            }
          },
          "requiredOutputKeys": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Natus voluptas qui ut."
            },
            "description": "The required output keys to export",
            "example": ["output1"]
          },
          "requiredOutputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TerraformOutput"
            },
            "description": "The required output keys to export",
            "example": [
              {
                "exported": true,
                "key": "output1"
              }
            ]
          },
          "terraformExecutionIdentity": {
            "type": "string",
            "description": "The identity to use for terraform execution",
            "example": "arn:aws:iam::123456789012:role/role-name"
          },
          "terraformPath": {
            "type": "string",
            "description": "The path to the terraform files directory",
            "example": "/project1/tf"
          }
        },
        "example": {
          "gitConfiguration": {
            "accessToken": "my-token",
            "referenceName": "tags/v1.0.0",
            "repositoryUrl": "https://github.com/username/myrepo",
            "userName": "my-user"
          },
          "privateModuleGitAccessTokens": {
            "tokenName": "accessToken"
          },
          "requiredOutputKeys": ["output1"],
          "requiredOutputs": [
            {
              "exported": true,
              "key": "output1"
            }
          ],
          "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
          "terraformPath": "/project1/tf"
        },
        "required": ["terraformPath"]
      },
      "TerraformConfigurations": {
        "type": "object",
        "description": "The Terraform configurations for cloud providers",
        "example": {
          "aws": {
            "gitConfiguration": {
              "referenceName": "ref",
              "repositoryUrl": "gitUrl"
            },
            "privateModuleGitAccessTokens": {
              "tokenName": "accessToken"
            },
            "terraformPath": "/project1/tf"
          }
        },
        "additionalProperties": true
      },
      "TerraformOutput": {
        "type": "object",
        "properties": {
          "exported": {
            "type": "boolean",
            "description": "Whether the output is exported",
            "example": true
          },
          "key": {
            "type": "string",
            "description": "The key of the output",
            "example": "output1"
          }
        },
        "example": {
          "exported": true,
          "key": "output1"
        },
        "required": ["key", "exported"]
      },
      "TierVersionSet": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "baseVersion": {
            "type": "string",
            "description": "The base version of the version set.",
            "example": "3.0"
          },
          "createdAt": {
            "type": "string",
            "description": "The timestamp when the version set was created.",
            "example": "2020-01-01T00:00:00Z"
          },
          "createdBy": {
            "type": "string",
            "description": "The name of the user who created the version set.",
            "example": "John Doe"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the product-tier version set.",
            "example": "Quisquam impedit qui."
          },
          "enabledFeatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductTierFeatureDetail"
            },
            "description": "The features that are enabled for this product tier, including scope details and configuration",
            "example": [
              {
                "configuration": {
                  "provider": "native"
                },
                "feature": "LOGS",
                "scope": "INTERNAL"
              },
              {
                "configuration": {
                  "provider": "native"
                },
                "feature": "LOGS",
                "scope": "INTERNAL"
              },
              {
                "configuration": {
                  "provider": "native"
                },
                "feature": "LOGS",
                "scope": "INTERNAL"
              },
              {
                "configuration": {
                  "provider": "native"
                },
                "feature": "LOGS",
                "scope": "INTERNAL"
              }
            ]
          },
          "features": {
            "type": "object",
            "description": "The features that are enabled / disabled for this product tier",
            "example": {
              "BILLING": false,
              "LOGS": true,
              "METRICS": false
            },
            "additionalProperties": true
          },
          "instanceCount": {
            "type": "integer",
            "description": "The number of instances that are currently running this version set.",
            "example": 12,
            "format": "int64"
          },
          "latestUpgradePathId": {
            "type": "string",
            "description": "ID of an Upgrade Path",
            "example": "Id maxime est quod."
          },
          "name": {
            "type": "string",
            "description": "The name of the product-tier version set.",
            "example": "Regular version set"
          },
          "parentVersion": {
            "type": "string",
            "description": "The parent version of this release.",
            "example": "2.0"
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Possimus necessitatibus ratione eius rerum."
          },
          "releasedAt": {
            "type": "string",
            "description": "The timestamp when the version set was released.",
            "example": "2020-01-01T00:00:00Z"
          },
          "releasedBy": {
            "type": "string",
            "description": "The name of the user who released the version set.",
            "example": "John Doe"
          },
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceSummary"
            },
            "description": "List of resources that are part of this version set.",
            "example": [
              {
                "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                "id": "r-12345678",
                "imageConfigId": "imgc-12345678",
                "infraConfigId": "ic-12345678",
                "isExternal": true,
                "managedResourceType": "PortsBasedProxy",
                "name": "MySQL multi-writer service"
              },
              {
                "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                "id": "r-12345678",
                "imageConfigId": "imgc-12345678",
                "infraConfigId": "ic-12345678",
                "isExternal": true,
                "managedResourceType": "PortsBasedProxy",
                "name": "MySQL multi-writer service"
              },
              {
                "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                "id": "r-12345678",
                "imageConfigId": "imgc-12345678",
                "infraConfigId": "ic-12345678",
                "isExternal": true,
                "managedResourceType": "PortsBasedProxy",
                "name": "MySQL multi-writer service"
              }
            ]
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "serviceModelId": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Voluptate necessitatibus hic perferendis."
          },
          "status": {
            "type": "string",
            "description": "The tier version set status.",
            "example": "Preferred|Active|Deprecated|Pending"
          },
          "type": {
            "type": "string",
            "description": "The version-set type of the product-tier.",
            "example": "Major|Incremental|UserDefined"
          },
          "updatedAt": {
            "type": "string",
            "description": "The timestamp when the version set was updated.",
            "example": "2020-01-01T00:00:00Z"
          },
          "version": {
            "type": "string",
            "description": "The version number for the specific version set.",
            "example": "3.0"
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "baseVersion": "3.0",
          "createdAt": "2020-01-01T00:00:00Z",
          "createdBy": "John Doe",
          "description": "Eaque autem fuga dolorem omnis.",
          "enabledFeatures": [
            {
              "configuration": {
                "provider": "native"
              },
              "feature": "LOGS",
              "scope": "INTERNAL"
            },
            {
              "configuration": {
                "provider": "native"
              },
              "feature": "LOGS",
              "scope": "INTERNAL"
            }
          ],
          "features": {
            "BILLING": false,
            "LOGS": true,
            "METRICS": false
          },
          "instanceCount": 12,
          "latestUpgradePathId": "upgrade-12345678",
          "name": "Regular version set",
          "parentVersion": "2.0",
          "productTierId": "Beatae beatae.",
          "releasedAt": "2020-01-01T00:00:00Z",
          "releasedBy": "John Doe",
          "resources": [
            {
              "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
              "id": "r-12345678",
              "imageConfigId": "imgc-12345678",
              "infraConfigId": "ic-12345678",
              "isExternal": true,
              "managedResourceType": "PortsBasedProxy",
              "name": "MySQL multi-writer service"
            },
            {
              "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
              "id": "r-12345678",
              "imageConfigId": "imgc-12345678",
              "infraConfigId": "ic-12345678",
              "isExternal": true,
              "managedResourceType": "PortsBasedProxy",
              "name": "MySQL multi-writer service"
            },
            {
              "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
              "id": "r-12345678",
              "imageConfigId": "imgc-12345678",
              "infraConfigId": "ic-12345678",
              "isExternal": true,
              "managedResourceType": "PortsBasedProxy",
              "name": "MySQL multi-writer service"
            },
            {
              "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
              "id": "r-12345678",
              "imageConfigId": "imgc-12345678",
              "infraConfigId": "ic-12345678",
              "isExternal": true,
              "managedResourceType": "PortsBasedProxy",
              "name": "MySQL multi-writer service"
            }
          ],
          "serviceId": "s-12345678",
          "serviceModelId": "Ipsum velit nobis maxime.",
          "status": "Preferred|Active|Deprecated|Pending",
          "type": "Major|Incremental|UserDefined",
          "updatedAt": "2020-01-01T00:00:00Z",
          "version": "3.0"
        },
        "required": [
          "serviceId",
          "serviceModelId",
          "productTierId",
          "type",
          "version",
          "baseVersion",
          "status",
          "createdAt",
          "releasedAt",
          "updatedAt",
          "features",
          "enabledFeatures"
        ]
      },
      "UnsetEnvironmentVariablesRequest": {
        "type": "object",
        "properties": {
          "environmentVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            },
            "description": "The environment variables that this resource is no longer dependent on",
            "example": [
              {
                "key": "MYSQL_ROOT_PASSWORD",
                "value": "password"
              }
            ]
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Molestiae ut quia velit harum quia quo."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "5b",
            "minLength": 1
          }
        },
        "example": {
          "environmentVariables": [
            {
              "key": "MYSQL_ROOT_PASSWORD",
              "value": "password"
            }
          ],
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "a0"
        },
        "required": ["token", "id", "serviceId"]
      },
      "UnsetEnvironmentVariablesRequest2": {
        "type": "object",
        "properties": {
          "environmentVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            },
            "description": "The environment variables that this resource is no longer dependent on",
            "example": [
              {
                "key": "MYSQL_ROOT_PASSWORD",
                "value": "password"
              }
            ]
          }
        },
        "example": {
          "environmentVariables": [
            {
              "key": "MYSQL_ROOT_PASSWORD",
              "value": "password"
            }
          ]
        }
      },
      "UpdateComputeConfigRequest": {
        "type": "object",
        "properties": {
          "autoscalingPolicy": {
            "$ref": "#/components/schemas/AutoscalingPolicy"
          },
          "cpuArchitecture": {
            "type": "string",
            "description": "Processor architecture",
            "example": "X86_64|ARM64"
          },
          "description": {
            "type": "string",
            "description": "Description of the compute config",
            "example": "my compute config description",
            "minLength": 1
          },
          "id": {
            "type": "string",
            "description": "ID of a Compute Config",
            "example": "Nisi rem repellat libero qui tenetur."
          },
          "name": {
            "type": "string",
            "description": "Name of the compute config",
            "example": "my compute config",
            "minLength": 1
          },
          "replicaCount": {
            "type": "string",
            "description": "Number of replicas to provision for this logical pool of nodes per instance of the resource",
            "example": "3"
          },
          "resources": {
            "$ref": "#/components/schemas/ResourceSpec"
          },
          "rootVolumeSizeGi": {
            "type": "integer",
            "description": "Size of the root volume in Gi",
            "example": 10,
            "format": "int64"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "uq",
            "minLength": 1
          },
          "warmPoolConfiguration": {
            "$ref": "#/components/schemas/WarmPoolConfiguration"
          }
        },
        "example": {
          "autoscalingPolicy": {
            "maxReplicas": 4,
            "minReplicas": 1
          },
          "cpuArchitecture": "X86_64|ARM64",
          "description": "my compute config description",
          "id": "cc-12345678",
          "name": "my compute config",
          "replicaCount": "3",
          "resources": {
            "limits": {
              "cpu": "1",
              "memory": "500Mi"
            },
            "requests": {
              "cpu": "0.5",
              "memory": "200Mi"
            }
          },
          "rootVolumeSizeGi": 10,
          "serviceId": "s-12345678",
          "token": "9iz",
          "warmPoolConfiguration": {
            "minimumNodesInPool": 1
          }
        },
        "required": ["token", "id", "serviceId"]
      },
      "UpdateComputeConfigRequest2": {
        "type": "object",
        "properties": {
          "autoscalingPolicy": {
            "$ref": "#/components/schemas/AutoscalingPolicy"
          },
          "cpuArchitecture": {
            "type": "string",
            "description": "Processor architecture",
            "example": "X86_64|ARM64"
          },
          "description": {
            "type": "string",
            "description": "Description of the compute config",
            "example": "my compute config description",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the compute config",
            "example": "my compute config",
            "minLength": 1
          },
          "replicaCount": {
            "type": "string",
            "description": "Number of replicas to provision for this logical pool of nodes per instance of the resource",
            "example": "3"
          },
          "resources": {
            "$ref": "#/components/schemas/ResourceSpec"
          },
          "rootVolumeSizeGi": {
            "type": "integer",
            "description": "Size of the root volume in Gi",
            "example": 10,
            "format": "int64"
          },
          "warmPoolConfiguration": {
            "$ref": "#/components/schemas/WarmPoolConfiguration"
          }
        },
        "example": {
          "autoscalingPolicy": {
            "maxReplicas": 4,
            "minReplicas": 1
          },
          "cpuArchitecture": "X86_64|ARM64",
          "description": "my compute config description",
          "name": "my compute config",
          "replicaCount": "3",
          "resources": {
            "limits": {
              "cpu": "1",
              "memory": "500Mi"
            },
            "requests": {
              "cpu": "0.5",
              "memory": "200Mi"
            }
          },
          "rootVolumeSizeGi": 10,
          "warmPoolConfiguration": {
            "minimumNodesInPool": 1
          }
        }
      },
      "UpdateCustomNetworkRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a custom network",
            "example": "Excepturi autem aperiam."
          },
          "name": {
            "type": "string",
            "description": "User friendly network name to help distinguish networks with same CIDRs",
            "example": "Dev us-east-1"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "z9a",
            "minLength": 1
          }
        },
        "example": {
          "id": "n-12345678",
          "name": "Dev us-east-1",
          "token": "q6i"
        },
        "required": ["token", "id"]
      },
      "UpdateCustomNetworkRequest2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User friendly network name to help distinguish networks with same CIDRs",
            "example": "Dev us-east-1"
          }
        },
        "example": {
          "name": "Dev us-east-1"
        }
      },
      "UpdateDeploymentConfigRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the deployment config",
            "example": "A production deployment config"
          },
          "id": {
            "type": "string",
            "description": "ID of a Deployment Config",
            "example": "Nisi illum non animi ipsum nam eius."
          },
          "infraRollConfiguration": {
            "$ref": "#/components/schemas/InfraRollConfiguration"
          },
          "name": {
            "type": "string",
            "description": "Name of the deployment config",
            "example": "Production"
          },
          "rolloutPriorityList": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Region",
              "example": "Natus numquam eos earum facilis iusto."
            },
            "example": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"]
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "d",
            "minLength": 1
          }
        },
        "example": {
          "description": "A production deployment config",
          "id": "dc-12345678",
          "infraRollConfiguration": {
            "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
            "maximumNumberOfResourceInstancesPerBatch": 1,
            "maximumUnavailableReplicas": 1
          },
          "name": "Production",
          "rolloutPriorityList": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"],
          "token": "m"
        },
        "required": ["token", "id"]
      },
      "UpdateDeploymentConfigRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the deployment config",
            "example": "A production deployment config"
          },
          "infraRollConfiguration": {
            "$ref": "#/components/schemas/InfraRollConfiguration"
          },
          "name": {
            "type": "string",
            "description": "Name of the deployment config",
            "example": "Production"
          },
          "rolloutPriorityList": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Nisi minus blanditiis officia odit veniam id."
            },
            "example": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"]
          }
        },
        "example": {
          "description": "A production deployment config",
          "infraRollConfiguration": {
            "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
            "maximumNumberOfResourceInstancesPerBatch": 1,
            "maximumUnavailableReplicas": 1
          },
          "name": "Production",
          "rolloutPriorityList": ["region-12345678", "region-abcd1234", "region-3c3c3c3c"]
        }
      },
      "UpdateFileContentRequest": {
        "type": "object",
        "properties": {
          "content_type": {
            "type": "string",
            "description": "Content-Type header, must define value for multipart boundary.",
            "default": "multipart/form-data; boundary=boundary",
            "example": "multipart/form-data; boundary=boundary",
            "pattern": "multipart/[^;]+; boundary=.+"
          },
          "fileId": {
            "type": "string",
            "description": "ID of a File",
            "example": "Praesentium ipsa."
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Odio ex sit ex aut."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "zvz",
            "minLength": 1
          }
        },
        "example": {
          "content_type": "multipart/form-data; boundary=boundary",
          "fileId": "f-12345678",
          "id": "r-12345678",
          "serviceId": "s-12345678",
          "token": "ta"
        },
        "required": ["token", "id", "serviceId", "fileId", "content_type"]
      },
      "UpdateFileMetadataRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the file",
            "example": "A file to store the configuration for the resource"
          },
          "fileId": {
            "type": "string",
            "description": "ID of a File",
            "example": "Dicta unde."
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Consequatur sequi consequatur ipsum qui totam."
          },
          "mountPath": {
            "type": "string",
            "description": "The mount path of the file",
            "example": "/etc/config"
          },
          "name": {
            "type": "string",
            "description": "The name of the file",
            "example": "file.txt"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "1",
            "minLength": 1
          }
        },
        "example": {
          "description": "A file to store the configuration for the resource",
          "fileId": "f-12345678",
          "id": "r-12345678",
          "mountPath": "/etc/config",
          "name": "file.txt",
          "serviceId": "s-12345678",
          "token": "c7"
        },
        "required": ["token", "id", "serviceId", "fileId"]
      },
      "UpdateFileMetadataRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The description of the file",
            "example": "A file to store the configuration for the resource"
          },
          "mountPath": {
            "type": "string",
            "description": "The mount path of the file",
            "example": "/etc/config"
          },
          "name": {
            "type": "string",
            "description": "The name of the file",
            "example": "file.txt"
          }
        },
        "example": {
          "description": "A file to store the configuration for the resource",
          "mountPath": "/etc/config",
          "name": "file.txt"
        }
      },
      "UpdateIdentityProviderRequest": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The Client ID of the Identity Provider",
            "example": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com"
          },
          "clientSecret": {
            "type": "string",
            "description": "The Client Secret of the Identity Provider",
            "example": "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"
          },
          "id": {
            "type": "string",
            "description": "ID of an Identity Provider",
            "example": "Illo voluptatem aperiam quia cumque occaecati inventore."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "yeq",
            "minLength": 1
          }
        },
        "example": {
          "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
          "clientSecret": "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",
          "id": "idp-12345678",
          "token": "o"
        },
        "required": ["token", "id"]
      },
      "UpdateIdentityProviderRequest2": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The Client ID of the Identity Provider",
            "example": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com"
          },
          "clientSecret": {
            "type": "string",
            "description": "The Client Secret of the Identity Provider",
            "example": "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"
          }
        },
        "example": {
          "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
          "clientSecret": "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"
        }
      },
      "UpdateImageConfigRequest": {
        "type": "object",
        "properties": {
          "customImageCommandsAndArgs": {
            "$ref": "#/components/schemas/CustomImageCommandsAndArgs"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the image configuration",
            "example": "An image configuration for my new entity"
          },
          "id": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "In enim perspiciatis iusto."
          },
          "imageName": {
            "type": "string",
            "description": "Name of the container image",
            "example": "mysql",
            "minLength": 1
          },
          "imageRegistryId": {
            "type": "string",
            "description": "ID of an Image Registry",
            "example": "Ab tempore eos."
          },
          "imageSignaturePublicKeyPEM": {
            "type": "string",
            "description": "PEM-encoded Public key part of the key used to sign the container image",
            "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n"
          },
          "imageTag": {
            "type": "string",
            "description": "Tag representing the software image version that is currently preferred",
            "example": "v1"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "b",
            "minLength": 1
          }
        },
        "description": "Update the image configuration for an existing entity",
        "example": {
          "customImageCommandsAndArgs": {
            "args": ["-d", "mysql"],
            "commands": ["echo", "Hello, World!"]
          },
          "description": "An image configuration for my new entity",
          "id": "imgc-12345678",
          "imageName": "mysql",
          "imageRegistryId": "ir-12345678",
          "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
          "imageTag": "v1",
          "serviceId": "s-12345678",
          "token": "ty"
        },
        "required": ["token", "id", "serviceId"]
      },
      "UpdateImageConfigRequest2": {
        "type": "object",
        "properties": {
          "customImageCommandsAndArgs": {
            "$ref": "#/components/schemas/CustomImageCommandsAndArgs"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the image configuration",
            "example": "An image configuration for my new entity"
          },
          "imageName": {
            "type": "string",
            "description": "Name of the container image",
            "example": "mysql",
            "minLength": 1
          },
          "imageRegistryId": {
            "type": "string",
            "description": "The image registry ID to use for the infra",
            "example": "ir-12345678"
          },
          "imageSignaturePublicKeyPEM": {
            "type": "string",
            "description": "PEM-encoded Public key part of the key used to sign the container image",
            "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n"
          },
          "imageTag": {
            "type": "string",
            "description": "Tag representing the software image version that is currently preferred",
            "example": "v1"
          }
        },
        "example": {
          "customImageCommandsAndArgs": {
            "args": ["-d", "mysql"],
            "commands": ["echo", "Hello, World!"]
          },
          "description": "An image configuration for my new entity",
          "imageName": "mysql",
          "imageRegistryId": "ir-12345678",
          "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
          "imageTag": "v1"
        }
      },
      "UpdateImageRegistryRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the Image Registry",
            "example": "DockerHub is a public Docker Image Registry"
          },
          "host": {
            "type": "string",
            "description": "The Image Registry host",
            "example": "docker.io"
          },
          "id": {
            "type": "string",
            "description": "ID of an Image Registry",
            "example": "Magni rerum."
          },
          "name": {
            "type": "string",
            "description": "Name of the Image Registry",
            "example": "DockerHub"
          },
          "password": {
            "type": "string",
            "description": "The password to use when authenticating to the Image Registry",
            "example": "mypassword"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "xb",
            "minLength": 1
          },
          "username": {
            "type": "string",
            "description": "The username to use when authenticating to the Image Registry",
            "example": "myusername"
          }
        },
        "description": "Update an HTTP API v2 Docker Image Registry",
        "example": {
          "description": "DockerHub is a public Docker Image Registry",
          "host": "docker.io",
          "id": "ir-12345678",
          "name": "DockerHub",
          "password": "mypassword",
          "token": "2t9",
          "username": "myusername"
        },
        "required": ["token", "id"]
      },
      "UpdateImageRegistryRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the Image Registry",
            "example": "DockerHub is a public Docker Image Registry"
          },
          "host": {
            "type": "string",
            "description": "The Image Registry host",
            "example": "docker.io"
          },
          "name": {
            "type": "string",
            "description": "Name of the Image Registry",
            "example": "DockerHub"
          },
          "password": {
            "type": "string",
            "description": "The password to use when authenticating to the Image Registry",
            "example": "mypassword"
          },
          "username": {
            "type": "string",
            "description": "The username to use when authenticating to the Image Registry",
            "example": "myusername"
          }
        },
        "example": {
          "description": "DockerHub is a public Docker Image Registry",
          "host": "docker.io",
          "name": "DockerHub",
          "password": "mypassword",
          "username": "myusername"
        }
      },
      "UpdateInfraConfigRequest": {
        "type": "object",
        "properties": {
          "computeConfigId": {
            "type": "string",
            "description": "ID of a Compute Config",
            "example": "Nihil accusamus autem unde et."
          },
          "customTag": {
            "$ref": "#/components/schemas/CustomTag"
          },
          "description": {
            "type": "string",
            "description": "The description for the infra config",
            "example": "Infra config used for the base tier MySQL service"
          },
          "id": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Debitis modi sunt et et."
          },
          "name": {
            "type": "string",
            "description": "The name of the infra config",
            "example": "MySQL Writer Infra Config"
          },
          "networkConfigId": {
            "type": "string",
            "description": "ID of a Network Config",
            "example": "Vel libero illo inventore neque rerum officiis."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "storageConfigId": {
            "type": "string",
            "description": "ID of a Storage Config",
            "example": "Dolor qui non qui molestiae libero modi."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "88",
            "minLength": 1
          }
        },
        "description": "Update the infra required to host a resource",
        "example": {
          "computeConfigId": "cc-12345678",
          "customTag": {
            "key": "customKey",
            "value": "customValue"
          },
          "description": "Infra config used for the base tier MySQL service",
          "id": "ic-12345678",
          "name": "MySQL Writer Infra Config",
          "networkConfigId": "nc-12345678",
          "serviceId": "s-12345678",
          "storageConfigId": "sc-12345678",
          "token": "ipl"
        },
        "required": ["token", "id", "serviceId"]
      },
      "UpdateInfraConfigRequest2": {
        "type": "object",
        "properties": {
          "computeConfigId": {
            "type": "string",
            "description": "The compute config ID",
            "example": "cc-12345678"
          },
          "customTag": {
            "$ref": "#/components/schemas/CustomTag"
          },
          "description": {
            "type": "string",
            "description": "The description for the infra config",
            "example": "Infra config used for the base tier MySQL service"
          },
          "name": {
            "type": "string",
            "description": "The name of the infra config",
            "example": "MySQL Writer Infra Config"
          },
          "networkConfigId": {
            "type": "string",
            "description": "The network config ID",
            "example": "nc-12345678"
          },
          "storageConfigId": {
            "type": "string",
            "description": "The storage config ID per compute node",
            "example": "sc-12345678"
          }
        },
        "example": {
          "computeConfigId": "cc-12345678",
          "customTag": {
            "key": "customKey",
            "value": "customValue"
          },
          "description": "Infra config used for the base tier MySQL service",
          "name": "MySQL Writer Infra Config",
          "networkConfigId": "nc-12345678",
          "storageConfigId": "sc-12345678"
        }
      },
      "UpdateInputParameterRequest": {
        "type": "object",
        "properties": {
          "defaultValue": {
            "type": "string",
            "description": "Default value to use for an optional input parameter represented as a string",
            "example": "[\"1\", \"2.8\", \"3\"]"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the input parameter",
            "example": "Soluta quis non."
          },
          "hasOptions": {
            "type": "boolean",
            "description": "Marks the input parameter to be selectable from a list of values",
            "example": false
          },
          "id": {
            "type": "string",
            "description": "ID of an Input Parameter",
            "example": "Assumenda assumenda delectus explicabo tempore."
          },
          "labeledOptions": {
            "type": "object",
            "description": "A map for labeled options. The key is the label and the value is the option. When the option is selected, the label will be displayed to the end customer. Specify either options or labeledOptions when defining the input parameter.",
            "example": {
              "large": "t3.xlarge",
              "medium": "t3.large",
              "small": "t3.medium"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Dolore veritatis dolor esse sit aut similique."
            }
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          },
          "modifiable": {
            "type": "boolean",
            "description": "Marks the input parameter as immutable",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "External name for the input parameter",
            "example": "ho7",
            "minLength": 1
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Sed incidunt est aut aliquid."
            },
            "description": "A list of options to restrict the value of the input parameter to (represented as a string)",
            "example": ["[\"1\", \"2.8\", \"3\"]", "[\"3.4\", \"4.5\"]"]
          },
          "required": {
            "type": "boolean",
            "description": "Enforces the input parameter as a required parameter",
            "example": false
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "wv7",
            "minLength": 1
          }
        },
        "example": {
          "defaultValue": "[\"1\", \"2.8\", \"3\"]",
          "description": "Itaque aut aut.",
          "hasOptions": true,
          "id": "var-12345678",
          "labeledOptions": {
            "large": "t3.xlarge",
            "medium": "t3.large",
            "small": "t3.medium"
          },
          "limits": {
            "max": "Iure distinctio rerum provident iure eligendi facilis.",
            "maxLength": "Aspernatur enim veritatis ab et veniam.",
            "min": "Nihil hic sit.",
            "minLength": "Incidunt quibusdam et atque quia sed."
          },
          "modifiable": false,
          "name": "0l9",
          "options": ["[\"1\", \"2.8\", \"3\"]", "[\"3.4\", \"4.5\"]"],
          "required": true,
          "serviceId": "s-12345678",
          "token": "jg0"
        },
        "required": ["token", "id", "serviceId"]
      },
      "UpdateInputParameterRequest2": {
        "type": "object",
        "properties": {
          "defaultValue": {
            "type": "string",
            "description": "Default value to use for an optional input parameter represented as a string",
            "example": "[\"1\", \"2.8\", \"3\"]"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the input parameter",
            "example": "Quo quidem."
          },
          "hasOptions": {
            "type": "boolean",
            "description": "Marks the input parameter to be selectable from a list of values",
            "example": true
          },
          "labeledOptions": {
            "type": "object",
            "description": "A map for labeled options. The key is the label and the value is the option. When the option is selected, the label will be displayed to the end customer. Specify either options or labeledOptions when defining the input parameter.",
            "example": {
              "large": "t3.xlarge",
              "medium": "t3.large",
              "small": "t3.medium"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Natus provident facilis sint corrupti veniam voluptatem."
            }
          },
          "limits": {
            "$ref": "#/components/schemas/Limits"
          },
          "modifiable": {
            "type": "boolean",
            "description": "Marks the input parameter as immutable",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "External name for the input parameter",
            "example": "3f6",
            "minLength": 1
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Rem sit rerum dolore dolorem."
            },
            "description": "A list of options to restrict the value of the input parameter to (represented as a string)",
            "example": ["[\"1\", \"2.8\", \"3\"]", "[\"3.4\", \"4.5\"]"]
          },
          "required": {
            "type": "boolean",
            "description": "Enforces the input parameter as a required parameter",
            "example": true
          }
        },
        "example": {
          "defaultValue": "[\"1\", \"2.8\", \"3\"]",
          "description": "Magnam accusantium corrupti.",
          "hasOptions": true,
          "labeledOptions": {
            "large": "t3.xlarge",
            "medium": "t3.large",
            "small": "t3.medium"
          },
          "limits": {
            "max": "Sit explicabo delectus aut nisi consequuntur.",
            "maxLength": "Sunt amet provident.",
            "min": "Cumque temporibus dolores vitae dolores doloremque illum.",
            "minLength": "Qui odio laudantium illum."
          },
          "modifiable": false,
          "name": "9",
          "options": ["[\"1\", \"2.8\", \"3\"]", "[\"3.4\", \"4.5\"]"],
          "required": true
        }
      },
      "UpdateInstanceStorageVolumeConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Storage Volume Config",
            "example": "Ex rerum pariatur alias quis tenetur blanditiis."
          },
          "instanceStorageIops": {
            "type": "string",
            "description": "The IOPS provisioned for the configured instance storage type",
            "example": "7500"
          },
          "instanceStorageThroughputMiBps": {
            "type": "string",
            "description": "The throughput (in MiBps) provisioned for the configured instance storage type",
            "example": "128"
          },
          "instanceStorageType": {
            "type": "string",
            "description": "The type of the storage for a compute instance",
            "example": "AWS::EBS_GP2"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "y0d",
            "minLength": 1
          }
        },
        "example": {
          "id": "svc-12345678",
          "instanceStorageIops": "7500",
          "instanceStorageThroughputMiBps": "128",
          "instanceStorageType": "AWS::EBS_GP2",
          "serviceId": "s-12345678",
          "token": "eb"
        },
        "required": ["token", "serviceId", "id"]
      },
      "UpdateInstanceStorageVolumeConfigRequest2": {
        "type": "object",
        "properties": {
          "instanceStorageIops": {
            "type": "string",
            "description": "The IOPS provisioned for the configured instance storage type",
            "example": "7500"
          },
          "instanceStorageThroughputMiBps": {
            "type": "string",
            "description": "The throughput (in MiBps) provisioned for the configured instance storage type",
            "example": "128"
          },
          "instanceStorageType": {
            "type": "string",
            "description": "The type of the storage for a compute instance",
            "example": "AWS::EBS_GP2"
          }
        },
        "example": {
          "instanceStorageIops": "7500",
          "instanceStorageThroughputMiBps": "128",
          "instanceStorageType": "AWS::EBS_GP2"
        }
      },
      "UpdateLimitRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the limit",
            "example": "A premium limit"
          },
          "family": {
            "type": "string",
            "description": "The limit family",
            "example": "SERVICE"
          },
          "key": {
            "type": "string",
            "description": "Unique key to identify the limit",
            "example": "MAX_VIRTUAL_CORES_PER_RESOURCE"
          },
          "name": {
            "type": "string",
            "description": "Name of the limit",
            "example": "Premium Tier"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "km",
            "minLength": 1
          },
          "value": {
            "type": "integer",
            "description": "Value of the limit being enforced",
            "example": 4,
            "format": "int64"
          }
        },
        "example": {
          "description": "A premium limit",
          "family": "COMPUTE_INFRA",
          "key": "MAX_VIRTUAL_CORES_PER_RESOURCE",
          "name": "Premium Tier",
          "token": "k",
          "value": 4
        },
        "required": ["token", "key", "family", "value"]
      },
      "UpdateLimitRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the limit",
            "example": "A premium limit"
          },
          "name": {
            "type": "string",
            "description": "Name of the limit",
            "example": "Premium Tier"
          },
          "value": {
            "type": "integer",
            "description": "Value of the limit being enforced",
            "example": 4,
            "format": "int64"
          }
        },
        "example": {
          "description": "A premium limit",
          "name": "Premium Tier",
          "value": 4
        },
        "required": ["value"]
      },
      "UpdateNetworkConfigRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the network config",
            "example": "A multi-zone HA network config"
          },
          "endpointPerReplica": {
            "type": "boolean",
            "description": "Generates a DNS endpoint per-replica for this network config",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "ID of a Network Config",
            "example": "Ut deserunt odit."
          },
          "internal": {
            "type": "boolean",
            "description": "Restrict access to this network config to the internal network",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Name of the network config",
            "example": "Multi-zone"
          },
          "openPorts": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 979399127402215200,
              "format": "int64"
            },
            "description": "Ports to map to the generated DNS endpoint",
            "example": [1299, 3306]
          },
          "privateNetworkingConfiguration": {
            "$ref": "#/components/schemas/PrivateNetworkingConfiguration"
          },
          "publicNetworkingConfiguration": {
            "$ref": "#/components/schemas/PublicNetworkingConfiguration"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "stableEgressIP": {
            "type": "boolean",
            "description": "Create an external node load balancer per node rather than expose the node ip directly",
            "example": true
          },
          "tlsTerminationPort": {
            "type": "integer",
            "description": "The port that hosts the reverse proxy for TLS termination",
            "example": 443,
            "format": "int64"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "9k",
            "minLength": 1
          },
          "zoneConfiguration": {
            "type": "string",
            "description": "The preferred type of zonal availability for this resource and the specific zone(s) to deploy in",
            "example": "SINGLE_ZONE_OMNISTRATE_RECOMMENDED|SINGLE_ZONE_CUSTOMER_PROVIDED|MULTI_ZONE"
          }
        },
        "example": {
          "description": "A multi-zone HA network config",
          "endpointPerReplica": true,
          "id": "nc-12345678",
          "internal": true,
          "name": "Multi-zone",
          "openPorts": [1299, 3306],
          "privateNetworkingConfiguration": {
            "privateLinkConfiguration": {
              "awsPrivateLinkConfigurations": [
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                },
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                }
              ]
            }
          },
          "publicNetworkingConfiguration": {
            "enableClusterLoadBalancer": true,
            "enableNodeLoadBalancer": true
          },
          "serviceId": "s-12345678",
          "stableEgressIP": true,
          "tlsTerminationPort": 443,
          "token": "l",
          "zoneConfiguration": "SINGLE_ZONE_OMNISTRATE_RECOMMENDED|SINGLE_ZONE_CUSTOMER_PROVIDED|MULTI_ZONE"
        },
        "required": ["token", "id", "serviceId"]
      },
      "UpdateNetworkConfigRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the network config",
            "example": "A multi-zone HA network config"
          },
          "endpointPerReplica": {
            "type": "boolean",
            "description": "Generates a DNS endpoint per-replica for this network config",
            "example": true
          },
          "internal": {
            "type": "boolean",
            "description": "Restrict access to this network config to the internal network",
            "example": true
          },
          "name": {
            "type": "string",
            "description": "Name of the network config",
            "example": "Multi-zone"
          },
          "openPorts": {
            "type": "array",
            "items": {
              "type": "integer",
              "example": 995281174883299200,
              "format": "int64"
            },
            "description": "Ports to map to the generated DNS endpoint",
            "example": [1299, 3306]
          },
          "privateNetworkingConfiguration": {
            "$ref": "#/components/schemas/PrivateNetworkingConfiguration"
          },
          "publicNetworkingConfiguration": {
            "$ref": "#/components/schemas/PublicNetworkingConfiguration"
          },
          "stableEgressIP": {
            "type": "boolean",
            "description": "Create an external node load balancer per node rather than expose the node ip directly",
            "example": true
          },
          "tlsTerminationPort": {
            "type": "integer",
            "description": "The port that hosts the reverse proxy for TLS termination",
            "example": 443,
            "format": "int64"
          },
          "zoneConfiguration": {
            "type": "string",
            "description": "The preferred type of zonal availability for this resource and the specific zone(s) to deploy in",
            "example": "Et dolores adipisci."
          }
        },
        "example": {
          "description": "A multi-zone HA network config",
          "endpointPerReplica": true,
          "internal": true,
          "name": "Multi-zone",
          "openPorts": [1299, 3306],
          "privateNetworkingConfiguration": {
            "privateLinkConfiguration": {
              "awsPrivateLinkConfigurations": [
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                },
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                },
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                },
                {
                  "port": 80,
                  "targetGroupName": "my-target-group"
                }
              ]
            }
          },
          "publicNetworkingConfiguration": {
            "enableClusterLoadBalancer": true,
            "enableNodeLoadBalancer": true
          },
          "stableEgressIP": true,
          "tlsTerminationPort": 443,
          "zoneConfiguration": "Facere eligendi sapiente unde atque harum."
        }
      },
      "UpdateOutputParameterRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the output variable being exported",
            "example": "Username of the user created in the target system",
            "minLength": 1
          },
          "id": {
            "type": "string",
            "description": "ID of an Output Parameter",
            "example": "Ducimus ut in."
          },
          "name": {
            "type": "string",
            "description": "External name of the output variable being exported",
            "example": "Username",
            "minLength": 1
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "8qy",
            "minLength": 1
          },
          "value": {
            "type": "string",
            "description": "Value of the output variable being exported",
            "example": "johndoe",
            "minLength": 1
          },
          "valueRef": {
            "type": "string",
            "description": "Reference to an input variable that will be used to set the value of the output variable being exported",
            "example": "$var.username"
          },
          "valueType": {
            "type": "string",
            "description": "Type of the variable encoding the value",
            "example": "Boolean|Float64|String|Secret|Password"
          }
        },
        "example": {
          "description": "Username of the user created in the target system",
          "id": "op-12345678",
          "name": "Username",
          "serviceId": "s-12345678",
          "token": "z",
          "value": "johndoe",
          "valueRef": "$var.username",
          "valueType": "Boolean|Float64|String|Secret|Password"
        },
        "required": ["token", "id", "serviceId"]
      },
      "UpdateOutputParameterRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the output variable being exported",
            "example": "Username of the user created in the target system",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "External name of the output variable being exported",
            "example": "Username",
            "minLength": 1
          },
          "value": {
            "type": "string",
            "description": "Value of the output variable being exported",
            "example": "johndoe",
            "minLength": 1
          },
          "valueRef": {
            "type": "string",
            "description": "Reference to an input variable that will be used to set the value of the output variable being exported",
            "example": "$var.username"
          },
          "valueType": {
            "type": "string",
            "example": "Quae nesciunt."
          }
        },
        "example": {
          "description": "Username of the user created in the target system",
          "name": "Username",
          "value": "johndoe",
          "valueRef": "$var.username",
          "valueType": "Fugiat explicabo dolores consequatur."
        }
      },
      "UpdatePasswordRequest": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "example": "currentPassword",
            "minLength": 1
          },
          "currentPasswordHash": {
            "type": "string",
            "example": "currentPasswordHash",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "example": "password",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "f",
            "minLength": 1
          }
        },
        "example": {
          "currentPassword": "currentPassword",
          "currentPasswordHash": "currentPasswordHash",
          "password": "password",
          "token": "dcp"
        },
        "required": ["token", "password"]
      },
      "UpdatePasswordRequest2": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "example": "currentPassword",
            "minLength": 1
          },
          "currentPasswordHash": {
            "type": "string",
            "example": "currentPasswordHash",
            "minLength": 1
          },
          "password": {
            "type": "string",
            "example": "password",
            "minLength": 1
          }
        },
        "example": {
          "currentPassword": "currentPassword",
          "currentPasswordHash": "currentPasswordHash",
          "password": "password"
        },
        "required": ["password"]
      },
      "UpdatePipelineRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the pipeline",
            "example": "MySQL SaaS promotion pipeline"
          },
          "id": {
            "type": "string",
            "description": "ID of a Pipeline",
            "example": "Odio nihil libero similique blanditiis rerum voluptas."
          },
          "name": {
            "type": "string",
            "description": "Name of the pipeline",
            "example": "my-pipeline"
          },
          "serviceEnvironmentSequence": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of a Service Environment",
              "example": "se-123456"
            },
            "description": "Sequence of service environments to be deployed in the pipeline",
            "example": ["se-12345678", "se-23456789"]
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "r",
            "minLength": 1
          }
        },
        "example": {
          "description": "MySQL SaaS promotion pipeline",
          "id": "p-12345678",
          "name": "my-pipeline",
          "serviceEnvironmentSequence": ["se-12345678", "se-23456789"],
          "serviceId": "s-12345678",
          "token": "z"
        },
        "required": ["token"]
      },
      "UpdateProductTierBillingPlanRequest": {
        "type": "object",
        "properties": {
          "allowCreatesWhenPaymentNotConfigured": {
            "type": "boolean",
            "description": "Allow creates when payment not configured",
            "example": true
          },
          "id": {
            "type": "string",
            "description": "ID of a Product Tier Billing Plan",
            "example": "Maxime voluptatem sit tempora."
          },
          "maxNumberofInstances": {
            "type": "integer",
            "description": "Maximum number of instances",
            "example": 5,
            "format": "int64"
          },
          "planName": {
            "type": "string",
            "description": "Plan name",
            "example": "STARTER"
          },
          "pricing": {
            "description": "Pricing in dollars.",
            "example": {
              "cpuCoreHours": "0.001",
              "memoryGBHours": "0.0001"
            }
          },
          "productTierId": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Non nostrum laborum maxime soluta dicta."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "3",
            "minLength": 1
          }
        },
        "example": {
          "allowCreatesWhenPaymentNotConfigured": true,
          "id": "bp-12345678",
          "maxNumberofInstances": 5,
          "planName": "STARTER",
          "pricing": {
            "cpuCoreHours": "0.001",
            "memoryGBHours": "0.0001"
          },
          "productTierId": "pt-12345678",
          "serviceId": "s-12345678",
          "token": "gl"
        },
        "required": ["token", "id", "serviceId", "productTierId"]
      },
      "UpdateProductTierBillingPlanRequest2": {
        "type": "object",
        "properties": {
          "allowCreatesWhenPaymentNotConfigured": {
            "type": "boolean",
            "description": "Allow creates when payment not configured",
            "example": true
          },
          "maxNumberofInstances": {
            "type": "integer",
            "description": "Maximum number of instances",
            "example": 5,
            "format": "int64"
          },
          "planName": {
            "type": "string",
            "description": "Plan name",
            "example": "STARTER"
          },
          "pricing": {
            "description": "Pricing in dollars.",
            "example": {
              "cpuCoreHours": "0.001",
              "memoryGBHours": "0.0001"
            }
          }
        },
        "example": {
          "allowCreatesWhenPaymentNotConfigured": true,
          "maxNumberofInstances": 5,
          "planName": "STARTER",
          "pricing": {
            "cpuCoreHours": "0.001",
            "memoryGBHours": "0.0001"
          }
        }
      },
      "UpdateProductTierRequest": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "awsRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Magni sit ut amet."
            },
            "description": "The AWS regions that this product tier is available on",
            "example": ["us-east-2", "ca-central-1"]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the product tier",
            "example": "A premium product tier"
          },
          "documentation": {
            "type": "string",
            "description": "Documentation",
            "example": "Any documentation"
          },
          "gcpRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Omnis autem magnam sit sapiente dignissimos debitis."
            },
            "description": "The GCP regions that this product tier is available on",
            "example": ["us-central1"]
          },
          "id": {
            "type": "string",
            "description": "ID of a Product Tier",
            "example": "Facere qui."
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Update the product tier's state as enabled/disabled. Enabling the product tier will let end-customers subscribe and use the service plan.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "Name of the product tier",
            "example": "Premium"
          },
          "planDescription": {
            "type": "string",
            "description": "A brief description for the end user of the product tier",
            "example": "A premium plan"
          },
          "pricing": {
            "description": "Pricing",
            "example": {
              "price1": "value1"
            }
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "support": {
            "type": "string",
            "description": "Support",
            "example": "Any support"
          },
          "tierType": {
            "type": "string",
            "description": "ProductTierType is the type of tier for a product",
            "example": "OMNISTRATE_DEDICATED_TENANCY|OMNISTRATE_MULTI_TENANCY|CUSTOM_TENANCY"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "t1i",
            "minLength": 1
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "awsRegions": ["us-east-2", "ca-central-1"],
          "description": "A premium product tier",
          "documentation": "Any documentation",
          "gcpRegions": ["us-central1"],
          "id": "pt-12345678",
          "isDisabled": false,
          "name": "Premium",
          "planDescription": "A premium plan",
          "pricing": {
            "price1": "value1"
          },
          "serviceId": "s-12345678",
          "support": "Any support",
          "tierType": "OMNISTRATE_DEDICATED_TENANCY",
          "token": "7z"
        },
        "required": ["token", "serviceId", "id"]
      },
      "UpdateProductTierRequest2": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "awsRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Velit eveniet modi excepturi."
            },
            "description": "The AWS regions that this product tier is available on",
            "example": ["us-east-2", "ca-central-1"]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the product tier",
            "example": "A premium product tier"
          },
          "documentation": {
            "type": "string",
            "description": "Documentation",
            "example": "Any documentation"
          },
          "gcpRegions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Architecto qui fuga hic."
            },
            "description": "The GCP regions that this product tier is available on",
            "example": ["us-central1"]
          },
          "isDisabled": {
            "type": "boolean",
            "description": "Update the product tier's state as enabled/disabled. Enabling the product tier will let end-customers subscribe and use the service plan.",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "Name of the product tier",
            "example": "Premium"
          },
          "planDescription": {
            "type": "string",
            "description": "A brief description for the end user of the product tier",
            "example": "A premium plan"
          },
          "pricing": {
            "description": "Pricing",
            "example": {
              "price1": "value1"
            }
          },
          "support": {
            "type": "string",
            "description": "Support",
            "example": "Any support"
          },
          "tierType": {
            "type": "string",
            "description": "Tier type",
            "example": "OMNISTRATE_DEDICATED_TENANCY"
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "awsRegions": ["us-east-2", "ca-central-1"],
          "description": "A premium product tier",
          "documentation": "Any documentation",
          "gcpRegions": ["us-central1"],
          "isDisabled": false,
          "name": "Premium",
          "planDescription": "A premium plan",
          "pricing": {
            "price1": "value1"
          },
          "support": "Any support",
          "tierType": "OMNISTRATE_DEDICATED_TENANCY"
        }
      },
      "UpdateResourceInstanceRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The instance ID",
            "example": "instance-abcd1234"
          },
          "productTierKey": {
            "type": "string",
            "description": "The product tier name",
            "example": "premium"
          },
          "requestParams": {
            "description": "The request parameters",
            "example": {
              "param1": "value1",
              "param2": "value2"
            }
          },
          "resourceKey": {
            "type": "string",
            "description": "The resource key",
            "example": "mysql"
          },
          "serviceAPIVersion": {
            "type": "string",
            "description": "The service API version",
            "example": "v1"
          },
          "serviceEnvironmentKey": {
            "type": "string",
            "description": "The service environment name",
            "example": "dev"
          },
          "serviceKey": {
            "type": "string",
            "description": "The service name",
            "example": "service-orchestration"
          },
          "serviceModelKey": {
            "type": "string",
            "description": "The service model name",
            "example": "hosted"
          },
          "serviceProviderId": {
            "type": "string",
            "description": "ID of a Service Provider",
            "example": "Est iure aliquam."
          },
          "subscriptionId": {
            "type": "string",
            "description": "The subscription ID",
            "example": "sub-abcd1234"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "vc",
            "minLength": 1
          }
        },
        "example": {
          "id": "instance-abcd1234",
          "productTierKey": "premium",
          "requestParams": {
            "param1": "value1",
            "param2": "value2"
          },
          "resourceKey": "mysql",
          "serviceAPIVersion": "v1",
          "serviceEnvironmentKey": "dev",
          "serviceKey": "service-orchestration",
          "serviceModelKey": "hosted",
          "serviceProviderId": "omnistrate",
          "subscriptionId": "sub-abcd1234",
          "token": "7pn"
        },
        "required": [
          "token",
          "serviceProviderId",
          "serviceKey",
          "serviceAPIVersion",
          "serviceEnvironmentKey",
          "serviceModelKey",
          "productTierKey",
          "resourceKey",
          "id"
        ]
      },
      "UpdateResourceInstanceRequest2": {
        "type": "object",
        "properties": {
          "requestParams": {
            "description": "The request parameters",
            "example": {
              "param1": "value1",
              "param2": "value2"
            }
          }
        },
        "example": {
          "requestParams": {
            "param1": "value1",
            "param2": "value2"
          }
        }
      },
      "UpdateResourceRequest": {
        "type": "object",
        "properties": {
          "additionalSecurityContext": {
            "$ref": "#/components/schemas/AdditionalSecurityContext"
          },
          "backupConfiguration": {
            "$ref": "#/components/schemas/BackupConfiguration"
          },
          "customLabels": {
            "type": "object",
            "description": "Custom labels for the resource",
            "example": {
              "key": "value"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Nihil ad."
            }
          },
          "customSysCTLs": {
            "type": "object",
            "description": "Custom sysctl settings for the resource",
            "example": {
              "net.ipv4.tcp_syncookies": "1"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Exercitationem est dolores eaque molestiae expedita exercitationem."
            }
          },
          "customULimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomULimits"
            },
            "description": "Custom ulimits for the resource",
            "example": [
              {
                "ULimitsName": "NoProc",
                "ULimitsType": "Soft",
                "ULimitsValue": 1000
              },
              {
                "ULimitsName": "NoFile",
                "ULimitsType": "Hard",
                "ULimitsValue": 2048
              }
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceDependency"
            },
            "example": [
              {
                "parameterMap": {
                  "clusterId": "writerId",
                  "clusterOrg": "userDatabase"
                },
                "resourceId": "r-12345678"
              },
              {
                "parameterMap": {
                  "clusterId": "readerId",
                  "clusterOrg": "userDatabase"
                },
                "resourceId": "r-abcdef12"
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the resource",
            "example": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service"
          },
          "environmentVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            },
            "description": "The environment variables that this resource requires",
            "example": [
              {
                "key": "MYSQL_ROOT_PASSWORD",
                "value": "password"
              }
            ]
          },
          "helmChartConfiguration": {
            "$ref": "#/components/schemas/HelmChartConfiguration"
          },
          "id": {
            "type": "string",
            "description": "ID of a resource",
            "example": "Saepe quia."
          },
          "imageConfigId": {
            "type": "string",
            "description": "ID of an Image Config",
            "example": "Maxime recusandae nihil occaecati assumenda."
          },
          "infraConfigId": {
            "type": "string",
            "description": "ID of an Infra Config",
            "example": "Aut atque doloremque dolorem commodi accusamus."
          },
          "kustomizeConfiguration": {
            "$ref": "#/components/schemas/KustomizeConfiguration"
          },
          "l4LoadBalancerConfiguration": {
            "$ref": "#/components/schemas/L4LoadBalancerConfiguration"
          },
          "l7LoadBalancerConfiguration": {
            "$ref": "#/components/schemas/L7LoadBalancerConfiguration"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource",
            "example": "Galera"
          },
          "operatorCRDConfiguration": {
            "$ref": "#/components/schemas/OperatorCRDConfiguration"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "terraformConfigurations": {
            "$ref": "#/components/schemas/TerraformConfigurations"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "tpy",
            "minLength": 1
          }
        },
        "example": {
          "additionalSecurityContext": {
            "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
            "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
            "SupplementalGroupIDs": [1001, 999]
          },
          "backupConfiguration": {
            "backupPeriodInHours": 24,
            "backupRetentionInDays": 7
          },
          "customLabels": {
            "key": "value"
          },
          "customSysCTLs": {
            "net.ipv4.tcp_syncookies": "1"
          },
          "customULimits": [
            {
              "ULimitsName": "NoProc",
              "ULimitsType": "Soft",
              "ULimitsValue": 1000
            },
            {
              "ULimitsName": "NoFile",
              "ULimitsType": "Hard",
              "ULimitsValue": 2048
            }
          ],
          "dependencies": [
            {
              "parameterMap": {
                "clusterId": "writerId",
                "clusterOrg": "userDatabase"
              },
              "resourceId": "r-12345678"
            },
            {
              "parameterMap": {
                "clusterId": "readerId",
                "clusterOrg": "userDatabase"
              },
              "resourceId": "r-abcdef12"
            }
          ],
          "description": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
          "environmentVariables": [
            {
              "key": "MYSQL_ROOT_PASSWORD",
              "value": "password"
            }
          ],
          "helmChartConfiguration": {
            "chartName": "my-chart",
            "chartRepoName": "my-repo",
            "chartRepoUrl": "https://my-repo.com",
            "chartValues": {
              "key1": "value1",
              "key2": 3,
              "key3": {
                "key4": "value4"
              }
            },
            "chartVersion": "1.0.0",
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "password": "my-password",
            "runtimeConfiguration": {
              "disableHooks": true,
              "recreate": true,
              "resetThenReuseValues": true,
              "resetValues": true,
              "reuseValues": true,
              "skipCRDs": true,
              "timeoutNanos": 1000000000,
              "upgradeCRDs": true,
              "wait": true,
              "waitForJobs": true
            },
            "username": "my-user"
          },
          "id": "r-12345678",
          "imageConfigId": "imgc-12345678",
          "infraConfigId": "ic-12345678",
          "kustomizeConfiguration": {
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "gitConfiguration": {
              "accessToken": "my-token",
              "referenceName": "tags/v1.0.0",
              "repositoryUrl": "https://github.com/username/myrepo",
              "userName": "my-user"
            },
            "helmChartDependencies": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ],
            "kustomizePath": "/kustomize"
          },
          "l4LoadBalancerConfiguration": {
            "ingressPortConfiguration": [
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8080,
                "ingressPort": 1234
              },
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8081,
                "ingressPort": 5678
              },
              {
                "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                "backendPort": 8082,
                "ingressPort": 9012
              }
            ]
          },
          "l7LoadBalancerConfiguration": {
            "paths": [
              {
                "associatedResourceID": "r-12345678",
                "path": "/path",
                "port": 8080
              }
            ]
          },
          "name": "Galera",
          "operatorCRDConfiguration": {
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "helmChartDependencies": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ],
            "outputParameters": {
              "expiresAt": "$out.status.notAfter",
              "issuerName": "letsencrypt-prod"
            },
            "readinessConditions": {
              "$out.status.conditions[?(@.type=='Ready')].status": true
            },
            "supplementalFiles": [
              "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
              "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
            ],
            "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
          },
          "serviceId": "s-12345678",
          "terraformConfigurations": {
            "aws": {
              "gitConfiguration": {
                "referenceName": "ref",
                "repositoryUrl": "gitUrl"
              },
              "privateModuleGitAccessTokens": {
                "tokenName": "accessToken"
              },
              "terraformPath": "/project1/tf"
            }
          },
          "token": "eq"
        },
        "required": ["token", "id", "serviceId"]
      },
      "UpdateResourceRequest2": {
        "type": "object",
        "properties": {
          "additionalSecurityContext": {
            "$ref": "#/components/schemas/AdditionalSecurityContext"
          },
          "backupConfiguration": {
            "$ref": "#/components/schemas/BackupConfiguration"
          },
          "customLabels": {
            "type": "object",
            "description": "Custom labels for the resource",
            "example": {
              "key": "value"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Rerum ipsa."
            }
          },
          "customSysCTLs": {
            "type": "object",
            "description": "Custom sysctl settings for the resource",
            "example": {
              "net.ipv4.tcp_syncookies": "1"
            },
            "additionalProperties": {
              "type": "string",
              "example": "Quis ullam."
            }
          },
          "customULimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomULimits"
            },
            "description": "Custom ulimits for the resource",
            "example": [
              {
                "ULimitsName": "NoProc",
                "ULimitsType": "Soft",
                "ULimitsValue": 1000
              },
              {
                "ULimitsName": "NoFile",
                "ULimitsType": "Hard",
                "ULimitsValue": 2048
              }
            ]
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceDependency"
            },
            "example": [
              {
                "parameterMap": {
                  "clusterId": "writerId",
                  "clusterOrg": "userDatabase"
                },
                "resourceId": "r-12345678"
              },
              {
                "parameterMap": {
                  "clusterId": "readerId",
                  "clusterOrg": "userDatabase"
                },
                "resourceId": "r-abcdef12"
              }
            ]
          },
          "description": {
            "type": "string",
            "description": "A brief description of the resource",
            "example": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service"
          },
          "environmentVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnvironmentVariable"
            },
            "description": "The environment variables that this resource requires",
            "example": [
              {
                "key": "MYSQL_ROOT_PASSWORD",
                "value": "password"
              }
            ]
          },
          "helmChartConfiguration": {
            "$ref": "#/components/schemas/HelmChartConfiguration"
          },
          "imageConfigId": {
            "type": "string",
            "description": "The ID of the image configuration that this resource refers to",
            "example": "imgc-12345678"
          },
          "infraConfigId": {
            "type": "string",
            "description": "The ID of the infrastructure configuration that this resource refers to",
            "example": "ic-12345678"
          },
          "kustomizeConfiguration": {
            "$ref": "#/components/schemas/KustomizeConfiguration"
          },
          "l4LoadBalancerConfiguration": {
            "$ref": "#/components/schemas/L4LoadBalancerConfiguration"
          },
          "l7LoadBalancerConfiguration": {
            "$ref": "#/components/schemas/L7LoadBalancerConfiguration"
          },
          "name": {
            "type": "string",
            "description": "Name of the resource",
            "example": "Galera"
          },
          "operatorCRDConfiguration": {
            "$ref": "#/components/schemas/OperatorCRDConfiguration"
          },
          "terraformConfigurations": {
            "type": "object",
            "description": "The Terraform configurations for various cloud providers",
            "example": {
              "Accusantium molestias ut qui quasi ea.": {
                "gitConfiguration": {
                  "accessToken": "my-token",
                  "referenceName": "tags/v1.0.0",
                  "repositoryUrl": "https://github.com/username/myrepo",
                  "userName": "my-user"
                },
                "privateModuleGitAccessTokens": {
                  "tokenName": "accessToken"
                },
                "requiredOutputKeys": ["output1"],
                "requiredOutputs": [
                  {
                    "exported": true,
                    "key": "output1"
                  }
                ],
                "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                "terraformPath": "/project1/tf"
              },
              "Id voluptatem veniam eligendi hic.": {
                "gitConfiguration": {
                  "accessToken": "my-token",
                  "referenceName": "tags/v1.0.0",
                  "repositoryUrl": "https://github.com/username/myrepo",
                  "userName": "my-user"
                },
                "privateModuleGitAccessTokens": {
                  "tokenName": "accessToken"
                },
                "requiredOutputKeys": ["output1"],
                "requiredOutputs": [
                  {
                    "exported": true,
                    "key": "output1"
                  }
                ],
                "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                "terraformPath": "/project1/tf"
              },
              "Impedit quo sed consequatur voluptatem id.": {
                "gitConfiguration": {
                  "accessToken": "my-token",
                  "referenceName": "tags/v1.0.0",
                  "repositoryUrl": "https://github.com/username/myrepo",
                  "userName": "my-user"
                },
                "privateModuleGitAccessTokens": {
                  "tokenName": "accessToken"
                },
                "requiredOutputKeys": ["output1"],
                "requiredOutputs": [
                  {
                    "exported": true,
                    "key": "output1"
                  }
                ],
                "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                "terraformPath": "/project1/tf"
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/TerraformConfiguration"
            }
          }
        },
        "example": {
          "additionalSecurityContext": {
            "AddCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
            "DropCapabilities": ["CAP_NET_ADMIN", "CAP_NET_RAW"],
            "SupplementalGroupIDs": [1001, 999]
          },
          "backupConfiguration": {
            "backupPeriodInHours": 24,
            "backupRetentionInDays": 7
          },
          "customLabels": {
            "key": "value"
          },
          "customSysCTLs": {
            "net.ipv4.tcp_syncookies": "1"
          },
          "customULimits": [
            {
              "ULimitsName": "NoProc",
              "ULimitsType": "Soft",
              "ULimitsValue": 1000
            },
            {
              "ULimitsName": "NoFile",
              "ULimitsType": "Hard",
              "ULimitsValue": 2048
            }
          ],
          "dependencies": [
            {
              "parameterMap": {
                "clusterId": "writerId",
                "clusterOrg": "userDatabase"
              },
              "resourceId": "r-12345678"
            },
            {
              "parameterMap": {
                "clusterId": "readerId",
                "clusterOrg": "userDatabase"
              },
              "resourceId": "r-abcdef12"
            }
          ],
          "description": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
          "environmentVariables": [
            {
              "key": "MYSQL_ROOT_PASSWORD",
              "value": "password"
            }
          ],
          "helmChartConfiguration": {
            "chartName": "my-chart",
            "chartRepoName": "my-repo",
            "chartRepoUrl": "https://my-repo.com",
            "chartValues": {
              "key1": "value1",
              "key2": 3,
              "key3": {
                "key4": "value4"
              }
            },
            "chartVersion": "1.0.0",
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "password": "my-password",
            "runtimeConfiguration": {
              "disableHooks": true,
              "recreate": true,
              "resetThenReuseValues": true,
              "resetValues": true,
              "reuseValues": true,
              "skipCRDs": true,
              "timeoutNanos": 1000000000,
              "upgradeCRDs": true,
              "wait": true,
              "waitForJobs": true
            },
            "username": "my-user"
          },
          "imageConfigId": "imgc-12345678",
          "infraConfigId": "ic-12345678",
          "kustomizeConfiguration": {
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "gitConfiguration": {
              "accessToken": "my-token",
              "referenceName": "tags/v1.0.0",
              "repositoryUrl": "https://github.com/username/myrepo",
              "userName": "my-user"
            },
            "helmChartDependencies": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ],
            "kustomizePath": "/kustomize"
          },
          "l4LoadBalancerConfiguration": {
            "ingressPortConfiguration": [
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8080,
                "ingressPort": 1234
              },
              {
                "associatedResourceIDs": ["r-12345678", "r-abcdef12"],
                "backendPort": 8081,
                "ingressPort": 5678
              },
              {
                "associatedResourceIDs": ["r-vwxybz12", "r-poij122v"],
                "backendPort": 8082,
                "ingressPort": 9012
              }
            ]
          },
          "l7LoadBalancerConfiguration": {
            "paths": [
              {
                "associatedResourceID": "r-12345678",
                "path": "/path",
                "port": 8080
              }
            ]
          },
          "name": "Galera",
          "operatorCRDConfiguration": {
            "endpointConfiguration": {
              "admin": {
                "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                "networkingType": "PRIVATE",
                "ports": [8080, 8081],
                "primary": false
              },
              "cluster": {
                "host": "https://my-endpoint.com",
                "networkingType": "PUBLIC",
                "ports": [8080, 8081],
                "primary": true
              }
            },
            "helmChartDependencies": [
              {
                "chartName": "cert-manager",
                "chartVersion": "v1.5.3"
              },
              {
                "chartName": "nginx-ingress",
                "chartVersion": "v0.48.1"
              },
              {
                "chartName": "external-dns",
                "chartVersion": "v0.7.0"
              },
              {
                "chartName": "cnpg-operator",
                "chartVersion": "v0.23.1"
              }
            ],
            "outputParameters": {
              "expiresAt": "$out.status.notAfter",
              "issuerName": "letsencrypt-prod"
            },
            "readinessConditions": {
              "$out.status.conditions[?(@.type=='Ready')].status": true
            },
            "supplementalFiles": [
              "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
              "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
            ],
            "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
          },
          "terraformConfigurations": {
            "Aliquam tenetur dolores animi consectetur praesentium.": {
              "gitConfiguration": {
                "accessToken": "my-token",
                "referenceName": "tags/v1.0.0",
                "repositoryUrl": "https://github.com/username/myrepo",
                "userName": "my-user"
              },
              "privateModuleGitAccessTokens": {
                "tokenName": "accessToken"
              },
              "requiredOutputKeys": ["output1"],
              "requiredOutputs": [
                {
                  "exported": true,
                  "key": "output1"
                }
              ],
              "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
              "terraformPath": "/project1/tf"
            },
            "Qui fuga neque.": {
              "gitConfiguration": {
                "accessToken": "my-token",
                "referenceName": "tags/v1.0.0",
                "repositoryUrl": "https://github.com/username/myrepo",
                "userName": "my-user"
              },
              "privateModuleGitAccessTokens": {
                "tokenName": "accessToken"
              },
              "requiredOutputKeys": ["output1"],
              "requiredOutputs": [
                {
                  "exported": true,
                  "key": "output1"
                }
              ],
              "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
              "terraformPath": "/project1/tf"
            }
          }
        }
      },
      "UpdateSaaSPortalCustomDomainRequest": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "The custom domain",
            "example": "mycustomdomain.com"
          },
          "description": {
            "type": "string",
            "description": "The custom domain description",
            "example": "My custom domain description"
          },
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "name": {
            "type": "string",
            "description": "The custom domain name",
            "example": "MyCustomDomain"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "d2t",
            "minLength": 1
          }
        },
        "example": {
          "customDomain": "mycustomdomain.com",
          "description": "My custom domain description",
          "environmentType": "DEV",
          "name": "MyCustomDomain",
          "token": "b"
        },
        "required": ["token", "environmentType"]
      },
      "UpdateSaaSPortalCustomDomainRequest2": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "The custom domain",
            "example": "mycustomdomain.com"
          },
          "description": {
            "type": "string",
            "description": "The custom domain description",
            "example": "My custom domain description"
          },
          "name": {
            "type": "string",
            "description": "The custom domain name",
            "example": "MyCustomDomain"
          }
        },
        "example": {
          "customDomain": "mycustomdomain.com",
          "description": "My custom domain description",
          "name": "MyCustomDomain"
        }
      },
      "UpdateSaaSPortalRequest": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "The custom domain for the SaaS portal",
            "example": "mycustomdomain.com"
          },
          "emailConfig": {
            "$ref": "#/components/schemas/SaaSPortalEmailConfig"
          },
          "environmentType": {
            "type": "string",
            "description": "The type of service environment",
            "example": "PROD|PRIVATE|CANARY|STAGING|QA|DEV"
          },
          "googleAnalyticsTagID": {
            "type": "string",
            "description": "The Google Analytics tag ID for the SaaS portal",
            "example": "G-123456789"
          },
          "imageConfig": {
            "$ref": "#/components/schemas/SaaSPortalImageConfig"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "du",
            "minLength": 1
          }
        },
        "example": {
          "customDomain": "mycustomdomain.com",
          "emailConfig": {
            "smtpFromEmail": "example@gmail.com",
            "smtpHost": "smtp.gmail.com",
            "smtpPassword": "password",
            "smtpPort": 587,
            "smtpUsername": "username"
          },
          "environmentType": "DEV",
          "googleAnalyticsTagID": "G-123456789",
          "imageConfig": {
            "imageName": "myimage",
            "imageRegistry": "ghcr.io",
            "imageTag": "latest"
          },
          "token": "1"
        },
        "required": ["token", "environmentType"]
      },
      "UpdateSaaSPortalRequest2": {
        "type": "object",
        "properties": {
          "customDomain": {
            "type": "string",
            "description": "The custom domain for the SaaS portal",
            "example": "mycustomdomain.com"
          },
          "emailConfig": {
            "$ref": "#/components/schemas/SaaSPortalEmailConfig"
          },
          "googleAnalyticsTagID": {
            "type": "string",
            "description": "The Google Analytics tag ID for the SaaS portal",
            "example": "G-123456789"
          },
          "imageConfig": {
            "$ref": "#/components/schemas/SaaSPortalImageConfig"
          }
        },
        "example": {
          "customDomain": "mycustomdomain.com",
          "emailConfig": {
            "smtpFromEmail": "example@gmail.com",
            "smtpHost": "smtp.gmail.com",
            "smtpPassword": "password",
            "smtpPort": 587,
            "smtpUsername": "username"
          },
          "googleAnalyticsTagID": "G-123456789",
          "imageConfig": {
            "imageName": "myimage",
            "imageRegistry": "ghcr.io",
            "imageTag": "latest"
          }
        }
      },
      "UpdateServiceAPIRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service API bundle",
            "example": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability"
          },
          "id": {
            "type": "string",
            "description": "ID of a Service API",
            "example": "Doloremque praesentium enim sunt vero rerum."
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "0",
            "minLength": 1
          }
        },
        "example": {
          "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
          "id": "sa-12345678",
          "serviceId": "s-12345678",
          "token": "0"
        },
        "required": ["token", "id", "serviceId"]
      },
      "UpdateServiceAPIRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service API bundle",
            "example": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability"
          }
        },
        "example": {
          "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability"
        }
      },
      "UpdateServiceEnvironmentRequest": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "deploymentConfigId": {
            "type": "string",
            "description": "ID of a Deployment Config",
            "example": "Molestias error maiores consequatur vel fugiat."
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service environment",
            "example": "The production environment for the MySQL multi-writer service"
          },
          "id": {
            "type": "string",
            "description": "ID of a Service Environment",
            "example": "se-123456"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Environment",
            "example": "Production"
          },
          "serviceAuthPublicKey": {
            "type": "string",
            "description": "PEM-encoded Public key part of the key used to sign the JWT tokens for the service control plane APIs",
            "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "sourceEnvironmentId": {
            "type": "string",
            "description": "The ID of the service environment to use for promoting changes to this environment",
            "example": "se-12345678"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "zm",
            "minLength": 1
          },
          "visibility": {
            "type": "string",
            "description": "This parameter is used to configure the visibility of the service control-plane APIs",
            "example": "PUBLIC"
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "deploymentConfigId": "dc-12345678",
          "description": "The production environment for the MySQL multi-writer service",
          "id": "se-12345678",
          "name": "Production",
          "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
          "serviceId": "s-12345678",
          "sourceEnvironmentId": "se-12345678",
          "token": "8uv",
          "visibility": "PUBLIC"
        },
        "required": ["token", "id", "serviceId"]
      },
      "UpdateServiceEnvironmentRequest2": {
        "type": "object",
        "properties": {
          "autoApproveSubscription": {
            "type": "boolean",
            "description": "Auto approve subscription or not",
            "example": false
          },
          "deploymentConfigId": {
            "type": "string",
            "description": "The deployment configuration ID",
            "example": "dc-12345678"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the service environment",
            "example": "The production environment for the MySQL multi-writer service"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Environment",
            "example": "Production"
          },
          "serviceAuthPublicKey": {
            "type": "string",
            "description": "PEM-encoded Public key part of the key used to sign the JWT tokens for the service control plane APIs",
            "example": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n"
          },
          "sourceEnvironmentId": {
            "type": "string",
            "description": "The ID of the service environment to use for promoting changes to this environment",
            "example": "se-12345678"
          },
          "visibility": {
            "type": "string",
            "description": "This parameter is used to configure the visibility of the service control-plane APIs",
            "example": "Iure sunt provident dolores sequi fugit."
          }
        },
        "example": {
          "autoApproveSubscription": false,
          "deploymentConfigId": "dc-12345678",
          "description": "The production environment for the MySQL multi-writer service",
          "name": "Production",
          "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
          "sourceEnvironmentId": "se-12345678",
          "visibility": "Officia deleniti ea omnis ab."
        }
      },
      "UpdateServiceModelRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service model",
            "example": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability"
          },
          "id": {
            "type": "string",
            "description": "ID of a Service Model",
            "example": "Commodi sunt accusantium et voluptatum dolore."
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Model",
            "example": "MySQL multi-writer service hosted model"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "ba",
            "minLength": 1
          }
        },
        "example": {
          "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
          "id": "sm-12345678",
          "name": "MySQL multi-writer service hosted model",
          "serviceId": "s-12345678",
          "token": "t77"
        },
        "required": ["token", "id", "serviceId"]
      },
      "UpdateServiceModelRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service model",
            "example": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service Model",
            "example": "MySQL multi-writer service hosted model"
          }
        },
        "example": {
          "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
          "name": "MySQL multi-writer service hosted model"
        }
      },
      "UpdateServiceRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "id": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service",
            "example": "MySQL multi-writer service"
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "Libero quod libero molestiae laborum et quas."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "pd",
            "minLength": 1
          }
        },
        "example": {
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "id": "s-12345678",
          "name": "MySQL multi-writer service",
          "serviceLogoURL": "Cumque nam omnis libero.",
          "token": "j21"
        },
        "required": ["token", "id"]
      },
      "UpdateServiceRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the service",
            "example": "A MySQL SaaS specializing in multi-writer clusters for high availability"
          },
          "name": {
            "type": "string",
            "description": "Name of the Service",
            "example": "MySQL multi-writer service"
          },
          "serviceLogoURL": {
            "type": "string",
            "description": "The logo for the service",
            "example": "Ut illo suscipit eos quasi culpa dolore."
          }
        },
        "example": {
          "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
          "name": "MySQL multi-writer service",
          "serviceLogoURL": "Qui veniam."
        }
      },
      "UpdateStorageConfigRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the storage config",
            "example": "my-storage-config-description",
            "minLength": 1
          },
          "id": {
            "type": "string",
            "description": "ID of a Storage Config",
            "example": "Provident dignissimos."
          },
          "name": {
            "type": "string",
            "description": "Name of the storage config",
            "example": "my-storage-config",
            "minLength": 1
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "mg",
            "minLength": 1
          }
        },
        "example": {
          "description": "my-storage-config-description",
          "id": "sc-12345678",
          "name": "my-storage-config",
          "serviceId": "s-12345678",
          "token": "7g"
        },
        "required": ["token", "id", "serviceId"]
      },
      "UpdateStorageConfigRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the storage config",
            "example": "my-storage-config-description",
            "minLength": 1
          },
          "name": {
            "type": "string",
            "description": "Name of the storage config",
            "example": "my-storage-config",
            "minLength": 1
          }
        },
        "example": {
          "description": "my-storage-config-description",
          "name": "my-storage-config"
        }
      },
      "UpdateStorageVolumeConfigRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the context for the storage volume pool",
            "example": "A storage volume set to store the MySQL data directory"
          },
          "disableBackup": {
            "type": "boolean",
            "description": "Disable backup for the storage volume",
            "example": false
          },
          "id": {
            "type": "string",
            "description": "ID of a Storage Volume Config",
            "example": "Pariatur cum est dolores temporibus cumque odit."
          },
          "name": {
            "type": "string",
            "description": "Name of the storage volume pool",
            "example": "MySQL Data Volume"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "2l8",
            "minLength": 1
          }
        },
        "example": {
          "description": "A storage volume set to store the MySQL data directory",
          "disableBackup": false,
          "id": "svc-12345678",
          "name": "MySQL Data Volume",
          "serviceId": "s-12345678",
          "token": "qv"
        },
        "required": ["token", "serviceId", "id"]
      },
      "UpdateStorageVolumeConfigRequest2": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the context for the storage volume pool",
            "example": "A storage volume set to store the MySQL data directory"
          },
          "disableBackup": {
            "type": "boolean",
            "description": "Disable backup for the storage volume",
            "example": false
          },
          "name": {
            "type": "string",
            "description": "Name of the storage volume pool",
            "example": "MySQL Data Volume"
          }
        },
        "example": {
          "description": "A storage volume set to store the MySQL data directory",
          "disableBackup": false,
          "name": "MySQL Data Volume"
        }
      },
      "UpdateStorageVolumeSizeConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of a Storage Volume Config",
            "example": "Quaerat tempora quia sed ut sequi."
          },
          "instanceStorageSizeGi": {
            "type": "string",
            "description": "The storage size (in Gi) provisioned for the configured instance storage type",
            "example": "$var.storage_size"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "7ff",
            "minLength": 1
          }
        },
        "example": {
          "id": "svc-12345678",
          "instanceStorageSizeGi": "$var.storage_size",
          "serviceId": "s-12345678",
          "token": "ev"
        },
        "required": ["token", "serviceId", "id", "instanceStorageSizeGi"]
      },
      "UpdateStorageVolumeSizeConfigRequest2": {
        "type": "object",
        "properties": {
          "instanceStorageSizeGi": {
            "type": "string",
            "description": "The storage size (in Gi) provisioned for the configured instance storage type",
            "example": "$var.storage_size"
          }
        },
        "example": {
          "instanceStorageSizeGi": "$var.storage_size"
        },
        "required": ["instanceStorageSizeGi"]
      },
      "UpdateUpgradePathRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A brief description of the upgrade path",
            "example": "An upgrade path migrating clusters from one LTS version to another"
          },
          "id": {
            "type": "string",
            "description": "ID of an Upgrade Path",
            "example": "Similique in dolore occaecati est voluptas."
          },
          "name": {
            "type": "string",
            "description": "Name of the upgrade path",
            "example": "LTS upgrade path"
          },
          "serviceId": {
            "type": "string",
            "description": "ID of a Service",
            "example": "s-123456"
          },
          "sourceVersion": {
            "type": "string",
            "description": "Version of the Entity to operate on",
            "example": "1.0",
            "minLength": 1
          },
          "targetVersion": {
            "type": "string",
            "description": "Version of the Entity to operate on",
            "example": "1.0",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "7",
            "minLength": 1
          }
        },
        "example": {
          "description": "An upgrade path migrating clusters from one LTS version to another",
          "id": "up-12345678",
          "name": "LTS upgrade path",
          "serviceId": "s-12345678",
          "sourceVersion": "567.0",
          "targetVersion": "589.0",
          "token": "1h"
        },
        "required": ["token"]
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "id": {
            "type": "string",
            "description": "The User ID",
            "example": "user-abcd1234"
          },
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Dae"
          },
          "orgDescription": {
            "type": "string",
            "description": "The description of the org that this user owns",
            "example": "ACME Inc."
          },
          "orgFavIconURL": {
            "type": "string",
            "description": "The favicon of the org that this user owns",
            "example": "http://reichert.biz/alysson.torphy",
            "format": "uri"
          },
          "orgLogoURL": {
            "type": "string",
            "description": "The logo of the org that this user owns",
            "example": "http://stoltenbergjacobi.biz/eden_lebsack",
            "format": "uri"
          },
          "orgName": {
            "type": "string",
            "description": "The org name that this user owns",
            "example": "ACME"
          },
          "orgPrivacyPolicy": {
            "type": "string",
            "description": "The privacy policy for the org that this user owns in an HTML format",
            "example": "Doloribus dolores quibusdam."
          },
          "orgSupportEmail": {
            "type": "string",
            "description": "The support email of the org that this user owns",
            "example": "support@example.com"
          },
          "orgTermsOfUse": {
            "type": "string",
            "description": "The terms of use for the org that this user owns in an HTML format",
            "example": "Omnis cum quia eveniet ut."
          },
          "orgURL": {
            "type": "string",
            "description": "The url of the org that this user owns",
            "example": "something.acme"
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "ie",
            "minLength": 1
          }
        },
        "example": {
          "address": {
            "addressLine1": "1234 Main St",
            "addressLine2": "Apt 123",
            "addressLine3": "Building 123",
            "city": "San Francisco",
            "country": "US",
            "state": "CA",
            "zip": "94123"
          },
          "id": "user-abcd1234",
          "name": "John Dae",
          "orgDescription": "ACME Inc.",
          "orgFavIconURL": "http://goyette.info/bridie_adams",
          "orgLogoURL": "http://goyette.org/jaquelin",
          "orgName": "ACME",
          "orgPrivacyPolicy": "Laudantium sed illo.",
          "orgSupportEmail": "support@example.com",
          "orgTermsOfUse": "Molestiae mollitia recusandae qui recusandae quaerat.",
          "orgURL": "something.acme",
          "token": "m"
        },
        "required": ["token", "id"]
      },
      "UpdateUserRequest2": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "name": {
            "type": "string",
            "description": "The name of the user",
            "example": "John Dae"
          },
          "orgDescription": {
            "type": "string",
            "description": "The description of the org that this user owns",
            "example": "ACME Inc."
          },
          "orgFavIconURL": {
            "type": "string",
            "description": "The favicon of the org that this user owns",
            "example": "http://medhurstabbott.com/josh_koch",
            "format": "uri"
          },
          "orgLogoURL": {
            "type": "string",
            "description": "The logo of the org that this user owns",
            "example": "http://metzweber.info/sienna.jerde",
            "format": "uri"
          },
          "orgName": {
            "type": "string",
            "description": "The org name that this user owns",
            "example": "ACME"
          },
          "orgPrivacyPolicy": {
            "type": "string",
            "description": "The privacy policy for the org that this user owns in an HTML format",
            "example": "Odit veniam."
          },
          "orgSupportEmail": {
            "type": "string",
            "description": "The support email of the org that this user owns",
            "example": "support@example.com"
          },
          "orgTermsOfUse": {
            "type": "string",
            "description": "The terms of use for the org that this user owns in an HTML format",
            "example": "Et inventore."
          },
          "orgURL": {
            "type": "string",
            "description": "The url of the org that this user owns",
            "example": "something.acme"
          }
        },
        "example": {
          "address": {
            "addressLine1": "1234 Main St",
            "addressLine2": "Apt 123",
            "addressLine3": "Building 123",
            "city": "San Francisco",
            "country": "US",
            "state": "CA",
            "zip": "94123"
          },
          "name": "John Dae",
          "orgDescription": "ACME Inc.",
          "orgFavIconURL": "http://ziemannmayert.net/skylar",
          "orgLogoURL": "http://dibbert.name/lillian.maggio",
          "orgName": "ACME",
          "orgPrivacyPolicy": "Qui incidunt est ducimus magnam expedita ut.",
          "orgSupportEmail": "support@example.com",
          "orgTermsOfUse": "Voluptas debitis expedita aliquam.",
          "orgURL": "something.acme"
        }
      },
      "UsagePerDimension": {
        "type": "object",
        "properties": {
          "dimension": {
            "type": "string",
            "description": "Dimension of usage",
            "example": "core/hours"
          },
          "total": {
            "type": "number",
            "description": "Total amount of usage during the period",
            "example": 0.67,
            "format": "double"
          }
        },
        "example": {
          "dimension": "core/hours",
          "total": 0.67
        }
      },
      "VUnitHealthReport": {
        "type": "object",
        "properties": {
          "vunits": {
            "type": "object",
            "description": "The health of each vunit under this service environment",
            "example": {
              "vu-11111111": "UNKNOWN",
              "vu-12345678": "UP",
              "vu-87654321": "DOWN"
            },
            "additionalProperties": true
          }
        },
        "example": {
          "vunits": {
            "vu-11111111": "UNKNOWN",
            "vu-12345678": "UP",
            "vu-87654321": "DOWN"
          }
        }
      },
      "ValidateTokenRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "abc@gmail.com",
            "format": "email",
            "minLength": 1
          },
          "token": {
            "type": "string",
            "example": "fc7b8dea-a50b-4c9a-8864-fc3d845a2be6",
            "minLength": 1
          }
        },
        "example": {
          "email": "abc@gmail.com",
          "token": "fc7b8dea-a50b-4c9a-8864-fc3d845a2be6"
        },
        "required": ["token", "email"]
      },
      "VerifyAccountConfigRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Account Config",
            "example": "Nobis quia maxime nesciunt et corrupti."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "40k",
            "minLength": 1
          }
        },
        "example": {
          "id": "ac-12345678",
          "token": "bk"
        },
        "required": ["token", "id"]
      },
      "VerifyCustomDomainRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Custom Domain",
            "example": "Quam delectus impedit aut occaecati odit voluptatem."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "pu",
            "minLength": 1
          }
        },
        "example": {
          "id": "cd-12345678",
          "token": "5"
        },
        "required": ["token", "id"]
      },
      "VerifyIdentityProviderRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of an Identity Provider",
            "example": "Officiis omnis ducimus fugit sed error."
          },
          "token": {
            "type": "string",
            "description": "JWT token used to perform authorization",
            "example": "vqr",
            "minLength": 1
          }
        },
        "example": {
          "id": "idp-12345678",
          "token": "64"
        },
        "required": ["token", "id"]
      },
      "VerifyIdentityProviderResult": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "The Client ID of the Identity Provider",
            "example": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com"
          },
          "clientSecret": {
            "type": "string",
            "description": "The Client Secret of the Identity Provider",
            "example": "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"
          },
          "id": {
            "type": "string",
            "description": "ID of an Identity Provider",
            "example": "Maiores ea incidunt explicabo."
          },
          "identityProviderName": {
            "type": "string",
            "description": "The name of the identity provider",
            "example": "Google|GitHub|Google for CTL|GitHub for CTL"
          },
          "status": {
            "type": "string",
            "description": "The status of an operation",
            "example": "FAILED|CANCELLED|PENDING_DEPENDENCY|PENDING|RUNNING|DEPLOYING|READY|SUCCESS|COMPLETE|DELETING|DELETED|UNKNOWN"
          }
        },
        "example": {
          "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
          "clientSecret": "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",
          "id": "idp-12345678",
          "identityProviderName": "Google",
          "status": "Ready"
        },
        "required": ["id", "identityProviderName", "clientId", "status"]
      },
      "WarmPoolConfiguration": {
        "type": "object",
        "properties": {
          "minimumNodesInPool": {
            "type": "integer",
            "description": "Minimum number of compute nodes in pool",
            "default": 1,
            "example": 1,
            "format": "int64"
          },
          "minimumPercentageNodesInPool": {
            "type": "integer",
            "description": "Minimum percentage of compute nodes in pool",
            "default": 0,
            "example": 5,
            "format": "int64"
          }
        },
        "description": "Warm pool configuration for compute nodes",
        "example": {
          "minimumNodesInPool": 1,
          "minimumPercentageNodesInPool": 5
        }
      },
      "WorkflowFailure": {
        "type": "object",
        "properties": {
          "eventTime": {
            "type": "string",
            "description": "The time of the event",
            "example": "2020-01-01T00:00:00Z"
          },
          "message": {
            "type": "string",
            "description": "Details of the event",
            "example": "Bootstrap failed for reason X"
          }
        },
        "example": {
          "eventTime": "2020-01-01T00:00:00Z",
          "message": "Bootstrap failed for reason X"
        },
        "required": ["eventTime", "message"]
      }
    },
    "securitySchemes": {
      "api_key_header_Authorization": {
        "type": "http",
        "description": "Secures endpoints by requiring a JWT token",
        "scheme": "bearer"
      },
      "basic_header_Authorization": {
        "type": "http",
        "description": "Basic authentication",
        "scheme": "basic"
      }
    }
  },
  "tags": [
    {
      "name": "global-api",
      "description": "Common API for all Omnistrate API endpoints"
    },
    {
      "name": "service-api"
    },
    {
      "name": "service-environment-api"
    },
    {
      "name": "service-model-api"
    },
    {
      "name": "product-tier-api"
    },
    {
      "name": "service-api-api"
    },
    {
      "name": "service-plan-api"
    },
    {
      "name": "resource-api"
    },
    {
      "name": "tier-version-set-api"
    },
    {
      "name": "input-parameter-api"
    },
    {
      "name": "output-parameter-api"
    },
    {
      "name": "vunit-api",
      "description": "The external facing VUnit API"
    },
    {
      "name": "infra-config-api",
      "description": "The infra config API manages the infra for Omnistrate resources"
    },
    {
      "name": "image-config-api",
      "description": "The image config API manages the image config for Omnistrate entities"
    },
    {
      "name": "deployment-config-api",
      "description": "The deployment config API manages the deployment config for Omnistrate entities"
    },
    {
      "name": "compute-config-api",
      "description": "The compute config API manages the compute config for Omnistrate entities"
    },
    {
      "name": "storage-config-api",
      "description": "The storage config API manages the storage config for Omnistrate entities"
    },
    {
      "name": "storage-volume-config-api",
      "description": "The storage volume config API manages the storage volume config for Omnistrate entities"
    },
    {
      "name": "network-config-api",
      "description": "The network config API manages the network config for Omnistrate entities"
    },
    {
      "name": "availability-zone-api",
      "description": "The Availability Zone API provides read-only access to availability zones"
    },
    {
      "name": "region-api",
      "description": "The Region API provides read-only access to regions"
    },
    {
      "name": "cloud-provider-api",
      "description": "The Cloud Provider API provides read-only access to cloud provider metadata"
    },
    {
      "name": "demo-api",
      "description": "The Demo API provides a demo of the system"
    },
    {
      "name": "contactus-api",
      "description": "The Contactus API for customers to reach out to us"
    },
    {
      "name": "signin-api",
      "description": "The signin API for customers to authenticate with us"
    },
    {
      "name": "signup-api",
      "description": "The Signup API for customers to signup with us"
    },
    {
      "name": "plan-api",
      "description": "The Plan API is for payment info.  It's explicitly empty for free plans."
    },
    {
      "name": "usage-api",
      "description": "The Usage API is for getting the last calendar month usage for the current plan."
    },
    {
      "name": "invoice-api",
      "description": "The Invoices API gets the list of invoices for the current user"
    },
    {
      "name": "users-api",
      "description": "The user management API to manage user metadata"
    },
    {
      "name": "consumption-user-api",
      "description": "The Consumption Signin API signs the user into the consumption service"
    },
    {
      "name": "services-orchestration-api",
      "description": "The Services Orchestration API manages the orchestration of services"
    },
    {
      "name": "resource-instance-api",
      "description": "The Resource Instance API manages the instances of a resource"
    },
    {
      "name": "account-config-api",
      "description": "The Account Config API manages the access information for a Service Provider account"
    },
    {
      "name": "custom-domain-api",
      "description": "The Custom Domain API manages the delegated domain names for the Service Provider"
    },
    {
      "name": "limit-api",
      "description": "The limit API manages the limit for Omnistrate entities"
    },
    {
      "name": "image-registry-api",
      "description": "The image registry API manages the image registry for Omnistrate resources"
    },
    {
      "name": "service-offering-api",
      "description": "The service offering API provides a public API to list all public services"
    },
    {
      "name": "audit-events-api",
      "description": "The set of APIs for auditing instance events for consumption side users."
    },
    {
      "name": "subscription-api",
      "description": "The subscription management API to manage subscription metadata"
    },
    {
      "name": "subscription-request-api",
      "description": "The subscription request API for end customers to issue subscription requests"
    },
    {
      "name": "identity-provider-api"
    },
    {
      "name": "saas-portal-api"
    },
    {
      "name": "helm-package-api"
    },
    {
      "name": "compose-gen-api"
    },
    {
      "name": "custom-network-api"
    }
  ]
}
