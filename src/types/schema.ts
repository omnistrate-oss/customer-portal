/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/2022-09-01-00/accountconfig": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CreateAccountConfig account-config-api */
        post: operations["account-config-api/CreateAccountConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/accountconfig/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeAccountConfig account-config-api */
        get: operations["account-config-api/DescribeAccountConfig"];
        put?: never;
        post?: never;
        /** DeleteAccountConfig account-config-api */
        delete: operations["account-config-api/DeleteAccountConfig"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/accountconfig/aws/{awsAccountID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeAccountConfigByAWSAccountID account-config-api */
        get: operations["account-config-api/DescribeAccountConfigByAWSAccountID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/accountconfig/byoa": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListBYOAConfig account-config-api */
        get: operations["account-config-api/ListBYOAConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/accountconfig/cloudprovider/{cloudProviderName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListAccountConfig account-config-api */
        get: operations["account-config-api/ListAccountConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/accountconfig/gcp/{gcpProjectID}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeAccountConfigByGCPProjectID account-config-api */
        get: operations["account-config-api/DescribeAccountConfigByGCPProjectID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/accountconfig/identityid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * AccountConfigIdentityID account-config-api
         * @description Returns the identity id of the account config to be used in the trust policy of the account
         */
        get: operations["account-config-api/AccountConfigIdentityID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/accountconfig/verify/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** VerifyAccountConfig account-config-api */
        post: operations["account-config-api/VerifyAccountConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/availability-zone/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeAvailabilityZone availability-zone-api */
        get: operations["availability-zone-api/DescribeAvailabilityZone"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/availability-zone/cloud-provider/{cloudProviderName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListAvailabilityZone availability-zone-api */
        get: operations["availability-zone-api/ListAvailabilityZone"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/availability-zone/code/{code}/cloud-provider/{cloudProviderName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GetAvailabilityZoneByCode availability-zone-api */
        get: operations["availability-zone-api/GetAvailabilityZoneByCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/availability-zone/region/code/{regionCode}/cloud-provider/{cloudProviderName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListAvailabilityZonesByRegionCode availability-zone-api */
        get: operations["availability-zone-api/ListAvailabilityZonesByRegionCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** ChangePassword signup-api */
        post: operations["signup-api/ChangePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/cloud-provider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListCloudProvider cloud-provider-api */
        get: operations["cloud-provider-api/ListCloudProvider"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/cloud-provider/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeCloudProvider cloud-provider-api */
        get: operations["cloud-provider-api/DescribeCloudProvider"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/cloud-provider/name/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GetCloudProviderByName cloud-provider-api */
        get: operations["cloud-provider-api/GetCloudProviderByName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/compose-gen/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** CheckIfContainerImageAccessible compose-gen-api */
        get: operations["compose-gen-api/CheckIfContainerImageAccessible"];
        put?: never;
        /** GenerateComposeSpecFromContainerImage compose-gen-api */
        post: operations["compose-gen-api/GenerateComposeSpecFromContainerImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/contactus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Contactus contactus-api */
        post: operations["contactus-api/Contactus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/customdomain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListCustomDomain custom-domain-api */
        get: operations["custom-domain-api/ListCustomDomain"];
        put?: never;
        /** CreateCustomDomain custom-domain-api */
        post: operations["custom-domain-api/CreateCustomDomain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/customdomain/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeCustomDomain custom-domain-api */
        get: operations["custom-domain-api/DescribeCustomDomain"];
        put?: never;
        post?: never;
        /** DeleteCustomDomain custom-domain-api */
        delete: operations["custom-domain-api/DeleteCustomDomain"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/customdomain/identityid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * CustomDomainIdentityID custom-domain-api
         * @description Returns the identity id of the Custom Domain to be used in the trust policy of the account
         */
        get: operations["custom-domain-api/CustomDomainIdentityID"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/customdomain/verify/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** VerifyCustomDomain custom-domain-api */
        post: operations["custom-domain-api/VerifyCustomDomain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/customer-invite-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CustomerInviteUser users-api */
        post: operations["users-api/CustomerInviteUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/customer-login-with-identity-provider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CustomerLoginWithIdentityProvider users-api */
        post: operations["users-api/CustomerLoginWithIdentityProvider"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/customer-reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CustomerResetPassword users-api */
        post: operations["users-api/CustomerResetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/customer-user-signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CustomerSignin users-api */
        post: operations["users-api/CustomerSignin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/customer-user-signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CustomerSignup users-api */
        post: operations["users-api/CustomerSignup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/demo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Demo demo-api */
        post: operations["demo-api/Demo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/deployment-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListDeploymentConfigs deployment-config-api */
        get: operations["deployment-config-api/ListDeploymentConfigs"];
        put?: never;
        /** CreateDeploymentConfig deployment-config-api */
        post: operations["deployment-config-api/CreateDeploymentConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/deployment-config/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeDeploymentConfig deployment-config-api */
        get: operations["deployment-config-api/DescribeDeploymentConfig"];
        put?: never;
        post?: never;
        /** DeleteDeploymentConfig deployment-config-api */
        delete: operations["deployment-config-api/DeleteDeploymentConfig"];
        options?: never;
        head?: never;
        /** UpdateDeploymentConfig deployment-config-api */
        patch: operations["deployment-config-api/UpdateDeploymentConfig"];
        trace?: never;
    };
    "/2022-09-01-00/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * registrationServiceHealth global-api
         * @description Registration service health check endpoint
         */
        get: operations["global-api/registrationServiceHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/helm-package": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListHelmPackages helm-package-api */
        get: operations["helm-package-api/ListHelmPackages"];
        /** SaveHelmPackage helm-package-api */
        put: operations["helm-package-api/SaveHelmPackage"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/helm-package/{chartName}/{chartVersion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeHelmPackage helm-package-api */
        get: operations["helm-package-api/DescribeHelmPackage"];
        put?: never;
        post?: never;
        /** DeleteHelmPackage helm-package-api */
        delete: operations["helm-package-api/DeleteHelmPackage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/identity-provider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListIdentityProviders identity-provider-api */
        get: operations["identity-provider-api/ListIdentityProviders"];
        put?: never;
        /** CreateIdentityProvider identity-provider-api */
        post: operations["identity-provider-api/CreateIdentityProvider"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/identity-provider/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeIdentityProvider identity-provider-api */
        get: operations["identity-provider-api/DescribeIdentityProvider"];
        put?: never;
        /** VerifyIdentityProvider identity-provider-api */
        post: operations["identity-provider-api/VerifyIdentityProvider"];
        /** DeleteIdentityProvider identity-provider-api */
        delete: operations["identity-provider-api/DeleteIdentityProvider"];
        options?: never;
        head?: never;
        /** UpdateIdentityProvider identity-provider-api */
        patch: operations["identity-provider-api/UpdateIdentityProvider"];
        trace?: never;
    };
    "/2022-09-01-00/image-registry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListImageRegistry image-registry-api */
        get: operations["image-registry-api/ListImageRegistry"];
        put?: never;
        /** CreateImageRegistry image-registry-api */
        post: operations["image-registry-api/CreateImageRegistry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/image-registry/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeImageRegistry image-registry-api */
        get: operations["image-registry-api/DescribeImageRegistry"];
        put?: never;
        post?: never;
        /** DeleteImageRegistry image-registry-api */
        delete: operations["image-registry-api/DeleteImageRegistry"];
        options?: never;
        head?: never;
        /** UpdateImageRegistry image-registry-api */
        patch: operations["image-registry-api/UpdateImageRegistry"];
        trace?: never;
    };
    "/2022-09-01-00/invite-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** InviteUser users-api */
        post: operations["users-api/InviteUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListInvoices invoice-api */
        get: operations["invoice-api/ListInvoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/limit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListLimit limit-api */
        get: operations["limit-api/ListLimit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/limit/family/{family}/key/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeLimit limit-api */
        get: operations["limit-api/DescribeLimit"];
        put?: never;
        post?: never;
        /** DeleteLimit limit-api */
        delete: operations["limit-api/DeleteLimit"];
        options?: never;
        head?: never;
        /** UpdateLimit limit-api */
        patch: operations["limit-api/UpdateLimit"];
        trace?: never;
    };
    "/2022-09-01-00/login-with-identity-provider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** LoginWithIdentityProvider signin-api */
        post: operations["signin-api/LoginWithIdentityProvider"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout users-api */
        post: operations["users-api/Logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/org-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeUsersByOrg users-api */
        get: operations["users-api/DescribeUsersByOrg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribePlan plan-api */
        get: operations["plan-api/DescribePlan"];
        put?: never;
        /** ChangePlan plan-api */
        post: operations["plan-api/ChangePlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/region/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeRegion region-api */
        get: operations["region-api/DescribeRegion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/region/cloudprovider/{cloudProviderName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListRegion region-api */
        get: operations["region-api/ListRegion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/region/code/{code}/cloud-provider/{cloudProviderName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GetRegionByCode region-api */
        get: operations["region-api/GetRegionByCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** ResetPassword signup-api */
        post: operations["signup-api/ResetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListAllResourceInstances resource-instance-api */
        get: operations["resource-instance-api/ListAllResourceInstances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{id}/deployment-cell-dashboard/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** GenerateTokenForDeploymentCellDashboard resource-instance-api */
        post: operations["resource-instance-api/GenerateTokenForDeploymentCellDashboard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{instanceId}/audit-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListAuditEventsForInstance audit-events-api */
        get: operations["audit-events-api/ListAuditEventsForInstance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{instanceId}/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DeprecatedListAuditEventsForInstance audit-events-api */
        get: operations["audit-events-api/DeprecatedListAuditEventsForInstance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListResourceInstances resource-instance-api */
        get: operations["resource-instance-api/ListResourceInstances"];
        put?: never;
        /** CreateResourceInstance resource-instance-api */
        post: operations["resource-instance-api/CreateResourceInstance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeResourceInstance resource-instance-api */
        get: operations["resource-instance-api/DescribeResourceInstance"];
        put?: never;
        post?: never;
        /** DeleteResourceInstance resource-instance-api */
        delete: operations["resource-instance-api/DeleteResourceInstance"];
        options?: never;
        head?: never;
        /** UpdateResourceInstance resource-instance-api */
        patch: operations["resource-instance-api/UpdateResourceInstance"];
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/add-capacity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** AddCapacityToResourceInstance resource-instance-api */
        post: operations["resource-instance-api/AddCapacityToResourceInstance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/custom-dns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** AddCustomDNSToResourceInstance resource-instance-api */
        post: operations["resource-instance-api/AddCustomDNSToResourceInstance"];
        /** RemoveCustomDNSFromResourceInstance resource-instance-api */
        delete: operations["resource-instance-api/RemoveCustomDNSFromResourceInstance"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/failover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** FailoverResourceInstance resource-instance-api */
        post: operations["resource-instance-api/FailoverResourceInstance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/remove-capacity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** RemoveCapacityFromResourceInstance resource-instance-api */
        post: operations["resource-instance-api/RemoveCapacityFromResourceInstance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/restart": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** RestartResourceInstance resource-instance-api */
        post: operations["resource-instance-api/RestartResourceInstance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** RestoreResourceInstance resource-instance-api */
        post: operations["resource-instance-api/RestoreResourceInstance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListResourceInstanceSnapshots resource-instance-api */
        get: operations["resource-instance-api/ListResourceInstanceSnapshots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** StartResourceInstance resource-instance-api */
        post: operations["resource-instance-api/StartResourceInstance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/{id}/stop": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** StopResourceInstance resource-instance-api */
        post: operations["resource-instance-api/StopResourceInstance"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/{resourceKey}/snapshot/{snapshotId}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** RestoreResourceInstanceFromSnapshot resource-instance-api */
        post: operations["resource-instance-api/RestoreResourceInstanceFromSnapshot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/audit-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListAuditEventsForServicePlan audit-events-api */
        get: operations["audit-events-api/ListAuditEventsForServicePlan"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/{productTierKey}/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DeprecatedListAuditEventsForServicePlan audit-events-api */
        get: operations["audit-events-api/DeprecatedListAuditEventsForServicePlan"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/{serviceProviderId}/{serviceKey}/{serviceAPIVersion}/{serviceEnvironmentKey}/{serviceModelKey}/setup-kit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ResourceInstanceProvisionerSetupKit resource-instance-api */
        get: operations["resource-instance-api/ResourceInstanceProvisionerSetupKit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/audit-events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListAllAuditEvents audit-events-api */
        get: operations["audit-events-api/ListAllAuditEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/audit-events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeAuditEvent audit-events-api */
        get: operations["audit-events-api/DescribeAuditEvent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/custom-network": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListCustomNetworks custom-network-api */
        get: operations["custom-network-api/ListCustomNetworks"];
        put?: never;
        /** CreateCustomNetwork custom-network-api */
        post: operations["custom-network-api/CreateCustomNetwork"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/custom-network/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeCustomNetwork custom-network-api */
        get: operations["custom-network-api/DescribeCustomNetwork"];
        put?: never;
        post?: never;
        /** DeleteCustomNetwork custom-network-api */
        delete: operations["custom-network-api/DeleteCustomNetwork"];
        options?: never;
        head?: never;
        /** UpdateCustomNetwork custom-network-api */
        patch: operations["custom-network-api/UpdateCustomNetwork"];
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/event/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DeprecatedDescribeAuditEvent audit-events-api */
        get: operations["audit-events-api/DeprecatedDescribeAuditEvent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * consumptionServiceHealth global-api
         * @description Consumption service health check endpoint
         */
        get: operations["global-api/consumptionServiceHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/services-orchestration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListServicesOrchestrations services-orchestration-api */
        get: operations["services-orchestration-api/ListServicesOrchestrations"];
        put?: never;
        /** CreateServicesOrchestration services-orchestration-api */
        post: operations["services-orchestration-api/CreateServicesOrchestration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/services-orchestration/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeServicesOrchestration services-orchestration-api */
        get: operations["services-orchestration-api/DescribeServicesOrchestration"];
        put?: never;
        post?: never;
        /** DeleteServicesOrchestration services-orchestration-api */
        delete: operations["services-orchestration-api/DeleteServicesOrchestration"];
        options?: never;
        head?: never;
        /** ModifyServicesOrchestration services-orchestration-api */
        patch: operations["services-orchestration-api/ModifyServicesOrchestration"];
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/subscription-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListAllSubscriptionUsers consumption-user-api */
        get: operations["consumption-user-api/ListAllSubscriptionUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/subscription/{subscriptionId}/invite-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** InviteUser consumption-user-api */
        post: operations["consumption-user-api/InviteUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/subscription/{subscriptionId}/revoke-user-role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** RevokeUserRole consumption-user-api */
        delete: operations["consumption-user-api/RevokeUserRole"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/subscription/{subscriptionId}/subscription-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeUsersBySubscription consumption-user-api */
        get: operations["consumption-user-api/DescribeUsersBySubscription"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/user/{id}/billing-details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeUserBillingDetails consumption-user-api */
        get: operations["consumption-user-api/DescribeUserBillingDetails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/user/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Signin consumption-user-api */
        post: operations["consumption-user-api/Signin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/resource-instance/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * consumptionServiceVersion global-api
         * @description Consumption service version endpoint
         */
        get: operations["global-api/consumptionServiceVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/revoke-user-role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** RevokeUserRole users-api */
        delete: operations["users-api/RevokeUserRole"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/saas-portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListSaaSPortals saas-portal-api */
        get: operations["saas-portal-api/ListSaaSPortals"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/saas-portal-custom-domain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListSaaSPortalCustomDomains saas-portal-api */
        get: operations["saas-portal-api/ListSaaSPortalCustomDomains"];
        put?: never;
        /** CreateSaaSPortalCustomDomain saas-portal-api */
        post: operations["saas-portal-api/CreateSaaSPortalCustomDomain"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/saas-portal-custom-domain/{environmentType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** DeleteSaaSPortalCustomDomain saas-portal-api */
        delete: operations["saas-portal-api/DeleteSaaSPortalCustomDomain"];
        options?: never;
        head?: never;
        /** UpdateSaaSPortalCustomDomain saas-portal-api */
        patch: operations["saas-portal-api/UpdateSaaSPortalCustomDomain"];
        trace?: never;
    };
    "/2022-09-01-00/saas-portal/{environmentType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** UpdateSaaSPortal saas-portal-api */
        patch: operations["saas-portal-api/UpdateSaaSPortal"];
        trace?: never;
    };
    "/2022-09-01-00/service": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListService service-api */
        get: operations["service-api/ListService"];
        put?: never;
        /** CreateService service-api */
        post: operations["service-api/CreateService"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service-offering": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListServiceOffering service-offering-api */
        get: operations["service-offering-api/ListServiceOffering"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service-offering/{serviceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeServiceOffering service-offering-api */
        get: operations["service-offering-api/DescribeServiceOffering"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service-offering/{serviceId}/resource/{resourceId}/instance/{instanceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeServiceOfferingResource service-offering-api */
        get: operations["service-offering-api/DescribeServiceOfferingResource"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeService service-api */
        get: operations["service-api/DescribeService"];
        put?: never;
        post?: never;
        /** DeleteService service-api */
        delete: operations["service-api/DeleteService"];
        options?: never;
        head?: never;
        /** UpdateService service-api */
        patch: operations["service-api/UpdateService"];
        trace?: never;
    };
    "/2022-09-01-00/service/{id}/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ServiceHealth service-api */
        get: operations["service-api/ServiceHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/compute-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListComputeConfig compute-config-api */
        get: operations["compute-config-api/ListComputeConfig"];
        put?: never;
        /** CreateComputeConfig compute-config-api */
        post: operations["compute-config-api/CreateComputeConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/compute-config/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeComputeConfig compute-config-api */
        get: operations["compute-config-api/DescribeComputeConfig"];
        put?: never;
        post?: never;
        /** DeleteComputeConfig compute-config-api */
        delete: operations["compute-config-api/DeleteComputeConfig"];
        options?: never;
        head?: never;
        /** UpdateComputeConfig compute-config-api */
        patch: operations["compute-config-api/UpdateComputeConfig"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/compute-config/{id}/instance-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** AddComputeInstanceType compute-config-api */
        post: operations["compute-config-api/AddComputeInstanceType"];
        /** RemoveComputeInstanceType compute-config-api */
        delete: operations["compute-config-api/RemoveComputeInstanceType"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/compute-config/cloud-provider/{cloudProviderName}/instance-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListComputeInstanceTypes compute-config-api */
        get: operations["compute-config-api/ListComputeInstanceTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/environment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListServiceEnvironment service-environment-api */
        get: operations["service-environment-api/ListServiceEnvironment"];
        put?: never;
        /** CreateServiceEnvironment service-environment-api */
        post: operations["service-environment-api/CreateServiceEnvironment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/environment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeServiceEnvironment service-environment-api */
        get: operations["service-environment-api/DescribeServiceEnvironment"];
        put?: never;
        post?: never;
        /** DeleteServiceEnvironment service-environment-api */
        delete: operations["service-environment-api/DeleteServiceEnvironment"];
        options?: never;
        head?: never;
        /** UpdateServiceEnvironment service-environment-api */
        patch: operations["service-environment-api/UpdateServiceEnvironment"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/environment/{id}/promote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** PromoteServiceEnvironmentStatus service-environment-api */
        get: operations["service-environment-api/PromoteServiceEnvironmentStatus"];
        put?: never;
        /** PromoteServiceEnvironment service-environment-api */
        post: operations["service-environment-api/PromoteServiceEnvironment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/environment/{serviceEnvironmentId}/service-plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListServicePlans service-plan-api */
        get: operations["service-plan-api/ListServicePlans"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/image-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CreateImageConfig image-config-api */
        post: operations["image-config-api/CreateImageConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/image-config/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeImageConfig image-config-api */
        get: operations["image-config-api/DescribeImageConfig"];
        put?: never;
        post?: never;
        /** DeleteImageConfig image-config-api */
        delete: operations["image-config-api/DeleteImageConfig"];
        options?: never;
        head?: never;
        /** UpdateImageConfig image-config-api */
        patch: operations["image-config-api/UpdateImageConfig"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/image-config/{id}/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** ReleaseImageConfig image-config-api */
        post: operations["image-config-api/ReleaseImageConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/image-config/{id}/rollout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** RolloutFleetImageStatus image-config-api */
        get: operations["image-config-api/RolloutFleetImageStatus"];
        put?: never;
        /** RolloutFleetImageConfig image-config-api */
        post: operations["image-config-api/RolloutFleetImageConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/infra-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CreateInfraConfig infra-config-api */
        post: operations["infra-config-api/CreateInfraConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeInfraConfig infra-config-api */
        get: operations["infra-config-api/DescribeInfraConfig"];
        put?: never;
        post?: never;
        /** DeleteInfraConfig infra-config-api */
        delete: operations["infra-config-api/DeleteInfraConfig"];
        options?: never;
        head?: never;
        /** UpdateInfraConfig infra-config-api */
        patch: operations["infra-config-api/UpdateInfraConfig"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/associated-resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListAssociatedResources infra-config-api */
        get: operations["infra-config-api/ListAssociatedResources"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/compute-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** DetachComputeConfig infra-config-api */
        delete: operations["infra-config-api/DetachComputeConfig"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/network-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** DetachNetworkConfig infra-config-api */
        delete: operations["infra-config-api/DetachNetworkConfig"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** ReleaseInfraConfig infra-config-api */
        post: operations["infra-config-api/ReleaseInfraConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/rollout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** RolloutFleetInfra infra-config-api */
        post: operations["infra-config-api/RolloutFleetInfra"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/rollout/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** RolloutFleetInfraStatus infra-config-api */
        get: operations["infra-config-api/RolloutFleetInfraStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/infra-config/{id}/storage-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** DetachStorageConfig infra-config-api */
        delete: operations["infra-config-api/DetachStorageConfig"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/input-parameter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CreateInputParameter input-parameter-api */
        post: operations["input-parameter-api/CreateInputParameter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/input-parameter/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeInputParameter input-parameter-api */
        get: operations["input-parameter-api/DescribeInputParameter"];
        put?: never;
        post?: never;
        /** DeleteInputParameter input-parameter-api */
        delete: operations["input-parameter-api/DeleteInputParameter"];
        options?: never;
        head?: never;
        /** UpdateInputParameter input-parameter-api */
        patch: operations["input-parameter-api/UpdateInputParameter"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/model": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CreateServiceModel service-model-api */
        post: operations["service-model-api/CreateServiceModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/model/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeServiceModel service-model-api */
        get: operations["service-model-api/DescribeServiceModel"];
        put?: never;
        post?: never;
        /** DeleteServiceModel service-model-api */
        delete: operations["service-model-api/DeleteServiceModel"];
        options?: never;
        head?: never;
        /** UpdateServiceModel service-model-api */
        patch: operations["service-model-api/UpdateServiceModel"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/model/{id}/account-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** AddAccountConfigToServiceModel service-model-api */
        post: operations["service-model-api/AddAccountConfigToServiceModel"];
        /** RemoveAccountConfigFromServiceModel service-model-api */
        delete: operations["service-model-api/RemoveAccountConfigFromServiceModel"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/model/{id}/account-config/{accountConfigId}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** SetActiveAccountConfig service-model-api */
        post: operations["service-model-api/SetActiveAccountConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/model/{id}/feature": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** EnableServiceModelFeature service-model-api */
        put: operations["service-model-api/EnableServiceModelFeature"];
        post?: never;
        /** DisableServiceModelFeature service-model-api */
        delete: operations["service-model-api/DisableServiceModelFeature"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/model/{id}/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ReleaseServiceModelStatus service-model-api */
        get: operations["service-model-api/ReleaseServiceModelStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/model/{serviceModelId}/product-tier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListProductTier product-tier-api */
        get: operations["product-tier-api/ListProductTier"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/model/{serviceModelId}/vunit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListVUnits vunit-api */
        get: operations["vunit-api/ListVUnits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/model/copy/{sourceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CopyServiceModel service-model-api */
        post: operations["service-model-api/CopyServiceModel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/network-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListNetworkConfig network-config-api */
        get: operations["network-config-api/ListNetworkConfig"];
        put?: never;
        /** CreateNetworkConfig network-config-api */
        post: operations["network-config-api/CreateNetworkConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/network-config/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeNetworkConfig network-config-api */
        get: operations["network-config-api/DescribeNetworkConfig"];
        put?: never;
        post?: never;
        /** DeleteNetworkConfig network-config-api */
        delete: operations["network-config-api/DeleteNetworkConfig"];
        options?: never;
        head?: never;
        /** UpdateNetworkConfig network-config-api */
        patch: operations["network-config-api/UpdateNetworkConfig"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/network/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeNetwork vunit-api */
        get: operations["vunit-api/DescribeNetwork"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/output-parameter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CreateOutputParameter output-parameter-api */
        post: operations["output-parameter-api/CreateOutputParameter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/output-parameter/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeOutputParameter output-parameter-api */
        get: operations["output-parameter-api/DescribeOutputParameter"];
        put?: never;
        post?: never;
        /** DeleteOutputParameter output-parameter-api */
        delete: operations["output-parameter-api/DeleteOutputParameter"];
        options?: never;
        head?: never;
        /** UpdateOutputParameter output-parameter-api */
        patch: operations["output-parameter-api/UpdateOutputParameter"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/product-tier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CreateProductTier product-tier-api */
        post: operations["product-tier-api/CreateProductTier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/product-tier/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeProductTier product-tier-api */
        get: operations["product-tier-api/DescribeProductTier"];
        put?: never;
        post?: never;
        /** DeleteProductTier product-tier-api */
        delete: operations["product-tier-api/DeleteProductTier"];
        options?: never;
        head?: never;
        /** UpdateProductTier product-tier-api */
        patch: operations["product-tier-api/UpdateProductTier"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/product-tier/{id}/billing-plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListProductTierBillingPlan product-tier-api */
        get: operations["product-tier-api/ListProductTierBillingPlan"];
        put?: never;
        /** CreateProductTierBillingPlan product-tier-api */
        post: operations["product-tier-api/CreateProductTierBillingPlan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/product-tier/{id}/feature": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** EnableProductTierFeature product-tier-api */
        put: operations["product-tier-api/EnableProductTierFeature"];
        post?: never;
        /** DisableProductTierFeature product-tier-api */
        delete: operations["product-tier-api/DisableProductTierFeature"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/product-tier/{productTierId}/billing-plan/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeProductTierBillingPlan product-tier-api */
        get: operations["product-tier-api/DescribeProductTierBillingPlan"];
        put?: never;
        post?: never;
        /** DeleteProductTierBillingPlan product-tier-api */
        delete: operations["product-tier-api/DeleteProductTierBillingPlan"];
        options?: never;
        head?: never;
        /** UpdateProductTierBillingPlan product-tier-api */
        patch: operations["product-tier-api/UpdateProductTierBillingPlan"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/product-tier/{productTierId}/service-plan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GetServicePlan service-plan-api */
        get: operations["service-plan-api/GetServicePlan"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/product-tier/copy/{sourceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CopyProductTier product-tier-api */
        post: operations["product-tier-api/CopyProductTier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListTierVersionSets tier-version-set-api */
        get: operations["tier-version-set-api/ListTierVersionSets"];
        put?: never;
        /** CreateTierVersionSet tier-version-set-api */
        post: operations["tier-version-set-api/CreateTierVersionSet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeTierVersionSet tier-version-set-api */
        get: operations["tier-version-set-api/DescribeTierVersionSet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/deprecate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** DeprecateTierVersionSet tier-version-set-api */
        patch: operations["tier-version-set-api/DeprecateTierVersionSet"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/diff/{anotherVersion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DiffTierVersionSets tier-version-set-api */
        get: operations["tier-version-set-api/DiffTierVersionSets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/promote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** PromoteTierVersionSet tier-version-set-api */
        patch: operations["tier-version-set-api/PromoteTierVersionSet"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/productTier/{productTierId}/version-set/{version}/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** ReleaseTierVersionSet tier-version-set-api */
        patch: operations["tier-version-set-api/ReleaseTierVersionSet"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/producttier/{productTierId}/resource": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListResources resource-api */
        get: operations["resource-api/ListResources"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CreateResource resource-api */
        post: operations["resource-api/CreateResource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeResource resource-api */
        get: operations["resource-api/DescribeResource"];
        put?: never;
        post?: never;
        /** DeleteResource resource-api */
        delete: operations["resource-api/DeleteResource"];
        options?: never;
        head?: never;
        /** UpdateResource resource-api */
        patch: operations["resource-api/UpdateResource"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}/action-hook": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListActionHooks resource-api */
        get: operations["resource-api/ListActionHooks"];
        put?: never;
        /** RegisterActionHook resource-api */
        post: operations["resource-api/RegisterActionHook"];
        /** DeregisterActionHook resource-api */
        delete: operations["resource-api/DeregisterActionHook"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}/capability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListResourceCapabilities resource-api */
        get: operations["resource-api/ListResourceCapabilities"];
        /** EnableResourceCapability resource-api */
        put: operations["resource-api/EnableResourceCapability"];
        post?: never;
        /** DisableResourceCapability resource-api */
        delete: operations["resource-api/DisableResourceCapability"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}/dependent-resource": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListDependentResource resource-api */
        get: operations["resource-api/ListDependentResource"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}/deprecate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** DeprecateResource resource-api */
        patch: operations["resource-api/DeprecateResource"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}/environment-variables": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** UnsetEnvironmentVariables resource-api */
        delete: operations["resource-api/UnsetEnvironmentVariables"];
        options?: never;
        head?: never;
        /** SetEnvironmentVariables resource-api */
        patch: operations["resource-api/SetEnvironmentVariables"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListFiles resource-api */
        get: operations["resource-api/ListFiles"];
        put?: never;
        /** AddFile resource-api */
        post: operations["resource-api/AddFile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}/file/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GetFile resource-api */
        get: operations["resource-api/GetFile"];
        put?: never;
        post?: never;
        /** RemoveFile resource-api */
        delete: operations["resource-api/RemoveFile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}/file/{fileId}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** UpdateFileContent resource-api */
        put: operations["resource-api/UpdateFileContent"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}/file/{fileId}/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** UpdateFileMetadata resource-api */
        patch: operations["resource-api/UpdateFileMetadata"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeResourceMetricsConfig resource-api */
        get: operations["resource-api/DescribeResourceMetricsConfig"];
        put?: never;
        /** RegisterResourceMetricsConfig resource-api */
        post: operations["resource-api/RegisterResourceMetricsConfig"];
        /** DeregisterResourceMetricsConfig resource-api */
        delete: operations["resource-api/DeregisterResourceMetricsConfig"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{id}/resource-dependency/{resourceDependencyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** AddResourceDependency resource-api */
        post: operations["resource-api/AddResourceDependency"];
        /** RemoveResourceDependency resource-api */
        delete: operations["resource-api/RemoveResourceDependency"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{resourceId}/input-parameter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListInputParameter input-parameter-api */
        get: operations["input-parameter-api/ListInputParameter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/resource/{resourceId}/output-parameter": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListOutputParameter output-parameter-api */
        get: operations["output-parameter-api/ListOutputParameter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/service-api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** CreateServiceAPI service-api-api */
        post: operations["service-api-api/CreateServiceAPI"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/service-api/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeServiceAPI service-api-api */
        get: operations["service-api-api/DescribeServiceAPI"];
        put?: never;
        post?: never;
        /** DeleteServiceAPI service-api-api */
        delete: operations["service-api-api/DeleteServiceAPI"];
        options?: never;
        head?: never;
        /** UpdateServiceAPI service-api-api */
        patch: operations["service-api-api/UpdateServiceAPI"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/service-api/{id}/all-pending-changes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribePendingChanges service-api-api */
        get: operations["service-api-api/DescribePendingChanges"];
        put?: never;
        post?: never;
        /** DiscardPendingChanges service-api-api */
        delete: operations["service-api-api/DiscardPendingChanges"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/service-api/{id}/deprecate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** DeprecateServiceAPI service-api-api */
        post: operations["service-api-api/DeprecateServiceAPI"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/service-api/{id}/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** ReleaseServiceAPI service-api-api */
        post: operations["service-api-api/ReleaseServiceAPI"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/serviceapi/{serviceApiId}/model": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListServiceModel service-model-api */
        get: operations["service-model-api/ListServiceModel"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/serviceenvironment/{serviceEnvironmentId}/image-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListImageConfigs image-config-api */
        get: operations["image-config-api/ListImageConfigs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/serviceenvironment/{serviceEnvironmentId}/infra-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListInfraConfig infra-config-api */
        get: operations["infra-config-api/ListInfraConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/serviceenvironment/{serviceEnvironmentId}/service-api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListServiceAPI service-api-api */
        get: operations["service-api-api/ListServiceAPI"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/storage-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListStorageConfig storage-config-api */
        get: operations["storage-config-api/ListStorageConfig"];
        put?: never;
        /** CreateStorageConfig storage-config-api */
        post: operations["storage-config-api/CreateStorageConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/storage-config/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeStorageConfig storage-config-api */
        get: operations["storage-config-api/DescribeStorageConfig"];
        put?: never;
        post?: never;
        /** DeleteStorageConfig storage-config-api */
        delete: operations["storage-config-api/DeleteStorageConfig"];
        options?: never;
        head?: never;
        /** UpdateStorageConfig storage-config-api */
        patch: operations["storage-config-api/UpdateStorageConfig"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/storage-config/{id}/volume/{storageVolumeConfigId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** AddStorageVolumeConfig storage-config-api */
        put: operations["storage-config-api/AddStorageVolumeConfig"];
        post?: never;
        /** RemoveStorageVolumeConfig storage-config-api */
        delete: operations["storage-config-api/RemoveStorageVolumeConfig"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/storage-volume-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListStorageVolumeConfig storage-volume-config-api */
        get: operations["storage-volume-config-api/ListStorageVolumeConfig"];
        put?: never;
        /** CreateStorageVolumeConfig storage-volume-config-api */
        post: operations["storage-volume-config-api/CreateStorageVolumeConfig"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/storage-volume-config/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeStorageVolumeConfig storage-volume-config-api */
        get: operations["storage-volume-config-api/DescribeStorageVolumeConfig"];
        put?: never;
        post?: never;
        /** DeleteStorageVolumeConfig storage-volume-config-api */
        delete: operations["storage-volume-config-api/DeleteStorageVolumeConfig"];
        options?: never;
        head?: never;
        /** UpdateStorageVolumeConfig storage-volume-config-api */
        patch: operations["storage-volume-config-api/UpdateStorageVolumeConfig"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/storage-volume-config/{id}/instance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** UpdateInstanceStorageVolumeConfig storage-volume-config-api */
        patch: operations["storage-volume-config-api/UpdateInstanceStorageVolumeConfig"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/storage-volume-config/{id}/size": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** UpdateStorageVolumeSizeConfig storage-volume-config-api */
        patch: operations["storage-volume-config-api/UpdateStorageVolumeSizeConfig"];
        trace?: never;
    };
    "/2022-09-01-00/service/{serviceId}/vunit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeVUnit vunit-api */
        get: operations["vunit-api/DescribeVUnit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/composespec": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** BuildServiceFromComposeSpec service-api */
        put: operations["service-api/BuildServiceFromComposeSpec"];
        /** CreateServiceFromComposeSpec service-api */
        post: operations["service-api/CreateServiceFromComposeSpec"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/service/serviceplanspec": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** BuildServiceFromServicePlanSpec service-api */
        put: operations["service-api/BuildServiceFromServicePlanSpec"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Signin signin-api */
        post: operations["signin-api/Signin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Signup signup-api */
        post: operations["signup-api/Signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListSubscriptions subscription-api */
        get: operations["subscription-api/ListSubscriptions"];
        put?: never;
        /** CreateSubscription subscription-api */
        post: operations["subscription-api/CreateSubscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/subscription/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeSubscription subscription-api */
        get: operations["subscription-api/DescribeSubscription"];
        put?: never;
        post?: never;
        /** DeleteSubscription subscription-api */
        delete: operations["subscription-api/DeleteSubscription"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/subscription/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ListSubscriptionRequests subscription-request-api */
        get: operations["subscription-request-api/ListSubscriptionRequests"];
        put?: never;
        /** CreateSubscriptionRequest subscription-request-api */
        post: operations["subscription-request-api/CreateSubscriptionRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/subscription/request/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeSubscriptionRequest subscription-request-api */
        get: operations["subscription-request-api/DescribeSubscriptionRequest"];
        put?: never;
        post?: never;
        /** CancelSubscriptionRequest subscription-request-api */
        delete: operations["subscription-request-api/CancelSubscriptionRequest"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/update-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** UpdatePassword users-api */
        post: operations["users-api/UpdatePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** GetCurrentPlanUsage usage-api */
        get: operations["usage-api/GetCurrentPlanUsage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** DescribeUser users-api */
        get: operations["users-api/DescribeUser"];
        put?: never;
        post?: never;
        /** DeleteUser users-api */
        delete: operations["users-api/DeleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** UpdateUser users-api */
        patch: operations["users-api/UpdateUser"];
        trace?: never;
    };
    "/2022-09-01-00/users/{id}/regenerate-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** RegenerateToken signup-api */
        post: operations["signup-api/RegenerateToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/validate-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** ValidateToken signup-api */
        post: operations["signup-api/ValidateToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/2022-09-01-00/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * registrationServiceVersion global-api
         * @description Registration service version endpoint
         */
        get: operations["global-api/registrationServiceVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @example {
         *       "inputParameters": [
         *         {
         *           "defaultValue": null,
         *           "description": "The name of the server",
         *           "displayName": "Server Name",
         *           "isList": false,
         *           "key": "serverName",
         *           "modifiable": true,
         *           "options": null,
         *           "required": true,
         *           "type": "string"
         *         },
         *         {
         *           "defaultValue": "option1",
         *           "description": "The type of the server",
         *           "displayName": "Server Type",
         *           "isList": false,
         *           "key": "serverType",
         *           "modifiable": true,
         *           "options": [
         *             "option1",
         *             "option2"
         *           ],
         *           "required": true,
         *           "type": "string"
         *         }
         *       ],
         *       "outputParameters": [
         *         {
         *           "description": "The name of the server",
         *           "displayName": "Server Name",
         *           "isList": false,
         *           "key": "serverName",
         *           "type": "string"
         *         },
         *         {
         *           "description": "The type of the server",
         *           "displayName": "Server Type",
         *           "isList": false,
         *           "key": "serverType",
         *           "type": "string"
         *         }
         *       ],
         *       "verb": "CREATE|DESCRIBE|LIST|UPDATE|DELETE"
         *     } */
        APIEntity: {
            /**
             * @description The input parameters
             * @example [
             *       {
             *         "defaultValue": null,
             *         "description": "The name of the server",
             *         "displayName": "Server Name",
             *         "isList": false,
             *         "key": "serverName",
             *         "modifiable": true,
             *         "options": null,
             *         "required": true,
             *         "type": "string"
             *       },
             *       {
             *         "defaultValue": "option1",
             *         "description": "The type of the server",
             *         "displayName": "Server Type",
             *         "isList": false,
             *         "key": "serverType",
             *         "modifiable": true,
             *         "options": [
             *           "option1",
             *           "option2"
             *         ],
             *         "required": true,
             *         "type": "string"
             *       }
             *     ]
             */
            inputParameters: components["schemas"]["InputParameterEntity"][];
            /**
             * @description The output parameters
             * @example [
             *       {
             *         "description": "The name of the server",
             *         "displayName": "Server Name",
             *         "isList": false,
             *         "key": "serverName",
             *         "type": "string"
             *       },
             *       {
             *         "description": "The type of the server",
             *         "displayName": "Server Type",
             *         "isList": false,
             *         "key": "serverType",
             *         "type": "string"
             *       }
             *     ]
             */
            outputParameters: components["schemas"]["OutputParameterEntity"][];
            /**
             * @description The API verb
             * @example CREATE|DESCRIBE|LIST|UPDATE|DELETE
             */
            verb: string;
        };
        /** @example {
         *       "port": 80,
         *       "targetGroupName": "my-target-group"
         *     } */
        AWSPrivateLinkConfiguration: {
            /**
             * Format: int64
             * @description The port of the target group
             * @example 80
             */
            port: number;
            /**
             * @description The target group name
             * @example my-target-group
             */
            targetGroupName: string;
        };
        /** @example {
         *       "id": "org-12345678"
         *     } */
        AccountConfigIdentityIDResult: {
            /** @example org-12345678 */
            id: string;
        };
        /** @example {
         *       "accountConfigId": "ac-12345678"
         *     } */
        AddAccountConfigToServiceModelRequestBody: {
            /**
             * @description The infrastructure account configuration ID
             * @example ac-12345678
             */
            accountConfigId: string;
        };
        /** @example {
         *       "capacityToBeAdded": 3
         *     } */
        AddCapacityToResourceInstanceRequestBody: {
            /**
             * Format: int64
             * @description Number of replicas to be added
             * @example 3
             */
            capacityToBeAdded: number;
        };
        /** @example {
         *       "cloudProviderName": "aws",
         *       "instanceType": "t3.micro"
         *     } */
        AddComputeInstanceTypeRequestBody: {
            /**
             * @description The cloud provider for this compute instance type config
             * @example aws
             */
            cloudProviderName: string;
            /**
             * @description The instance type for this compute instance type config
             * @example t3.micro
             */
            instanceType: string;
        };
        /** @example {
         *       "customDNS": "my-custom-dns.com",
         *       "targetPort": 8080
         *     } */
        AddCustomDNSToResourceInstanceRequestBody: {
            /**
             * @description The custom DNS to add
             * @example my-custom-dns.com
             */
            customDNS: string;
            /**
             * Format: int64
             * @description The target port
             * @example 8080
             */
            targetPort?: number;
        };
        /** @example {
         *       "parameterMap": {
         *         "clusterId": "writerId",
         *         "clusterOrg": "userDatabase"
         *       }
         *     } */
        AddResourceDependencyRequestBody: {
            /**
             * @description A map of the source parameter to the dependency resource parameter
             * @example {
             *       "clusterId": "writerId",
             *       "clusterOrg": "userDatabase"
             *     }
             */
            parameterMap?: {
                [key: string]: string;
            };
        };
        /** @example {
         *       "mountPath": "/data"
         *     } */
        AddStorageVolumeConfigRequestBody: {
            /**
             * @description The path where the storage volume will be mounted
             * @example /data
             */
            mountPath?: string;
        };
        /** @example {
         *       "AddCapabilities": [
         *         "CAP_NET_ADMIN",
         *         "CAP_NET_RAW"
         *       ],
         *       "DropCapabilities": [
         *         "CAP_NET_ADMIN",
         *         "CAP_NET_RAW"
         *       ],
         *       "SupplementalGroupIDs": [
         *         1001,
         *         999
         *       ]
         *     } */
        AdditionalSecurityContext: {
            /**
             * @description Capabilities to add
             * @example [
             *       "CAP_NET_ADMIN",
             *       "CAP_NET_RAW"
             *     ]
             */
            AddCapabilities?: string[];
            /**
             * @description Capabilities to drop
             * @example [
             *       "CAP_NET_ADMIN",
             *       "CAP_NET_RAW"
             *     ]
             */
            DropCapabilities?: string[];
            /**
             * @description Supplemental group IDs
             * @example [
             *       1001,
             *       999
             *     ]
             */
            SupplementalGroupIDs?: number[];
        };
        /** @example {
         *       "addressLine1": "1234 Main St",
         *       "addressLine2": "Apt 123",
         *       "addressLine3": "Building 123",
         *       "city": "San Francisco",
         *       "country": "US",
         *       "state": "CA",
         *       "zip": "94123"
         *     } */
        Address: {
            /**
             * @description The street address
             * @example 1234 Main St
             */
            addressLine1: string;
            /**
             * @description Address Line 2
             * @example Apt 123
             */
            addressLine2?: string;
            /**
             * @description Address Line 3
             * @example Building 123
             */
            addressLine3?: string;
            /**
             * @description Name of the City
             * @example San Francisco
             */
            city: string;
            /**
             * @description Name of the Country
             * @example US
             */
            country: string;
            /**
             * @description Name of the State/Province/Region
             * @example CA
             */
            state: string;
            /**
             * @description Zip code
             * @example 94123
             */
            zip: string;
        };
        /** @example {
         *       "metricEndpoint": "http://localhost:9187/metrics",
         *       "metricLabelName": "label",
         *       "metricLabelValue": "value",
         *       "metricName": "metric_name"
         *     } */
        AutoScalingMetricSpec: {
            /**
             * @description The local host endpoint to supply prometheus metric
             * @example http://localhost:9187/metrics
             */
            metricEndpoint: string;
            /**
             * @description The prometheus metric label name for scaling
             * @example label
             */
            metricLabelName: string;
            /**
             * @description The prometheus metric label value for scaling
             * @example value
             */
            metricLabelValue: string;
            /**
             * @description The prometheus metric name for scaling
             * @example metric_name
             */
            metricName: string;
        };
        /**
         * @description Autoscaling policy for compute nodes
         * @example {
         *       "idleMinutesBeforeScalingDown": 1,
         *       "idleThreshold": 1,
         *       "maxReplicas": "4",
         *       "minReplicas": "1",
         *       "overUtilizedMinutesBeforeScalingUp": 1,
         *       "overUtilizedThreshold": 1,
         *       "scalingMetric": {
         *         "metricEndpoint": "http://localhost:9187/metrics",
         *         "metricLabelName": "label",
         *         "metricLabelValue": "value",
         *         "metricName": "metric_name"
         *       }
         *     }
         */
        AutoscalingPolicy: {
            /**
             * Format: int64
             * @description Minutes before scaling down the compute nodes in idle state
             * @default 5
             * @example 1
             */
            idleMinutesBeforeScalingDown: number;
            /**
             * Format: int64
             * @description Metric value below threshold will be considered to be idle
             * @default 20
             * @example 1
             */
            idleThreshold: number;
            /**
             * @description Maximum number of compute nodes to provision
             * @example 4
             */
            maxReplicas: string;
            /**
             * @description Minimum number of compute nodes to provision
             * @example 1
             */
            minReplicas: string;
            /**
             * Format: int64
             * @description Minutes before scaling up the compute nodes in overUtilized state
             * @default 5
             * @example 1
             */
            overUtilizedMinutesBeforeScalingUp: number;
            /**
             * Format: int64
             * @description Metric value beyond threshold will be considered to be overUtilized
             * @default 80
             * @example 1
             */
            overUtilizedThreshold: number;
            scalingMetric?: components["schemas"]["AutoScalingMetricSpec"];
        };
        /** @example {
         *       "associatedResourceIDs": [
         *         "r-12345678",
         *         "r-abcdef12"
         *       ],
         *       "backendPort": 8080,
         *       "ingressPort": 1234
         *     } */
        BackendPortConfiguration: {
            /**
             * @description The IDs of the resource associated with the backend port
             * @example [
             *       "r-12345678",
             *       "r-abcdef12"
             *     ]
             */
            associatedResourceIDs: string[];
            /**
             * Format: int64
             * @description The port to forward traffic to
             * @example 8080
             */
            backendPort: number;
            /**
             * Format: int64
             * @description The ingress port to configure on the load balancer
             * @example 1234
             */
            ingressPort: number;
        };
        /** @example {
         *       "backupPeriodInHours": 24,
         *       "backupRetentionInDays": 7
         *     } */
        BackupConfiguration: {
            /**
             * Format: int64
             * @description The period in hours to take backups
             * @example 24
             */
            backupPeriodInHours: number;
            /**
             * Format: int64
             * @description The number of days to retain backups
             * @example 7
             */
            backupRetentionInDays: number;
        };
        /** @example {
         *       "backupPeriodInHours": 2,
         *       "backupRetentionInDays": 7,
         *       "earliestRestoreTime": "2021-09-01T00:00:00Z",
         *       "lastBackupTime": "2021-09-01T00:00:00Z"
         *     } */
        BackupStatus: {
            /**
             * Format: int64
             * @description The backup period in hours
             * @example 2
             */
            backupPeriodInHours: number;
            /**
             * Format: int64
             * @description The backup retention in days
             * @example 7
             */
            backupRetentionInDays: number;
            /**
             * @description The earliest restore time
             * @example 2021-09-01T00:00:00Z
             */
            earliestRestoreTime?: string;
            /**
             * @description The last backup time
             * @example 2021-09-01T00:00:00Z
             */
            lastBackupTime?: string;
        };
        /** @example {
         *       "allowCreatesWhenPaymentNotConfigured": true,
         *       "id": "bp-12345678",
         *       "maxNumberofInstances": 5,
         *       "planName": "STARTER",
         *       "pricing": {
         *         "cpuCoreHours": "0.001",
         *         "memoryGiBHours": "0.0001",
         *         "storageGiBHours": "0.0001"
         *       },
         *       "productTierId": "pt-12345678",
         *       "serviceId": "s-12345678"
         *     } */
        BillingPlan: {
            /**
             * @description Allow creates when payment not configured
             * @example true
             */
            allowCreatesWhenPaymentNotConfigured: boolean;
            /**
             * @description Product tier billing plan ID
             * @example bp-12345678
             */
            id: string;
            /**
             * Format: int64
             * @description Maximum number of instances
             * @example 5
             */
            maxNumberofInstances: number;
            /**
             * @description Plan name
             * @example STARTER
             */
            planName: string;
            /**
             * @description Pricing in dollars.
             * @example {
             *       "cpuCoreHours": "0.001",
             *       "memoryGiBHours": "0.0001",
             *       "storageGiBHours": "0.0001"
             *     }
             */
            pricing: unknown;
            /**
             * @description Product tier ID
             * @example pt-12345678
             */
            productTierId: string;
            /**
             * @description Service ID
             * @example s-12345678
             */
            serviceId: string;
        };
        /** @example {
         *       "GCSConfiguration": {},
         *       "S3Configuration": {}
         *     } */
        BlobStorageConfiguration: {
            GCSConfiguration?: components["schemas"]["GCSConfiguration"];
            S3Configuration?: components["schemas"]["GCSConfiguration"];
        };
        /** @example {
         *       "configs": {
         *         "Eligendi excepturi modi ut deserunt odit.": "Autem eius eveniet.",
         *         "Non omnis temporibus veniam.": "Quae blanditiis nam tenetur aut labore quia.",
         *         "Provident omnis et iste.": "Consequuntur consequatur."
         *       },
         *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *       "environment": "dev",
         *       "environmentType": "DEV",
         *       "fileContent": "Ipsa aut voluptatum asperiores itaque.",
         *       "name": "MySQL multi-writer service",
         *       "release": true,
         *       "releaseAsPreferred": true,
         *       "releaseVersionName": "mysql",
         *       "secrets": {
         *         "Repudiandae velit id.": "Explicabo fuga sapiente magni in molestiae asperiores."
         *       },
         *       "serviceLogoURL": "http://abernathy.org/kacey"
         *     } */
        BuildServiceFromComposeSpecRequestBody: {
            /**
             * @description Configs for the service. Key is the compose spec name of the config and value is base64 encoded config content
             * @example {
             *       "Aut deserunt.": "Dolor ut ipsa debitis consequatur vel.",
             *       "Qui dolores aspernatur omnis rem qui.": "Repellendus minima eum quidem non.",
             *       "Quia hic qui aliquid voluptas repellat hic.": "Quod vel eum eos commodi."
             *     }
             */
            configs?: {
                [key: string]: string;
            };
            /**
             * @description A brief description of the service
             * @example A MySQL SaaS specializing in multi-writer clusters for high availability
             */
            description?: string;
            /**
             * @description The environment to build the service in
             * @example dev
             */
            environment?: string;
            /**
             * @description The type of the environment
             * @example DEV
             */
            environmentType?: string;
            /**
             * @description Base64 encoded Compose Spec YAML in docker compose format
             * @example Quia omnis facilis voluptate voluptas.
             */
            fileContent: string;
            /**
             * @description Name of the Service
             * @example MySQL multi-writer service
             */
            name: string;
            /**
             * @description Release the service after building
             * @example true
             */
            release?: boolean;
            /**
             * @description Release the service as preferred
             * @example true
             */
            releaseAsPreferred?: boolean;
            /**
             * @description Release version name
             * @example mysql
             */
            releaseVersionName?: string;
            /**
             * @description Secrets for the service. Key is the compose spec name of the secret and value is base64 encoded secret content
             * @example {
             *       "Culpa dignissimos.": "Occaecati nisi deserunt molestiae.",
             *       "Est dolore sunt voluptas.": "Non ratione qui odio et laboriosam rerum.",
             *       "Vero deleniti eum.": "Et neque cum deleniti aliquid ducimus."
             *     }
             */
            secrets?: {
                [key: string]: string;
            };
            /**
             * Format: uri
             * @description The logo for the service
             * @example http://spinkarau.org/nyasia
             */
            serviceLogoURL?: string;
        };
        /** @example {
         *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *       "environment": "dev",
         *       "environmentType": "DEV",
         *       "fileContent": "Reiciendis amet ut.",
         *       "name": "MySQL multi-writer service",
         *       "release": true,
         *       "releaseAsPreferred": true,
         *       "releaseVersionName": "mysql",
         *       "serviceLogoURL": "http://donnelly.net/caden"
         *     } */
        BuildServiceFromServicePlanSpecRequestBody: {
            /**
             * @description A brief description of the service
             * @example A MySQL SaaS specializing in multi-writer clusters for high availability
             */
            description?: string;
            /**
             * @description The environment to build the service in
             * @example dev
             */
            environment?: string;
            /**
             * @description The type of the environment
             * @example DEV
             */
            environmentType?: string;
            /**
             * @description Base64 encoded Compose Spec YAML in service plan configuration format
             * @example Nisi accusantium ipsa eligendi sunt.
             */
            fileContent: string;
            /**
             * @description Name of the Service
             * @example MySQL multi-writer service
             */
            name: string;
            /**
             * @description Release the service after building
             * @example true
             */
            release?: boolean;
            /**
             * @description Release the service as preferred
             * @example true
             */
            releaseAsPreferred?: boolean;
            /**
             * @description Release version name
             * @example mysql
             */
            releaseVersionName?: string;
            /**
             * Format: uri
             * @description The logo for the service
             * @example http://mcclurewilliamson.org/luther
             */
            serviceLogoURL?: string;
        };
        /** @example {
         *       "productTierID": "pt-12345678",
         *       "serviceEnvironmentID": "se-12345678",
         *       "serviceID": "s-12345678",
         *       "undefinedResources": {
         *         "mysql": "r-12345678"
         *       }
         *     } */
        BuildServiceFromServicePlanSpecResult: {
            /**
             * @description The product tier ID of the built service plan
             * @example pt-12345678
             */
            productTierID: string;
            /**
             * @description The service environment ID of the built service
             * @example se-12345678
             */
            serviceEnvironmentID: string;
            /**
             * @description The service ID of the built service
             * @example s-12345678
             */
            serviceID: string;
            /**
             * @description Resources that appear in the service plan but were not defined in the spec. These resources were not processed during the build.
             * @example {
             *       "mysql": "r-12345678"
             *     }
             */
            undefinedResources?: {
                [key: string]: string;
            };
        };
        /** @example {
         *       "attributes": {
         *         "resourceId": "r-12345678"
         *       },
         *       "changeType": "PENDING_NEW",
         *       "name": "Customer metrics"
         *     } */
        Change: {
            /**
             * @description Additional setting/component attributes
             * @example {
             *       "resourceId": "r-12345678"
             *     }
             */
            attributes: {
                [key: string]: string;
            };
            /**
             * @description Type of the pending change
             * @example PENDING_NEW
             */
            changeType: string;
            /**
             * @description The name of the setting/component that changed
             * @example Customer metrics
             */
            name: string;
        };
        /** @example {
         *       "email": "abc@gmail.com",
         *       "password": "password",
         *       "token": "fc7b8dea-a50b-4c9a-8864-fc3d845a2be6"
         *     } */
        ChangePasswordRequestBody: {
            /**
             * Format: email
             * @example abc@gmail.com
             */
            email: string;
            /** @example password */
            password: string;
            /** @example fc7b8dea-a50b-4c9a-8864-fc3d845a2be6 */
            token: string;
        };
        /** @example {
         *       "planName": "STARTER"
         *     } */
        ChangePlanRequestBody: {
            /**
             * @description The name of the plan this user is changing to
             * @example STARTER
             */
            planName: string;
        };
        /** @example {
         *       "categorizedResourceChanges": {
         *         "Qui quis doloribus excepturi.": {
         *           "changes": [
         *             {
         *               "attributes": {
         *                 "resourceId": "r-12345678"
         *               },
         *               "changeType": "PENDING_NEW",
         *               "name": "Customer metrics"
         *             },
         *             {
         *               "attributes": {
         *                 "resourceId": "r-12345678"
         *               },
         *               "changeType": "PENDING_NEW",
         *               "name": "Customer metrics"
         *             }
         *           ],
         *           "status": "PENDING_UPDATE"
         *         }
         *       },
         *       "imageConfigChanges": {
         *         "changeState": "PENDING_NEW",
         *         "imageConfigId": "imgc-12345678",
         *         "imageName": "mysql"
         *       },
         *       "infraConfigChanges": {
         *         "changeState": "PENDING_NEW",
         *         "infraConfigId": "ic-12345678",
         *         "name": "MySQL Writer Infra Config"
         *       },
         *       "overallResourceStatus": "PENDING_UPDATE",
         *       "productTierFeatureChanges": "PENDING_UPDATE",
         *       "resourceChanges": "PENDING_DELETE",
         *       "resourceName": "Beatae atque tenetur voluptatem."
         *     } */
        ChangeSet: {
            /**
             * @description Summary of all changes within a resource for each category (ie. image, infra, product tier feature, etc.)
             * @example {
             *       "Vero eos.": {
             *         "changes": [
             *           {
             *             "attributes": {
             *               "resourceId": "r-12345678"
             *             },
             *             "changeType": "PENDING_NEW",
             *             "name": "Customer metrics"
             *           },
             *           {
             *             "attributes": {
             *               "resourceId": "r-12345678"
             *             },
             *             "changeType": "PENDING_NEW",
             *             "name": "Customer metrics"
             *           }
             *         ],
             *         "status": "PENDING_UPDATE"
             *       }
             *     }
             */
            categorizedResourceChanges: {
                [key: string]: components["schemas"]["ChangeSummary"];
            };
            imageConfigChanges?: components["schemas"]["ImageConfigChangeSummary"];
            infraConfigChanges?: components["schemas"]["InfraConfigChangeSummary"];
            /**
             * @description The overall resource change status across all change categories
             * @example PENDING_UPDATE
             */
            overallResourceStatus: string;
            /**
             * @description The product tier feature changes for the resource.
             * @example PENDING_UPDATE
             */
            productTierFeatureChanges?: string;
            /**
             * @description The service api changes for the resource.
             * @example PENDING_DELETE
             */
            resourceChanges?: string;
            /**
             * @description The name of the resource
             * @example Eos cumque.
             */
            resourceName?: string;
        };
        /** @example {
         *       "changes": [
         *         {
         *           "attributes": {
         *             "resourceId": "r-12345678"
         *           },
         *           "changeType": "PENDING_NEW",
         *           "name": "Customer metrics"
         *         },
         *         {
         *           "attributes": {
         *             "resourceId": "r-12345678"
         *           },
         *           "changeType": "PENDING_NEW",
         *           "name": "Customer metrics"
         *         },
         *         {
         *           "attributes": {
         *             "resourceId": "r-12345678"
         *           },
         *           "changeType": "PENDING_NEW",
         *           "name": "Customer metrics"
         *         },
         *         {
         *           "attributes": {
         *             "resourceId": "r-12345678"
         *           },
         *           "changeType": "PENDING_NEW",
         *           "name": "Customer metrics"
         *         }
         *       ],
         *       "status": "PENDING_UPDATE"
         *     } */
        ChangeSummary: {
            /**
             * @description List of individual changes
             * @example [
             *       {
             *         "attributes": {
             *           "resourceId": "r-12345678"
             *         },
             *         "changeType": "PENDING_NEW",
             *         "name": "Customer metrics"
             *       },
             *       {
             *         "attributes": {
             *           "resourceId": "r-12345678"
             *         },
             *         "changeType": "PENDING_NEW",
             *         "name": "Customer metrics"
             *       }
             *     ]
             */
            changes: components["schemas"]["Change"][];
            /**
             * @description The product tier feature changes for the resource.
             * @example PENDING_UPDATE
             */
            status: string;
        };
        /** @example {
         *       "errorMsg": "Aliquid consequatur dolores nostrum quia qui architecto.",
         *       "imageAccessible": false
         *     } */
        CheckIfContainerImageAccessibleResult: {
            /**
             * @description Error message if the image is not accessible
             * @example Unde tempora.
             */
            errorMsg?: string;
            /**
             * @description Indicates if the image is accessible
             * @example true
             */
            imageAccessible: boolean;
        };
        /** @example {
         *       "endpoint": "https://r-1234.instance-abcdefgh.region.aws.omnistrate.cloud",
         *       "networkingType": "PUBLIC",
         *       "openPorts": [
         *         30000,
         *         30001
         *       ],
         *       "primary": true
         *     } */
        ClusterEndpoint: {
            /**
             * @description The endpoint
             * @default
             * @example https://r-1234.instance-abcdefgh.region.aws.omnistrate.cloud
             */
            endpoint: string;
            /**
             * @description The networking type for this resource
             * @example PUBLIC
             */
            networkingType?: string;
            /**
             * @description The open ports
             * @example [
             *       30000,
             *       30001
             *     ]
             */
            openPorts?: number[];
            /**
             * @description Whether this is the primary endpoint
             * @default false
             * @example true
             */
            primary: boolean;
        };
        /** @example {
         *       "token": "eo"
         *     } */
        ConsumptionServiceAuthResult: {
            /**
             * @description JWT token used to perform authorization
             * @example qf8
             */
            token: string;
        };
        /** @example {
         *       "company": "ABC",
         *       "email": "abc@gmail.com",
         *       "message": "this is a test",
         *       "name": "John Doe"
         *     } */
        ContactusRequestBody: {
            /** @example ABC */
            company: string;
            /**
             * Format: email
             * @example abc@gmail.com
             */
            email: string;
            /** @example this is a test */
            message: string;
            /** @example John Doe */
            name: string;
        };
        /** @example {
         *       "autoApproveSubscription": false,
         *       "awsRegions": [
         *         "us-east-2",
         *         "ca-central-1"
         *       ],
         *       "description": "A premium product tier",
         *       "documentation": "Any documentation",
         *       "gcpRegions": [
         *         "us-central1"
         *       ],
         *       "name": "Premium",
         *       "planDescription": "A premium plan",
         *       "pricing": {
         *         "price1": "value1"
         *       },
         *       "serviceModelId": "sm-12345678",
         *       "support": "Any support",
         *       "targetTierType": "OMNISTRATE_DEDICATED_TENANCY"
         *     } */
        CopyProductTierRequestBody: {
            /**
             * @description Auto approve subscription or not
             * @example false
             */
            autoApproveSubscription?: boolean;
            /**
             * @description The AWS regions that this product tier is available on
             * @example [
             *       "us-east-2",
             *       "ca-central-1"
             *     ]
             */
            awsRegions?: string[];
            /**
             * @description A brief description of the product tier
             * @example A premium product tier
             */
            description: string;
            /**
             * @description Documentation
             * @example Any documentation
             */
            documentation?: string;
            /**
             * @description The GCP regions that this product tier is available on
             * @example [
             *       "us-central1"
             *     ]
             */
            gcpRegions?: string[];
            /**
             * @description Name of the product tier
             * @example Premium
             */
            name: string;
            /**
             * @description A brief description for the end user of the product tier
             * @example A premium plan
             */
            planDescription?: string;
            /**
             * @description Pricing
             * @example {
             *       "price1": "value1"
             *     }
             */
            pricing?: unknown;
            /**
             * @description Service model ID
             * @example sm-12345678
             */
            serviceModelId: string;
            /**
             * @description Support
             * @example Any support
             */
            support?: string;
            /**
             * @description Tier type
             * @example OMNISTRATE_DEDICATED_TENANCY
             */
            targetTierType?: string;
        };
        /** @example {
         *       "accountConfigIds": [
         *         "ac-12345678",
         *         "ac-23456789"
         *       ],
         *       "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
         *       "features": [
         *         {
         *           "configuration": {
         *             "Sapiente ut.": "Ut qui eligendi odit."
         *           },
         *           "feature": "Quia quas saepe sequi quidem facere."
         *         },
         *         {
         *           "configuration": {
         *             "Sapiente ut.": "Ut qui eligendi odit."
         *           },
         *           "feature": "Quia quas saepe sequi quidem facere."
         *         },
         *         {
         *           "configuration": {
         *             "Sapiente ut.": "Ut qui eligendi odit."
         *           },
         *           "feature": "Quia quas saepe sequi quidem facere."
         *         },
         *         {
         *           "configuration": {
         *             "Sapiente ut.": "Ut qui eligendi odit."
         *           },
         *           "feature": "Quia quas saepe sequi quidem facere."
         *         }
         *       ],
         *       "name": "MySQL multi-writer service hosted model",
         *       "targetServiceModelType": "CUSTOMER_HOSTED",
         *       "targetTierType": "OMNISTRATE_DEDICATED_TENANCY"
         *     } */
        CopyServiceModelRequestBody: {
            /**
             * @description The infrastructure account configuration ID list
             * @example [
             *       "ac-12345678",
             *       "ac-23456789"
             *     ]
             */
            accountConfigIds?: string[];
            /**
             * @description A brief description of the service model
             * @example A MySQL Hosted SaaS specializing in multi-writer clusters for high availability
             */
            description: string;
            /**
             * @description Enabled service model features
             * @example [
             *       {
             *         "configuration": {
             *           "Sapiente ut.": "Ut qui eligendi odit."
             *         },
             *         "feature": "Quia quas saepe sequi quidem facere."
             *       },
             *       {
             *         "configuration": {
             *           "Sapiente ut.": "Ut qui eligendi odit."
             *         },
             *         "feature": "Quia quas saepe sequi quidem facere."
             *       },
             *       {
             *         "configuration": {
             *           "Sapiente ut.": "Ut qui eligendi odit."
             *         },
             *         "feature": "Quia quas saepe sequi quidem facere."
             *       },
             *       {
             *         "configuration": {
             *           "Sapiente ut.": "Ut qui eligendi odit."
             *         },
             *         "feature": "Quia quas saepe sequi quidem facere."
             *       }
             *     ]
             */
            features?: components["schemas"]["ServiceModelFeatureDetail"][];
            /**
             * @description Name of the Service Model
             * @example MySQL multi-writer service hosted model
             */
            name: string;
            /**
             * @description The model type encapsulating this service
             * @example CUSTOMER_HOSTED
             */
            targetServiceModelType: string;
            /**
             * @description Target product tier type
             * @example OMNISTRATE_DEDICATED_TENANCY
             */
            targetTierType?: string;
        };
        /** @example {
         *       "awsAccessKey": "Qui dignissimos dolore in excepturi ipsa voluptas.",
         *       "awsAccountID": "123456789012",
         *       "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
         *       "awsSecretKey": "Temporibus non in placeat autem vel.",
         *       "byoaInstanceID": "instance-12345678",
         *       "cloudProviderId": "infra-12345678",
         *       "description": "An AWS account hosting multiple dev environments",
         *       "gcpProjectID": "my-project",
         *       "gcpProjectNumber": "123456789012",
         *       "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
         *       "gcpServiceAccountKey": "Quam ullam fuga sit magni veritatis.",
         *       "name": "Dev AWS account"
         *     } */
        CreateAccountConfigRequestBody: {
            /**
             * @description The AWS access key
             * @example Aut et perferendis dolor numquam nulla.
             */
            awsAccessKey?: string;
            /**
             * @description The AWS account ID
             * @example 123456789012
             */
            awsAccountID?: string;
            /**
             * @description The security role ARN or service account ARN that grants access to operate the infra
             * @example arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>
             */
            awsBootstrapRoleARN?: string;
            /**
             * @description The AWS secret key
             * @example Qui quaerat quia itaque sint.
             */
            awsSecretKey?: string;
            /**
             * @description The BYOA instance ID that this account config is tied to
             * @example instance-12345678
             */
            byoaInstanceID?: string;
            /**
             * @description Cloud Provider ID to operate on
             * @example infra-12345678
             */
            cloudProviderId: string;
            /**
             * @description The description for the account
             * @example An AWS account hosting multiple dev environments
             */
            description: string;
            /**
             * @description The GCP project ID
             * @example my-project
             */
            gcpProjectID?: string;
            /**
             * @description The GCP project number
             * @example 123456789012
             */
            gcpProjectNumber?: string;
            /**
             * @description The GCP service account email
             * @example bootstrap@my-project.iam.gserviceaccount.com
             */
            gcpServiceAccountEmail?: string;
            /**
             * @description The GCP service account key
             * @example Ut molestiae.
             */
            gcpServiceAccountKey?: string;
            /**
             * @description The name of the account
             * @example Dev AWS account
             */
            name: string;
        };
        /** @example {
         *       "autoscalingPolicy": {
         *         "maxReplicas": 4,
         *         "minReplicas": 1
         *       },
         *       "cpuArchitecture": "X86_64|ARM64",
         *       "description": "my compute config description",
         *       "name": "my compute config",
         *       "replicaCount": "3",
         *       "resources": {
         *         "limits": {
         *           "cpu": "1",
         *           "memory": "500Mi"
         *         },
         *         "requests": {
         *           "cpu": "0.5",
         *           "memory": "200Mi"
         *         }
         *       },
         *       "rootVolumeSizeGi": 10,
         *       "warmPoolConfiguration": {
         *         "minimumNodesInPool": 1
         *       }
         *     } */
        CreateComputeConfigRequestBody: {
            autoscalingPolicy?: components["schemas"]["AutoscalingPolicy"];
            /**
             * @description Processor architecture
             * @example X86_64|ARM64
             */
            cpuArchitecture?: string;
            /**
             * @description Description of the compute config
             * @example my compute config description
             */
            description: string;
            /**
             * @description Name of the compute config
             * @example my compute config
             */
            name: string;
            /**
             * @description Number of replicas to provision for this logical pool of nodes per instance of the resource
             * @example 3
             */
            replicaCount?: string;
            resources?: components["schemas"]["ResourceSpec"];
            /**
             * Format: int64
             * @description Size of the root volume in Gi
             * @example 10
             */
            rootVolumeSizeGi?: number;
            warmPoolConfiguration?: components["schemas"]["WarmPoolConfiguration"];
        };
        /** @example {
         *       "customDomain": "mydomain.dev",
         *       "description": "Description of the domain",
         *       "name": "Dev domain",
         *       "route53Configuration": {
         *         "awsAccountID": "123456789012"
         *       }
         *     } */
        CreateCustomDomainRequestBody: {
            /**
             * @description The root domain of the domain to use as suffix
             * @example mydomain.dev
             */
            customDomain: string;
            /**
             * @description The description for the domain
             * @example Description of the domain
             */
            description: string;
            /**
             * @description The name of the custom domain
             * @example Dev domain
             */
            name: string;
            route53Configuration: components["schemas"]["Route53Configuration"];
        };
        /** @example {
         *       "cidr": "10.0.0.0/16",
         *       "cloudProviderName": "aws",
         *       "cloudProviderRegion": "us-east-1",
         *       "name": "Prod us-east-1",
         *       "networkFeaturesConfiguration": {
         *         "isPrivateLinkEnabled": false
         *       }
         *     } */
        CreateCustomNetworkRequestBody: {
            /**
             * Format: cidr
             * @description CIDR block for the network
             * @default 10.0.0.0/16
             * @example 10.0.0.0/16
             */
            cidr: string;
            /**
             * @description The name of the cloud provider that the instance is running on.
             * @example aws
             */
            cloudProviderName: string;
            /**
             * @description The region of the cloud provider that the instance is running in.
             * @example us-east-1
             */
            cloudProviderRegion: string;
            /**
             * @description User friendly network name to help distinguish networks with same CIDRs
             * @example Prod us-east-1
             */
            name?: string;
            networkFeaturesConfiguration?: components["schemas"]["NetworkFeaturesConfiguration"];
        };
        /** @example {
         *       "description": "A production deployment config",
         *       "infraRollConfiguration": {
         *         "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
         *         "maximumNumberOfResourceInstancesPerBatch": 1,
         *         "maximumUnavailableReplicas": 1
         *       },
         *       "name": "Production",
         *       "rolloutPriorityList": [
         *         "region-12345678",
         *         "region-abcd1234",
         *         "region-3c3c3c3c"
         *       ]
         *     } */
        CreateDeploymentConfigRequestBody: {
            /**
             * @description A brief description of the deployment config
             * @example A production deployment config
             */
            description: string;
            infraRollConfiguration?: components["schemas"]["InfraRollConfiguration"];
            /**
             * @description Name of the deployment config
             * @example Production
             */
            name: string;
            /** @example [
             *       "region-12345678",
             *       "region-abcd1234",
             *       "region-3c3c3c3c"
             *     ] */
            rolloutPriorityList?: string[];
        };
        /** @example {
         *       "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
         *       "clientSecret": "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",
         *       "identityProviderName": "Google"
         *     } */
        CreateIdentityProviderRequestBody: {
            /**
             * @description The Client ID of the Identity Provider
             * @example 205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com
             */
            clientId: string;
            /**
             * @description The Client Secret of the Identity Provider
             * @example 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
             */
            clientSecret: string;
            /**
             * @description The name of the Identity Provider
             * @example Google
             */
            identityProviderName: string;
        };
        /** @example {
         *       "customImageCommandsAndArgs": {
         *         "args": [
         *           "-d",
         *           "mysql"
         *         ],
         *         "commands": [
         *           "echo",
         *           "Hello, World!"
         *         ]
         *       },
         *       "description": "A image configuration for my new entity",
         *       "imageName": "mysql",
         *       "imageRegistryId": "ir-12345678",
         *       "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
         *       "imageTag": "latest",
         *       "serviceEnvironmentId": "se-12345678"
         *     } */
        CreateImageConfigRequestBody: {
            customImageCommandsAndArgs?: components["schemas"]["CustomImageCommandsAndArgs"];
            /**
             * @description A brief description of the image configuration
             * @example A image configuration for my new entity
             */
            description: string;
            /**
             * @description Name of the container image
             * @example mysql
             */
            imageName: string;
            /**
             * @description The image registry ID to use for the infra
             * @example ir-12345678
             */
            imageRegistryId?: string;
            /**
             * @description PEM-encoded Public key part of the key used to sign the container image
             * @example -----BEGIN PUBLIC KEY-----
             *     MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT
             *     7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==
             *     -----END PUBLIC KEY-----
             *
             */
            imageSignaturePublicKeyPEM?: string;
            /**
             * @description Tag representing the specific software image version
             * @default latest
             * @example latest
             */
            imageTag: string;
            /**
             * @description The service environment ID
             * @example se-12345678
             */
            serviceEnvironmentId: string;
        };
        /** @example {
         *       "description": "DockerHub is a public Docker Image Registry",
         *       "host": "docker.io",
         *       "name": "DockerHub",
         *       "password": "mypassword",
         *       "username": "myusername"
         *     } */
        CreateImageRegistryRequestBody: {
            /**
             * @description A brief description of the Image Registry
             * @example DockerHub is a public Docker Image Registry
             */
            description: string;
            /**
             * @description The Image Registry host
             * @example docker.io
             */
            host: string;
            /**
             * @description Name of the Image Registry
             * @example DockerHub
             */
            name: string;
            /**
             * @description The password to use when authenticating to the Image Registry
             * @example mypassword
             */
            password?: string;
            /**
             * @description The username to use when authenticating to the Image Registry
             * @example myusername
             */
            username?: string;
        };
        /** @example {
         *       "computeConfigId": "cc-12345678",
         *       "customTag": {
         *         "key": "customKey",
         *         "value": "customValue"
         *       },
         *       "description": "Infra config used for the base tier MySQL service",
         *       "name": "MySQL Writer Infra Config",
         *       "networkConfigId": "nc-12345678",
         *       "serviceEnvironmentId": "se-12345678",
         *       "storageConfigId": "sc-12345678"
         *     } */
        CreateInfraConfigRequestBody: {
            /**
             * @description The compute config ID
             * @example cc-12345678
             */
            computeConfigId?: string;
            customTag?: components["schemas"]["EnvironmentVariable"];
            /**
             * @description The description for the infra config
             * @example Infra config used for the base tier MySQL service
             */
            description: string;
            /**
             * @description The name of the infra config
             * @example MySQL Writer Infra Config
             */
            name: string;
            /**
             * @description The network config ID
             * @example nc-12345678
             */
            networkConfigId?: string;
            /**
             * @description The service environment ID
             * @example se-12345678
             */
            serviceEnvironmentId: string;
            /**
             * @description The storage config ID
             * @example sc-12345678
             */
            storageConfigId?: string;
        };
        /** @example {
         *       "defaultValue": "default value",
         *       "dependentResourceId": "r-12345678",
         *       "description": "Sit non aspernatur.",
         *       "hasOptions": false,
         *       "isList": false,
         *       "key": "g",
         *       "labeledOptions": {
         *         "large": "t3.xlarge",
         *         "medium": "t3.large",
         *         "small": "t3.medium"
         *       },
         *       "limits": {
         *         "max": "Sit explicabo delectus aut nisi consequuntur.",
         *         "maxLength": "Sunt amet provident.",
         *         "min": "Cumque temporibus dolores vitae dolores doloremque illum.",
         *         "minLength": "Qui odio laudantium illum."
         *       },
         *       "modifiable": false,
         *       "name": "q",
         *       "options": [
         *         "a",
         *         "b",
         *         "c",
         *         "default value"
         *       ],
         *       "required": false,
         *       "resourceId": "r-12345678",
         *       "type": "Ratione veniam ullam ullam ut quia."
         *     } */
        CreateInputParameterRequestBody: {
            /**
             * @description Default value to use for an optional input parameter represented as a string
             * @example default value
             */
            defaultValue?: string;
            /**
             * @description The ID of the resource whose instance this input parameter depends on
             * @example r-12345678
             */
            dependentResourceId?: string;
            /**
             * @description A brief description of the input parameter
             * @example Quibusdam nihil fugiat laborum optio.
             */
            description: string;
            /**
             * @description Marks the input parameter to be selectable from a list of values
             * @default false
             * @example false
             */
            hasOptions: boolean;
            /**
             * @description Marks the input parameter as a list of values
             * @default false
             * @example false
             */
            isList: boolean;
            /**
             * @description Key of the input parameter
             * @example c3
             */
            key: string;
            /**
             * @description A map for labeled options. The key is the label and the value is the option. When the option is selected, the label will be displayed to the end customer. Specify either options or labeledOptions when defining the input parameter.
             * @example {
             *       "large": "t3.xlarge",
             *       "medium": "t3.large",
             *       "small": "t3.medium"
             *     }
             */
            labeledOptions?: {
                [key: string]: string;
            };
            limits?: components["schemas"]["Limits"];
            /**
             * @description Marks the input parameter as immutable
             * @example true
             */
            modifiable: boolean;
            /**
             * @description External name for the input parameter
             * @example o72
             */
            name: string;
            /**
             * @description A list of options to restrict the value of the input parameter to (represented as a string)
             * @example [
             *       "a",
             *       "b",
             *       "c",
             *       "default value"
             *     ]
             */
            options?: string[];
            /**
             * @description Enforces the input parameter as a required parameter
             * @example true
             */
            required: boolean;
            /**
             * @description The ID of the resource that this input parameter belongs to
             * @example r-12345678
             */
            resourceId: string;
            /** @example Voluptatibus consequatur vel doloribus omnis. */
            type: string;
        };
        /** @example {
         *       "description": "A multi-zone HA network config",
         *       "endpointPerReplica": true,
         *       "internal": true,
         *       "name": "Multi-zone",
         *       "openPorts": [
         *         1299,
         *         3306
         *       ],
         *       "privateNetworkingConfiguration": {
         *         "privateLinkConfiguration": {
         *           "awsPrivateLinkConfigurations": [
         *             {
         *               "port": 80,
         *               "targetGroupName": "my-target-group"
         *             },
         *             {
         *               "port": 80,
         *               "targetGroupName": "my-target-group"
         *             },
         *             {
         *               "port": 80,
         *               "targetGroupName": "my-target-group"
         *             },
         *             {
         *               "port": 80,
         *               "targetGroupName": "my-target-group"
         *             }
         *           ]
         *         }
         *       },
         *       "publicNetworkingConfiguration": {
         *         "enableClusterLoadBalancer": true,
         *         "enableNodeLoadBalancer": true
         *       },
         *       "stableEgressIP": true,
         *       "tlsTerminationPort": 443,
         *       "zoneConfiguration": "Iure tempora tenetur."
         *     } */
        CreateNetworkConfigRequestBody: {
            /**
             * @description A brief description of the network config
             * @example A multi-zone HA network config
             */
            description: string;
            /**
             * @description Generates a DNS endpoint per-replica for this network config
             * @example true
             */
            endpointPerReplica: boolean;
            /**
             * @description Restrict access to this network config to the internal network
             * @default false
             * @example true
             */
            internal: boolean;
            /**
             * @description Name of the network config
             * @example Multi-zone
             */
            name: string;
            /**
             * @description Ports to map to the generated DNS endpoint
             * @example [
             *       1299,
             *       3306
             *     ]
             */
            openPorts?: number[];
            privateNetworkingConfiguration?: components["schemas"]["PrivateNetworkingConfiguration"];
            publicNetworkingConfiguration?: components["schemas"]["PublicNetworkingConfiguration"];
            /**
             * @description Enable stable egress IP
             * @example true
             */
            stableEgressIP?: boolean;
            /**
             * Format: int64
             * @description The port that hosts the reverse proxy for TLS termination
             * @example 443
             */
            tlsTerminationPort?: number;
            /**
             * @description The preferred type of zonal availability for this resource and the specific zone(s) to deploy in
             * @example Quia tempore.
             */
            zoneConfiguration?: string;
        };
        /** @example {
         *       "description": "Username of the user created in the target system",
         *       "key": "username",
         *       "name": "Username",
         *       "resourceId": "r-12345678",
         *       "value": "johndoe",
         *       "valueRef": "$var.username",
         *       "valueType": "Nam omnis libero quia quaerat."
         *     } */
        CreateOutputParameterRequestBody: {
            /**
             * @description Description of the output variable being exported
             * @example Username of the user created in the target system
             */
            description: string;
            /**
             * @description Key of the output variable being exported
             * @example username
             */
            key: string;
            /**
             * @description External name of the output variable being exported
             * @example Username
             */
            name: string;
            /**
             * @description The ID of the resource that this output parameter belongs to
             * @example r-12345678
             */
            resourceId: string;
            /**
             * @description Value of the output variable being exported
             * @example johndoe
             */
            value?: string;
            /**
             * @description Reference to another variable that will be used to set the value of the output variable being exported
             * @example $var.username
             */
            valueRef?: string;
            /** @example Et quas porro consequuntur fugit quae repudiandae. */
            valueType?: string;
        };
        /** @example {
         *       "allowCreatesWhenPaymentNotConfigured": true,
         *       "maxNumberofInstances": 5,
         *       "planName": "STARTER",
         *       "pricing": {
         *         "cpuCoreHours": "0.001",
         *         "memoryGiBHours": "0.0001",
         *         "storageGiBHours": "0.0001"
         *       }
         *     } */
        CreateProductTierBillingPlanRequestBody: {
            /**
             * @description Allow creates when payment not configured
             * @example true
             */
            allowCreatesWhenPaymentNotConfigured: boolean;
            /**
             * Format: int64
             * @description Maximum number of instances
             * @example 5
             */
            maxNumberofInstances: number;
            /**
             * @description Plan name
             * @example STARTER
             */
            planName: string;
            /**
             * @description Pricing in dollars.
             * @example {
             *       "cpuCoreHours": "0.001",
             *       "memoryGiBHours": "0.0001",
             *       "storageGiBHours": "0.0001"
             *     }
             */
            pricing: unknown;
        };
        /** @example {
         *       "autoApproveSubscription": false,
         *       "awsRegions": [
         *         "us-east-2",
         *         "ca-central-1"
         *       ],
         *       "description": "A premium product tier",
         *       "documentation": "Any documentation",
         *       "gcpRegions": [
         *         "us-central1"
         *       ],
         *       "isDisabled": false,
         *       "name": "Premium",
         *       "planDescription": "A premium plan",
         *       "pricing": {
         *         "price1": "value1"
         *       },
         *       "serviceModelId": "sm-12345678",
         *       "support": "Any support",
         *       "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *     } */
        CreateProductTierRequestBody: {
            /**
             * @description Auto approve subscription or not
             * @example false
             */
            autoApproveSubscription?: boolean;
            /**
             * @description The AWS regions that this product tier is available on
             * @example [
             *       "us-east-2",
             *       "ca-central-1"
             *     ]
             */
            awsRegions?: string[];
            /**
             * @description A brief description of the product tier
             * @example A premium product tier
             */
            description: string;
            /**
             * @description Documentation
             * @example Any documentation
             */
            documentation?: string;
            /**
             * @description The GCP regions that this product tier is available on
             * @example [
             *       "us-central1"
             *     ]
             */
            gcpRegions?: string[];
            /**
             * @description Create the product tier in a disabled state. Enabling the product tier will let end-customers subscribe and use the service plan.
             * @example false
             */
            isDisabled?: boolean;
            /**
             * @description Name of the product tier
             * @example Premium
             */
            name: string;
            /**
             * @description A brief description for the end user of the product tier
             * @example A premium plan
             */
            planDescription: string;
            /**
             * @description Pricing
             * @example {
             *       "price1": "value1"
             *     }
             */
            pricing?: unknown;
            /**
             * @description Service model ID
             * @example sm-12345678
             */
            serviceModelId: string;
            /**
             * @description Support
             * @example Any support
             */
            support?: string;
            /**
             * @description Tier type
             * @example OMNISTRATE_DEDICATED_TENANCY
             */
            tierType: string;
        };
        /** @example {
         *       "cloud_provider": "aws",
         *       "custom_network_id": "n-1234567890",
         *       "externalBillingId": "external-billing-id-1234",
         *       "network_type": "PUBLIC",
         *       "region": "us-east-1",
         *       "requestParams": {
         *         "param1": "value1",
         *         "param2": "value2"
         *       }
         *     } */
        CreateResourceInstanceRequestBody: {
            /**
             * @description The cloud provider name
             * @example aws
             */
            cloud_provider?: string;
            /**
             * @description Custom network for resource
             * @example n-1234567890
             */
            custom_network_id?: string;
            /**
             * @description The external billing id to record which customer should pay for this resource instance
             * @example external-billing-id-1234
             */
            externalBillingId?: string;
            /**
             * @description The network type
             * @example PUBLIC
             */
            network_type?: string;
            /**
             * @description The region code
             * @example us-east-1
             */
            region?: string;
            /**
             * @description The request parameters
             * @example {
             *       "param1": "value1",
             *       "param2": "value2"
             *     }
             */
            requestParams?: unknown;
        };
        /** @example {
         *       "additionalSecurityContext": {
         *         "AddCapabilities": [
         *           "CAP_NET_ADMIN",
         *           "CAP_NET_RAW"
         *         ],
         *         "DropCapabilities": [
         *           "CAP_NET_ADMIN",
         *           "CAP_NET_RAW"
         *         ],
         *         "SupplementalGroupIDs": [
         *           1001,
         *           999
         *         ]
         *       },
         *       "backupConfiguration": {
         *         "backupPeriodInHours": 24,
         *         "backupRetentionInDays": 7
         *       },
         *       "blobStorageConfiguration": {
         *         "GCSConfiguration": {},
         *         "S3Configuration": {}
         *       },
         *       "customLabels": {
         *         "key": "value"
         *       },
         *       "customSysCTLs": {
         *         "net.ipv4.tcp_syncookies": "1"
         *       },
         *       "customULimits": [
         *         {
         *           "ULimitsName": "NoProc",
         *           "ULimitsType": "Soft",
         *           "ULimitsValue": 1000
         *         },
         *         {
         *           "ULimitsName": "NoFile",
         *           "ULimitsType": "Hard",
         *           "ULimitsValue": 2048
         *         }
         *       ],
         *       "description": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
         *       "environmentVariables": [
         *         {
         *           "key": "MYSQL_ROOT_PASSWORD",
         *           "value": "password"
         *         }
         *       ],
         *       "fileSystemConfiguration": {
         *         "EFSFileSystemConfiguration": {
         *           "PerformanceMode": "generalPurpose|maxIO",
         *           "ProvisionedThroughputInMibps": 125,
         *           "ThroughputMode": "provisioned|bursting|elastic"
         *         }
         *       },
         *       "helmChartConfiguration": {
         *         "chartName": "my-chart",
         *         "chartRepoName": "my-repo",
         *         "chartRepoUrl": "https://my-repo.com",
         *         "chartValues": {
         *           "key1": "value1",
         *           "key2": 3,
         *           "key3": {
         *             "key4": "value4"
         *           }
         *         },
         *         "chartVersion": "1.0.0",
         *         "endpointConfiguration": {
         *           "admin": {
         *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *             "networkingType": "PRIVATE",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": false
         *           },
         *           "cluster": {
         *             "host": "https://my-endpoint.com",
         *             "networkingType": "PUBLIC",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": true
         *           }
         *         },
         *         "password": "my-password",
         *         "runtimeConfiguration": {
         *           "disableHooks": true,
         *           "recreate": true,
         *           "resetThenReuseValues": true,
         *           "resetValues": true,
         *           "reuseValues": true,
         *           "skipCRDs": true,
         *           "timeoutNanos": 1000000000,
         *           "upgradeCRDs": true,
         *           "wait": true,
         *           "waitForJobs": true
         *         },
         *         "username": "my-user"
         *       },
         *       "imageConfigId": "imgc-12345678",
         *       "infraConfigId": "ic-12345678",
         *       "internal": false,
         *       "isProxy": true,
         *       "key": "galera",
         *       "kustomizeConfiguration": {
         *         "endpointConfiguration": {
         *           "admin": {
         *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *             "networkingType": "PRIVATE",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": false
         *           },
         *           "cluster": {
         *             "host": "https://my-endpoint.com",
         *             "networkingType": "PUBLIC",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": true
         *           }
         *         },
         *         "gitConfiguration": {
         *           "accessToken": "my-token",
         *           "referenceName": "tags/v1.0.0",
         *           "repositoryUrl": "https://github.com/username/myrepo",
         *           "userName": "my-user"
         *         },
         *         "helmChartDependencies": [
         *           {
         *             "chartName": "cert-manager",
         *             "chartVersion": "v1.5.3"
         *           },
         *           {
         *             "chartName": "nginx-ingress",
         *             "chartVersion": "v0.48.1"
         *           },
         *           {
         *             "chartName": "external-dns",
         *             "chartVersion": "v0.7.0"
         *           },
         *           {
         *             "chartName": "cnpg-operator",
         *             "chartVersion": "v0.23.1"
         *           }
         *         ],
         *         "kustomizePath": "/kustomize"
         *       },
         *       "l4LoadBalancerConfiguration": {
         *         "ingressPortConfiguration": [
         *           {
         *             "associatedResourceIDs": [
         *               "r-12345678",
         *               "r-abcdef12"
         *             ],
         *             "backendPort": 8080,
         *             "ingressPort": 1234
         *           },
         *           {
         *             "associatedResourceIDs": [
         *               "r-12345678",
         *               "r-abcdef12"
         *             ],
         *             "backendPort": 8081,
         *             "ingressPort": 5678
         *           },
         *           {
         *             "associatedResourceIDs": [
         *               "r-vwxybz12",
         *               "r-poij122v"
         *             ],
         *             "backendPort": 8082,
         *             "ingressPort": 9012
         *           }
         *         ]
         *       },
         *       "l7LoadBalancerConfiguration": {
         *         "paths": [
         *           {
         *             "associatedResourceID": "r-12345678",
         *             "path": "/path",
         *             "port": 8080
         *           }
         *         ]
         *       },
         *       "name": "Galera",
         *       "operatorCRDConfiguration": {
         *         "endpointConfiguration": {
         *           "admin": {
         *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *             "networkingType": "PRIVATE",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": false
         *           },
         *           "cluster": {
         *             "host": "https://my-endpoint.com",
         *             "networkingType": "PUBLIC",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": true
         *           }
         *         },
         *         "helmChartDependencies": [
         *           {
         *             "chartName": "cert-manager",
         *             "chartVersion": "v1.5.3"
         *           },
         *           {
         *             "chartName": "nginx-ingress",
         *             "chartVersion": "v0.48.1"
         *           },
         *           {
         *             "chartName": "external-dns",
         *             "chartVersion": "v0.7.0"
         *           },
         *           {
         *             "chartName": "cnpg-operator",
         *             "chartVersion": "v0.23.1"
         *           }
         *         ],
         *         "outputParameters": {
         *           "expiresAt": "$out.status.notAfter",
         *           "issuerName": "letsencrypt-prod"
         *         },
         *         "readinessConditions": {
         *           "$out.status.conditions[?(@.type=='Ready')].status": true
         *         },
         *         "supplementalFiles": [
         *           "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
         *           "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
         *         ],
         *         "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
         *       },
         *       "productTierId": "pt-12345678",
         *       "proxyType": "PortsBasedProxy",
         *       "resourceDependencies": [
         *         {
         *           "parameterMap": {
         *             "userDatabase": "clusterOrg",
         *             "writerId": "clusterWriterId"
         *           },
         *           "resourceId": "r-12345678"
         *         },
         *         {
         *           "parameterMap": {
         *             "readerId": "clusterReaderId",
         *             "userDatabase": "clusterOrg"
         *           },
         *           "resourceId": "r-abcdef12"
         *         }
         *       ],
         *       "resourceType": "Generic",
         *       "terraformConfigurations": {
         *         "Doloremque ipsa qui deleniti labore soluta.": {
         *           "gitConfiguration": {
         *             "accessToken": "my-token",
         *             "referenceName": "tags/v1.0.0",
         *             "repositoryUrl": "https://github.com/username/myrepo",
         *             "userName": "my-user"
         *           },
         *           "privateModuleGitAccessTokens": {
         *             "tokenName": "accessToken"
         *           },
         *           "requiredOutputKeys": [
         *             "output1"
         *           ],
         *           "requiredOutputs": [
         *             {
         *               "exported": true,
         *               "key": "output1"
         *             }
         *           ],
         *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *           "terraformPath": "/project1/tf"
         *         },
         *         "Ea vitae.": {
         *           "gitConfiguration": {
         *             "accessToken": "my-token",
         *             "referenceName": "tags/v1.0.0",
         *             "repositoryUrl": "https://github.com/username/myrepo",
         *             "userName": "my-user"
         *           },
         *           "privateModuleGitAccessTokens": {
         *             "tokenName": "accessToken"
         *           },
         *           "requiredOutputKeys": [
         *             "output1"
         *           ],
         *           "requiredOutputs": [
         *             {
         *               "exported": true,
         *               "key": "output1"
         *             }
         *           ],
         *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *           "terraformPath": "/project1/tf"
         *         },
         *         "Id placeat dolorem explicabo dolor est.": {
         *           "gitConfiguration": {
         *             "accessToken": "my-token",
         *             "referenceName": "tags/v1.0.0",
         *             "repositoryUrl": "https://github.com/username/myrepo",
         *             "userName": "my-user"
         *           },
         *           "privateModuleGitAccessTokens": {
         *             "tokenName": "accessToken"
         *           },
         *           "requiredOutputKeys": [
         *             "output1"
         *           ],
         *           "requiredOutputs": [
         *             {
         *               "exported": true,
         *               "key": "output1"
         *             }
         *           ],
         *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *           "terraformPath": "/project1/tf"
         *         }
         *       }
         *     } */
        CreateResourceRequestBody: {
            additionalSecurityContext?: components["schemas"]["AdditionalSecurityContext"];
            backupConfiguration?: components["schemas"]["BackupConfiguration"];
            blobStorageConfiguration?: components["schemas"]["BlobStorageConfiguration"];
            /**
             * @description Custom labels for the resource
             * @example {
             *       "key": "value"
             *     }
             */
            customLabels?: {
                [key: string]: string;
            };
            /**
             * @description Custom sysctl settings for the resource
             * @example {
             *       "net.ipv4.tcp_syncookies": "1"
             *     }
             */
            customSysCTLs?: {
                [key: string]: string;
            };
            /**
             * @description Custom ulimits for the resource
             * @example [
             *       {
             *         "ULimitsName": "NoProc",
             *         "ULimitsType": "Soft",
             *         "ULimitsValue": 1000
             *       },
             *       {
             *         "ULimitsName": "NoFile",
             *         "ULimitsType": "Hard",
             *         "ULimitsValue": 2048
             *       }
             *     ]
             */
            customULimits?: components["schemas"]["CustomULimits"][];
            /**
             * @description A brief description of the resource
             * @example A resource to manage a hosted public SaaS offering of a multi-writer MySQL service
             */
            description: string;
            /**
             * @description The environment variables that this resource requires
             * @example [
             *       {
             *         "key": "MYSQL_ROOT_PASSWORD",
             *         "value": "password"
             *       }
             *     ]
             */
            environmentVariables?: components["schemas"]["EnvironmentVariable"][];
            fileSystemConfiguration?: components["schemas"]["FileSystemConfiguration"];
            helmChartConfiguration?: components["schemas"]["HelmChartConfiguration"];
            /**
             * @description The ID of the image configuration that this resource refers to
             * @example imgc-12345678
             */
            imageConfigId?: string;
            /**
             * @description The ID of the infrastructure configuration that this resource refers to
             * @example ic-12345678
             */
            infraConfigId?: string;
            /**
             * @description Whether this resource is internal or not
             * @default false
             * @example true
             */
            internal: boolean;
            /**
             * @description Whether this resource is a proxy or not
             * @default false
             * @example false
             */
            isProxy: boolean;
            /**
             * @description The key of the resource
             * @example galera
             */
            key?: string;
            kustomizeConfiguration?: components["schemas"]["KustomizeConfiguration"];
            l4LoadBalancerConfiguration?: components["schemas"]["L4LoadBalancerConfiguration"];
            l7LoadBalancerConfiguration?: components["schemas"]["L7LoadBalancerConfiguration"];
            /**
             * @description Name of the resource
             * @example Galera
             */
            name: string;
            operatorCRDConfiguration?: components["schemas"]["OperatorCRDConfiguration"];
            /**
             * @description The product tier ID
             * @example pt-12345678
             */
            productTierId: string;
            /**
             * @description A proxy type of resource
             * @default PortsBasedProxy
             * @example PortsBasedProxy
             */
            proxyType: string;
            /** @example [
             *       {
             *         "parameterMap": {
             *           "userDatabase": "clusterOrg",
             *           "writerId": "clusterWriterId"
             *         },
             *         "resourceId": "r-12345678"
             *       },
             *       {
             *         "parameterMap": {
             *           "readerId": "clusterReaderId",
             *           "userDatabase": "clusterOrg"
             *         },
             *         "resourceId": "r-abcdef12"
             *       }
             *     ] */
            resourceDependencies?: components["schemas"]["ResourceDependency"][];
            /**
             * @description The type of the resource
             * @example Generic
             */
            resourceType?: string;
            /**
             * @description The Terraform configurations for various cloud providers
             * @example {
             *       "Ex consequatur quia maiores quis.": {
             *         "gitConfiguration": {
             *           "accessToken": "my-token",
             *           "referenceName": "tags/v1.0.0",
             *           "repositoryUrl": "https://github.com/username/myrepo",
             *           "userName": "my-user"
             *         },
             *         "privateModuleGitAccessTokens": {
             *           "tokenName": "accessToken"
             *         },
             *         "requiredOutputKeys": [
             *           "output1"
             *         ],
             *         "requiredOutputs": [
             *           {
             *             "exported": true,
             *             "key": "output1"
             *           }
             *         ],
             *         "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *         "terraformPath": "/project1/tf"
             *       },
             *       "Quaerat temporibus cupiditate sed doloribus accusantium officiis.": {
             *         "gitConfiguration": {
             *           "accessToken": "my-token",
             *           "referenceName": "tags/v1.0.0",
             *           "repositoryUrl": "https://github.com/username/myrepo",
             *           "userName": "my-user"
             *         },
             *         "privateModuleGitAccessTokens": {
             *           "tokenName": "accessToken"
             *         },
             *         "requiredOutputKeys": [
             *           "output1"
             *         ],
             *         "requiredOutputs": [
             *           {
             *             "exported": true,
             *             "key": "output1"
             *           }
             *         ],
             *         "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *         "terraformPath": "/project1/tf"
             *       },
             *       "Quidem dolor quo ea et molestiae quisquam.": {
             *         "gitConfiguration": {
             *           "accessToken": "my-token",
             *           "referenceName": "tags/v1.0.0",
             *           "repositoryUrl": "https://github.com/username/myrepo",
             *           "userName": "my-user"
             *         },
             *         "privateModuleGitAccessTokens": {
             *           "tokenName": "accessToken"
             *         },
             *         "requiredOutputKeys": [
             *           "output1"
             *         ],
             *         "requiredOutputs": [
             *           {
             *             "exported": true,
             *             "key": "output1"
             *           }
             *         ],
             *         "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *         "terraformPath": "/project1/tf"
             *       }
             *     }
             */
            terraformConfigurations?: {
                [key: string]: components["schemas"]["TerraformConfiguration"];
            };
        };
        /** @example {
         *       "customDomain": "mycustomdomain.com",
         *       "description": "My custom domain description",
         *       "environmentType": "DEV",
         *       "name": "MyCustomDomain"
         *     } */
        CreateSaaSPortalCustomDomainRequestBody: {
            /**
             * @description The custom domain
             * @example mycustomdomain.com
             */
            customDomain: string;
            /**
             * @description The custom domain description
             * @example My custom domain description
             */
            description: string;
            /**
             * @description The environment type for the custom domain
             * @example DEV
             */
            environmentType: string;
            /**
             * @description The custom domain name
             * @example MyCustomDomain
             */
            name: string;
        };
        /** @example {
         *       "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
         *       "serviceEnvironmentId": "se-12345678"
         *     } */
        CreateServiceAPIRequestBody: {
            /**
             * @description A brief description of the service API bundle
             * @example A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability
             */
            description: string;
            /**
             * @description The service environment ID
             * @example se-12345678
             */
            serviceEnvironmentId: string;
        };
        /** @example {
         *       "autoApproveSubscription": false,
         *       "deploymentConfigId": "dc-12345678",
         *       "description": "The production environment for the MySQL multi-writer service",
         *       "name": "Production",
         *       "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
         *       "sourceEnvironmentId": "se-12345678",
         *       "type": "DEV",
         *       "visibility": "Mollitia consectetur dolore ullam debitis maiores molestias."
         *     } */
        CreateServiceEnvironmentRequestBody: {
            /**
             * @description Auto approve subscription or not
             * @example false
             */
            autoApproveSubscription?: boolean;
            /**
             * @description The deployment configuration ID
             * @example dc-12345678
             */
            deploymentConfigId: string;
            /**
             * @description A brief description of the service environment
             * @example The production environment for the MySQL multi-writer service
             */
            description: string;
            /**
             * @description Name of the Service Environment
             * @example Production
             */
            name: string;
            /**
             * @description PEM-encoded Public key part of the key used to sign the JWT tokens for the service control plane APIs
             * @example -----BEGIN PUBLIC KEY-----
             *     MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT
             *     7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==
             *     -----END PUBLIC KEY-----
             *
             */
            serviceAuthPublicKey?: string;
            /**
             * @description The ID of the service environment to use for promoting changes to this environment
             * @example se-12345678
             */
            sourceEnvironmentId?: string;
            /** @example DEV */
            type?: string;
            /**
             * @description This parameter is used to configure the visibility of the service control-plane APIs
             * @example Harum voluptas explicabo sint molestias.
             */
            visibility?: string;
        };
        /** @example {
         *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *       "fileContent": "Dolor neque omnis quos odio eius.",
         *       "fileFormat": "text/plain",
         *       "fileName": "mysql.yaml",
         *       "name": "MySQL multi-writer service",
         *       "serviceLogoURL": "http://eberthaley.name/verner_koepp"
         *     } */
        CreateServiceFromComposeSpecRequestBody: {
            /**
             * @description A brief description of the service
             * @example A MySQL SaaS specializing in multi-writer clusters for high availability
             */
            description: string;
            /**
             * @description Base64 encoded Compose Spec YAML in docker compose format
             * @example Dolorem impedit in enim.
             */
            fileContent: string;
            /**
             * @description MIME type of file format
             * @example text/plain
             */
            fileFormat: string;
            /**
             * @description Name of compose spec YAML file that is uploaded
             * @example mysql.yaml
             */
            fileName: string;
            /**
             * @description Name of the Service
             * @example MySQL multi-writer service
             */
            name: string;
            /**
             * Format: uri
             * @description The logo for the service
             * @example http://emard.info/max
             */
            serviceLogoURL?: string;
        };
        /** @example {
         *       "accountConfigIds": [
         *         "ac-12345678",
         *         "ac-23456789"
         *       ],
         *       "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
         *       "features": [
         *         {
         *           "configuration": {
         *             "Sapiente ut.": "Ut qui eligendi odit."
         *           },
         *           "feature": "Quia quas saepe sequi quidem facere."
         *         },
         *         {
         *           "configuration": {
         *             "Sapiente ut.": "Ut qui eligendi odit."
         *           },
         *           "feature": "Quia quas saepe sequi quidem facere."
         *         }
         *       ],
         *       "modelType": "CUSTOMER_HOSTED",
         *       "name": "MySQL multi-writer service hosted model",
         *       "serviceApiId": "sa-12345678"
         *     } */
        CreateServiceModelRequestBody: {
            /**
             * @description The infrastructure account configuration ID list
             * @example [
             *       "ac-12345678",
             *       "ac-23456789"
             *     ]
             */
            accountConfigIds?: string[];
            /**
             * @description A brief description of the service model
             * @example A MySQL Hosted SaaS specializing in multi-writer clusters for high availability
             */
            description: string;
            /**
             * @description Enabled service model features
             * @example [
             *       {
             *         "configuration": {
             *           "Sapiente ut.": "Ut qui eligendi odit."
             *         },
             *         "feature": "Quia quas saepe sequi quidem facere."
             *       },
             *       {
             *         "configuration": {
             *           "Sapiente ut.": "Ut qui eligendi odit."
             *         },
             *         "feature": "Quia quas saepe sequi quidem facere."
             *       }
             *     ]
             */
            features?: components["schemas"]["ServiceModelFeatureDetail"][];
            /**
             * @description The model type encapsulating this service
             * @example CUSTOMER_HOSTED
             */
            modelType: string;
            /**
             * @description Name of the Service Model
             * @example MySQL multi-writer service hosted model
             */
            name: string;
            /**
             * @description The service API this model is for
             * @example sa-12345678
             */
            serviceApiId: string;
        };
        /** @example {
         *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *       "name": "MySQL multi-writer service",
         *       "serviceLogoURL": "http://shanahan.info/theron"
         *     } */
        CreateServiceRequestBody: {
            /**
             * @description A brief description of the service
             * @example A MySQL SaaS specializing in multi-writer clusters for high availability
             */
            description: string;
            /**
             * @description Name of the Service
             * @example MySQL multi-writer service
             */
            name: string;
            /**
             * Format: uri
             * @description The logo for the service
             * @example http://gutmannsporer.net/rogelio_hudson
             */
            serviceLogoURL?: string;
        };
        /** @example {
         *       "orchestrationCreateDSL": "Commodi sunt accusantium et voluptatum dolore."
         *     } */
        CreateServicesOrchestrationRequestBody: {
            /**
             * @description base64 encoded content of service orchestration create DSL
             * @example In ut id ut soluta.
             */
            orchestrationCreateDSL: string;
        };
        /** @example {
         *       "id": "Unde accusamus est deserunt soluta."
         *     } */
        CreateServicesOrchestrationResponseBody: {
            /**
             * @description Services Orchestration Id
             * @example Eum totam quam a.
             */
            id?: string;
        };
        /** @example {
         *       "description": "my-storage-config-description",
         *       "name": "my-storage-config"
         *     } */
        CreateStorageConfigRequestBody: {
            /**
             * @description Description of the storage config
             * @example my-storage-config-description
             */
            description: string;
            /**
             * @description Name of the storage config
             * @example my-storage-config
             */
            name: string;
        };
        /** @example {
         *       "clusterStorageType": "S3|$var.storageType|AWS::EFS",
         *       "description": "A storage volume set to store the MySQL data directory",
         *       "disableBackup": false,
         *       "instanceStorageIops": "$var.storageIops",
         *       "instanceStorageSizeGi": "$var.storage_size",
         *       "instanceStorageThroughputMiBps": "128",
         *       "instanceStorageType": "$var.storageType",
         *       "name": "MySQL Data Volume",
         *       "storageResourceID": "r-12345678"
         *     } */
        CreateStorageVolumeConfigRequestBody: {
            /**
             * @description The type of the fixed storage for the cluster
             * @example S3|$var.storageType|AWS::EFS
             */
            clusterStorageType?: string;
            /**
             * @description A brief description of the context for the storage volume pool
             * @example A storage volume set to store the MySQL data directory
             */
            description: string;
            /**
             * @description Disable backup for the storage volume
             * @example false
             */
            disableBackup?: boolean;
            /**
             * @description The IOPS provisioned for the configured instance storage type
             * @example $var.storageIops
             */
            instanceStorageIops?: string;
            /**
             * @description The storage size (in Gi) provisioned for the configured instance storage type
             * @example $var.storage_size
             */
            instanceStorageSizeGi?: string;
            /**
             * @description The throughput (in MiBps) provisioned for the configured instance storage type
             * @example 128
             */
            instanceStorageThroughputMiBps?: string;
            /**
             * @description The type of the storage for a compute instance
             * @example $var.storageType
             */
            instanceStorageType?: string;
            /**
             * @description Name of the storage volume pool
             * @example MySQL Data Volume
             */
            name: string;
            /**
             * @description The storage resource ID
             * @example r-12345678
             */
            storageResourceID?: string;
        };
        /** @example {
         *       "productTierId": "pt-12345678",
         *       "serviceId": "s-12345678"
         *     } */
        CreateSubscriptionRequestBody: {
            /**
             * @description The product tier ID
             * @example pt-12345678
             */
            productTierId: string;
            /**
             * @description The service ID
             * @example s-12345678
             */
            serviceId: string;
        };
        /** @example {
         *       "description": "Quo eum inventore qui.",
         *       "name": "Major version set",
         *       "parentVersion": "2.0",
         *       "type": "Major|Incremental|UserDefined"
         *     } */
        CreateTierVersionSetRequestBody: {
            /**
             * @description A brief description of the product-tier version set.
             * @example Minima id possimus quasi.
             */
            description?: string;
            /**
             * @description The name of the product-tier version set.
             * @example Major version set
             */
            name?: string;
            /**
             * @description The parent version of this version set.
             * @example 2.0
             */
            parentVersion?: string;
            /**
             * @description The version-set type of the product-tier.
             * @example Major|Incremental|UserDefined
             */
            type: string;
        };
        /** @example {
         *       "version": "3.0"
         *     } */
        CreateTierVersionSetResult: {
            /**
             * @description The version number for the specific version set.
             * @example 3.0
             */
            version: string;
        };
        /** @example {
         *       "aRecordTarget": "1.1.1.1",
         *       "cnameTarget": "cname-target.com",
         *       "dnsHost": "https://my-custom-endpoint.com",
         *       "dnsName": "https://my-custom-endpoint.com",
         *       "enabled": true,
         *       "name": "DNS to access the dashboard",
         *       "status": "READY"
         *     } */
        CustomDNSEndpoint: {
            /** @example 1.1.1.1 */
            aRecordTarget?: string;
            /** @example cname-target.com */
            cnameTarget?: string;
            /** @example https://my-custom-endpoint.com */
            dnsHost?: string;
            /**
             * @description DEPRECATED: Use dnsHost instead
             * @example https://my-custom-endpoint.com
             */
            dnsName?: string;
            /** @example true */
            enabled: boolean;
            /** @example DNS to access the dashboard */
            name?: string;
            /** @example READY */
            status?: string;
        };
        /** @example {
         *       "clusterEndpoint": "example.com",
         *       "customDomain": "mycustomdomain.com",
         *       "description": "My custom domain description",
         *       "environmentType": "DEV",
         *       "name": "MyCustomDomain",
         *       "status": "READY"
         *     } */
        CustomDomain: {
            /**
             * @description The cluster endpoint for the saas portal instance
             * @example example.com
             */
            clusterEndpoint: string;
            /**
             * @description The custom domain
             * @example mycustomdomain.com
             */
            customDomain: string;
            /**
             * @description The custom domain description
             * @example My custom domain description
             */
            description: string;
            /**
             * @description The environment type for the custom domain
             * @example DEV
             */
            environmentType: string;
            /**
             * @description The custom domain name
             * @example MyCustomDomain
             */
            name: string;
            /**
             * @description The custom domain status
             * @example READY
             */
            status: string;
        };
        /**
         * @description Commands and arguments to run in the container
         * @example {
         *       "args": [
         *         "-d",
         *         "mysql"
         *       ],
         *       "commands": [
         *         "echo",
         *         "Hello, World!"
         *       ]
         *     }
         */
        CustomImageCommandsAndArgs: {
            /**
             * @description Arguments to pass to the container
             * @example [
             *       "-d",
             *       "mysql"
             *     ]
             */
            args?: string[];
            /**
             * @description Commands to run in the container
             * @example [
             *       "echo",
             *       "Hello, World!"
             *     ]
             */
            commands?: string[];
        };
        /** @example {
         *       "cidr": "10.0.0.0/16",
         *       "cloudProviderName": "aws",
         *       "cloudProviderRegion": "us-east-1",
         *       "id": "n-12345678",
         *       "name": "Prod us-east-1",
         *       "networkDefinitionType": "Custom",
         *       "networkFeaturesConfiguration": {
         *         "isPrivateLinkEnabled": true
         *       },
         *       "networkInstances": [
         *         {
         *           "awsAccountID": "123456789012",
         *           "cloudProviderNativeNetworkId": "vpc-12345678",
         *           "gcpProjectID": "my-project",
         *           "gcpProjectNumber": "123456789012",
         *           "hostClusterID": "hc-12345678"
         *         },
         *         {
         *           "awsAccountID": "123456789012",
         *           "cloudProviderNativeNetworkId": "vpc-12345678",
         *           "gcpProjectID": "my-project",
         *           "gcpProjectNumber": "123456789012",
         *           "hostClusterID": "hc-12345678"
         *         },
         *         {
         *           "awsAccountID": "123456789012",
         *           "cloudProviderNativeNetworkId": "vpc-12345678",
         *           "gcpProjectID": "my-project",
         *           "gcpProjectNumber": "123456789012",
         *           "hostClusterID": "hc-12345678"
         *         }
         *       ]
         *     } */
        CustomNetwork: {
            /**
             * @description CIDR block for the network
             * @default 10.0.0.0/16
             * @example 10.0.0.0/16
             */
            cidr: string;
            /**
             * @description The name of the cloud provider that the instance is running on.
             * @example aws
             */
            cloudProviderName: string;
            /**
             * @description The region of the cloud provider that the instance is running in.
             * @example us-east-1
             */
            cloudProviderRegion: string;
            /**
             * @description ID of a custom network
             * @example n-12345678
             */
            id: string;
            /**
             * @description User friendly network name to help distinguish networks with same CIDRs
             * @example Prod us-east-1
             */
            name?: string;
            /**
             * @description Type of the network definition
             * @example Custom
             */
            networkDefinitionType?: string;
            networkFeaturesConfiguration?: components["schemas"]["NetworkFeaturesConfiguration"];
            /**
             * @description List of network instances created within this custom network
             * @example [
             *       {
             *         "awsAccountID": "123456789012",
             *         "cloudProviderNativeNetworkId": "vpc-12345678",
             *         "gcpProjectID": "my-project",
             *         "gcpProjectNumber": "123456789012",
             *         "hostClusterID": "hc-12345678"
             *       },
             *       {
             *         "awsAccountID": "123456789012",
             *         "cloudProviderNativeNetworkId": "vpc-12345678",
             *         "gcpProjectID": "my-project",
             *         "gcpProjectNumber": "123456789012",
             *         "hostClusterID": "hc-12345678"
             *       },
             *       {
             *         "awsAccountID": "123456789012",
             *         "cloudProviderNativeNetworkId": "vpc-12345678",
             *         "gcpProjectID": "my-project",
             *         "gcpProjectNumber": "123456789012",
             *         "hostClusterID": "hc-12345678"
             *       },
             *       {
             *         "awsAccountID": "123456789012",
             *         "cloudProviderNativeNetworkId": "vpc-12345678",
             *         "gcpProjectID": "my-project",
             *         "gcpProjectNumber": "123456789012",
             *         "hostClusterID": "hc-12345678"
             *       }
             *     ]
             */
            networkInstances?: components["schemas"]["CustomNetworkInstance"][];
        };
        /** @example {
         *       "awsAccountID": "123456789012",
         *       "cloudProviderNativeNetworkId": "vpc-12345678",
         *       "gcpProjectID": "my-project",
         *       "gcpProjectNumber": "123456789012",
         *       "hostClusterID": "hc-12345678"
         *     } */
        CustomNetworkInstance: {
            /**
             * @description The AWS account ID
             * @example 123456789012
             */
            awsAccountID?: string;
            /**
             * @description The ID of the network within cloud provider account
             * @example vpc-12345678
             */
            cloudProviderNativeNetworkId?: string;
            /**
             * @description The GCP project ID
             * @example my-project
             */
            gcpProjectID?: string;
            /**
             * @description The GCP project number
             * @example 123456789012
             */
            gcpProjectNumber?: string;
            /**
             * @description The ID of the host cluster within the network
             * @example hc-12345678
             */
            hostClusterID?: string;
        };
        /**
         * @description Details of custom network used for instance
         * @example {
         *       "cidr": "10.177.0.0/16",
         *       "id": "n-12345678",
         *       "name": "Prod us-east-1"
         *     }
         */
        CustomNetworkResourceDetail: {
            /**
             * @description CIDR block of the network
             * @example 10.177.0.0/16
             */
            cidr?: string;
            /**
             * @description ID of a custom network
             * @example n-12345678
             */
            id?: string;
            /**
             * @description User friendly network name
             * @example Prod us-east-1
             */
            name?: string;
        };
        /** @example {
         *       "ULimitsName": "nofile",
         *       "ULimitsType": "Soft",
         *       "ULimitsValue": 1000
         *     } */
        CustomULimits: {
            /**
             * @description The name of the ulimit
             * @example nofile
             */
            ULimitsName: string;
            /**
             * @description The type of the ulimit
             * @example Soft
             */
            ULimitsType: string;
            /**
             * Format: int64
             * @description The value of the ulimit
             * @example 1000
             */
            ULimitsValue: number;
        };
        /** @example {
         *       "authorizationCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
         *       "companyDescription": "We sell xyz database software",
         *       "companyUrl": "https://www.mywebsite.com",
         *       "environmentType": "DEV",
         *       "identityProviderName": "Google",
         *       "invitedEmail": "abc@gmail.com",
         *       "legalCompanyName": "mywebsite",
         *       "redirectUri": "https://www.example/redirect"
         *     } */
        CustomerLoginWithIdentityProviderRequestBody: {
            /**
             * @description The authorization code from the Identity Provider
             * @example 4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&
             */
            authorizationCode: string;
            /** @example We sell xyz database software */
            companyDescription?: string;
            /** @example https://www.mywebsite.com */
            companyUrl?: string;
            /**
             * @description The environment type of the portal that the customer is signing in to
             * @example DEV
             */
            environmentType?: string;
            /**
             * @description The name of the Identity Provider
             * @example Google
             */
            identityProviderName: string;
            /**
             * Format: email
             * @description Email address that the user was invited with
             * @example abc@gmail.com
             */
            invitedEmail?: string;
            /** @example mywebsite */
            legalCompanyName?: string;
            /**
             * @description The redirect URI used to get the authorization code
             * @example https://www.example/redirect
             */
            redirectUri?: string;
        };
        /** @example {
         *       "email": "abc@gmail.com",
         *       "environmentType": "DEV",
         *       "hashedPassword": "deprecated",
         *       "password": "password"
         *     } */
        CustomerSigninRequestBody: {
            /**
             * Format: email
             * @example abc@gmail.com
             */
            email: string;
            /**
             * @description The environment type of the portal that the customer is signing in to
             * @example DEV
             */
            environmentType?: string;
            /** @example deprecated */
            hashedPassword?: string;
            /** @example password */
            password?: string;
        };
        /** @example {
         *       "company": "ABC",
         *       "email": "abc@gmail.com",
         *       "name": "John Doe",
         *       "phone": "+1-234567890"
         *     } */
        DemoRequestBody: {
            /** @example ABC */
            company: string;
            /**
             * Format: email
             * @example abc@gmail.com
             */
            email: string;
            /** @example John Doe */
            name: string;
            /** @example +1-234567890 */
            phone?: string;
        };
        /** @example {
         *       "scope": "CLUSTER",
         *       "type": "ADD"
         *     } */
        DeregisterActionHookRequestBody: {
            /**
             * @description The scope of the hook
             * @example CLUSTER
             */
            scope: string;
            /**
             * @description The type of hook to execute
             * @example ADD
             */
            type: string;
        };
        /** @example {
         *       "awsAccountID": "123456789012",
         *       "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
         *       "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
         *       "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
         *       "byoaInstanceIDs": [
         *         "instance-12345678",
         *         "instance-abcdefgh"
         *       ],
         *       "cloudProviderId": "infra-12345678",
         *       "description": "An AWS account hosting multiple dev environments",
         *       "id": "ac-12345678",
         *       "name": "Dev AWS account",
         *       "status": "READY",
         *       "statusMessage": "Account is ready"
         *     } */
        DescribeAccountConfigByAWSAccountIDResult: {
            /**
             * @description The AWS account ID
             * @example 123456789012
             */
            awsAccountID: string;
            /**
             * @description The security role ARN or service account ARN that grants access to operate the infra
             * @example arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>
             */
            awsBootstrapRoleARN: string;
            /**
             * @description The URL to the CloudFormation template (no LoadBalancer policy version)
             * @example https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml
             */
            awsCloudFormationNoLBTemplateURL?: string;
            /**
             * @description The URL to the CloudFormation template
             * @example https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml
             */
            awsCloudFormationTemplateURL?: string;
            /**
             * @description The BYOA instance IDs that this account config is tied to
             * @example [
             *       "instance-12345678",
             *       "instance-abcdefgh"
             *     ]
             */
            byoaInstanceIDs?: string[];
            /**
             * @description Cloud Provider ID to operate on
             * @example infra-12345678
             */
            cloudProviderId: string;
            /**
             * @description The description for the account
             * @example An AWS account hosting multiple dev environments
             */
            description: string;
            /**
             * @description Account Config ID to operate on
             * @example ac-12345678
             */
            id: string;
            /**
             * @description The name of the account
             * @example Dev AWS account
             */
            name: string;
            /**
             * @description The status of the account
             * @example READY
             */
            status: string;
            /**
             * @description The status message of the account
             * @example Account is ready
             */
            statusMessage: string;
        };
        /** @example {
         *       "byoaInstanceIDs": [
         *         "instance-12345678",
         *         "instance-abcdefgh"
         *       ],
         *       "cloudProviderId": "infra-12345678",
         *       "description": "An AWS account hosting multiple dev environments",
         *       "gcpProjectID": "my-project",
         *       "gcpProjectNumber": "123456789012",
         *       "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
         *       "id": "ac-12345678",
         *       "name": "Dev AWS account",
         *       "status": "READY",
         *       "statusMessage": "Account is ready"
         *     } */
        DescribeAccountConfigByGCPProjectIDResult: {
            /**
             * @description The BYOA instance IDs that this account config is tied to
             * @example [
             *       "instance-12345678",
             *       "instance-abcdefgh"
             *     ]
             */
            byoaInstanceIDs?: string[];
            /**
             * @description Cloud Provider ID to operate on
             * @example infra-12345678
             */
            cloudProviderId: string;
            /**
             * @description The description for the account
             * @example An AWS account hosting multiple dev environments
             */
            description: string;
            /**
             * @description The GCP project ID
             * @example my-project
             */
            gcpProjectID: string;
            /**
             * @description The GCP project number
             * @example 123456789012
             */
            gcpProjectNumber: string;
            /**
             * @description The GCP service account email
             * @example bootstrap@my-project.iam.gserviceaccount.com
             */
            gcpServiceAccountEmail: string;
            /**
             * @description Account Config ID to operate on
             * @example ac-12345678
             */
            id: string;
            /**
             * @description The name of the account
             * @example Dev AWS account
             */
            name: string;
            /**
             * @description The status of the account
             * @example READY
             */
            status: string;
            /**
             * @description The status message of the account
             * @example Account is ready
             */
            statusMessage: string;
        };
        /** @example {
         *       "awsAccountID": "123456789012",
         *       "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
         *       "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
         *       "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
         *       "byoaInstanceIDs": [
         *         "instance-12345678",
         *         "instance-abcdefgh"
         *       ],
         *       "cloudProviderId": "infra-12345678",
         *       "description": "An AWS account hosting multiple dev environments",
         *       "gcpProjectID": "my-project",
         *       "gcpProjectNumber": "123456789012",
         *       "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
         *       "id": "ac-12345678",
         *       "name": "Dev AWS account",
         *       "status": "READY",
         *       "statusMessage": "Account is ready"
         *     } */
        DescribeAccountConfigResult: {
            /**
             * @description The AWS account ID
             * @example 123456789012
             */
            awsAccountID?: string;
            /**
             * @description The security role ARN or service account ARN that grants access to operate the infra
             * @example arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>
             */
            awsBootstrapRoleARN?: string;
            /**
             * @description The URL to the CloudFormation template (no LoadBalancer policy version)
             * @example https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml
             */
            awsCloudFormationNoLBTemplateURL?: string;
            /**
             * @description The URL to the CloudFormation template
             * @example https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml
             */
            awsCloudFormationTemplateURL?: string;
            /**
             * @description The BYOA instance IDs that this account config is tied to
             * @example [
             *       "instance-12345678",
             *       "instance-abcdefgh"
             *     ]
             */
            byoaInstanceIDs?: string[];
            /**
             * @description Cloud Provider ID to operate on
             * @example infra-12345678
             */
            cloudProviderId: string;
            /**
             * @description The description for the account
             * @example An AWS account hosting multiple dev environments
             */
            description: string;
            /**
             * @description The GCP project ID
             * @example my-project
             */
            gcpProjectID?: string;
            /**
             * @description The GCP project number
             * @example 123456789012
             */
            gcpProjectNumber?: string;
            /**
             * @description The GCP service account email
             * @example bootstrap@my-project.iam.gserviceaccount.com
             */
            gcpServiceAccountEmail?: string;
            /**
             * @description Account Config ID to operate on
             * @example ac-12345678
             */
            id: string;
            /**
             * @description The name of the account
             * @example Dev AWS account
             */
            name: string;
            /**
             * @description The status of the account
             * @example READY
             */
            status: string;
            /**
             * @description The status message of the account
             * @example Account is ready
             */
            statusMessage: string;
        };
        /** @example {
         *       "eventSource": "Customer, Infra or Maintenance",
         *       "id": "event-12345678",
         *       "message": "instance-abcd1234 created",
         *       "orgId": "org-12345678",
         *       "orgName": "Acme Corporation",
         *       "resourceInstanceId": "instance-abcd1234",
         *       "resourceName": "Galera",
         *       "subscriptionId": "sub-abcd1234",
         *       "time": "2023-01-10T00:00:00Z",
         *       "userId": "user-12345678",
         *       "userName": "John Doe",
         *       "workflowFailures": [
         *         {
         *           "eventTime": "2020-01-01T00:00:00Z",
         *           "message": "Bootstrap failed for reason X"
         *         },
         *         {
         *           "eventTime": "2020-01-01T00:01:00Z",
         *           "message": "Compute failed for reason Y"
         *         }
         *       ]
         *     } */
        DescribeAuditEventResult: {
            /**
             * @description The event source
             * @example Customer, Infra or Maintenance
             */
            eventSource?: string;
            /**
             * @description The ID of the event
             * @example event-12345678
             */
            id: string;
            /**
             * @description Resource Instance of message
             * @example instance-abcd1234 created
             */
            message: string;
            /**
             * @description The organization ID of the user that caused the event
             * @example org-12345678
             */
            orgId?: string;
            /**
             * @description The organization name of the user that caused the event
             * @example Acme Corporation
             */
            orgName?: string;
            /**
             * @description Instance Id of the resource instance
             * @example instance-abcd1234
             */
            resourceInstanceId: string;
            /**
             * @description Name of the resource
             * @example Galera
             */
            resourceName: string;
            /**
             * @description The subscription ID
             * @example sub-abcd1234
             */
            subscriptionId: string;
            /**
             * @description The event time
             * @example 2023-01-10T00:00:00Z
             */
            time: string;
            /**
             * @description The ID of the user that caused the event
             * @example user-12345678
             */
            userId?: string;
            /**
             * @description The user name of the user that caused the event
             * @example John Doe
             */
            userName?: string;
            /**
             * @description The list of workflow events that indicate failures
             * @example [
             *       {
             *         "eventTime": "2020-01-01T00:00:00Z",
             *         "message": "Bootstrap failed for reason X"
             *       },
             *       {
             *         "eventTime": "2020-01-01T00:01:00Z",
             *         "message": "Compute failed for reason Y"
             *       }
             *     ]
             */
            workflowFailures?: components["schemas"]["WorkflowFailure"][];
        };
        /** @example {
         *       "cloudProviderName": "aws",
         *       "code": "us-east-1a",
         *       "description": "US East (N. Virginia) Availability Zone A",
         *       "id": "az-12345678",
         *       "regionCode": "us-east-1"
         *     } */
        DescribeAvailabilityZoneResult: {
            /**
             * @description The cloud provider for this compute instance type config
             * @example aws
             */
            cloudProviderName: string;
            /**
             * @description Cloud-provider native availability zone code
             * @example us-east-1a
             */
            code: string;
            /**
             * @description Description of the AvailabilityZone
             * @example US East (N. Virginia) Availability Zone A
             */
            description: string;
            /** @example az-12345678 */
            id: string;
            /**
             * @description Cloud-provider native region code
             * @example us-east-1
             */
            regionCode: string;
        };
        /** @example {
         *       "description": "Amazon Web Services",
         *       "id": "infra-12345678",
         *       "name": "aws"
         *     } */
        DescribeCloudProviderResult: {
            /**
             * @description Description of the CloudProvider
             * @example Amazon Web Services
             */
            description: string;
            /**
             * @description ID of the CloudProvider
             * @example infra-12345678
             */
            id: string;
            /**
             * @description Name of the CloudProvider
             * @example aws
             */
            name: string;
        };
        /** @example {
         *       "autoscalingPolicy": {
         *         "maxReplicas": 4,
         *         "minReplicas": 1
         *       },
         *       "cpuArchitecture": "X86_64|ARM64",
         *       "description": "my compute config description",
         *       "id": "cc-12345678",
         *       "infraConfigIDs": [
         *         "ic-12345678",
         *         "ic-abcdefgh"
         *       ],
         *       "instanceTypes": {
         *         "aws": [
         *           "t3.micro",
         *           "t3.small"
         *         ],
         *         "azure": [
         *           "Standard_B1ls",
         *           "Standard_B1ms"
         *         ],
         *         "gcp": [
         *           "$var.instance_type"
         *         ]
         *       },
         *       "name": "my compute config",
         *       "replicaCount": "3",
         *       "resources": {
         *         "limits": {
         *           "cpu": "1",
         *           "memory": "500Mi"
         *         },
         *         "requests": {
         *           "cpu": "0.5",
         *           "memory": "200Mi"
         *         }
         *       },
         *       "rootVolumeSizeGi": 10,
         *       "serviceId": "s-12345678",
         *       "warmPoolConfiguration": {
         *         "minimumNodesInPool": 1
         *       }
         *     } */
        DescribeComputeConfigResult: {
            autoscalingPolicy?: components["schemas"]["AutoscalingPolicy"];
            /**
             * @description Processor architecture
             * @example X86_64|ARM64
             */
            cpuArchitecture?: string;
            /**
             * @description Description of the compute config
             * @example my compute config description
             */
            description: string;
            /**
             * @description ID of the compute config
             * @example cc-12345678
             */
            id: string;
            /**
             * @description The list of infra config IDs associated with the compute config.
             * @example [
             *       "ic-12345678",
             *       "ic-abcdefgh"
             *     ]
             */
            infraConfigIDs?: string[];
            /**
             * @description The instance types for this compute config
             * @example {
             *       "aws": [
             *         "t3.micro",
             *         "t3.small"
             *       ],
             *       "azure": [
             *         "Standard_B1ls",
             *         "Standard_B1ms"
             *       ],
             *       "gcp": [
             *         "$var.instance_type"
             *       ]
             *     }
             */
            instanceTypes?: {
                [key: string]: string[];
            };
            /**
             * @description Name of the compute config
             * @example my compute config
             */
            name: string;
            /**
             * @description Number of replicas to provision for this logical pool of nodes per instance of the resource
             * @example 3
             */
            replicaCount: string;
            resources?: components["schemas"]["ResourceSpec"];
            /**
             * Format: int64
             * @description Size of the root volume in Gi
             * @example 10
             */
            rootVolumeSizeGi?: number;
            /**
             * @description The service ID
             * @example s-12345678
             */
            serviceId: string;
            warmPoolConfiguration?: components["schemas"]["WarmPoolConfiguration"];
        };
        /** @example {
         *       "customDomain": "mydomain.dev",
         *       "description": "Description of the domain",
         *       "id": "cd-12345678",
         *       "name": "Dev domain",
         *       "route53Configuration": {
         *         "awsAccountID": "123456789012",
         *         "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
         *       },
         *       "status": "READY",
         *       "statusMessage": "Account is ready"
         *     } */
        DescribeCustomDomainResult: {
            /**
             * @description The root domain of the domain to use as suffix
             * @example mydomain.dev
             */
            customDomain: string;
            /**
             * @description The description for the domain
             * @example Description of the domain
             */
            description: string;
            /**
             * @description custom domain ID to operate on
             * @example cd-12345678
             */
            id: string;
            /**
             * @description The name of the custom domain
             * @example Dev domain
             */
            name: string;
            route53Configuration: components["schemas"]["Route53ConfigurationDescription"];
            /**
             * @description The status of the custom domain
             * @example READY
             */
            status?: string;
            /**
             * @description The status message of the custom domain
             * @example Account is ready
             */
            statusMessage?: string;
        };
        /** @example {
         *       "description": "A production deployment config",
         *       "id": "dc-12345678",
         *       "infraRollConfiguration": {
         *         "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
         *         "maximumNumberOfResourceInstancesPerBatch": 1,
         *         "maximumUnavailableReplicas": 1
         *       },
         *       "name": "Production",
         *       "rolloutPriorityList": [
         *         "region-12345678",
         *         "region-abcd1234",
         *         "region-3c3c3c3c"
         *       ]
         *     } */
        DescribeDeploymentConfigResult: {
            /**
             * @description A brief description of the deployment config
             * @example A production deployment config
             */
            description: string;
            /**
             * @description The deployment configuration ID
             * @example dc-12345678
             */
            id: string;
            infraRollConfiguration: components["schemas"]["InfraRollConfiguration"];
            /**
             * @description Name of the deployment config
             * @example Production
             */
            name: string;
            /** @example [
             *       "region-12345678",
             *       "region-abcd1234",
             *       "region-3c3c3c3c"
             *     ] */
            rolloutPriorityList: string[];
        };
        /** @example {
         *       "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
         *       "clientSecret": "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",
         *       "id": "idp-12345678",
         *       "identityProviderName": "Google",
         *       "status": "Ready"
         *     } */
        DescribeIdentityProviderResult: {
            /**
             * @description The Client ID of the Identity Provider
             * @example 205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com
             */
            clientId: string;
            /**
             * @description The Client Secret of the Identity Provider
             * @example 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
             */
            clientSecret?: string;
            /**
             * @description The Identity Provider ID
             * @example idp-12345678
             */
            id: string;
            /**
             * @description The name of the Identity Provider
             * @example Google
             */
            identityProviderName: string;
            /**
             * @description The status of the Identity Provider
             * @example Ready
             */
            status: string;
        };
        /** @example {
         *       "customImageCommandsAndArgs": {
         *         "args": [
         *           "-d",
         *           "mysql"
         *         ],
         *         "commands": [
         *           "echo",
         *           "Hello, World!"
         *         ]
         *       },
         *       "description": "An image configuration for my new entity",
         *       "id": "imgc-12345678",
         *       "imageName": "mysql",
         *       "imageRegistryId": "ir-12345678",
         *       "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
         *       "imageTag": "v1",
         *       "serviceEnvironmentId": "se-12345678",
         *       "serviceId": "s-12345678"
         *     } */
        DescribeImageConfigResult: {
            customImageCommandsAndArgs?: components["schemas"]["CustomImageCommandsAndArgs"];
            /**
             * @description A brief description of the image configuration
             * @example An image configuration for my new entity
             */
            description: string;
            /**
             * @description The image configuration ID
             * @example imgc-12345678
             */
            id: string;
            /**
             * @description Name of the container image
             * @example mysql
             */
            imageName: string;
            /**
             * @description The image registry ID to use for the infra
             * @example ir-12345678
             */
            imageRegistryId: string;
            /**
             * @description PEM-encoded Public key part of the key used to sign the container image
             * @example -----BEGIN PUBLIC KEY-----
             *     MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT
             *     7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==
             *     -----END PUBLIC KEY-----
             *
             */
            imageSignaturePublicKeyPEM?: string;
            /**
             * @description Tag representing the software image version that is currently preferred
             * @default latest
             * @example v1
             */
            imageTag: string;
            /**
             * @description The service environment ID
             * @example se-12345678
             */
            serviceEnvironmentId: string;
            /**
             * @description The service ID
             * @example s-12345678
             */
            serviceId: string;
        };
        /** @example {
         *       "description": "DockerHub is a public Docker Image Registry",
         *       "host": "docker.io",
         *       "id": "ir-12345678",
         *       "name": "DockerHub",
         *       "password": "mypassword",
         *       "username": "myusername"
         *     } */
        DescribeImageRegistryResult: {
            /**
             * @description A brief description of the Image Registry
             * @example DockerHub is a public Docker Image Registry
             */
            description: string;
            /**
             * @description The Image Registry host
             * @example docker.io
             */
            host: string;
            /**
             * @description The ID of the Image Registry
             * @example ir-12345678
             */
            id: string;
            /**
             * @description Name of the Image Registry
             * @example DockerHub
             */
            name: string;
            /**
             * @description The password to use when authenticating to the Image Registry
             * @example mypassword
             */
            password?: string;
            /**
             * @description The username to use when authenticating to the Image Registry
             * @example myusername
             */
            username?: string;
        };
        /** @example {
         *       "computeConfigId": "cc-12345678",
         *       "customTag": {
         *         "key": "customKey",
         *         "value": "customValue"
         *       },
         *       "description": "Infra config used for the base tier MySQL service",
         *       "id": "ic-12345678",
         *       "name": "MySQL Writer Infra Config",
         *       "networkConfigId": "nc-12345678",
         *       "serviceEnvironmentId": "se-12345678",
         *       "serviceId": "s-12345678",
         *       "storageConfigId": "sc-12345678"
         *     } */
        DescribeInfraConfigResult: {
            /**
             * @description The compute config ID
             * @example cc-12345678
             */
            computeConfigId?: string;
            customTag?: components["schemas"]["EnvironmentVariable"];
            /**
             * @description The description for the infra config
             * @example Infra config used for the base tier MySQL service
             */
            description: string;
            /**
             * @description Infra Config ID to operate on
             * @example ic-12345678
             */
            id: string;
            /**
             * @description The name of the infra config
             * @example MySQL Writer Infra Config
             */
            name: string;
            /**
             * @description The network config ID
             * @example nc-12345678
             */
            networkConfigId?: string;
            /**
             * @description The service environment ID
             * @example se-12345678
             */
            serviceEnvironmentId: string;
            /**
             * @description The service ID
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The storage config ID
             * @example sc-12345678
             */
            storageConfigId?: string;
        };
        /** @example {
         *       "defaultValue": "true",
         *       "dependentResourceId": "r-12345678",
         *       "description": "Sint consequatur consequuntur consequatur.",
         *       "hasOptions": false,
         *       "id": "var-12345678",
         *       "isList": true,
         *       "key": "kxl",
         *       "labeledOptions": {
         *         "large": "t3.xlarge",
         *         "medium": "t3.large",
         *         "small": "t3.medium"
         *       },
         *       "limits": {
         *         "max": "Blanditiis voluptas.",
         *         "maxLength": "Et error sequi et dignissimos illo.",
         *         "min": "Et consequatur dolor est saepe velit voluptas.",
         *         "minLength": "Ad suscipit aut ut suscipit voluptatem."
         *       },
         *       "modifiable": false,
         *       "name": "k3",
         *       "options": [
         *         "true",
         *         "false"
         *       ],
         *       "required": true,
         *       "resourceId": "r-12345678",
         *       "serviceId": "s-12345678",
         *       "type": "Officia distinctio quia nulla assumenda occaecati."
         *     } */
        DescribeInputParameterResult: {
            /**
             * @description Default value to use for an optional input parameter represented as a string
             * @example true
             */
            defaultValue?: string;
            /**
             * @description The ID of the resource whose instance this input parameter depends on
             * @example r-12345678
             */
            dependentResourceId?: string;
            /**
             * @description A brief description of the input parameter
             * @example Omnis rerum magnam minima.
             */
            description: string;
            /**
             * @description Marks the input parameter to be selectable from a list of values
             * @default false
             * @example true
             */
            hasOptions: boolean;
            /**
             * @description ID of the input parameter
             * @example var-12345678
             */
            id: string;
            /**
             * @description Marks the input parameter as a list of values
             * @default false
             * @example false
             */
            isList: boolean;
            /**
             * @description Key of the input parameter
             * @example 95l
             */
            key: string;
            /**
             * @description A map for labeled options. The key is the label and the value is the option. When the option is selected, the label will be displayed to the end customer.
             * @example {
             *       "large": "t3.xlarge",
             *       "medium": "t3.large",
             *       "small": "t3.medium"
             *     }
             */
            labeledOptions?: {
                [key: string]: string;
            };
            limits?: components["schemas"]["Limits"];
            /**
             * @description Marks the input parameter as immutable
             * @example true
             */
            modifiable: boolean;
            /**
             * @description External name for the input parameter
             * @example z
             */
            name: string;
            /**
             * @description A list of options to restrict the value of the input parameter to (represented as a string)
             * @example [
             *       "true",
             *       "false"
             *     ]
             */
            options?: string[];
            /**
             * @description Enforces the input parameter as a required parameter
             * @example false
             */
            required: boolean;
            /**
             * @description The ID of the resource that this input parameter belongs to
             * @example r-12345678
             */
            resourceId: string;
            /**
             * @description The ID of the service that this output parameter belongs to
             * @example s-12345678
             */
            serviceId: string;
            /** @example Accusantium vel et temporibus quibusdam possimus. */
            type: string;
        };
        /** @example {
         *       "description": "A premium limit",
         *       "family": "COMPUTE_INFRA",
         *       "key": "MAX_VIRTUAL_CORES_PER_RESOURCE",
         *       "modifiable": true,
         *       "name": "Premium Tier",
         *       "value": 4
         *     } */
        DescribeLimitResult: {
            /**
             * @description A brief description of the limit
             * @example A premium limit
             */
            description: string;
            /**
             * @description Limit family
             * @example COMPUTE_INFRA
             */
            family: string;
            /**
             * @description Unique key to identify the limit
             * @example MAX_VIRTUAL_CORES_PER_RESOURCE
             */
            key: string;
            /**
             * @description Whether the limit can be modified
             * @example true
             */
            modifiable: boolean;
            /**
             * @description Name of the limit
             * @example Premium Tier
             */
            name: string;
            /**
             * Format: int64
             * @description Value of the limit being enforced
             * @example 4
             */
            value: number;
        };
        /** @example {
         *       "description": "A multi-zone HA network config",
         *       "endpointPerReplica": true,
         *       "id": "nc-12345678",
         *       "infraConfigIDs": [
         *         "ic-12345678",
         *         "ic-abcdefgh"
         *       ],
         *       "internal": true,
         *       "name": "Multi-zone",
         *       "openPorts": [
         *         1299,
         *         3306
         *       ],
         *       "privateNetworkingConfiguration": {
         *         "privateLinkConfiguration": {
         *           "awsPrivateLinkConfigurations": [
         *             {
         *               "port": 80,
         *               "targetGroupName": "my-target-group"
         *             },
         *             {
         *               "port": 80,
         *               "targetGroupName": "my-target-group"
         *             },
         *             {
         *               "port": 80,
         *               "targetGroupName": "my-target-group"
         *             }
         *           ]
         *         }
         *       },
         *       "publicNetworkingConfiguration": {
         *         "enableClusterLoadBalancer": true,
         *         "enableNodeLoadBalancer": true
         *       },
         *       "serviceId": "s-12345678",
         *       "stableEgressIP": true,
         *       "tlsTerminationPort": 443,
         *       "zoneConfiguration": "Exercitationem et rem et cupiditate."
         *     } */
        DescribeNetworkConfigResult: {
            /**
             * @description A brief description of the network config
             * @example A multi-zone HA network config
             */
            description: string;
            /**
             * @description Generates a DNS endpoint per-replica for this network config
             * @example true
             */
            endpointPerReplica: boolean;
            /**
             * @description The ID of the network config
             * @example nc-12345678
             */
            id: string;
            /**
             * @description The list of infra config IDs associated with the compute config.
             * @example [
             *       "ic-12345678",
             *       "ic-abcdefgh"
             *     ]
             */
            infraConfigIDs?: string[];
            /**
             * @description Restrict access to this network config to the internal network
             * @example true
             */
            internal: boolean;
            /**
             * @description Name of the network config
             * @example Multi-zone
             */
            name: string;
            /**
             * @description Ports to map to the generated DNS endpoint
             * @example [
             *       1299,
             *       3306
             *     ]
             */
            openPorts: number[];
            privateNetworkingConfiguration?: components["schemas"]["PrivateNetworkingConfiguration"];
            publicNetworkingConfiguration?: components["schemas"]["PublicNetworkingConfiguration"];
            /**
             * @description The ID of the service
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description Create an external node load balancer per node rather than expose the node ip directly
             * @example true
             */
            stableEgressIP: boolean;
            /**
             * Format: int64
             * @description The port that hosts the reverse proxy for TLS termination
             * @example 443
             */
            tlsTerminationPort?: number;
            /** @example Accusantium possimus commodi. */
            zoneConfiguration: string;
        };
        /** @example {
         *       "cidr": "10.0.0.0/16",
         *       "id": "n-12345678",
         *       "networkConfigId": "nc-12345678",
         *       "serviceId": "s-12345678",
         *       "type": "PUBLIC",
         *       "vunitId": "vu-12345678"
         *     } */
        DescribeNetworkResult: {
            /**
             * @description CIDR block for the network
             * @example 10.0.0.0/16
             */
            cidr?: string;
            /**
             * @description Network to operate on
             * @example n-12345678
             */
            id?: string;
            /**
             * @description Network config ID for the network
             * @example nc-12345678
             */
            networkConfigId?: string;
            /**
             * @description Service ID context
             * @example s-12345678
             */
            serviceId?: string;
            /**
             * @description The type of network
             * @example PUBLIC
             */
            type?: string;
            /**
             * @description VUnit ID for the Network
             * @example vu-12345678
             */
            vunitId?: string;
        };
        /** @example {
         *       "description": "Username of the user created in the target system",
         *       "id": "op-12345678",
         *       "key": "username",
         *       "name": "Username",
         *       "resourceId": "r-12345678",
         *       "serviceId": "s-12345678",
         *       "value": "johndoe",
         *       "valueRef": "$var.username",
         *       "valueType": "Velit tempora at ex."
         *     } */
        DescribeOutputParameterResult: {
            /**
             * @description Description of the output variable being exported
             * @example Username of the user created in the target system
             */
            description: string;
            /**
             * @description The ID of the output parameter
             * @example op-12345678
             */
            id: string;
            /**
             * @description Key of the output variable being exported
             * @example username
             */
            key: string;
            /**
             * @description External name of the output variable being exported
             * @example Username
             */
            name: string;
            /**
             * @description The ID of the resource that this input parameter belongs to
             * @example r-12345678
             */
            resourceId: string;
            /**
             * @description The ID of the service that this output parameter belongs to
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description Value of the output variable being exported
             * @example johndoe
             */
            value?: string;
            /**
             * @description Reference to an input variable that will be used to set the value of the output variable being exported
             * @example $var.username
             */
            valueRef?: string;
            /** @example Ipsa dolores sint. */
            valueType?: string;
        };
        /** @example {
         *       "id": "sa-12345678",
         *       "resourceChangeSets": {
         *         "Ad commodi ducimus eligendi inventore ea tenetur.": {
         *           "categorizedResourceChanges": {
         *             "Quo amet explicabo.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             },
         *             "Ut deserunt voluptate vel necessitatibus.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             },
         *             "Vitae omnis molestiae eaque id.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             }
         *           },
         *           "imageConfigChanges": {
         *             "changeState": "PENDING_NEW",
         *             "imageConfigId": "imgc-12345678",
         *             "imageName": "mysql"
         *           },
         *           "infraConfigChanges": {
         *             "changeState": "PENDING_NEW",
         *             "infraConfigId": "ic-12345678",
         *             "name": "MySQL Writer Infra Config"
         *           },
         *           "overallResourceStatus": "PENDING_UPDATE",
         *           "productTierFeatureChanges": "PENDING_UPDATE",
         *           "resourceChanges": "PENDING_DELETE",
         *           "resourceName": "Inventore commodi quasi consequatur."
         *         },
         *         "Autem dolorem molestiae numquam eius consectetur.": {
         *           "categorizedResourceChanges": {
         *             "Quo amet explicabo.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             },
         *             "Ut deserunt voluptate vel necessitatibus.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             },
         *             "Vitae omnis molestiae eaque id.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             }
         *           },
         *           "imageConfigChanges": {
         *             "changeState": "PENDING_NEW",
         *             "imageConfigId": "imgc-12345678",
         *             "imageName": "mysql"
         *           },
         *           "infraConfigChanges": {
         *             "changeState": "PENDING_NEW",
         *             "infraConfigId": "ic-12345678",
         *             "name": "MySQL Writer Infra Config"
         *           },
         *           "overallResourceStatus": "PENDING_UPDATE",
         *           "productTierFeatureChanges": "PENDING_UPDATE",
         *           "resourceChanges": "PENDING_DELETE",
         *           "resourceName": "Inventore commodi quasi consequatur."
         *         },
         *         "Modi provident.": {
         *           "categorizedResourceChanges": {
         *             "Quo amet explicabo.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             },
         *             "Ut deserunt voluptate vel necessitatibus.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             },
         *             "Vitae omnis molestiae eaque id.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             }
         *           },
         *           "imageConfigChanges": {
         *             "changeState": "PENDING_NEW",
         *             "imageConfigId": "imgc-12345678",
         *             "imageName": "mysql"
         *           },
         *           "infraConfigChanges": {
         *             "changeState": "PENDING_NEW",
         *             "infraConfigId": "ic-12345678",
         *             "name": "MySQL Writer Infra Config"
         *           },
         *           "overallResourceStatus": "PENDING_UPDATE",
         *           "productTierFeatureChanges": "PENDING_UPDATE",
         *           "resourceChanges": "PENDING_DELETE",
         *           "resourceName": "Inventore commodi quasi consequatur."
         *         }
         *       },
         *       "serviceId": "s-12345678"
         *     } */
        DescribePendingChangesResult: {
            /**
             * @description The service API ID
             * @example sa-12345678
             */
            id: string;
            /**
             * @description The difference for the service API configuration per resource
             * @example {
             *       "In fuga laborum alias et nostrum inventore.": {
             *         "categorizedResourceChanges": {
             *           "Quo amet explicabo.": {
             *             "changes": [
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               },
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               }
             *             ],
             *             "status": "PENDING_UPDATE"
             *           },
             *           "Ut deserunt voluptate vel necessitatibus.": {
             *             "changes": [
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               },
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               }
             *             ],
             *             "status": "PENDING_UPDATE"
             *           },
             *           "Vitae omnis molestiae eaque id.": {
             *             "changes": [
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               },
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               }
             *             ],
             *             "status": "PENDING_UPDATE"
             *           }
             *         },
             *         "imageConfigChanges": {
             *           "changeState": "PENDING_NEW",
             *           "imageConfigId": "imgc-12345678",
             *           "imageName": "mysql"
             *         },
             *         "infraConfigChanges": {
             *           "changeState": "PENDING_NEW",
             *           "infraConfigId": "ic-12345678",
             *           "name": "MySQL Writer Infra Config"
             *         },
             *         "overallResourceStatus": "PENDING_UPDATE",
             *         "productTierFeatureChanges": "PENDING_UPDATE",
             *         "resourceChanges": "PENDING_DELETE",
             *         "resourceName": "Inventore commodi quasi consequatur."
             *       },
             *       "Saepe officiis deleniti unde id commodi et.": {
             *         "categorizedResourceChanges": {
             *           "Quo amet explicabo.": {
             *             "changes": [
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               },
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               }
             *             ],
             *             "status": "PENDING_UPDATE"
             *           },
             *           "Ut deserunt voluptate vel necessitatibus.": {
             *             "changes": [
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               },
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               }
             *             ],
             *             "status": "PENDING_UPDATE"
             *           },
             *           "Vitae omnis molestiae eaque id.": {
             *             "changes": [
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               },
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               }
             *             ],
             *             "status": "PENDING_UPDATE"
             *           }
             *         },
             *         "imageConfigChanges": {
             *           "changeState": "PENDING_NEW",
             *           "imageConfigId": "imgc-12345678",
             *           "imageName": "mysql"
             *         },
             *         "infraConfigChanges": {
             *           "changeState": "PENDING_NEW",
             *           "infraConfigId": "ic-12345678",
             *           "name": "MySQL Writer Infra Config"
             *         },
             *         "overallResourceStatus": "PENDING_UPDATE",
             *         "productTierFeatureChanges": "PENDING_UPDATE",
             *         "resourceChanges": "PENDING_DELETE",
             *         "resourceName": "Inventore commodi quasi consequatur."
             *       }
             *     }
             */
            resourceChangeSets: {
                [key: string]: components["schemas"]["ChangeSet"];
            };
            /**
             * @description The service ID that this API bundle belongs to
             * @example s-12345678
             */
            serviceId: string;
        };
        /** @example {
         *       "modifiedAt": "2023-01-01T00:00:00Z",
         *       "nextChargeDate": "2023-02-01",
         *       "paymentConfigured": true,
         *       "paymentInfoPortalURL": "https://billing.paigo.com/stripe-portal?customerId=cus_xxxxxxxxxxxxxx",
         *       "planCoreHourCost": 0.05,
         *       "planDescription": "The starter plan is priced at 'X' units",
         *       "planFrequency": "MONTHLY",
         *       "planMonthlyCost": 49,
         *       "planName": "STARTER",
         *       "remainingCredits": "100",
         *       "startDate": "2023-01-01"
         *     } */
        DescribePlanResult: {
            /**
             * @description The time the plan was last modified
             * @example 2023-01-01T00:00:00Z
             */
            modifiedAt?: string;
            /**
             * @description The next day stripe will process a charge for this plan
             * @example 2023-02-01
             */
            nextChargeDate?: string;
            /**
             * @description Whether the customer has configured their payment information.
             * @example true
             */
            paymentConfigured?: boolean;
            /**
             * @description The URL from Paigo to redirect users to so they can enter their payment information.  Only present when first adding payment information
             * @example https://billing.paigo.com/stripe-portal?customerId=cus_xxxxxxxxxxxxxx
             */
            paymentInfoPortalURL?: string;
            /**
             * Format: double
             * @description The cost per core hour of this plan
             * @example 0.05
             */
            planCoreHourCost?: number;
            /**
             * @description The description of the plan
             * @example The starter plan is priced at 'X' units
             */
            planDescription?: string;
            /**
             * @description Whether the plan is charged monthly or yearly
             * @example MONTHLY
             */
            planFrequency?: string;
            /**
             * Format: double
             * @description The minimum monthly cost of this plan
             * @example 49
             */
            planMonthlyCost?: number;
            /**
             * @description The name of the plan this user is changing to
             * @example STARTER
             */
            planName: string;
            /**
             * @description The credits remaining for the customer for the customer in Paigo
             * @example 100
             */
            remainingCredits?: string;
            /**
             * @description The date that the plan starts
             * @example 2023-01-01
             */
            startDate?: string;
        };
        /** @example {
         *       "apiGroups": {
         *         "r-12345678": "v1",
         *         "r-23456789": "v2",
         *         "r-34567890": "v3"
         *       },
         *       "autoApproveSubscription": false,
         *       "awsRegions": [
         *         "us-east-2",
         *         "ca-central-1"
         *       ],
         *       "cloudProvidersConfigReadiness": {
         *         "aws": {
         *           "resourceA": "missing terraform configuration",
         *           "resourceB": "missing cloudformation configuration"
         *         }
         *       },
         *       "description": "A premium product tier",
         *       "documentation": "Any documentation",
         *       "enabledFeatures": [
         *         {
         *           "configuration": {
         *             "provider": "native"
         *           },
         *           "feature": "LOGS",
         *           "scope": "INTERNAL"
         *         },
         *         {
         *           "configuration": {
         *             "provider": "native"
         *           },
         *           "feature": "LOGS",
         *           "scope": "INTERNAL"
         *         },
         *         {
         *           "configuration": {
         *             "provider": "native"
         *           },
         *           "feature": "LOGS",
         *           "scope": "INTERNAL"
         *         }
         *       ],
         *       "features": {
         *         "BILLING": false,
         *         "LOGS": true,
         *         "METRICS": false
         *       },
         *       "gcpRegions": [
         *         "us-central1"
         *       ],
         *       "id": "pt-12345678",
         *       "isDisabled": false,
         *       "key": "premium",
         *       "name": "Premium",
         *       "planDescription": "A premium plan",
         *       "pricing": {
         *         "price1": "value1"
         *       },
         *       "serviceId": "s-12345678",
         *       "serviceModelId": "sm-12345678",
         *       "support": "Any support",
         *       "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *     } */
        DescribeProductTierResult: {
            /**
             * @description The resources that belong to this service API bundle and their active versions
             * @example {
             *       "r-12345678": "v1",
             *       "r-23456789": "v2",
             *       "r-34567890": "v3"
             *     }
             */
            apiGroups?: {
                [key: string]: string;
            };
            /**
             * @description Auto approve subscription or not
             * @example false
             */
            autoApproveSubscription?: boolean;
            /**
             * @description The AWS regions that this product tier is available on
             * @example [
             *       "us-east-2",
             *       "ca-central-1"
             *     ]
             */
            awsRegions?: string[];
            /**
             * @description The readiness of the cloud providers configurations
             * @example {
             *       "aws": {
             *         "resourceA": "missing terraform configuration",
             *         "resourceB": "missing cloudformation configuration"
             *       }
             *     }
             */
            cloudProvidersConfigReadiness?: {
                [key: string]: {
                    [key: string]: string;
                };
            };
            /**
             * @description A brief description of the product tier
             * @example A premium product tier
             */
            description: string;
            /**
             * @description Documentation
             * @example Any documentation
             */
            documentation: string;
            /**
             * @description The features that are enabled for this product tier, including scope details and configuration
             * @example [
             *       {
             *         "configuration": {
             *           "provider": "native"
             *         },
             *         "feature": "LOGS",
             *         "scope": "INTERNAL"
             *       },
             *       {
             *         "configuration": {
             *           "provider": "native"
             *         },
             *         "feature": "LOGS",
             *         "scope": "INTERNAL"
             *       },
             *       {
             *         "configuration": {
             *           "provider": "native"
             *         },
             *         "feature": "LOGS",
             *         "scope": "INTERNAL"
             *       },
             *       {
             *         "configuration": {
             *           "provider": "native"
             *         },
             *         "feature": "LOGS",
             *         "scope": "INTERNAL"
             *       }
             *     ]
             */
            enabledFeatures?: components["schemas"]["ProductTierFeatureDetail"][];
            /**
             * @description The features that are enabled / disabled for this product tier
             * @example {
             *       "BILLING": false,
             *       "LOGS": true,
             *       "METRICS": false
             *     }
             */
            features?: {
                [key: string]: boolean;
            };
            /**
             * @description The GCP regions that this product tier is available on
             * @example [
             *       "us-central1"
             *     ]
             */
            gcpRegions?: string[];
            /**
             * @description Product tier ID
             * @example pt-12345678
             */
            id: string;
            /**
             * @description Flag to indicate if the product tier is disabled.
             * @example false
             */
            isDisabled: boolean;
            /**
             * @description Unique Key of the product tier
             * @example premium
             */
            key: string;
            /**
             * @description Name of the product tier
             * @example Premium
             */
            name: string;
            /**
             * @description A brief description for the end user of the product tier
             * @example A premium plan
             */
            planDescription: string;
            /**
             * @description Pricing
             * @example {
             *       "price1": "value1"
             *     }
             */
            pricing: unknown;
            /**
             * @description Service ID
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description Service model ID
             * @example sm-12345678
             */
            serviceModelId: string;
            /**
             * @description Support
             * @example Any support
             */
            support: string;
            /**
             * @description Tier type
             * @example OMNISTRATE_DEDICATED_TENANCY
             */
            tierType: string;
        };
        /** @example {
         *       "cloudProviderId": "infra-12345678",
         *       "cloudProviderName": "aws",
         *       "code": "us-east-1",
         *       "description": "US East (N. Virginia)",
         *       "id": "region-12345678"
         *     } */
        DescribeRegionResult: {
            /** @example infra-12345678 */
            cloudProviderId: string;
            /**
             * @description The cloud provider for this compute instance type config
             * @example aws
             */
            cloudProviderName: string;
            /**
             * @description Cloud-provider native region code
             * @example us-east-1
             */
            code: string;
            /**
             * @description Description of the Region
             * @example US East (N. Virginia)
             */
            description: string;
            /**
             * @description ID of the Region
             * @example region-12345678
             */
            id: string;
        };
        /** @example {
         *       "active": true,
         *       "autoscalingEnabled": true,
         *       "awsAccountID": "123456789012",
         *       "backupStatus": {
         *         "backupPeriodInHours": 2,
         *         "backupRetentionInDays": 7,
         *         "earliestRestoreTime": "2021-09-01T00:00:00Z",
         *         "lastBackupTime": "2021-09-01T00:00:00Z"
         *       },
         *       "cloud_provider": "aws",
         *       "created_at": "2023-01-10T00:00:00Z",
         *       "createdByUserId": "user-12345678",
         *       "createdByUserName": "John Doe",
         *       "currentReplicas": "2",
         *       "customNetworkDetail": {
         *         "cidr": "10.177.0.0/16",
         *         "id": "n-12345678",
         *         "name": "Prod us-east-1"
         *       },
         *       "detailedNetworkTopology": {
         *         "r-abcd1234": {
         *           "allowedIPRanges": [
         *             "0.0.0.0/0"
         *           ],
         *           "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *           "clusterPorts": [
         *             3306
         *           ],
         *           "main": true,
         *           "networkingType": "PUBLIC",
         *           "nodes": [
         *             {
         *               "availabilityZone": "us-east-2a",
         *               "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *               "healthStatus": "healthy",
         *               "id": "primary-0",
         *               "ports": [
         *                 3306
         *               ],
         *               "status": "RUNNING"
         *             }
         *           ],
         *           "privateNetworkCIDR": "10.0.0.2/24",
         *           "privateNetworkID": "n-1234abcd",
         *           "publiclyAccessible": true,
         *           "resourceKey": "primary",
         *           "resourceName": "Primary MySQL Instance"
         *         }
         *       },
         *       "externalPayerId": "external-payer-id-1234",
         *       "gcpProjectID": "my-project",
         *       "highAvailability": true,
         *       "id": "instance-abcd1234",
         *       "instanceLoadStatus": "Impedit ea error ut et.",
         *       "kubernetesDashboardEndpoint": {
         *         "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
         *         "deploymentCellID": "hc-12345678"
         *       },
         *       "last_modified_at": "2023-01-20T00:00:00Z",
         *       "maxReplicas": "1",
         *       "minReplicas": "1",
         *       "network_type": "PUBLIC",
         *       "productTierFeatures": {
         *         "BILLING": {
         *           "enabled": false
         *         },
         *         "LOGS": {
         *           "auth": {
         *             "password": "px3c4d5f6g7h8i",
         *             "username": "abcd1234"
         *           },
         *           "enabled": true,
         *           "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
         *         },
         *         "METRICS": {
         *           "enabled": false
         *         }
         *       },
         *       "region": "us-east-1",
         *       "result_params": {
         *         "param1": "value1",
         *         "param2": "value2"
         *       },
         *       "serverlessEnabled": true,
         *       "status": "RUNNING",
         *       "subscriptionId": "sub-abcd1234"
         *     } */
        DescribeResourceInstanceResult: {
            /**
             * @description True if this resource instance has associated infrastructure deployed
             * @example true
             */
            active?: boolean;
            /**
             * @description Whether the instance has autoscaling enabled
             * @example true
             */
            autoscalingEnabled?: boolean;
            /**
             * @description The AWS account ID
             * @example 123456789012
             */
            awsAccountID?: string;
            backupStatus?: components["schemas"]["BackupStatus"];
            /**
             * @description The cloud provider name
             * @example aws
             */
            cloud_provider?: string;
            /**
             * @description The instance creation time
             * @example 2023-01-10T00:00:00Z
             */
            created_at?: string;
            /**
             * @description The user ID that created the resource instance
             * @example user-12345678
             */
            createdByUserId?: string;
            /**
             * @description The name of the user that created the resource instance
             * @example John Doe
             */
            createdByUserName?: string;
            /**
             * @description The current number of replicas
             * @example 2
             */
            currentReplicas?: string;
            customNetworkDetail?: components["schemas"]["CustomNetworkResourceDetail"];
            /**
             * @description The detailed network topology
             * @example {
             *       "r-abcd1234": {
             *         "allowedIPRanges": [
             *           "0.0.0.0/0"
             *         ],
             *         "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *         "clusterPorts": [
             *           3306
             *         ],
             *         "main": true,
             *         "networkingType": "PUBLIC",
             *         "nodes": [
             *           {
             *             "availabilityZone": "us-east-2a",
             *             "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *             "healthStatus": "healthy",
             *             "id": "primary-0",
             *             "ports": [
             *               3306
             *             ],
             *             "status": "RUNNING"
             *           }
             *         ],
             *         "privateNetworkCIDR": "10.0.0.2/24",
             *         "privateNetworkID": "n-1234abcd",
             *         "publiclyAccessible": true,
             *         "resourceKey": "primary",
             *         "resourceName": "Primary MySQL Instance"
             *       }
             *     }
             */
            detailedNetworkTopology?: {
                [key: string]: components["schemas"]["ResourceNetworkTopologyResult"];
            };
            /**
             * @description The external payer id to record which customer should pay for this resource instance
             * @example external-payer-id-1234
             */
            externalPayerId?: string;
            /**
             * @description The GCP project ID
             * @example my-project
             */
            gcpProjectID?: string;
            /**
             * @description Whether the instance is High Availability
             * @example true
             */
            highAvailability?: boolean;
            /**
             * @description The instance ID
             * @example instance-abcd1234
             */
            id?: string;
            /**
             * @description The instance load status
             * @example Sint veritatis.
             */
            instanceLoadStatus?: string;
            kubernetesDashboardEndpoint?: components["schemas"]["KubernetesDashboardEndpoint"];
            /**
             * @description The instance update time
             * @example 2023-01-20T00:00:00Z
             */
            last_modified_at?: string;
            /**
             * @description The maximum number of replicas
             * @example 1
             */
            maxReplicas?: string;
            /**
             * @description The minimum number of replicas
             * @example 1
             */
            minReplicas?: string;
            /**
             * @description The network type
             * @example PUBLIC
             */
            network_type?: string;
            /**
             * @description The product tier features
             * @example {
             *       "BILLING": {
             *         "enabled": false
             *       },
             *       "LOGS": {
             *         "auth": {
             *           "password": "px3c4d5f6g7h8i",
             *           "username": "abcd1234"
             *         },
             *         "enabled": true,
             *         "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
             *       },
             *       "METRICS": {
             *         "enabled": false
             *       }
             *     }
             */
            productTierFeatures?: {
                [key: string]: unknown;
            };
            /**
             * @description The region code
             * @example us-east-1
             */
            region?: string;
            /**
             * @description Custom result parameters
             * @example {
             *       "param1": "value1",
             *       "param2": "value2"
             *     }
             */
            result_params?: unknown;
            /**
             * @description Whether the instance has serverless enabled
             * @example true
             */
            serverlessEnabled?: boolean;
            /**
             * @description The instance status
             * @example RUNNING
             */
            status?: string;
            /**
             * @description The subscription ID
             * @example sub-abcd1234
             */
            subscriptionId?: string;
        };
        /** @example {
         *       "actionHooks": [
         *         {
         *           "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
         *           "scope": "CLUSTER",
         *           "type": "INIT"
         *         }
         *       ],
         *       "additionalSecurityContext": {
         *         "AddCapabilities": [
         *           "CAP_NET_ADMIN",
         *           "CAP_NET_RAW"
         *         ],
         *         "DropCapabilities": [
         *           "CAP_NET_ADMIN",
         *           "CAP_NET_RAW"
         *         ],
         *         "SupplementalGroupIDs": [
         *           1001,
         *           999
         *         ]
         *       },
         *       "backupConfiguration": {
         *         "backupPeriodInHours": 24,
         *         "backupRetentionInDays": 7
         *       },
         *       "blobStorageConfiguration": {
         *         "GCSConfiguration": {},
         *         "S3Configuration": {}
         *       },
         *       "capabilities": [
         *         {
         *           "capability": "SERVERLESS",
         *           "configuration": {
         *             "EnableAutoStop": true,
         *             "MinimumNodesInPool": 5,
         *             "PortsMappingProxyConfig": {
         *               "MaxNumberOfClustersPerProxyInstance": 50,
         *               "NumberOfPortsPerCluster": 4
         *             },
         *             "ProxyId": "r-123456",
         *             "ReferenceProxyKey": "resource-proxy",
         *             "TargetPort": 5432
         *           }
         *         },
         *         {
         *           "capability": "SERVERLESS",
         *           "configuration": {
         *             "EnableAutoStop": true,
         *             "MinimumNodesInPool": 5,
         *             "PortsMappingProxyConfig": {
         *               "MaxNumberOfClustersPerProxyInstance": 50,
         *               "NumberOfPortsPerCluster": 4
         *             },
         *             "ProxyId": "r-123456",
         *             "ReferenceProxyKey": "resource-proxy",
         *             "TargetPort": 5432
         *           }
         *         },
         *         {
         *           "capability": "SERVERLESS",
         *           "configuration": {
         *             "EnableAutoStop": true,
         *             "MinimumNodesInPool": 5,
         *             "PortsMappingProxyConfig": {
         *               "MaxNumberOfClustersPerProxyInstance": 50,
         *               "NumberOfPortsPerCluster": 4
         *             },
         *             "ProxyId": "r-123456",
         *             "ReferenceProxyKey": "resource-proxy",
         *             "TargetPort": 5432
         *           }
         *         },
         *         {
         *           "capability": "SERVERLESS",
         *           "configuration": {
         *             "EnableAutoStop": true,
         *             "MinimumNodesInPool": 5,
         *             "PortsMappingProxyConfig": {
         *               "MaxNumberOfClustersPerProxyInstance": 50,
         *               "NumberOfPortsPerCluster": 4
         *             },
         *             "ProxyId": "r-123456",
         *             "ReferenceProxyKey": "resource-proxy",
         *             "TargetPort": 5432
         *           }
         *         }
         *       ],
         *       "customLabels": {
         *         "key": "value"
         *       },
         *       "customSysCTLs": {
         *         "net.ipv4.tcp_syncookies": "1"
         *       },
         *       "customULimits": [
         *         {
         *           "ULimitsName": "NoProc",
         *           "ULimitsType": "Soft",
         *           "ULimitsValue": 1000
         *         },
         *         {
         *           "ULimitsName": "NoFile",
         *           "ULimitsType": "Hard",
         *           "ULimitsValue": 2048
         *         }
         *       ],
         *       "dependencies": [
         *         {
         *           "parameterMap": {
         *             "clusterId": "writerId",
         *             "clusterOrg": "userDatabase"
         *           },
         *           "resourceId": "r-12345678"
         *         },
         *         {
         *           "parameterMap": {
         *             "clusterId": "readerId",
         *             "clusterOrg": "userDatabase"
         *           },
         *           "resourceId": "r-abcdef12"
         *         }
         *       ],
         *       "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
         *       "environmentVariables": [
         *         {
         *           "name": "MYSQL_ROOT_PASSWORD",
         *           "value": "password"
         *         }
         *       ],
         *       "fileSystemConfiguration": {
         *         "EFSFileSystemConfiguration": {
         *           "PerformanceMode": "generalPurpose|maxIO",
         *           "ProvisionedThroughputInMibps": 125,
         *           "ThroughputMode": "provisioned|bursting|elastic"
         *         }
         *       },
         *       "helmChartConfiguration": {
         *         "chartName": "my-chart",
         *         "chartRepoName": "my-repo",
         *         "chartRepoUrl": "https://my-repo.com",
         *         "chartValues": {
         *           "key1": "value1",
         *           "key2": 3,
         *           "key3": {
         *             "key4": "value4"
         *           }
         *         },
         *         "chartVersion": "1.0.0",
         *         "endpointConfiguration": {
         *           "admin": {
         *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *             "networkingType": "PRIVATE",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": false
         *           },
         *           "cluster": {
         *             "host": "https://my-endpoint.com",
         *             "networkingType": "PUBLIC",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": true
         *           }
         *         },
         *         "password": "my-password",
         *         "runtimeConfiguration": {
         *           "disableHooks": true,
         *           "recreate": true,
         *           "resetThenReuseValues": true,
         *           "resetValues": true,
         *           "reuseValues": true,
         *           "skipCRDs": true,
         *           "timeoutNanos": 1000000000,
         *           "upgradeCRDs": true,
         *           "wait": true,
         *           "waitForJobs": true
         *         },
         *         "username": "my-user"
         *       },
         *       "id": "r-12345678",
         *       "imageConfigId": "imgc-12345678",
         *       "infraConfigId": "ic-12345678",
         *       "internal": false,
         *       "isDeprecated": false,
         *       "key": "galera",
         *       "kustomizeConfiguration": {
         *         "endpointConfiguration": {
         *           "admin": {
         *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *             "networkingType": "PRIVATE",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": false
         *           },
         *           "cluster": {
         *             "host": "https://my-endpoint.com",
         *             "networkingType": "PUBLIC",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": true
         *           }
         *         },
         *         "gitConfiguration": {
         *           "accessToken": "my-token",
         *           "referenceName": "tags/v1.0.0",
         *           "repositoryUrl": "https://github.com/username/myrepo",
         *           "userName": "my-user"
         *         },
         *         "helmChartDependencies": [
         *           {
         *             "chartName": "cert-manager",
         *             "chartVersion": "v1.5.3"
         *           },
         *           {
         *             "chartName": "nginx-ingress",
         *             "chartVersion": "v0.48.1"
         *           },
         *           {
         *             "chartName": "external-dns",
         *             "chartVersion": "v0.7.0"
         *           },
         *           {
         *             "chartName": "cnpg-operator",
         *             "chartVersion": "v0.23.1"
         *           }
         *         ],
         *         "kustomizePath": "/kustomize"
         *       },
         *       "l4LoadBalancerConfiguration": {
         *         "ingressPortConfiguration": [
         *           {
         *             "associatedResourceIDs": [
         *               "r-12345678",
         *               "r-abcdef12"
         *             ],
         *             "backendPort": 8080,
         *             "ingressPort": 1234
         *           },
         *           {
         *             "associatedResourceIDs": [
         *               "r-12345678",
         *               "r-abcdef12"
         *             ],
         *             "backendPort": 8081,
         *             "ingressPort": 5678
         *           },
         *           {
         *             "associatedResourceIDs": [
         *               "r-vwxybz12",
         *               "r-poij122v"
         *             ],
         *             "backendPort": 8082,
         *             "ingressPort": 9012
         *           }
         *         ]
         *       },
         *       "l7LoadBalancerConfiguration": {
         *         "paths": [
         *           {
         *             "associatedResourceID": "r-12345678",
         *             "path": "/path",
         *             "port": 8080
         *           }
         *         ]
         *       },
         *       "name": "Galera",
         *       "operatorCRDConfiguration": {
         *         "endpointConfiguration": {
         *           "admin": {
         *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *             "networkingType": "PRIVATE",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": false
         *           },
         *           "cluster": {
         *             "host": "https://my-endpoint.com",
         *             "networkingType": "PUBLIC",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": true
         *           }
         *         },
         *         "helmChartDependencies": [
         *           {
         *             "chartName": "cert-manager",
         *             "chartVersion": "v1.5.3"
         *           },
         *           {
         *             "chartName": "nginx-ingress",
         *             "chartVersion": "v0.48.1"
         *           },
         *           {
         *             "chartName": "external-dns",
         *             "chartVersion": "v0.7.0"
         *           },
         *           {
         *             "chartName": "cnpg-operator",
         *             "chartVersion": "v0.23.1"
         *           }
         *         ],
         *         "outputParameters": {
         *           "expiresAt": "$out.status.notAfter",
         *           "issuerName": "letsencrypt-prod"
         *         },
         *         "readinessConditions": {
         *           "$out.status.conditions[?(@.type=='Ready')].status": true
         *         },
         *         "supplementalFiles": [
         *           "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
         *           "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
         *         ],
         *         "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
         *       },
         *       "productTierId": "pt-12345678",
         *       "proxyType": "PortsBasedProxy",
         *       "resourceType": "Generic",
         *       "serviceId": "s-12345678",
         *       "terraformConfigurations": {
         *         "Consequatur necessitatibus odio perferendis sequi.": {
         *           "gitConfiguration": {
         *             "accessToken": "my-token",
         *             "referenceName": "tags/v1.0.0",
         *             "repositoryUrl": "https://github.com/username/myrepo",
         *             "userName": "my-user"
         *           },
         *           "privateModuleGitAccessTokens": {
         *             "tokenName": "accessToken"
         *           },
         *           "requiredOutputKeys": [
         *             "output1"
         *           ],
         *           "requiredOutputs": [
         *             {
         *               "exported": true,
         *               "key": "output1"
         *             }
         *           ],
         *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *           "terraformPath": "/project1/tf"
         *         },
         *         "Ullam est nostrum.": {
         *           "gitConfiguration": {
         *             "accessToken": "my-token",
         *             "referenceName": "tags/v1.0.0",
         *             "repositoryUrl": "https://github.com/username/myrepo",
         *             "userName": "my-user"
         *           },
         *           "privateModuleGitAccessTokens": {
         *             "tokenName": "accessToken"
         *           },
         *           "requiredOutputKeys": [
         *             "output1"
         *           ],
         *           "requiredOutputs": [
         *             {
         *               "exported": true,
         *               "key": "output1"
         *             }
         *           ],
         *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *           "terraformPath": "/project1/tf"
         *         }
         *       }
         *     } */
        DescribeResourceResult: {
            /**
             * @description The action hooks that this resource supports
             * @example [
             *       {
             *         "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
             *         "scope": "CLUSTER",
             *         "type": "INIT"
             *       }
             *     ]
             */
            actionHooks?: components["schemas"]["RegisterActionHookRequestBody"][];
            additionalSecurityContext?: components["schemas"]["AdditionalSecurityContext"];
            backupConfiguration?: components["schemas"]["BackupConfiguration"];
            blobStorageConfiguration?: components["schemas"]["BlobStorageConfiguration"];
            /**
             * @description The capabilities enabled for the resource
             * @example [
             *       {
             *         "capability": "SERVERLESS",
             *         "configuration": {
             *           "EnableAutoStop": true,
             *           "MinimumNodesInPool": 5,
             *           "PortsMappingProxyConfig": {
             *             "MaxNumberOfClustersPerProxyInstance": 50,
             *             "NumberOfPortsPerCluster": 4
             *           },
             *           "ProxyId": "r-123456",
             *           "ReferenceProxyKey": "resource-proxy",
             *           "TargetPort": 5432
             *         }
             *       },
             *       {
             *         "capability": "SERVERLESS",
             *         "configuration": {
             *           "EnableAutoStop": true,
             *           "MinimumNodesInPool": 5,
             *           "PortsMappingProxyConfig": {
             *             "MaxNumberOfClustersPerProxyInstance": 50,
             *             "NumberOfPortsPerCluster": 4
             *           },
             *           "ProxyId": "r-123456",
             *           "ReferenceProxyKey": "resource-proxy",
             *           "TargetPort": 5432
             *         }
             *       },
             *       {
             *         "capability": "SERVERLESS",
             *         "configuration": {
             *           "EnableAutoStop": true,
             *           "MinimumNodesInPool": 5,
             *           "PortsMappingProxyConfig": {
             *             "MaxNumberOfClustersPerProxyInstance": 50,
             *             "NumberOfPortsPerCluster": 4
             *           },
             *           "ProxyId": "r-123456",
             *           "ReferenceProxyKey": "resource-proxy",
             *           "TargetPort": 5432
             *         }
             *       }
             *     ]
             */
            capabilities?: components["schemas"]["ResourceCapability"][];
            /**
             * @description Custom labels for the resource
             * @example {
             *       "key": "value"
             *     }
             */
            customLabels?: {
                [key: string]: string;
            };
            /**
             * @description Custom sysctl settings for the resource
             * @example {
             *       "net.ipv4.tcp_syncookies": "1"
             *     }
             */
            customSysCTLs?: {
                [key: string]: string;
            };
            /**
             * @description Custom ulimits for the resource
             * @example [
             *       {
             *         "ULimitsName": "NoProc",
             *         "ULimitsType": "Soft",
             *         "ULimitsValue": 1000
             *       },
             *       {
             *         "ULimitsName": "NoFile",
             *         "ULimitsType": "Hard",
             *         "ULimitsValue": 2048
             *       }
             *     ]
             */
            customULimits?: components["schemas"]["CustomULimits"][];
            /** @example [
             *       {
             *         "parameterMap": {
             *           "clusterId": "writerId",
             *           "clusterOrg": "userDatabase"
             *         },
             *         "resourceId": "r-12345678"
             *       },
             *       {
             *         "parameterMap": {
             *           "clusterId": "readerId",
             *           "clusterOrg": "userDatabase"
             *         },
             *         "resourceId": "r-abcdef12"
             *       }
             *     ] */
            dependencies?: components["schemas"]["ResourceDependency"][];
            /**
             * @description A brief description of the resource
             * @example An resource to manage a hosted public SaaS offering of a multi-writer MySQL service
             */
            description: string;
            /**
             * @description The environment variables that this resource requires
             * @example [
             *       {
             *         "name": "MYSQL_ROOT_PASSWORD",
             *         "value": "password"
             *       }
             *     ]
             */
            environmentVariables?: components["schemas"]["EnvironmentVariable"][];
            fileSystemConfiguration?: components["schemas"]["FileSystemConfiguration"];
            helmChartConfiguration?: components["schemas"]["HelmChartConfiguration"];
            /**
             * @description The ID of the resource
             * @example r-12345678
             */
            id: string;
            /**
             * @description The ID of the image configuration that this resource refers to
             * @example imgc-12345678
             */
            imageConfigId?: string;
            /**
             * @description The ID of the infrastructure configuration that this resource refers to
             * @example ic-12345678
             */
            infraConfigId?: string;
            /**
             * @description Whether this resource is internal or not
             * @default false
             * @example true
             */
            internal: boolean;
            /**
             * @description Whether this resource is deprecated or not
             * @default false
             * @example true
             */
            isDeprecated: boolean;
            /**
             * @description The key of the resource
             * @example galera
             */
            key: string;
            kustomizeConfiguration?: components["schemas"]["KustomizeConfiguration"];
            l4LoadBalancerConfiguration?: components["schemas"]["L4LoadBalancerConfiguration"];
            l7LoadBalancerConfiguration?: components["schemas"]["L7LoadBalancerConfiguration"];
            /**
             * @description Name of the resource
             * @example Galera
             */
            name: string;
            operatorCRDConfiguration?: components["schemas"]["OperatorCRDConfiguration"];
            /**
             * @description The product tier ID
             * @example pt-12345678
             */
            productTierId: string;
            /**
             * @description The proxy type of instance
             * @example PortsBasedProxy
             */
            proxyType?: string;
            /**
             * @description The type of the resource
             * @example Generic
             */
            resourceType: string;
            /**
             * @description The service ID that this API bundle belongs to
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The Terraform configurations for various cloud providers
             * @example {
             *       "Earum aut facere itaque quo ut.": {
             *         "gitConfiguration": {
             *           "accessToken": "my-token",
             *           "referenceName": "tags/v1.0.0",
             *           "repositoryUrl": "https://github.com/username/myrepo",
             *           "userName": "my-user"
             *         },
             *         "privateModuleGitAccessTokens": {
             *           "tokenName": "accessToken"
             *         },
             *         "requiredOutputKeys": [
             *           "output1"
             *         ],
             *         "requiredOutputs": [
             *           {
             *             "exported": true,
             *             "key": "output1"
             *           }
             *         ],
             *         "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *         "terraformPath": "/project1/tf"
             *       },
             *       "Est hic nam earum iusto.": {
             *         "gitConfiguration": {
             *           "accessToken": "my-token",
             *           "referenceName": "tags/v1.0.0",
             *           "repositoryUrl": "https://github.com/username/myrepo",
             *           "userName": "my-user"
             *         },
             *         "privateModuleGitAccessTokens": {
             *           "tokenName": "accessToken"
             *         },
             *         "requiredOutputKeys": [
             *           "output1"
             *         ],
             *         "requiredOutputs": [
             *           {
             *             "exported": true,
             *             "key": "output1"
             *           }
             *         ],
             *         "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *         "terraformPath": "/project1/tf"
             *       },
             *       "Vel ea eveniet esse magni et eaque.": {
             *         "gitConfiguration": {
             *           "accessToken": "my-token",
             *           "referenceName": "tags/v1.0.0",
             *           "repositoryUrl": "https://github.com/username/myrepo",
             *           "userName": "my-user"
             *         },
             *         "privateModuleGitAccessTokens": {
             *           "tokenName": "accessToken"
             *         },
             *         "requiredOutputKeys": [
             *           "output1"
             *         ],
             *         "requiredOutputs": [
             *           {
             *             "exported": true,
             *             "key": "output1"
             *           }
             *         ],
             *         "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *         "terraformPath": "/project1/tf"
             *       }
             *     }
             */
            terraformConfigurations?: {
                [key: string]: components["schemas"]["TerraformConfiguration"];
            };
        };
        /** @example {
         *       "apiVersion": "v1",
         *       "deploymentConfigId": "dc-12345678",
         *       "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
         *       "id": "sa-12345678",
         *       "serviceEnvironmentId": "se-12345678",
         *       "serviceId": "s-12345678",
         *       "serviceName": "mysql"
         *     } */
        DescribeServiceAPIResult: {
            /**
             * @description The external version of the API
             * @example v1
             */
            apiVersion: string;
            /**
             * @description The deployment configuration ID
             * @example dc-12345678
             */
            deploymentConfigId: string;
            /**
             * @description A brief description of the service API bundle
             * @example A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability
             */
            description: string;
            /**
             * @description The service API ID
             * @example sa-12345678
             */
            id: string;
            /**
             * @description The service environment ID
             * @example se-12345678
             */
            serviceEnvironmentId: string;
            /**
             * @description The service ID that this API bundle belongs to
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The name of the service
             * @example mysql
             */
            serviceName: string;
        };
        /** @example {
         *       "autoApproveSubscription": false,
         *       "deploymentConfigId": "dc-12345678",
         *       "description": "The production environment for the MySQL multi-writer service",
         *       "id": "se-12345678",
         *       "key": "production",
         *       "name": "Production",
         *       "roleType": "admin",
         *       "saasPortalStatus": "READY",
         *       "saasPortalUrl": "https://saas-portal.example.com",
         *       "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
         *       "serviceId": "s-12345678",
         *       "sourceEnvironmentId": "se-12345678",
         *       "type": "DEV",
         *       "visibility": "Nihil quia neque."
         *     } */
        DescribeServiceEnvironmentResult: {
            /**
             * @description Auto approve subscription or not
             * @example false
             */
            autoApproveSubscription?: boolean;
            /**
             * @description The deployment configuration ID
             * @example dc-12345678
             */
            deploymentConfigId: string;
            /**
             * @description A brief description of the service environment
             * @example The production environment for the MySQL multi-writer service
             */
            description: string;
            /**
             * @description The ID of the service environment
             * @example se-12345678
             */
            id: string;
            /**
             * @description Unique Key of the Service Environment
             * @example production
             */
            key: string;
            /**
             * @description Name of the Service Environment
             * @example Production
             */
            name: string;
            /**
             * @description The role type of the caller user
             * @example admin
             */
            roleType?: string;
            /**
             * @description The status of the SaaS portal for this environment type
             * @example READY
             */
            saasPortalStatus?: string;
            /**
             * @description The URL of the SaaS portal for this environment type
             * @example https://saas-portal.example.com
             */
            saasPortalUrl?: string;
            /**
             * @description PEM-encoded Public key part of the key used to sign the JWT tokens for the service control plane APIs
             * @example -----BEGIN PUBLIC KEY-----
             *     MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT
             *     7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==
             *     -----END PUBLIC KEY-----
             *
             */
            serviceAuthPublicKey?: string;
            /**
             * @description The ID of the service this environment belongs to
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The ID of the service environment to use for promoting changes to this environment
             * @example se-12345678
             */
            sourceEnvironmentId?: string;
            /** @example DEV */
            type: string;
            /**
             * @description This parameter is used to configure the visibility of the service control-plane APIs
             * @example Provident dignissimos.
             */
            visibility: string;
        };
        /** @example {
         *       "accountConfigIds": [
         *         "ac-12345678",
         *         "ac-23456789"
         *       ],
         *       "activeAccountConfigIds": {
         *         "aws": "ac-12345678",
         *         "gcp": "ac-23456789"
         *       },
         *       "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
         *       "features": [
         *         {
         *           "configuration": {
         *             "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *             "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *           },
         *           "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *         },
         *         {
         *           "configuration": {
         *             "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *             "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *           },
         *           "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *         },
         *         {
         *           "configuration": {
         *             "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *             "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *           },
         *           "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *         }
         *       ],
         *       "id": "sm-12345678",
         *       "key": "mysql-multi-writer-service-hosted-model",
         *       "modelType": "CUSTOMER_HOSTED",
         *       "name": "MySQL multi-writer service hosted model",
         *       "productTiers": [
         *         "pt-12345678",
         *         "pt-87654321"
         *       ],
         *       "serviceApiId": "sa-12345678",
         *       "serviceId": "s-12345678"
         *     } */
        DescribeServiceModelResult: {
            /**
             * @description The infrastructure account configuration ID list
             * @example [
             *       "ac-12345678",
             *       "ac-23456789"
             *     ]
             */
            accountConfigIds?: string[];
            /**
             * @description The active infrastructure account configuration IDs per cloud provider
             * @example {
             *       "aws": "ac-12345678",
             *       "gcp": "ac-23456789"
             *     }
             */
            activeAccountConfigIds?: {
                [key: string]: string;
            };
            /**
             * @description A brief description of the service model
             * @example A MySQL Hosted SaaS specializing in multi-writer clusters for high availability
             */
            description: string;
            /**
             * @description Enabled service model features
             * @example [
             *       {
             *         "configuration": {
             *           "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *           "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *         },
             *         "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *       },
             *       {
             *         "configuration": {
             *           "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *           "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *         },
             *         "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *       },
             *       {
             *         "configuration": {
             *           "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *           "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *         },
             *         "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *       },
             *       {
             *         "configuration": {
             *           "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *           "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *         },
             *         "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *       }
             *     ]
             */
            features?: components["schemas"]["ServiceModelFeatureDetail"][];
            /**
             * @description The service model ID
             * @example sm-12345678
             */
            id: string;
            /**
             * @description The unique key for this service model
             * @example mysql-multi-writer-service-hosted-model
             */
            key: string;
            /**
             * @description The model type encapsulating this service
             * @example CUSTOMER_HOSTED
             */
            modelType: string;
            /**
             * @description Name of the Service Model
             * @example MySQL multi-writer service hosted model
             */
            name: string;
            /**
             * @description The product tiers associated with this service model
             * @example [
             *       "pt-12345678",
             *       "pt-87654321"
             *     ]
             */
            productTiers?: string[];
            /**
             * @description The service API this model is for
             * @example sa-12345678
             */
            serviceApiId: string;
            /**
             * @description The service ID this model belongs to
             * @example s-12345678
             */
            serviceId: string;
        };
        /** @example {
         *       "apis": [
         *         {
         *           "inputParameters": [
         *             {
         *               "defaultValue": null,
         *               "description": "The name of the server",
         *               "displayName": "Server Name",
         *               "isList": false,
         *               "key": "serverName",
         *               "modifiable": true,
         *               "options": null,
         *               "required": true,
         *               "type": "string"
         *             },
         *             {
         *               "defaultValue": "option1",
         *               "description": "The type of the server",
         *               "displayName": "Server Type",
         *               "isList": false,
         *               "key": "serverType",
         *               "modifiable": true,
         *               "options": [
         *                 "option1",
         *                 "option2"
         *               ],
         *               "required": true,
         *               "type": "string"
         *             }
         *           ],
         *           "outputParameters": [
         *             {
         *               "description": "The name of the server",
         *               "displayName": "Server Name",
         *               "isList": false,
         *               "key": "serverName",
         *               "type": "string"
         *             },
         *             {
         *               "description": "The type of the server",
         *               "displayName": "Server Type",
         *               "isList": false,
         *               "key": "serverType",
         *               "type": "string"
         *             }
         *           ],
         *           "verb": "create"
         *         },
         *         {
         *           "inputParameters": [
         *             {
         *               "defaultValue": null,
         *               "description": "The name of the server",
         *               "displayName": "Server Name",
         *               "isList": false,
         *               "key": "serverName",
         *               "modifiable": true,
         *               "options": null,
         *               "required": true,
         *               "type": "string"
         *             }
         *           ],
         *           "outputParameters": [
         *             {
         *               "description": "The name of the server",
         *               "displayName": "Server Name",
         *               "isList": false,
         *               "key": "serverName",
         *               "type": "string"
         *             },
         *             {
         *               "description": "The type of the server",
         *               "displayName": "Server Type",
         *               "isList": false,
         *               "key": "serverType",
         *               "type": "string"
         *             }
         *           ],
         *           "verb": "describe"
         *         }
         *       ]
         *     } */
        DescribeServiceOfferingResourceResult: {
            /**
             * @description The APIs
             * @example [
             *       {
             *         "inputParameters": [
             *           {
             *             "defaultValue": null,
             *             "description": "The name of the server",
             *             "displayName": "Server Name",
             *             "isList": false,
             *             "key": "serverName",
             *             "modifiable": true,
             *             "options": null,
             *             "required": true,
             *             "type": "string"
             *           },
             *           {
             *             "defaultValue": "option1",
             *             "description": "The type of the server",
             *             "displayName": "Server Type",
             *             "isList": false,
             *             "key": "serverType",
             *             "modifiable": true,
             *             "options": [
             *               "option1",
             *               "option2"
             *             ],
             *             "required": true,
             *             "type": "string"
             *           }
             *         ],
             *         "outputParameters": [
             *           {
             *             "description": "The name of the server",
             *             "displayName": "Server Name",
             *             "isList": false,
             *             "key": "serverName",
             *             "type": "string"
             *           },
             *           {
             *             "description": "The type of the server",
             *             "displayName": "Server Type",
             *             "isList": false,
             *             "key": "serverType",
             *             "type": "string"
             *           }
             *         ],
             *         "verb": "create"
             *       },
             *       {
             *         "inputParameters": [
             *           {
             *             "defaultValue": null,
             *             "description": "The name of the server",
             *             "displayName": "Server Name",
             *             "isList": false,
             *             "key": "serverName",
             *             "modifiable": true,
             *             "options": null,
             *             "required": true,
             *             "type": "string"
             *           }
             *         ],
             *         "outputParameters": [
             *           {
             *             "description": "The name of the server",
             *             "displayName": "Server Name",
             *             "isList": false,
             *             "key": "serverName",
             *             "type": "string"
             *           },
             *           {
             *             "description": "The type of the server",
             *             "displayName": "Server Type",
             *             "isList": false,
             *             "key": "serverType",
             *             "type": "string"
             *           }
             *         ],
             *         "verb": "describe"
             *       }
             *     ]
             */
            apis?: components["schemas"]["APIEntity"][];
        };
        /** @example {
         *       "createdAt": "2019-01-01T00:00:00Z",
         *       "isDeprecated": false,
         *       "offerings": [
         *         {
         *           "assets": {
         *             "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
         *             "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
         *           },
         *           "billingPlans": [
         *             {
         *               "maxNumberofInstances": 4
         *             }
         *           ],
         *           "productTierName": "Premium",
         *           "productTierURLKey": "premium",
         *           "resourceParameters": [
         *             {
         *               "name": "MySQL",
         *               "urlKey": "mysql"
         *             },
         *             {
         *               "name": "Redis",
         *               "urlKey": "redis"
         *             }
         *           ],
         *           "serviceAPIID": "sa-12345678",
         *           "serviceAPIVersion": "v1",
         *           "serviceEnvironmentName": "Production",
         *           "serviceEnvironmentURLKey": "prod",
         *           "serviceEnvironmentVisibility": "PRIVATE",
         *           "serviceModelName": "Bring Your Own Account",
         *           "serviceModelURLKey": "byoa"
         *         },
         *         {
         *           "productTierName": "Basic",
         *           "productTierURLKey": "basic",
         *           "resourceParameters": [
         *             {
         *               "name": "MySQL",
         *               "urlKey": "mysql"
         *             },
         *             {
         *               "name": "Redis",
         *               "urlKey": "redis"
         *             }
         *           ],
         *           "serviceAPIID": "sa-abcdefgh",
         *           "serviceAPIVersion": "v1",
         *           "serviceEnvironmentName": "Production",
         *           "serviceEnvironmentURLKey": "prod",
         *           "serviceEnvironmentVisibility": "PUBLIC",
         *           "serviceModelName": "Hosted",
         *           "serviceModelURLKey": "hosted"
         *         }
         *       ],
         *       "serviceDescription": "MySQL is a relational database",
         *       "serviceId": "s-12345678",
         *       "serviceName": "MySQL",
         *       "serviceOrgId": "org-12345678",
         *       "serviceProviderId": "sp-9zrg9W8Are",
         *       "serviceProviderName": "Omnistrate, Inc.",
         *       "serviceURLKey": "mysql"
         *     } */
        DescribeServiceOfferingResult: {
            /**
             * @description The time the service was created
             * @example 2019-01-01T00:00:00Z
             */
            createdAt: string;
            /**
             * @description Whether the service offering is deprecated
             * @default false
             * @example false
             */
            isDeprecated: boolean;
            /**
             * @description The service offerings
             * @example [
             *       {
             *         "assets": {
             *           "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
             *           "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
             *         },
             *         "billingPlans": [
             *           {
             *             "maxNumberofInstances": 4
             *           }
             *         ],
             *         "productTierName": "Premium",
             *         "productTierURLKey": "premium",
             *         "resourceParameters": [
             *           {
             *             "name": "MySQL",
             *             "urlKey": "mysql"
             *           },
             *           {
             *             "name": "Redis",
             *             "urlKey": "redis"
             *           }
             *         ],
             *         "serviceAPIID": "sa-12345678",
             *         "serviceAPIVersion": "v1",
             *         "serviceEnvironmentName": "Production",
             *         "serviceEnvironmentURLKey": "prod",
             *         "serviceEnvironmentVisibility": "PRIVATE",
             *         "serviceModelName": "Bring Your Own Account",
             *         "serviceModelURLKey": "byoa"
             *       },
             *       {
             *         "productTierName": "Basic",
             *         "productTierURLKey": "basic",
             *         "resourceParameters": [
             *           {
             *             "name": "MySQL",
             *             "urlKey": "mysql"
             *           },
             *           {
             *             "name": "Redis",
             *             "urlKey": "redis"
             *           }
             *         ],
             *         "serviceAPIID": "sa-abcdefgh",
             *         "serviceAPIVersion": "v1",
             *         "serviceEnvironmentName": "Production",
             *         "serviceEnvironmentURLKey": "prod",
             *         "serviceEnvironmentVisibility": "PUBLIC",
             *         "serviceModelName": "Hosted",
             *         "serviceModelURLKey": "hosted"
             *       }
             *     ]
             */
            offerings: components["schemas"]["ServiceOffering"][];
            /**
             * @description The service description
             * @example MySQL is a relational database
             */
            serviceDescription: string;
            /**
             * @description The service id
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The service name
             * @example MySQL
             */
            serviceName: string;
            /**
             * @description The org id of the service
             * @example org-12345678
             */
            serviceOrgId: string;
            /**
             * @description The id of the service provider
             * @example sp-9zrg9W8Are
             */
            serviceProviderId: string;
            /**
             * @description The name of the service provider
             * @example Omnistrate, Inc.
             */
            serviceProviderName: string;
            /**
             * @description The service URL key
             * @example mysql
             */
            serviceURLKey: string;
        };
        /** @example {
         *       "createdAt": "2019-01-01T00:00:00Z",
         *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *       "id": "s-12345678",
         *       "key": "mysql",
         *       "name": "MySQL multi-writer service",
         *       "roleType": "admin",
         *       "serviceEnvironments": [
         *         {
         *           "id": "se-12345678",
         *           "name": "dev",
         *           "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *           "saasPortalStatus": "READY",
         *           "saasPortalUrl": "https://saas-portal.example.com",
         *           "servicePlans": [
         *             {
         *               "description": "A Basic product tier",
         *               "modelType": "CUSTOMER_HOSTED",
         *               "name": "Basic",
         *               "productTierID": "pt-12345678",
         *               "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *             },
         *             {
         *               "description": "A Basic product tier",
         *               "modelType": "CUSTOMER_HOSTED",
         *               "name": "Basic",
         *               "productTierID": "pt-12345678",
         *               "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *             },
         *             {
         *               "description": "A Basic product tier",
         *               "modelType": "CUSTOMER_HOSTED",
         *               "name": "Basic",
         *               "productTierID": "pt-12345678",
         *               "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *             }
         *           ],
         *           "sourceEnvironmentID": "se-12345678",
         *           "sourceEnvironmentName": "dev",
         *           "type": "DEV",
         *           "visibility": "private"
         *         },
         *         {
         *           "id": "se-12345678",
         *           "name": "dev",
         *           "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *           "saasPortalStatus": "READY",
         *           "saasPortalUrl": "https://saas-portal.example.com",
         *           "servicePlans": [
         *             {
         *               "description": "A Basic product tier",
         *               "modelType": "CUSTOMER_HOSTED",
         *               "name": "Basic",
         *               "productTierID": "pt-12345678",
         *               "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *             },
         *             {
         *               "description": "A Basic product tier",
         *               "modelType": "CUSTOMER_HOSTED",
         *               "name": "Basic",
         *               "productTierID": "pt-12345678",
         *               "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *             },
         *             {
         *               "description": "A Basic product tier",
         *               "modelType": "CUSTOMER_HOSTED",
         *               "name": "Basic",
         *               "productTierID": "pt-12345678",
         *               "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *             }
         *           ],
         *           "sourceEnvironmentID": "se-12345678",
         *           "sourceEnvironmentName": "dev",
         *           "type": "DEV",
         *           "visibility": "private"
         *         },
         *         {
         *           "id": "se-12345678",
         *           "name": "dev",
         *           "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *           "saasPortalStatus": "READY",
         *           "saasPortalUrl": "https://saas-portal.example.com",
         *           "servicePlans": [
         *             {
         *               "description": "A Basic product tier",
         *               "modelType": "CUSTOMER_HOSTED",
         *               "name": "Basic",
         *               "productTierID": "pt-12345678",
         *               "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *             },
         *             {
         *               "description": "A Basic product tier",
         *               "modelType": "CUSTOMER_HOSTED",
         *               "name": "Basic",
         *               "productTierID": "pt-12345678",
         *               "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *             },
         *             {
         *               "description": "A Basic product tier",
         *               "modelType": "CUSTOMER_HOSTED",
         *               "name": "Basic",
         *               "productTierID": "pt-12345678",
         *               "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *             }
         *           ],
         *           "sourceEnvironmentID": "se-12345678",
         *           "sourceEnvironmentName": "dev",
         *           "type": "DEV",
         *           "visibility": "private"
         *         }
         *       ],
         *       "serviceLogoURL": "Minima vel enim.",
         *       "serviceProviderID": "sp-12345678",
         *       "serviceProviderName": "Omnistrate, Inc."
         *     } */
        DescribeServiceResult: {
            /**
             * @description The time the service was created
             * @example 2019-01-01T00:00:00Z
             */
            createdAt: string;
            /**
             * @description A brief description of the service
             * @example A MySQL SaaS specializing in multi-writer clusters for high availability
             */
            description: string;
            /**
             * @description The service ID to operate on
             * @example s-12345678
             */
            id: string;
            /**
             * @description Unique key of the service
             * @example mysql
             */
            key: string;
            /**
             * @description Name of the Service
             * @example MySQL multi-writer service
             */
            name: string;
            /**
             * @description The role type of the caller user
             * @example admin
             */
            roleType?: string;
            /**
             * @description List of service environments
             * @example [
             *       {
             *         "id": "se-12345678",
             *         "name": "dev",
             *         "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *         "saasPortalStatus": "READY",
             *         "saasPortalUrl": "https://saas-portal.example.com",
             *         "servicePlans": [
             *           {
             *             "description": "A Basic product tier",
             *             "modelType": "CUSTOMER_HOSTED",
             *             "name": "Basic",
             *             "productTierID": "pt-12345678",
             *             "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *           },
             *           {
             *             "description": "A Basic product tier",
             *             "modelType": "CUSTOMER_HOSTED",
             *             "name": "Basic",
             *             "productTierID": "pt-12345678",
             *             "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *           },
             *           {
             *             "description": "A Basic product tier",
             *             "modelType": "CUSTOMER_HOSTED",
             *             "name": "Basic",
             *             "productTierID": "pt-12345678",
             *             "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *           }
             *         ],
             *         "sourceEnvironmentID": "se-12345678",
             *         "sourceEnvironmentName": "dev",
             *         "type": "DEV",
             *         "visibility": "private"
             *       },
             *       {
             *         "id": "se-12345678",
             *         "name": "dev",
             *         "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *         "saasPortalStatus": "READY",
             *         "saasPortalUrl": "https://saas-portal.example.com",
             *         "servicePlans": [
             *           {
             *             "description": "A Basic product tier",
             *             "modelType": "CUSTOMER_HOSTED",
             *             "name": "Basic",
             *             "productTierID": "pt-12345678",
             *             "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *           },
             *           {
             *             "description": "A Basic product tier",
             *             "modelType": "CUSTOMER_HOSTED",
             *             "name": "Basic",
             *             "productTierID": "pt-12345678",
             *             "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *           },
             *           {
             *             "description": "A Basic product tier",
             *             "modelType": "CUSTOMER_HOSTED",
             *             "name": "Basic",
             *             "productTierID": "pt-12345678",
             *             "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *           }
             *         ],
             *         "sourceEnvironmentID": "se-12345678",
             *         "sourceEnvironmentName": "dev",
             *         "type": "DEV",
             *         "visibility": "private"
             *       },
             *       {
             *         "id": "se-12345678",
             *         "name": "dev",
             *         "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *         "saasPortalStatus": "READY",
             *         "saasPortalUrl": "https://saas-portal.example.com",
             *         "servicePlans": [
             *           {
             *             "description": "A Basic product tier",
             *             "modelType": "CUSTOMER_HOSTED",
             *             "name": "Basic",
             *             "productTierID": "pt-12345678",
             *             "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *           },
             *           {
             *             "description": "A Basic product tier",
             *             "modelType": "CUSTOMER_HOSTED",
             *             "name": "Basic",
             *             "productTierID": "pt-12345678",
             *             "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *           },
             *           {
             *             "description": "A Basic product tier",
             *             "modelType": "CUSTOMER_HOSTED",
             *             "name": "Basic",
             *             "productTierID": "pt-12345678",
             *             "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *           }
             *         ],
             *         "sourceEnvironmentID": "se-12345678",
             *         "sourceEnvironmentName": "dev",
             *         "type": "DEV",
             *         "visibility": "private"
             *       }
             *     ]
             */
            serviceEnvironments: components["schemas"]["ServiceEnvironment"][];
            /**
             * @description The logo for the service
             * @example Perferendis ad quam aut.
             */
            serviceLogoURL?: string;
            /**
             * @description The ID of the service provider owning the service
             * @example sp-12345678
             */
            serviceProviderID: string;
            /**
             * @description The name of the service provider
             * @example Omnistrate, Inc.
             */
            serviceProviderName: string;
        };
        /** @example {
         *       "ServicesTopology": [
         *         {
         *           "dependsOnDeployment": [
         *             "instanceDeploymentAlias1",
         *             "instanceDeploymentAlias2"
         *           ],
         *           "instanceDeploymentAlias": "instanceDeploymentAlias",
         *           "instanceId": "i-12345678",
         *           "serviceId": "s-12345678",
         *           "status": "PENDING",
         *           "statusMessage": "Creating deployment",
         *           "subscriptionId": "Officia adipisci mollitia et."
         *         },
         *         {
         *           "dependsOnDeployment": [
         *             "instanceDeploymentAlias1",
         *             "instanceDeploymentAlias2"
         *           ],
         *           "instanceDeploymentAlias": "instanceDeploymentAlias",
         *           "instanceId": "i-12345678",
         *           "serviceId": "s-12345678",
         *           "status": "PENDING",
         *           "statusMessage": "Creating deployment",
         *           "subscriptionId": "Officia adipisci mollitia et."
         *         },
         *         {
         *           "dependsOnDeployment": [
         *             "instanceDeploymentAlias1",
         *             "instanceDeploymentAlias2"
         *           ],
         *           "instanceDeploymentAlias": "instanceDeploymentAlias",
         *           "instanceId": "i-12345678",
         *           "serviceId": "s-12345678",
         *           "status": "PENDING",
         *           "statusMessage": "Creating deployment",
         *           "subscriptionId": "Officia adipisci mollitia et."
         *         }
         *       ],
         *       "createdAt": "2021-01-01T00:00:00Z",
         *       "id": "so-12345678",
         *       "orchestrationFailedReason": "Invalid DSL",
         *       "resultParams": {
         *         "param1": "value1",
         *         "param2": "value2"
         *       },
         *       "status": "PENDING",
         *       "updatedAt": "2021-01-01T00:00:00Z"
         *     } */
        DescribeServicesOrchestrationResult: {
            /**
             * @description The services deployment details
             * @example [
             *       {
             *         "dependsOnDeployment": [
             *           "instanceDeploymentAlias1",
             *           "instanceDeploymentAlias2"
             *         ],
             *         "instanceDeploymentAlias": "instanceDeploymentAlias",
             *         "instanceId": "i-12345678",
             *         "serviceId": "s-12345678",
             *         "status": "PENDING",
             *         "statusMessage": "Creating deployment",
             *         "subscriptionId": "Officia adipisci mollitia et."
             *       },
             *       {
             *         "dependsOnDeployment": [
             *           "instanceDeploymentAlias1",
             *           "instanceDeploymentAlias2"
             *         ],
             *         "instanceDeploymentAlias": "instanceDeploymentAlias",
             *         "instanceId": "i-12345678",
             *         "serviceId": "s-12345678",
             *         "status": "PENDING",
             *         "statusMessage": "Creating deployment",
             *         "subscriptionId": "Officia adipisci mollitia et."
             *       }
             *     ]
             */
            ServicesTopology?: components["schemas"]["ServiceDeploymentDetails"][];
            /**
             * @description The time the services orchestration was created
             * @example 2021-01-01T00:00:00Z
             */
            createdAt: string;
            /**
             * @description The ID of the services orchestration
             * @example so-12345678
             */
            id: string;
            /**
             * @description The reason why the orchestration failed
             * @example Invalid DSL
             */
            orchestrationFailedReason?: string;
            /**
             * @description Custom result parameters of the services orchestration
             * @example {
             *       "param1": "value1",
             *       "param2": "value2"
             *     }
             */
            resultParams?: unknown;
            /**
             * @description The status of the services orchestration
             * @example PENDING
             */
            status: string;
            /**
             * @description The time the services orchestration was last updated
             * @example 2021-01-01T00:00:00Z
             */
            updatedAt: string;
        };
        /** @example {
         *       "description": "my-storage-config-description",
         *       "id": "sc-12345678",
         *       "infraConfigIDs": [
         *         "ic-12345678",
         *         "ic-abcdefgh"
         *       ],
         *       "name": "my-storage-config",
         *       "serviceId": "s-12345678",
         *       "volumes": {
         *         "svc-12345678": [
         *           "/data",
         *           "/mnt/logs"
         *         ],
         *         "svc-23456789": [
         *           "/config"
         *         ]
         *       }
         *     } */
        DescribeStorageConfigResult: {
            /**
             * @description Description of the storage config
             * @example my-storage-config-description
             */
            description: string;
            /**
             * @description The storage config ID
             * @example sc-12345678
             */
            id: string;
            /**
             * @description The list of infra config IDs associated with the compute config.
             * @example [
             *       "ic-12345678",
             *       "ic-abcdefgh"
             *     ]
             */
            infraConfigIDs?: string[];
            /**
             * @description Name of the storage config
             * @example my-storage-config
             */
            name: string;
            /**
             * @description The service ID
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The storage volume config IDs and the corresponding mount path
             * @example {
             *       "svc-12345678": [
             *         "/data",
             *         "/mnt/logs"
             *       ],
             *       "svc-23456789": [
             *         "/config"
             *       ]
             *     }
             */
            volumes: {
                [key: string]: string[];
            };
        };
        /** @example {
         *       "cloudProviderName": "aws",
         *       "clusterStorageType": "S3|$var.storageType|AWS::EFS",
         *       "description": "A storage volume set to store the MySQL data directory",
         *       "disableBackup": false,
         *       "id": "svc-12345678",
         *       "instanceStorageIops": "7500",
         *       "instanceStorageSizeGi": "128",
         *       "instanceStorageThroughputMiBps": "128",
         *       "instanceStorageType": "$var.storageType",
         *       "name": "MySQL Data Volume",
         *       "serviceId": "s-12345678",
         *       "storageResourceID": "r-12345678"
         *     } */
        DescribeStorageVolumeConfigResult: {
            /**
             * @description The cloud provider name for fixed storage types
             * @example aws
             */
            cloudProviderName?: string;
            /**
             * @description The type of the fixed storage for the cluster
             * @example S3|$var.storageType|AWS::EFS
             */
            clusterStorageType?: string;
            /**
             * @description A brief description of the context for the storage volume pool
             * @example A storage volume set to store the MySQL data directory
             */
            description: string;
            /**
             * @description Disable backup for the storage volume
             * @example false
             */
            disableBackup?: boolean;
            /**
             * @description The storage volume config ID
             * @example svc-12345678
             */
            id: string;
            /**
             * @description The IOPS provisioned for the configured instance storage type
             * @example 7500
             */
            instanceStorageIops?: string;
            /**
             * @description The fixed storage size (in Gi) provisioned for the configured instance storage type
             * @example 128
             */
            instanceStorageSizeGi?: string;
            /**
             * @description The throughput (in MiBps) provisioned for the configured instance storage type
             * @example 128
             */
            instanceStorageThroughputMiBps?: string;
            /**
             * @description The type of the fixed storage for a compute instance
             * @example $var.storageType
             */
            instanceStorageType?: string;
            /**
             * @description Name of the storage volume pool
             * @example MySQL Data Volume
             */
            name: string;
            /**
             * @description The service ID
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The storage resource ID
             * @example r-12345678
             */
            storageResourceID?: string;
        };
        /** @example {
         *       "createdAt": "2019-01-01T00:00:00Z",
         *       "id": "subr-12345678",
         *       "productTierId": "pt-12345678",
         *       "productTierName": "Omnistrate Multi Tenancy",
         *       "rootUserEmail": "abc@gmail.com",
         *       "rootUserId": "org-12345678",
         *       "rootUserName": "John Doe",
         *       "serviceId": "s-12345678",
         *       "serviceLogoURL": "Error fugiat.",
         *       "serviceName": "MySQL multi-writer service",
         *       "status": "PENDING",
         *       "updatedAt": "2019-01-01T00:00:00Z",
         *       "updatedByUserId": "user-12345678",
         *       "updatedByUserName": "John Doe"
         *     } */
        DescribeSubscriptionRequestResult: {
            /**
             * @description The time that this subscription request was issued
             * @example 2019-01-01T00:00:00Z
             */
            createdAt: string;
            /**
             * @description The subscription ID
             * @example subr-12345678
             */
            id: string;
            /**
             * @description The product tier ID that this subscription is tied to
             * @example pt-12345678
             */
            productTierId: string;
            /**
             * @description The name of the product tier
             * @example Omnistrate Multi Tenancy
             */
            productTierName: string;
            /**
             * @description The email of the user that issued the subscription request
             * @example abc@gmail.com
             */
            rootUserEmail: string;
            /**
             * @description The ID of the user that issued the subscription request
             * @example org-12345678
             */
            rootUserId: string;
            /**
             * @description The name of the user that issued the subscription request
             * @example John Doe
             */
            rootUserName: string;
            /**
             * @description The service ID that this subscription is tied to
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The logo for the service
             * @example Fugit sint ea.
             */
            serviceLogoURL?: string;
            /**
             * @description The name of the service
             * @example MySQL multi-writer service
             */
            serviceName: string;
            /**
             * @description The status of the subscription request
             * @example PENDING
             */
            status: string;
            /**
             * @description The time that this subscription request was issued
             * @example 2019-01-01T00:00:00Z
             */
            updatedAt: string;
            /**
             * @description The user ID that last updated the subscription request
             * @example user-12345678
             */
            updatedByUserId: string;
            /**
             * @description The user that last updated the subscription request
             * @example John Doe
             */
            updatedByUserName: string;
        };
        /** @example {
         *       "accountConfigIdentityId": "org-12345678",
         *       "cloudProviderNames": [
         *         "aws",
         *         "gcp"
         *       ],
         *       "createdAt": "2019-01-01T00:00:00Z",
         *       "defaultSubscription": true,
         *       "id": "sub-12345678",
         *       "productTierId": "pt-12345678",
         *       "productTierName": "Omnistrate Multi Tenancy",
         *       "roleType": "root",
         *       "rootUserId": "user-12345678",
         *       "serviceId": "s-12345678",
         *       "serviceLogoURL": "Quae quis est est.",
         *       "serviceName": "MySQL multi-writer service",
         *       "serviceOrgId": "org-12345678",
         *       "serviceOrgName": "Omnistrate",
         *       "status": "ACTIVE",
         *       "subscriptionOwnerName": "John Doe"
         *     } */
        DescribeSubscriptionResult: {
            /**
             * @description The org ID of the account config identity
             * @example org-12345678
             */
            accountConfigIdentityId: string;
            /**
             * @description List of cloud provider names
             * @example [
             *       "aws",
             *       "gcp"
             *     ]
             */
            cloudProviderNames: string[];
            /**
             * @description The time that this subscription was created
             * @example 2019-01-01T00:00:00Z
             */
            createdAt: string;
            /**
             * @description Whether this is the default subscription for the user
             * @example true
             */
            defaultSubscription: boolean;
            /**
             * @description The subscription ID
             * @example sub-12345678
             */
            id: string;
            /**
             * @description The product tier ID that this subscription is tied to
             * @example pt-12345678
             */
            productTierId: string;
            /**
             * @description The name of the product tier
             * @example Omnistrate Multi Tenancy
             */
            productTierName: string;
            /**
             * @description The role type of the caller user in this subscription
             * @example root
             */
            roleType: string;
            /**
             * @description The user ID that this subscription belong to
             * @example user-12345678
             */
            rootUserId: string;
            /**
             * @description The service ID that this subscription is tied to
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The logo for the service
             * @example Non molestiae omnis et dolorum voluptas dolor.
             */
            serviceLogoURL: string;
            /**
             * @description The name of the service
             * @example MySQL multi-writer service
             */
            serviceName: string;
            /**
             * @description The org ID of the org that owns the service
             * @example org-12345678
             */
            serviceOrgId: string;
            /**
             * @description The name of the org that owns the service
             * @example Omnistrate
             */
            serviceOrgName: string;
            /**
             * @description The status of the subscription
             * @example ACTIVE
             */
            status: string;
            /**
             * @description The name of the subscription owner user
             * @example John Doe
             */
            subscriptionOwnerName: string;
        };
        /** @example {
         *       "billingEmbedURL": "https://billing.provider.com/embed?customerId=cus_xxxxxxxxxxxxxx",
         *       "name": "John Dae",
         *       "paymentConfigured": true,
         *       "paymentInfoPortalURL": "https://billing.provider.com/stripe-portal?customerId=cus_xxxxxxxxxxxxxx",
         *       "userId": "user-abcd1234"
         *     } */
        DescribeUserBillingDetailsResult: {
            /**
             * @description The URL from the billing provider to embed in an iframe to show the user's billing information
             * @example https://billing.provider.com/embed?customerId=cus_xxxxxxxxxxxxxx
             */
            billingEmbedURL: string;
            /**
             * @description The name of the user
             * @example John Dae
             */
            name: string;
            /**
             * @description Whether the customer has configured their payment information.
             * @example true
             */
            paymentConfigured: boolean;
            /**
             * @description The URL from the billing provide to redirect users to so they can enter their payment information.  Only present when first adding payment information
             * @example https://billing.provider.com/stripe-portal?customerId=cus_xxxxxxxxxxxxxx
             */
            paymentInfoPortalURL?: string;
            /**
             * @description The User ID
             * @example user-abcd1234
             */
            userId: string;
        };
        /** @example {
         *       "address": {
         *         "addressLine1": "1234 Main St",
         *         "addressLine2": "Apt 123",
         *         "addressLine3": "Building 123",
         *         "city": "San Francisco",
         *         "country": "US",
         *         "state": "CA",
         *         "zip": "94123"
         *       },
         *       "createdAt": "2023-01-10T00:00:00Z",
         *       "email": "abc@gmail.com",
         *       "id": "user-abcd1234",
         *       "lastModifiedAt": "2023-01-20T00:00:00Z",
         *       "name": "John Dae",
         *       "orgDescription": "ACME Inc.",
         *       "orgFavIconURL": "Suscipit earum illum.",
         *       "orgId": "org-aKQ8G13QeR",
         *       "orgLogoURL": "Et ut illum quia et.",
         *       "orgName": "ACME",
         *       "orgPrivacyPolicy": "Enim nemo optio possimus omnis voluptatem et.",
         *       "orgSupportEmail": "support@example.com",
         *       "orgTermsOfUse": "Mollitia tenetur id.",
         *       "orgURL": "something.acme",
         *       "planName": "STARTER",
         *       "roleType": "reader"
         *     } */
        DescribeUserResult: {
            address?: components["schemas"]["Address"];
            /**
             * @description The user creation time
             * @example 2023-01-10T00:00:00Z
             */
            createdAt: string;
            /**
             * @description The email of the user
             * @example abc@gmail.com
             */
            email: string;
            /**
             * @description The User ID
             * @example user-abcd1234
             */
            id: string;
            /**
             * @description The user update time
             * @example 2023-01-20T00:00:00Z
             */
            lastModifiedAt: string;
            /**
             * @description The name of the user
             * @example John Dae
             */
            name: string;
            /**
             * @description The description of the org that this user owns
             * @example ACME Inc.
             */
            orgDescription: string;
            /**
             * @description The favicon of the org that this user owns
             * @example Temporibus officia.
             */
            orgFavIconURL: string;
            /**
             * @description The ID of the org that this user owns
             * @example org-aKQ8G13QeR
             */
            orgId: string;
            /**
             * @description The logo of the org that this user owns
             * @example Molestias quia itaque.
             */
            orgLogoURL: string;
            /**
             * @description The org name that this user owns
             * @example ACME
             */
            orgName: string;
            /**
             * @description The privacy policy for the org that this user owns
             * @example Est dicta harum omnis deserunt.
             */
            orgPrivacyPolicy: string;
            /**
             * @description The support email of the org that this user owns
             * @example support@example.com
             */
            orgSupportEmail: string;
            /**
             * @description The terms of use for the org that this user owns
             * @example Quia quia.
             */
            orgTermsOfUse: string;
            /**
             * @description The url of the org that this user owns
             * @example something.acme
             */
            orgURL: string;
            /**
             * @description The name of the plan of the user
             * @example STARTER
             */
            planName?: string;
            /**
             * @description The role type of the user
             * @example reader
             */
            roleType: string;
        };
        /** @example {
         *       "Id": "org-aKQ8G13QeR",
         *       "orgUsers": [
         *         {
         *           "email": "abc@gmail.com",
         *           "invitedAt": "2023-01-10T00:00:00Z",
         *           "name": "John Doe",
         *           "roleType": "reader",
         *           "userId": "user-abcd1234"
         *         }
         *       ]
         *     } */
        DescribeUsersByOrgResult: {
            /**
             * @description The ID of the org
             * @example org-aKQ8G13QeR
             */
            Id: string;
            /**
             * @description The users associated with the corresponding org
             * @example [
             *       {
             *         "email": "abc@gmail.com",
             *         "invitedAt": "2023-01-10T00:00:00Z",
             *         "name": "John Doe",
             *         "roleType": "reader",
             *         "userId": "user-abcd1234"
             *       }
             *     ]
             */
            orgUsers: components["schemas"]["OrgUsers"][];
        };
        /** @example {
         *       "Id": "sub-abcd1234",
         *       "subscriptionUsers": [
         *         {
         *           "email": "abc@gmail.com",
         *           "name": "John Doe",
         *           "roleType": "reader",
         *           "subscriptionId": "sub-abcd1234",
         *           "userId": "user-abcd1234"
         *         }
         *       ]
         *     } */
        DescribeUsersBySubscriptionResult: {
            /**
             * @description The ID of the subscription
             * @example sub-abcd1234
             */
            Id: string;
            /**
             * @description The users associated with the corresponding subscription
             * @example [
             *       {
             *         "email": "abc@gmail.com",
             *         "name": "John Doe",
             *         "roleType": "reader",
             *         "subscriptionId": "sub-abcd1234",
             *         "userId": "user-abcd1234"
             *       }
             *     ]
             */
            subscriptionUsers: components["schemas"]["SubscriptionUsers"][];
        };
        /** @example {
         *       "cloudProvider": "aws",
         *       "id": "vu-12345678",
         *       "networkIds": [
         *         "n-12345678",
         *         "n-abcdefgh",
         *         "n-1234efgh"
         *       ],
         *       "region": "us-west-2",
         *       "serviceId": "s-12345678",
         *       "serviceModelId": "sm-12345678"
         *     } */
        DescribeVUnitResult: {
            /**
             * @description The infra / cloud provider name
             * @example aws
             */
            cloudProvider: string;
            /**
             * @description VUnit to operate on
             * @example vu-12345678
             */
            id?: string;
            /**
             * @description List of network IDs in the given context
             * @example [
             *       "n-12345678",
             *       "n-abcdefgh",
             *       "n-1234efgh"
             *     ]
             */
            networkIds: string[];
            /**
             * @description Region code specific to the cloud-provider
             * @example us-west-2
             */
            region: string;
            /**
             * @description Service ID for the VUnit
             * @example s-12345678
             */
            serviceId?: string;
            /**
             * @description Service Model ID for the VUnit
             * @example sm-12345678
             */
            serviceModelId: string;
        };
        /** @example {
         *       "id": "r-12345678",
         *       "metricEndpoint": "http://localhost:9187/metrics",
         *       "serviceId": "s-12345678"
         *     } */
        Describeresourcemetricsconfigresult: {
            /**
             * @description The ID of the resource
             * @example r-12345678
             */
            id: string;
            /**
             * @description The local host endpoint to supply prometheus metric
             * @example http://localhost:9187/metrics
             */
            metricEndpoint: string;
            /**
             * @description The service ID that this API bundle belongs to
             * @example s-12345678
             */
            serviceId: string;
        };
        /** @example {
         *       "ConnectivityStatus": "HEALTHY",
         *       "DiskHealth": "HEALTHY",
         *       "IntegrationsHealth": {
         *         "CustomerObservabilityHealth": "HEALTHY",
         *         "InternalObservabilityHealth": "HEALTHY"
         *       },
         *       "LoadHealth": "LOAD_NORMAL",
         *       "LoadStatus": "LOAD_NORMAL",
         *       "NodeHealth": "HEALTHY",
         *       "ProcessHealth": "HEALTHY",
         *       "ProcessLiveness": "HEALTHY"
         *     } */
        DetailedNodeHealthResult: {
            /**
             * @description The health status of the network endpoints
             * @example HEALTHY
             */
            ConnectivityStatus?: string;
            /**
             * @description The health status of the disk
             * @example HEALTHY
             */
            DiskHealth?: string;
            IntegrationsHealth?: components["schemas"]["IntegrationsHealth"];
            /**
             * @description (deprecated) The load status of the pod
             * @example LOAD_NORMAL
             */
            LoadHealth?: string;
            /**
             * @description The load status of the pod
             * @example LOAD_NORMAL
             */
            LoadStatus?: string;
            /**
             * @description The health status of the machine hosting the service
             * @example HEALTHY
             */
            NodeHealth?: string;
            /**
             * @description The health status of the process
             * @example HEALTHY
             */
            ProcessHealth?: string;
            /**
             * @description The liveness status of the process
             * @example HEALTHY
             */
            ProcessLiveness?: string;
        };
        /** @example {
         *       "anotherVersion": "3.1",
         *       "productTierId": "Possimus sit numquam at.",
         *       "resourceChangeSets": {
         *         "Laboriosam dolores a veritatis laboriosam pariatur accusantium.": {
         *           "categorizedResourceChanges": {
         *             "Quo amet explicabo.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             },
         *             "Ut deserunt voluptate vel necessitatibus.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             },
         *             "Vitae omnis molestiae eaque id.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             }
         *           },
         *           "imageConfigChanges": {
         *             "changeState": "PENDING_NEW",
         *             "imageConfigId": "imgc-12345678",
         *             "imageName": "mysql"
         *           },
         *           "infraConfigChanges": {
         *             "changeState": "PENDING_NEW",
         *             "infraConfigId": "ic-12345678",
         *             "name": "MySQL Writer Infra Config"
         *           },
         *           "overallResourceStatus": "PENDING_UPDATE",
         *           "productTierFeatureChanges": "PENDING_UPDATE",
         *           "resourceChanges": "PENDING_DELETE",
         *           "resourceName": "Inventore commodi quasi consequatur."
         *         },
         *         "Qui vitae.": {
         *           "categorizedResourceChanges": {
         *             "Quo amet explicabo.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             },
         *             "Ut deserunt voluptate vel necessitatibus.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             },
         *             "Vitae omnis molestiae eaque id.": {
         *               "changes": [
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 },
         *                 {
         *                   "attributes": {
         *                     "resourceId": "r-12345678"
         *                   },
         *                   "changeType": "PENDING_NEW",
         *                   "name": "Customer metrics"
         *                 }
         *               ],
         *               "status": "PENDING_UPDATE"
         *             }
         *           },
         *           "imageConfigChanges": {
         *             "changeState": "PENDING_NEW",
         *             "imageConfigId": "imgc-12345678",
         *             "imageName": "mysql"
         *           },
         *           "infraConfigChanges": {
         *             "changeState": "PENDING_NEW",
         *             "infraConfigId": "ic-12345678",
         *             "name": "MySQL Writer Infra Config"
         *           },
         *           "overallResourceStatus": "PENDING_UPDATE",
         *           "productTierFeatureChanges": "PENDING_UPDATE",
         *           "resourceChanges": "PENDING_DELETE",
         *           "resourceName": "Inventore commodi quasi consequatur."
         *         }
         *       },
         *       "serviceId": "s-12345678",
         *       "version": "3.0"
         *     } */
        DiffTierVersionSetsResult: {
            /**
             * @description The target version to compare against.
             * @example 3.1
             */
            anotherVersion: string;
            /**
             * @description The product tier ID that this version set belongs to.
             * @example Non quos tempore.
             */
            productTierId: string;
            /**
             * @description The difference for the service API configuration per resource
             * @example {
             *       "Et accusamus voluptatem consectetur iure.": {
             *         "categorizedResourceChanges": {
             *           "Quo amet explicabo.": {
             *             "changes": [
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               },
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               }
             *             ],
             *             "status": "PENDING_UPDATE"
             *           },
             *           "Ut deserunt voluptate vel necessitatibus.": {
             *             "changes": [
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               },
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               }
             *             ],
             *             "status": "PENDING_UPDATE"
             *           },
             *           "Vitae omnis molestiae eaque id.": {
             *             "changes": [
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               },
             *               {
             *                 "attributes": {
             *                   "resourceId": "r-12345678"
             *                 },
             *                 "changeType": "PENDING_NEW",
             *                 "name": "Customer metrics"
             *               }
             *             ],
             *             "status": "PENDING_UPDATE"
             *           }
             *         },
             *         "imageConfigChanges": {
             *           "changeState": "PENDING_NEW",
             *           "imageConfigId": "imgc-12345678",
             *           "imageName": "mysql"
             *         },
             *         "infraConfigChanges": {
             *           "changeState": "PENDING_NEW",
             *           "infraConfigId": "ic-12345678",
             *           "name": "MySQL Writer Infra Config"
             *         },
             *         "overallResourceStatus": "PENDING_UPDATE",
             *         "productTierFeatureChanges": "PENDING_UPDATE",
             *         "resourceChanges": "PENDING_DELETE",
             *         "resourceName": "Inventore commodi quasi consequatur."
             *       }
             *     }
             */
            resourceChangeSets: {
                [key: string]: components["schemas"]["ChangeSet"];
            };
            /**
             * @description ID of the Service
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The version number for the version set.
             * @example 3.0
             */
            version: string;
        };
        /** @example {
         *       "feature": "BILLING",
         *       "scope": "INTERNAL"
         *     } */
        DisableProductTierFeatureRequestBody: {
            /**
             * @description Feature to disable
             * @example BILLING
             */
            feature: string;
            /**
             * @description Feature scope
             * @example INTERNAL
             */
            scope?: string;
        };
        /** @example {
         *       "capability": "SERVERLESS"
         *     } */
        DisableResourceCapabilityRequestBody: {
            /**
             * @description The capability to disable
             * @example SERVERLESS
             */
            capability: string;
        };
        /** @example {
         *       "feature": "Doloribus nisi."
         *     } */
        DisableServiceModelFeatureRequestBody: {
            /** @example Illo esse similique maxime. */
            feature: string;
        };
        /** @example {
         *       "PerformanceMode": "generalPurpose|maxIO",
         *       "ProvisionedThroughputInMibps": 125,
         *       "ThroughputMode": "provisioned|bursting|elastic"
         *     } */
        EFSFileSystemConfiguration: {
            /**
             * @description The performance mode of the EFS file system
             * @example generalPurpose|maxIO
             */
            PerformanceMode: string;
            /**
             * Format: double
             * @description The throughput, measured in MiBps, that you want to provision for the EFS file system, if throughput mode if provisioned
             * @example 125
             */
            ProvisionedThroughputInMibps?: number;
            /**
             * @description The throughput mode of the EFS file system
             * @example provisioned|bursting|elastic
             */
            ThroughputMode: string;
        };
        /** @example {
         *       "configuration": {
         *         "S3BucketArn": "arn:aws:s3:::my_billing_bucket_name"
         *       },
         *       "feature": "BILLING",
         *       "scope": "INTERNAL"
         *     } */
        EnableProductTierFeatureRequestBody: {
            /**
             * @description The configuration parameters of the product tier feature
             * @example {
             *       "S3BucketArn": "arn:aws:s3:::my_billing_bucket_name"
             *     }
             */
            configuration?: {
                [key: string]: unknown;
            };
            /**
             * @description Feature to enable
             * @example BILLING
             */
            feature: string;
            /**
             * @description Feature scope
             * @example INTERNAL
             */
            scope?: string;
        };
        /** @example {
         *       "capability": "SERVERLESS",
         *       "configuration": {
         *         "EnableAutoStop": true,
         *         "MinimumNodesInPool": 5,
         *         "PortsMappingProxyConfig": {
         *           "MaxNumberOfClustersPerProxyInstance": 50,
         *           "NumberOfPortsPerCluster": 4
         *         },
         *         "ReferenceProxyKey": "resource-proxy",
         *         "TargetPort": 5432
         *       }
         *     } */
        EnableResourceCapabilityRequestBody: {
            /**
             * @description The type of capability of a resource
             * @example SERVERLESS
             */
            capability: string;
            /**
             * @description The configuration parameters of a capability of a resource
             * @example {
             *       "EnableAutoStop": true,
             *       "MinimumNodesInPool": 5,
             *       "PortsMappingProxyConfig": {
             *         "MaxNumberOfClustersPerProxyInstance": 50,
             *         "NumberOfPortsPerCluster": 4
             *       },
             *       "ReferenceProxyKey": "resource-proxy",
             *       "TargetPort": 5432
             *     }
             */
            configuration?: {
                [key: string]: unknown;
            };
        };
        /** @example {
         *       "host": "https://my-endpoint.com",
         *       "networkingType": "PUBLIC|PRIVATE",
         *       "ports": [
         *         8080,
         *         8081
         *       ],
         *       "primary": false
         *     } */
        Endpoint: {
            /**
             * @description The host of the endpoint
             * @default
             * @example https://my-endpoint.com
             */
            host: string;
            /**
             * @description The networking type of the endpoint
             * @default PUBLIC
             * @example PUBLIC|PRIVATE
             */
            networkingType: string;
            /**
             * @description The ports of the endpoint
             * @example [
             *       8080,
             *       8081
             *     ]
             */
            ports?: number[];
            /**
             * @description Whether this is the primary endpoint to highlight
             * @default false
             * @example true
             */
            primary: boolean;
        };
        /** @example {
         *       "models": {
         *         "sm-12345678": {
         *           "vu-11111111": "UNKNOWN",
         *           "vu-12345678": "UP",
         *           "vu-87654321": "DOWN"
         *         }
         *       }
         *     } */
        EnvironmentHealthReport: {
            /**
             * @description Health report for each model in the environment
             * @example {
             *       "sm-12345678": {
             *         "vu-11111111": "UNKNOWN",
             *         "vu-12345678": "UP",
             *         "vu-87654321": "DOWN"
             *       }
             *     }
             */
            models?: {
                [key: string]: components["schemas"]["VUnitHealthReport"];
            };
        };
        /** @example {
         *       "status": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *       "targetEnvironmentID": "se-12345678"
         *     } */
        EnvironmentPromotionStatus: {
            /**
             * @description The status of the promotion
             * @example IN_SYNC|OUT_OF_SYNC|UNKNOWN
             */
            status: string;
            /**
             * @description The ID of the target environment
             * @example se-12345678
             */
            targetEnvironmentID: string;
        };
        /**
         * @description A service environment variable
         * @example {
         *       "key": "MYSQL_ROOT_PASSWORD",
         *       "value": "password"
         *     }
         */
        EnvironmentVariable: {
            /**
             * @description The key of the environment variable
             * @example MYSQL_ROOT_PASSWORD
             */
            key: string;
            /**
             * @description The value of the environment variable
             * @example password
             */
            value: string;
        };
        /** @example {
         *       "fault": true,
         *       "id": "123abc",
         *       "message": "parameter 'p' must be an integer",
         *       "name": "bad_request",
         *       "temporary": true,
         *       "timeout": true
         *     } */
        Error: {
            /**
             * @description Is the error a server-side fault?
             * @example false
             */
            fault: boolean;
            /**
             * @description ID is a unique identifier for this particular occurrence of the problem.
             * @example 123abc
             */
            id: string;
            /**
             * @description Message is a human-readable explanation specific to this occurrence of the problem.
             * @example parameter 'p' must be an integer
             */
            message: string;
            /**
             * @description Name is the name of this class of errors.
             * @example bad_request
             */
            name: string;
            /**
             * @description Is the error temporary?
             * @example false
             */
            temporary: boolean;
            /**
             * @description Is the error a timeout?
             * @example false
             */
            timeout: boolean;
        };
        /** @example {
         *       "failedReplicaAction": "FAILOVER_AND_RESTART",
         *       "failedReplicaID": "db-0"
         *     } */
        FailoverResourceInstanceRequestBody: {
            /**
             * @description The failed replica action
             * @example FAILOVER_AND_RESTART
             */
            failedReplicaAction?: string;
            /**
             * @description The failed replica ID
             * @example db-0
             */
            failedReplicaID: string;
        };
        /** @example {
         *       "description": "A file to store the configuration for the resource",
         *       "fileId": "f-12345678",
         *       "mountPath": "/etc/config",
         *       "name": "file.txt",
         *       "size": 1234,
         *       "type": "Config",
         *       "uploadTime": "2023-01-10T00:00:00Z",
         *       "uploadedBy": "user"
         *     } */
        FileMetadata: {
            /**
             * @description The description of the file
             * @example A file to store the configuration for the resource
             */
            description: string;
            /**
             * @description The ID of the file
             * @example f-12345678
             */
            fileId: string;
            /**
             * @description The mount path of the file
             * @example /etc/config
             */
            mountPath: string;
            /**
             * @description The name of the file
             * @example file.txt
             */
            name: string;
            /**
             * Format: int64
             * @description The size of the file
             * @example 1234
             */
            size: number;
            /**
             * @description The type of the file
             * @example Config
             */
            type: string;
            /**
             * @description The time the file was uploaded
             * @example 2023-01-10T00:00:00Z
             */
            uploadTime: string;
            /**
             * @description The user who uploaded the file
             * @example user
             */
            uploadedBy: string;
        };
        /** @example {
         *       "EFSFileSystemConfiguration": {
         *         "PerformanceMode": "generalPurpose|maxIO",
         *         "ProvisionedThroughputInMibps": 125,
         *         "ThroughputMode": "provisioned|bursting|elastic"
         *       }
         *     } */
        FileSystemConfiguration: {
            EFSFileSystemConfiguration?: components["schemas"]["EFSFileSystemConfiguration"];
        };
        /** @example {} */
        GCSConfiguration: Record<string, never>;
        /** @example {
         *       "environmentVariables": [
         *         {
         *           "key": "MYSQL_ROOT_PASSWORD",
         *           "value": "password"
         *         }
         *       ],
         *       "image": "library/mysql:5.7",
         *       "imageRegistry": "docker.io",
         *       "password": "password",
         *       "username": "username"
         *     } */
        GenerateComposeSpecFromContainerImageRequestBody: {
            /**
             * @description Runtime environment variables needed to run the image
             * @example [
             *       {
             *         "key": "MYSQL_ROOT_PASSWORD",
             *         "value": "password"
             *       }
             *     ]
             */
            environmentVariables?: components["schemas"]["EnvironmentVariable"][];
            /**
             * @description Name of the image along with the tag. Include the repository name if the image is not from the official repository
             * @example library/mysql:5.7
             */
            image: string;
            /**
             * @description Registry where the image is stored
             * @example docker.io
             */
            imageRegistry: string;
            /**
             * @description Password to access the image registry
             * @example password
             */
            password?: string;
            /**
             * @description Username to access the image registry
             * @example username
             */
            username?: string;
        };
        /** @example {
         *       "fileContent": "Hic dolore."
         *     } */
        GenerateComposeSpecFromContainerImageResult: {
            /**
             * @description Base64 encoded Compose Spec YAML in docker compose format
             * @example Assumenda qui libero rerum similique.
             */
            fileContent: string;
        };
        /** @example {
         *       "deploymentCellID": "hc-12345678",
         *       "expirationTimestamp": "2021-01-01T00:00:00Z",
         *       "token": "token"
         *     } */
        GenerateTokenForDeploymentCellDashboardResult: {
            /**
             * @description The deployment cell ID
             * @example hc-12345678
             */
            deploymentCellID: string;
            /**
             * @description The timestamp when the token expires
             * @example 2021-01-01T00:00:00Z
             */
            expirationTimestamp: string;
            /**
             * @description The token to access the dashboard
             * @example token
             */
            token: string;
        };
        /** @example {
         *       "endTime": "2021-01-01T00:00:00.000Z",
         *       "planName": "STARTER",
         *       "startTime": "2021-01-01T00:00:00.000Z",
         *       "usage": [
         *         {
         *           "dimension": "core/hours",
         *           "total": 0.67
         *         }
         *       ]
         *     } */
        GetCurrentUsageResult: {
            /**
             * @description End timestamp of usage
             * @example 2021-01-01T00:00:00.000Z
             */
            endTime?: string;
            /**
             * @description The name of the current plan
             * @example STARTER
             */
            planName?: string;
            /**
             * @description Start timestamp of usage
             * @example 2021-01-01T00:00:00.000Z
             */
            startTime?: string;
            /**
             * @description Usage for the current plan
             * @example [
             *       {
             *         "dimension": "core/hours",
             *         "total": 0.67
             *       }
             *     ]
             */
            usage?: components["schemas"]["UsagePerDimension"][];
        };
        /** @example {
         *       "AutoApproveSubscription": false,
         *       "accountConfigIds": [
         *         "ac-12345678",
         *         "ac-23456789"
         *       ],
         *       "activeAccountConfigIds": {
         *         "aws": "ac-12345678",
         *         "gcp": "ac-23456789"
         *       },
         *       "apiVersion": "v1",
         *       "awsRegions": [
         *         "us-east-2",
         *         "ca-central-1"
         *       ],
         *       "deploymentConfigId": "dc-12345678",
         *       "gcpRegions": [
         *         "us-central1"
         *       ],
         *       "hasPendingChanges": true,
         *       "isProductTierDisabled": true,
         *       "latestMajorVersion": "3.0",
         *       "modelType": "CUSTOMER_HOSTED",
         *       "productTierDescription": "A premium product tier",
         *       "productTierDocumentation": "Any documentation",
         *       "productTierFeatures": {
         *         "BILLING": false,
         *         "LOGS": true,
         *         "METRICS": false
         *       },
         *       "productTierId": "pt-12345678",
         *       "productTierKey": "premium",
         *       "productTierName": "Premium",
         *       "productTierPlanDescription": "A premium plan",
         *       "productTierPricing": {
         *         "price1": "value1"
         *       },
         *       "productTierSupport": "Any support",
         *       "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
         *       "serviceApiId": "sa-12345678",
         *       "serviceEnvironmentId": "se-12345678",
         *       "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
         *       "serviceModelFeatures": [
         *         {
         *           "configuration": {
         *             "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *             "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *           },
         *           "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *         },
         *         {
         *           "configuration": {
         *             "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *             "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *           },
         *           "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *         }
         *       ],
         *       "serviceModelId": "sm-12345678",
         *       "serviceModelName": "MySQL multi-writer service hosted model",
         *       "tierType": "OMNISTRATE_DEDICATED_TENANCY",
         *       "versionSetStatus": "Preferred|Active|Deprecated|Pending"
         *     } */
        GetServicePlanResult: {
            /**
             * @description Auto approve subscription or not
             * @example false
             */
            AutoApproveSubscription: boolean;
            /**
             * @description The infrastructure account configuration ID list
             * @example [
             *       "ac-12345678",
             *       "ac-23456789"
             *     ]
             */
            accountConfigIds?: string[];
            /**
             * @description The active infrastructure account configuration IDs per cloud provider
             * @example {
             *       "aws": "ac-12345678",
             *       "gcp": "ac-23456789"
             *     }
             */
            activeAccountConfigIds?: {
                [key: string]: string;
            };
            /**
             * @description The external version of the API
             * @example v1
             */
            apiVersion: string;
            /**
             * @description The AWS regions that this service plan is available on
             * @example [
             *       "us-east-2",
             *       "ca-central-1"
             *     ]
             */
            awsRegions?: string[];
            /**
             * @description The deployment configuration ID
             * @example dc-12345678
             */
            deploymentConfigId: string;
            /**
             * @description The GCP regions that this service plan is available on
             * @example [
             *       "us-central1"
             *     ]
             */
            gcpRegions?: string[];
            /**
             * @description Whether there are any pending changes for the product tier configuration
             * @example true
             */
            hasPendingChanges: boolean;
            /**
             * @description Whether the product tier is disabled
             * @example true
             */
            isProductTierDisabled: boolean;
            /**
             * @description The version number for the latest major version set.
             * @example 3.0
             */
            latestMajorVersion: string;
            /**
             * @description The model type encapsulating this service
             * @example CUSTOMER_HOSTED
             */
            modelType: string;
            /**
             * @description A brief description of the product tier
             * @example A premium product tier
             */
            productTierDescription: string;
            /**
             * @description Documentation
             * @example Any documentation
             */
            productTierDocumentation: string;
            /**
             * @description The features that are enabled / disabled for this product tier
             * @example {
             *       "BILLING": false,
             *       "LOGS": true,
             *       "METRICS": false
             *     }
             */
            productTierFeatures?: {
                [key: string]: boolean;
            };
            /**
             * @description Product tier ID
             * @example pt-12345678
             */
            productTierId: string;
            /**
             * @description Unique Key of the product tier
             * @example premium
             */
            productTierKey: string;
            /**
             * @description Name of the product tier
             * @example Premium
             */
            productTierName: string;
            /**
             * @description A brief description for the end user of the product tier
             * @example A premium plan
             */
            productTierPlanDescription: string;
            /**
             * @description Pricing
             * @example {
             *       "price1": "value1"
             *     }
             */
            productTierPricing: unknown;
            /**
             * @description Support
             * @example Any support
             */
            productTierSupport: string;
            /**
             * @description A brief description of the service API bundle
             * @example A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability
             */
            serviceApiDescription: string;
            /**
             * @description The service API ID
             * @example sa-12345678
             */
            serviceApiId: string;
            /**
             * @description The service environment ID
             * @example se-12345678
             */
            serviceEnvironmentId: string;
            /**
             * @description A brief description of the service model
             * @example A MySQL Hosted SaaS specializing in multi-writer clusters for high availability
             */
            serviceModelDescription: string;
            /**
             * @description Enabled service model features
             * @example [
             *       {
             *         "configuration": {
             *           "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *           "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *         },
             *         "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *       },
             *       {
             *         "configuration": {
             *           "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *           "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *         },
             *         "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *       }
             *     ]
             */
            serviceModelFeatures?: components["schemas"]["ServiceModelFeatureDetail"][];
            /**
             * @description The service model ID
             * @example sm-12345678
             */
            serviceModelId: string;
            /**
             * @description Name of the Service Model
             * @example MySQL multi-writer service hosted model
             */
            serviceModelName: string;
            /**
             * @description Tier type
             * @example OMNISTRATE_DEDICATED_TENANCY
             */
            tierType: string;
            /**
             * @description The tier version set status.
             * @example Preferred|Active|Deprecated|Pending
             */
            versionSetStatus: string;
        };
        /** @example {
         *       "accessToken": "my-token",
         *       "referenceName": "tags/v1.0.0",
         *       "repositoryUrl": "https://github.com/username/myrepo",
         *       "userName": "my-user"
         *     } */
        GitConfiguration: {
            /**
             * @description The access token
             * @example my-token
             */
            accessToken?: string;
            /**
             * @description The reference name of the repository
             * @example tags/v1.0.0
             */
            referenceName: string;
            /**
             * @description The URL of the repository
             * @example https://github.com/username/myrepo
             */
            repositoryUrl: string;
            /**
             * @description The name of github user
             * @example my-user
             */
            userName?: string;
        };
        /** @example {
         *       "chartName": "my-chart",
         *       "chartRepoName": "my-repo",
         *       "chartRepoUrl": "https://my-repo.com",
         *       "chartValues": {
         *         "key1": "value1",
         *         "key2": 3,
         *         "key3": {
         *           "key4": "value4"
         *         }
         *       },
         *       "chartVersion": "1.0.0",
         *       "endpointConfiguration": {
         *         "admin": {
         *           "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *           "networkingType": "PRIVATE",
         *           "ports": [
         *             8080,
         *             8081
         *           ],
         *           "primary": false
         *         },
         *         "cluster": {
         *           "host": "https://my-endpoint.com",
         *           "networkingType": "PUBLIC",
         *           "ports": [
         *             8080,
         *             8081
         *           ],
         *           "primary": true
         *         }
         *       },
         *       "password": "my-password",
         *       "runtimeConfiguration": {
         *         "disableHooks": true,
         *         "recreate": true,
         *         "resetThenReuseValues": true,
         *         "resetValues": true,
         *         "reuseValues": true,
         *         "skipCRDs": true,
         *         "timeoutNanos": 1000000000,
         *         "upgradeCRDs": true,
         *         "wait": true,
         *         "waitForJobs": true
         *       },
         *       "username": "my-user"
         *     } */
        HelmChartConfiguration: {
            /**
             * @description The chart name of the Helm package
             * @example my-chart
             */
            chartName: string;
            /**
             * @description The chart repository name of the Helm package
             * @example my-repo
             */
            chartRepoName: string;
            /**
             * @description The chart repository URL of the Helm package
             * @example https://my-repo.com
             */
            chartRepoUrl: string;
            /**
             * @description The values of the Helm package
             * @example {
             *       "key1": "value1",
             *       "key2": 3,
             *       "key3": {
             *         "key4": "value4"
             *       }
             *     }
             */
            chartValues?: {
                [key: string]: unknown;
            };
            /**
             * @description The chart version of the Helm package
             * @example 1.0.0
             */
            chartVersion: string;
            /**
             * @description The endpoints from the Helm Deployment to expose to the customer
             * @example {
             *       "admin": {
             *         "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *         "networkingType": "PRIVATE",
             *         "ports": [
             *           8080,
             *           8081
             *         ],
             *         "primary": false
             *       },
             *       "cluster": {
             *         "host": "https://my-endpoint.com",
             *         "networkingType": "PUBLIC",
             *         "ports": [
             *           8080,
             *           8081
             *         ],
             *         "primary": true
             *       }
             *     }
             */
            endpointConfiguration?: {
                [key: string]: components["schemas"]["Endpoint"];
            };
            /**
             * @description The password to authenticate with the registry
             * @example my-password
             */
            password?: string;
            runtimeConfiguration?: components["schemas"]["HelmRuntimeConfiguration"];
            /**
             * @description The username to authenticate with the registry
             * @example my-user
             */
            username?: string;
        };
        /** @example {
         *       "chartName": "my-chart",
         *       "chartRepoName": "my-repo",
         *       "chartRepoUrl": "https://my-repo.com",
         *       "chartValues": {
         *         "key1": "value1",
         *         "key2": 3,
         *         "key3": {
         *           "key4": "value4"
         *         }
         *       },
         *       "chartVersion": "1.0.0",
         *       "namespace": "default",
         *       "password": "my-password",
         *       "username": "my-user"
         *     } */
        HelmPackage: {
            /**
             * @description The chart name of the Helm package
             * @example my-chart
             */
            chartName: string;
            /**
             * @description The chart repository name of the Helm package
             * @example my-repo
             */
            chartRepoName: string;
            /**
             * @description The chart repository URL of the Helm package
             * @example https://my-repo.com
             */
            chartRepoUrl: string;
            /**
             * @description The values of the Helm package
             * @example {
             *       "key1": "value1",
             *       "key2": 3,
             *       "key3": {
             *         "key4": "value4"
             *       }
             *     }
             */
            chartValues?: {
                [key: string]: unknown;
            };
            /**
             * @description The chart version of the Helm package
             * @example 1.0.0
             */
            chartVersion: string;
            /**
             * @description The namespace where the Helm package should be installed
             * @example default
             */
            namespace: string;
            /**
             * @description The password to authenticate with the registry
             * @example my-password
             */
            password?: string;
            /**
             * @description The username to authenticate with the registry
             * @example my-user
             */
            username?: string;
        };
        /** @example {
         *       "disableHooks": true,
         *       "recreate": true,
         *       "resetThenReuseValues": true,
         *       "resetValues": true,
         *       "reuseValues": true,
         *       "skipCRDs": true,
         *       "timeoutNanos": 1000000000,
         *       "upgradeCRDs": true,
         *       "wait": true,
         *       "waitForJobs": true
         *     } */
        HelmRuntimeConfiguration: {
            /**
             * @description Disable Helm hooks
             * @example true
             */
            disableHooks: boolean;
            /**
             * @description Recreate the Helm package if it already exists
             * @example true
             */
            recreate: boolean;
            /**
             * @description Reset then reuse values for the Helm package before applying
             * @example true
             */
            resetThenReuseValues: boolean;
            /**
             * @description Reset values for the Helm package before applying
             * @example true
             */
            resetValues: boolean;
            /**
             * @description Reuse values for the Helm package before applying
             * @example true
             */
            reuseValues: boolean;
            /**
             * @description Skip CRDs for the Helm package
             * @example true
             */
            skipCRDs: boolean;
            /**
             * Format: int64
             * @description Timeout (nanos) for the Helm package to be deployed
             * @example 1000000000
             */
            timeoutNanos: number;
            /**
             * @description Upgrade CRDs for the Helm package
             * @example true
             */
            upgradeCRDs: boolean;
            /**
             * @description Wait for the Helm package to be deployed
             * @example true
             */
            wait: boolean;
            /**
             * @description Wait for all jobs to be completed
             * @example true
             */
            waitForJobs: boolean;
        };
        /** @example {
         *       "changeState": "PENDING_NEW",
         *       "imageConfigId": "imgc-12345678",
         *       "imageName": "mysql"
         *     } */
        ImageConfigChangeSummary: {
            /**
             * @description The pending change state for the infra configuration
             * @example PENDING_NEW
             */
            changeState?: string;
            /**
             * @description The ID of the image configuration that this resource refers to
             * @example imgc-12345678
             */
            imageConfigId?: string;
            /**
             * @description Name of the container image
             * @example mysql
             */
            imageName?: string;
        };
        /** @example {
         *       "changeState": "PENDING_NEW",
         *       "infraConfigId": "ic-12345678",
         *       "name": "MySQL Writer Infra Config"
         *     } */
        InfraConfigChangeSummary: {
            /**
             * @description The pending change state for the infra configuration
             * @example PENDING_NEW
             */
            changeState?: string;
            /**
             * @description The ID of the infrastructure configuration that this resource refers to
             * @example ic-12345678
             */
            infraConfigId?: string;
            /**
             * @description The name of the infra config
             * @example MySQL Writer Infra Config
             */
            name?: string;
        };
        /**
         * @description The rollout configuration to use for making changes to the resources backed by this infra
         * @example {
         *       "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
         *       "maximumNumberOfResourceInstancesPerBatch": 1,
         *       "maximumUnavailableReplicas": 1
         *     }
         */
        InfraRollConfiguration: {
            /**
             * @description Rollout strategy to use for infra config updates
             * @example NEW_DEPLOYMENT_ONLY
             */
            infraRolloutStrategy?: string;
            /**
             * Format: int64
             * @description Maximum number of resource instances to update in a single batch
             * @default 1
             * @example 1
             */
            maximumNumberOfResourceInstancesPerBatch: number;
            /**
             * Format: int64
             * @description Maximum number of replicas of this resource that can be unavailable before halting the rollout
             * @default 1
             * @example 1
             */
            maximumUnavailableReplicas: number;
        };
        /** @example {
         *       "custom": false,
         *       "defaultValue": "option1",
         *       "dependentResourceID": "r-12345678",
         *       "description": "The name of the server",
         *       "displayName": "Server Name",
         *       "isList": false,
         *       "key": "serverName",
         *       "modifiable": true,
         *       "options": [
         *         "option1",
         *         "option2"
         *       ],
         *       "required": true,
         *       "type": "Boolean|Float64|String|JSON|Resource"
         *     } */
        InputParameterEntity: {
            /**
             * @description Whether the parameter is custom
             * @example false
             */
            custom: boolean;
            /**
             * @description The parameter default value
             * @example option1
             */
            defaultValue?: string;
            /**
             * @description The parameter dependent resource ID
             * @example r-12345678
             */
            dependentResourceID?: string;
            /**
             * @description The parameter description
             * @example The name of the server
             */
            description: string;
            /**
             * @description The parameter display name
             * @example Server Name
             */
            displayName: string;
            /**
             * @description Whether the parameter is a list
             * @example false
             */
            isList: boolean;
            /**
             * @description The parameter key
             * @example serverName
             */
            key: string;
            /**
             * @description Whether the parameter is modifiable
             * @example true
             */
            modifiable: boolean;
            /**
             * @description The parameter options
             * @example [
             *       "option1",
             *       "option2"
             *     ]
             */
            options?: string[];
            /**
             * @description Whether the parameter is required
             * @example true
             */
            required: boolean;
            /**
             * @description The parameter type
             * @example Boolean|Float64|String|JSON|Resource
             */
            type: string;
        };
        /** @example {
         *       "completeTime": "2021-09-01T00:00:00Z",
         *       "createdTime": "2021-09-01T00:00:00Z",
         *       "encrypted": true,
         *       "progress": 99,
         *       "snapshotId": "instance-ss-12345678",
         *       "status": "completed"
         *     } */
        InstanceSnapshot: {
            /**
             * @description The snapshot time
             * @example 2021-09-01T00:00:00Z
             */
            completeTime: string;
            /**
             * @description The snapshot creation time
             * @example 2021-09-01T00:00:00Z
             */
            createdTime: string;
            /**
             * @description Whether the snapshot is encrypted
             * @example true
             */
            encrypted: boolean;
            /**
             * Format: int64
             * @description The backup progress. 0-100
             * @example 99
             */
            progress: number;
            /**
             * @description The instance snapshot ID
             * @example instance-ss-12345678
             */
            snapshotId: string;
            /**
             * @description The snapshot status
             * @example completed
             */
            status: string;
        };
        /** @example {
         *       "CustomerObservabilityHealth": "HEALTHY",
         *       "InternalObservabilityHealth": "HEALTHY"
         *     } */
        IntegrationsHealth: {
            /**
             * @description The health status of the integration with customer provider observability stack on BYOA
             * @example HEALTHY
             */
            CustomerObservabilityHealth?: string;
            /**
             * @description The health status of the integration with service provider observability stack
             * @example HEALTHY
             */
            InternalObservabilityHealth?: string;
        };
        /** @example {
         *       "email": "abc@gmail.com",
         *       "roleType": "reader"
         *     } */
        InviteUserRequestBody: {
            /**
             * Format: email
             * @example abc@gmail.com
             */
            email: string;
            /** @example reader */
            roleType: string;
        };
        /** @example {
         *       "currency": "USD",
         *       "invoiceDate": "2021-01-01T00:00:00.000Z",
         *       "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
         *       "invoicePaymentTerm": "30",
         *       "invoiceStatus": "Open",
         *       "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
         *       "taxAmount": 10,
         *       "totalAmount": 110,
         *       "totalAmountWithoutTax": 100
         *     } */
        Invoice: {
            /**
             * @description The currency of the charge
             * @example USD
             */
            currency?: string;
            /**
             * @description Date of the invoice
             * @example 2021-01-01T00:00:00.000Z
             */
            invoiceDate?: string;
            /**
             * @description ID of the invoice
             * @example 123MyCoolCorp980-2021-01-01-1234567890
             */
            invoiceId?: string;
            /**
             * @description Invoice Payment Term
             * @example 30
             */
            invoicePaymentTerm?: string;
            /** @example Open */
            invoiceStatus?: string;
            /**
             * @description URL for this invoice
             * @example https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf
             */
            invoiceUrl?: string;
            /**
             * Format: double
             * @description Amount of tax, if any
             * @example 10
             */
            taxAmount?: number;
            /**
             * Format: double
             * @description Amount of Invoice
             * @example 110
             */
            totalAmount?: number;
            /**
             * Format: double
             * @description Amount of Invoice without tax
             * @example 100
             */
            totalAmountWithoutTax?: number;
        };
        /** @example {
         *       "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
         *       "deploymentCellID": "hc-12345678"
         *     } */
        KubernetesDashboardEndpoint: {
            /**
             * @description The dashboard endpoint
             * @default
             * @example https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh
             */
            dashboardEndpoint: string;
            /**
             * @description The deployment cell ID
             * @default
             * @example hc-12345678
             */
            deploymentCellID: string;
        };
        /** @example {
         *       "endpointConfiguration": {
         *         "admin": {
         *           "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *           "networkingType": "PRIVATE",
         *           "ports": [
         *             8080,
         *             8081
         *           ],
         *           "primary": false
         *         },
         *         "cluster": {
         *           "host": "https://my-endpoint.com",
         *           "networkingType": "PUBLIC",
         *           "ports": [
         *             8080,
         *             8081
         *           ],
         *           "primary": true
         *         }
         *       },
         *       "gitConfiguration": {
         *         "accessToken": "my-token",
         *         "referenceName": "tags/v1.0.0",
         *         "repositoryUrl": "https://github.com/username/myrepo",
         *         "userName": "my-user"
         *       },
         *       "helmChartDependencies": [
         *         {
         *           "chartName": "cert-manager",
         *           "chartVersion": "v1.5.3"
         *         },
         *         {
         *           "chartName": "nginx-ingress",
         *           "chartVersion": "v0.48.1"
         *         },
         *         {
         *           "chartName": "external-dns",
         *           "chartVersion": "v0.7.0"
         *         },
         *         {
         *           "chartName": "cnpg-operator",
         *           "chartVersion": "v0.23.1"
         *         }
         *       ],
         *       "kustomizePath": "/kustomize"
         *     } */
        KustomizeConfiguration: {
            /**
             * @description The endpoints from the Kustomize Deployment to expose to the customer
             * @example {
             *       "admin": {
             *         "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *         "networkingType": "PRIVATE",
             *         "ports": [
             *           8080,
             *           8081
             *         ],
             *         "primary": false
             *       },
             *       "cluster": {
             *         "host": "https://my-endpoint.com",
             *         "networkingType": "PUBLIC",
             *         "ports": [
             *           8080,
             *           8081
             *         ],
             *         "primary": true
             *       }
             *     }
             */
            endpointConfiguration?: {
                [key: string]: components["schemas"]["Endpoint"];
            };
            gitConfiguration?: components["schemas"]["GitConfiguration"];
            /**
             * @description The helm chart dependencies for the CRD - Optional
             * @example [
             *       {
             *         "chartName": "cert-manager",
             *         "chartVersion": "v1.5.3"
             *       },
             *       {
             *         "chartName": "nginx-ingress",
             *         "chartVersion": "v0.48.1"
             *       },
             *       {
             *         "chartName": "external-dns",
             *         "chartVersion": "v0.7.0"
             *       },
             *       {
             *         "chartName": "cnpg-operator",
             *         "chartVersion": "v0.23.1"
             *       }
             *     ]
             */
            helmChartDependencies?: components["schemas"]["OperatorHelmChartDependency"][];
            /**
             * @description The path to the kustomize directory
             * @example /kustomize
             */
            kustomizePath: string;
        };
        /** @example {
         *       "ingressPortConfiguration": [
         *         {
         *           "associatedResourceIDs": [
         *             "r-12345678",
         *             "r-abcdef12"
         *           ],
         *           "backendPort": 8080,
         *           "ingressPort": 1234
         *         },
         *         {
         *           "associatedResourceIDs": [
         *             "r-12345678",
         *             "r-abcdef12"
         *           ],
         *           "backendPort": 8081,
         *           "ingressPort": 5678
         *         },
         *         {
         *           "associatedResourceIDs": [
         *             "r-vwxybz12",
         *             "r-poij122v"
         *           ],
         *           "backendPort": 8082,
         *           "ingressPort": 9012
         *         }
         *       ]
         *     } */
        L4LoadBalancerConfiguration: {
            /**
             * @description The ingress port configuration to configure on the load balancer
             * @example [
             *       {
             *         "associatedResourceIDs": [
             *           "r-12345678",
             *           "r-abcdef12"
             *         ],
             *         "backendPort": 8080,
             *         "ingressPort": 1234
             *       },
             *       {
             *         "associatedResourceIDs": [
             *           "r-12345678",
             *           "r-abcdef12"
             *         ],
             *         "backendPort": 8081,
             *         "ingressPort": 5678
             *       },
             *       {
             *         "associatedResourceIDs": [
             *           "r-vwxybz12",
             *           "r-poij122v"
             *         ],
             *         "backendPort": 8082,
             *         "ingressPort": 9012
             *       }
             *     ]
             */
            ingressPortConfiguration?: components["schemas"]["BackendPortConfiguration"][];
        };
        /** @example {
         *       "paths": [
         *         {
         *           "associatedResourceID": "r-12345678",
         *           "path": "/path",
         *           "port": 8080
         *         }
         *       ]
         *     } */
        L7LoadBalancerConfiguration: {
            /**
             * @description The paths to configure on the load balancer
             * @example [
             *       {
             *         "associatedResourceID": "r-12345678",
             *         "path": "/path",
             *         "port": 8080
             *       }
             *     ]
             */
            paths?: components["schemas"]["LoadBalancerPathConfiguration"][];
        };
        /**
         * @description Limit of a parameter
         * @example {
         *       "max": "Quis earum temporibus esse.",
         *       "maxLength": "Accusantium veniam incidunt molestiae consequatur officiis exercitationem.",
         *       "min": "Et dicta quia.",
         *       "minLength": "Accusantium temporibus aut totam."
         *     }
         */
        Limits: {
            /**
             * @description Maximum value for an integer or floating-point parameter
             * @example Nobis ut asperiores laudantium.
             */
            max?: string;
            /**
             * @description Maximum length of a string parameter
             * @example Nemo dolorem est et commodi.
             */
            maxLength?: string;
            /**
             * @description Minimum value for an integer or floating-point parameter
             * @example Esse quos eligendi.
             */
            min?: string;
            /**
             * @description Minimum length of a string parameter
             * @example Dignissimos veniam dolores sit est voluptas.
             */
            minLength?: string;
        };
        /** @example {
         *       "accountConfigs": [
         *         {
         *           "awsAccountID": "123456789012",
         *           "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
         *           "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
         *           "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
         *           "byoaInstanceIDs": [
         *             "instance-12345678",
         *             "instance-abcdefgh"
         *           ],
         *           "cloudProviderId": "infra-12345678",
         *           "description": "An AWS account hosting multiple dev environments",
         *           "gcpProjectID": "my-project",
         *           "gcpProjectNumber": "123456789012",
         *           "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
         *           "id": "ac-12345678",
         *           "name": "Dev AWS account",
         *           "status": "READY",
         *           "statusMessage": "Account is ready"
         *         },
         *         {
         *           "awsAccountID": "123456789012",
         *           "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
         *           "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
         *           "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
         *           "byoaInstanceIDs": [
         *             "instance-12345678",
         *             "instance-abcdefgh"
         *           ],
         *           "cloudProviderId": "infra-12345678",
         *           "description": "An AWS account hosting multiple dev environments",
         *           "gcpProjectID": "my-project",
         *           "gcpProjectNumber": "123456789012",
         *           "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
         *           "id": "ac-12345678",
         *           "name": "Dev AWS account",
         *           "status": "READY",
         *           "statusMessage": "Account is ready"
         *         }
         *       ],
         *       "ids": [
         *         "ac-12345678",
         *         "ac-abcdefgh",
         *         "ac-1234efgh"
         *       ],
         *       "nextPageToken": "next-token"
         *     } */
        ListAccountConfigResult: {
            /**
             * @description The list of account configs
             * @example [
             *       {
             *         "awsAccountID": "123456789012",
             *         "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
             *         "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
             *         "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
             *         "byoaInstanceIDs": [
             *           "instance-12345678",
             *           "instance-abcdefgh"
             *         ],
             *         "cloudProviderId": "infra-12345678",
             *         "description": "An AWS account hosting multiple dev environments",
             *         "gcpProjectID": "my-project",
             *         "gcpProjectNumber": "123456789012",
             *         "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
             *         "id": "ac-12345678",
             *         "name": "Dev AWS account",
             *         "status": "READY",
             *         "statusMessage": "Account is ready"
             *       },
             *       {
             *         "awsAccountID": "123456789012",
             *         "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
             *         "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
             *         "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
             *         "byoaInstanceIDs": [
             *           "instance-12345678",
             *           "instance-abcdefgh"
             *         ],
             *         "cloudProviderId": "infra-12345678",
             *         "description": "An AWS account hosting multiple dev environments",
             *         "gcpProjectID": "my-project",
             *         "gcpProjectNumber": "123456789012",
             *         "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
             *         "id": "ac-12345678",
             *         "name": "Dev AWS account",
             *         "status": "READY",
             *         "statusMessage": "Account is ready"
             *       },
             *       {
             *         "awsAccountID": "123456789012",
             *         "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
             *         "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
             *         "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
             *         "byoaInstanceIDs": [
             *           "instance-12345678",
             *           "instance-abcdefgh"
             *         ],
             *         "cloudProviderId": "infra-12345678",
             *         "description": "An AWS account hosting multiple dev environments",
             *         "gcpProjectID": "my-project",
             *         "gcpProjectNumber": "123456789012",
             *         "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
             *         "id": "ac-12345678",
             *         "name": "Dev AWS account",
             *         "status": "READY",
             *         "statusMessage": "Account is ready"
             *       },
             *       {
             *         "awsAccountID": "123456789012",
             *         "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
             *         "awsCloudFormationNoLBTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template-no-lb-policy.yaml",
             *         "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/omnistrate-cloudformation/org-EUVvex3bVm/account-config-setup-template.yaml",
             *         "byoaInstanceIDs": [
             *           "instance-12345678",
             *           "instance-abcdefgh"
             *         ],
             *         "cloudProviderId": "infra-12345678",
             *         "description": "An AWS account hosting multiple dev environments",
             *         "gcpProjectID": "my-project",
             *         "gcpProjectNumber": "123456789012",
             *         "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
             *         "id": "ac-12345678",
             *         "name": "Dev AWS account",
             *         "status": "READY",
             *         "statusMessage": "Account is ready"
             *       }
             *     ]
             */
            accountConfigs?: components["schemas"]["DescribeAccountConfigResult"][];
            /** @example [
             *       "ac-12345678",
             *       "ac-abcdefgh",
             *       "ac-1234efgh"
             *     ] */
            ids?: string[];
            /**
             * @description Token to use for the next page
             * @example next-token
             */
            nextPageToken?: string;
        };
        /** @example {
         *       "hooks": [
         *         {
         *           "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
         *           "customCommand": [
         *             "/bin/sh",
         *             "-c"
         *           ],
         *           "customImage": "my-custom-image:latest",
         *           "scope": "CLUSTER",
         *           "type": "ADD"
         *         },
         *         {
         *           "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
         *           "customCommand": [
         *             "/bin/sh",
         *             "-c"
         *           ],
         *           "customImage": "my-custom-image:latest",
         *           "scope": "CLUSTER",
         *           "type": "ADD"
         *         }
         *       ]
         *     } */
        ListActionHooksResult: {
            /**
             * @description The list of action hooks
             * @example [
             *       {
             *         "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
             *         "customCommand": [
             *           "/bin/sh",
             *           "-c"
             *         ],
             *         "customImage": "my-custom-image:latest",
             *         "scope": "CLUSTER",
             *         "type": "ADD"
             *       },
             *       {
             *         "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
             *         "customCommand": [
             *           "/bin/sh",
             *           "-c"
             *         ],
             *         "customImage": "my-custom-image:latest",
             *         "scope": "CLUSTER",
             *         "type": "ADD"
             *       }
             *     ]
             */
            hooks: components["schemas"]["RegisterActionHookRequestBody"][];
        };
        /** @example {
         *       "nextPageToken": "next-token",
         *       "resourceInstances": [
         *         {
         *           "active": true,
         *           "autoscalingEnabled": true,
         *           "awsAccountID": "123456789012",
         *           "backupStatus": {
         *             "backupPeriodInHours": 2,
         *             "backupRetentionInDays": 7,
         *             "earliestRestoreTime": "2021-09-01T00:00:00Z",
         *             "lastBackupTime": "2021-09-01T00:00:00Z"
         *           },
         *           "cloud_provider": "aws",
         *           "created_at": "2023-01-10T00:00:00Z",
         *           "createdByUserId": "user-12345678",
         *           "createdByUserName": "John Doe",
         *           "currentReplicas": "2",
         *           "customNetworkDetail": {
         *             "cidr": "10.177.0.0/16",
         *             "id": "n-12345678",
         *             "name": "Prod us-east-1"
         *           },
         *           "detailedNetworkTopology": {
         *             "r-abcd1234": {
         *               "allowedIPRanges": [
         *                 "0.0.0.0/0"
         *               ],
         *               "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *               "clusterPorts": [
         *                 3306
         *               ],
         *               "main": true,
         *               "networkingType": "PUBLIC",
         *               "nodes": [
         *                 {
         *                   "availabilityZone": "us-east-2a",
         *                   "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *                   "healthStatus": "healthy",
         *                   "id": "primary-0",
         *                   "ports": [
         *                     3306
         *                   ],
         *                   "status": "RUNNING"
         *                 }
         *               ],
         *               "privateNetworkCIDR": "10.0.0.2/24",
         *               "privateNetworkID": "n-1234abcd",
         *               "publiclyAccessible": true,
         *               "resourceKey": "primary",
         *               "resourceName": "Primary MySQL Instance"
         *             }
         *           },
         *           "externalPayerId": "external-payer-id-1234",
         *           "gcpProjectID": "my-project",
         *           "highAvailability": true,
         *           "id": "instance-abcd1234",
         *           "instanceLoadStatus": "Quaerat id.",
         *           "kubernetesDashboardEndpoint": {
         *             "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
         *             "deploymentCellID": "hc-12345678"
         *           },
         *           "last_modified_at": "2023-01-20T00:00:00Z",
         *           "maxReplicas": "1",
         *           "minReplicas": "1",
         *           "network_type": "PUBLIC",
         *           "productTierFeatures": {
         *             "BILLING": {
         *               "enabled": false
         *             },
         *             "LOGS": {
         *               "auth": {
         *                 "password": "px3c4d5f6g7h8i",
         *                 "username": "abcd1234"
         *               },
         *               "enabled": true,
         *               "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
         *             },
         *             "METRICS": {
         *               "enabled": false
         *             }
         *           },
         *           "region": "us-east-1",
         *           "result_params": {
         *             "param1": "value1",
         *             "param2": "value2"
         *           },
         *           "serverlessEnabled": true,
         *           "status": "RUNNING",
         *           "subscriptionId": "sub-abcd1234"
         *         },
         *         {
         *           "active": true,
         *           "autoscalingEnabled": true,
         *           "awsAccountID": "123456789012",
         *           "backupStatus": {
         *             "backupPeriodInHours": 2,
         *             "backupRetentionInDays": 7,
         *             "earliestRestoreTime": "2021-09-01T00:00:00Z",
         *             "lastBackupTime": "2021-09-01T00:00:00Z"
         *           },
         *           "cloud_provider": "aws",
         *           "created_at": "2023-01-10T00:00:00Z",
         *           "createdByUserId": "user-12345678",
         *           "createdByUserName": "John Doe",
         *           "currentReplicas": "2",
         *           "customNetworkDetail": {
         *             "cidr": "10.177.0.0/16",
         *             "id": "n-12345678",
         *             "name": "Prod us-east-1"
         *           },
         *           "detailedNetworkTopology": {
         *             "r-abcd1234": {
         *               "allowedIPRanges": [
         *                 "0.0.0.0/0"
         *               ],
         *               "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *               "clusterPorts": [
         *                 3306
         *               ],
         *               "main": true,
         *               "networkingType": "PUBLIC",
         *               "nodes": [
         *                 {
         *                   "availabilityZone": "us-east-2a",
         *                   "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *                   "healthStatus": "healthy",
         *                   "id": "primary-0",
         *                   "ports": [
         *                     3306
         *                   ],
         *                   "status": "RUNNING"
         *                 }
         *               ],
         *               "privateNetworkCIDR": "10.0.0.2/24",
         *               "privateNetworkID": "n-1234abcd",
         *               "publiclyAccessible": true,
         *               "resourceKey": "primary",
         *               "resourceName": "Primary MySQL Instance"
         *             }
         *           },
         *           "externalPayerId": "external-payer-id-1234",
         *           "gcpProjectID": "my-project",
         *           "highAvailability": true,
         *           "id": "instance-abcd1234",
         *           "instanceLoadStatus": "Quaerat id.",
         *           "kubernetesDashboardEndpoint": {
         *             "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
         *             "deploymentCellID": "hc-12345678"
         *           },
         *           "last_modified_at": "2023-01-20T00:00:00Z",
         *           "maxReplicas": "1",
         *           "minReplicas": "1",
         *           "network_type": "PUBLIC",
         *           "productTierFeatures": {
         *             "BILLING": {
         *               "enabled": false
         *             },
         *             "LOGS": {
         *               "auth": {
         *                 "password": "px3c4d5f6g7h8i",
         *                 "username": "abcd1234"
         *               },
         *               "enabled": true,
         *               "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
         *             },
         *             "METRICS": {
         *               "enabled": false
         *             }
         *           },
         *           "region": "us-east-1",
         *           "result_params": {
         *             "param1": "value1",
         *             "param2": "value2"
         *           },
         *           "serverlessEnabled": true,
         *           "status": "RUNNING",
         *           "subscriptionId": "sub-abcd1234"
         *         }
         *       ]
         *     } */
        ListAllResourceInstancesResult: {
            /**
             * @description Token to use for the next request
             * @example next-token
             */
            nextPageToken?: string;
            /**
             * @description The list of resource instances
             * @example [
             *       {
             *         "active": true,
             *         "autoscalingEnabled": true,
             *         "awsAccountID": "123456789012",
             *         "backupStatus": {
             *           "backupPeriodInHours": 2,
             *           "backupRetentionInDays": 7,
             *           "earliestRestoreTime": "2021-09-01T00:00:00Z",
             *           "lastBackupTime": "2021-09-01T00:00:00Z"
             *         },
             *         "cloud_provider": "aws",
             *         "created_at": "2023-01-10T00:00:00Z",
             *         "createdByUserId": "user-12345678",
             *         "createdByUserName": "John Doe",
             *         "currentReplicas": "2",
             *         "customNetworkDetail": {
             *           "cidr": "10.177.0.0/16",
             *           "id": "n-12345678",
             *           "name": "Prod us-east-1"
             *         },
             *         "detailedNetworkTopology": {
             *           "r-abcd1234": {
             *             "allowedIPRanges": [
             *               "0.0.0.0/0"
             *             ],
             *             "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *             "clusterPorts": [
             *               3306
             *             ],
             *             "main": true,
             *             "networkingType": "PUBLIC",
             *             "nodes": [
             *               {
             *                 "availabilityZone": "us-east-2a",
             *                 "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *                 "healthStatus": "healthy",
             *                 "id": "primary-0",
             *                 "ports": [
             *                   3306
             *                 ],
             *                 "status": "RUNNING"
             *               }
             *             ],
             *             "privateNetworkCIDR": "10.0.0.2/24",
             *             "privateNetworkID": "n-1234abcd",
             *             "publiclyAccessible": true,
             *             "resourceKey": "primary",
             *             "resourceName": "Primary MySQL Instance"
             *           }
             *         },
             *         "externalPayerId": "external-payer-id-1234",
             *         "gcpProjectID": "my-project",
             *         "highAvailability": true,
             *         "id": "instance-abcd1234",
             *         "instanceLoadStatus": "Quaerat id.",
             *         "kubernetesDashboardEndpoint": {
             *           "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
             *           "deploymentCellID": "hc-12345678"
             *         },
             *         "last_modified_at": "2023-01-20T00:00:00Z",
             *         "maxReplicas": "1",
             *         "minReplicas": "1",
             *         "network_type": "PUBLIC",
             *         "productTierFeatures": {
             *           "BILLING": {
             *             "enabled": false
             *           },
             *           "LOGS": {
             *             "auth": {
             *               "password": "px3c4d5f6g7h8i",
             *               "username": "abcd1234"
             *             },
             *             "enabled": true,
             *             "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
             *           },
             *           "METRICS": {
             *             "enabled": false
             *           }
             *         },
             *         "region": "us-east-1",
             *         "result_params": {
             *           "param1": "value1",
             *           "param2": "value2"
             *         },
             *         "serverlessEnabled": true,
             *         "status": "RUNNING",
             *         "subscriptionId": "sub-abcd1234"
             *       },
             *       {
             *         "active": true,
             *         "autoscalingEnabled": true,
             *         "awsAccountID": "123456789012",
             *         "backupStatus": {
             *           "backupPeriodInHours": 2,
             *           "backupRetentionInDays": 7,
             *           "earliestRestoreTime": "2021-09-01T00:00:00Z",
             *           "lastBackupTime": "2021-09-01T00:00:00Z"
             *         },
             *         "cloud_provider": "aws",
             *         "created_at": "2023-01-10T00:00:00Z",
             *         "createdByUserId": "user-12345678",
             *         "createdByUserName": "John Doe",
             *         "currentReplicas": "2",
             *         "customNetworkDetail": {
             *           "cidr": "10.177.0.0/16",
             *           "id": "n-12345678",
             *           "name": "Prod us-east-1"
             *         },
             *         "detailedNetworkTopology": {
             *           "r-abcd1234": {
             *             "allowedIPRanges": [
             *               "0.0.0.0/0"
             *             ],
             *             "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *             "clusterPorts": [
             *               3306
             *             ],
             *             "main": true,
             *             "networkingType": "PUBLIC",
             *             "nodes": [
             *               {
             *                 "availabilityZone": "us-east-2a",
             *                 "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *                 "healthStatus": "healthy",
             *                 "id": "primary-0",
             *                 "ports": [
             *                   3306
             *                 ],
             *                 "status": "RUNNING"
             *               }
             *             ],
             *             "privateNetworkCIDR": "10.0.0.2/24",
             *             "privateNetworkID": "n-1234abcd",
             *             "publiclyAccessible": true,
             *             "resourceKey": "primary",
             *             "resourceName": "Primary MySQL Instance"
             *           }
             *         },
             *         "externalPayerId": "external-payer-id-1234",
             *         "gcpProjectID": "my-project",
             *         "highAvailability": true,
             *         "id": "instance-abcd1234",
             *         "instanceLoadStatus": "Quaerat id.",
             *         "kubernetesDashboardEndpoint": {
             *           "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod?namespace=instance-abcdefgh",
             *           "deploymentCellID": "hc-12345678"
             *         },
             *         "last_modified_at": "2023-01-20T00:00:00Z",
             *         "maxReplicas": "1",
             *         "minReplicas": "1",
             *         "network_type": "PUBLIC",
             *         "productTierFeatures": {
             *           "BILLING": {
             *             "enabled": false
             *           },
             *           "LOGS": {
             *             "auth": {
             *               "password": "px3c4d5f6g7h8i",
             *               "username": "abcd1234"
             *             },
             *             "enabled": true,
             *             "websocketBaseUrl": "wss://r-injectedobserve.instance-abcdefgh.us-east-2.aws.omnistrate.cloud/logs"
             *           },
             *           "METRICS": {
             *             "enabled": false
             *           }
             *         },
             *         "region": "us-east-1",
             *         "result_params": {
             *           "param1": "value1",
             *           "param2": "value2"
             *         },
             *         "serverlessEnabled": true,
             *         "status": "RUNNING",
             *         "subscriptionId": "sub-abcd1234"
             *       }
             *     ]
             */
            resourceInstances: components["schemas"]["DescribeResourceInstanceResult"][];
        };
        /** @example {
         *       "subscriptionUsers": [
         *         {
         *           "email": "abc@gmail.com",
         *           "name": "John Doe",
         *           "roleType": "reader",
         *           "userId": "user-abcd1234"
         *         }
         *       ]
         *     } */
        ListAllSubscriptionUsersResult: {
            /**
             * @description The users associated with the corresponding subscription
             * @example [
             *       {
             *         "email": "abc@gmail.com",
             *         "name": "John Doe",
             *         "roleType": "reader",
             *         "userId": "user-abcd1234"
             *       }
             *     ]
             */
            subscriptionUsers: components["schemas"]["SubscriptionUsers"][];
        };
        /** @example {
         *       "id": "ic-12345678",
         *       "resourceIds": [
         *         "r-12345678",
         *         "r-abcdefgh"
         *       ],
         *       "serviceId": "s-12345678"
         *     } */
        ListAssociatedResourcesResult: {
            /**
             * @description Infra Config ID to operate on
             * @example ic-12345678
             */
            id: string;
            /**
             * @description The resources associated with the infra config
             * @example [
             *       "r-12345678",
             *       "r-abcdefgh"
             *     ]
             */
            resourceIds: string[];
            /**
             * @description The service ID
             * @example s-12345678
             */
            serviceId: string;
        };
        /** @example {
         *       "events": [
         *         {
         *           "eventSource": "Customer, Infra or Maintenance",
         *           "id": "event-12345678",
         *           "message": "instance-abcd1234 created",
         *           "orgId": "org-12345678",
         *           "orgName": "Acme Corporation",
         *           "resourceInstanceId": "instance-abcd1234",
         *           "resourceName": "Galera",
         *           "subscriptionId": "sub-abcd1234",
         *           "time": "2023-01-10T00:00:00Z",
         *           "userId": "user-12345678",
         *           "userName": "John Doe",
         *           "workflowFailures": [
         *             {
         *               "eventTime": "2020-01-01T00:00:00Z",
         *               "message": "Bootstrap failed for reason X"
         *             },
         *             {
         *               "eventTime": "2020-01-01T00:01:00Z",
         *               "message": "Compute failed for reason Y"
         *             }
         *           ]
         *         },
         *         {
         *           "eventSource": "Customer, Infra or Maintenance",
         *           "id": "event-12345678",
         *           "message": "instance-abcd1234 created",
         *           "orgId": "org-12345678",
         *           "orgName": "Acme Corporation",
         *           "resourceInstanceId": "instance-abcd1234",
         *           "resourceName": "Galera",
         *           "subscriptionId": "sub-abcd1234",
         *           "time": "2023-01-10T00:00:00Z",
         *           "userId": "user-12345678",
         *           "userName": "John Doe",
         *           "workflowFailures": [
         *             {
         *               "eventTime": "2020-01-01T00:00:00Z",
         *               "message": "Bootstrap failed for reason X"
         *             },
         *             {
         *               "eventTime": "2020-01-01T00:01:00Z",
         *               "message": "Compute failed for reason Y"
         *             }
         *           ]
         *         },
         *         {
         *           "eventSource": "Customer, Infra or Maintenance",
         *           "id": "event-12345678",
         *           "message": "instance-abcd1234 created",
         *           "orgId": "org-12345678",
         *           "orgName": "Acme Corporation",
         *           "resourceInstanceId": "instance-abcd1234",
         *           "resourceName": "Galera",
         *           "subscriptionId": "sub-abcd1234",
         *           "time": "2023-01-10T00:00:00Z",
         *           "userId": "user-12345678",
         *           "userName": "John Doe",
         *           "workflowFailures": [
         *             {
         *               "eventTime": "2020-01-01T00:00:00Z",
         *               "message": "Bootstrap failed for reason X"
         *             },
         *             {
         *               "eventTime": "2020-01-01T00:01:00Z",
         *               "message": "Compute failed for reason Y"
         *             }
         *           ]
         *         },
         *         {
         *           "eventSource": "Customer, Infra or Maintenance",
         *           "id": "event-12345678",
         *           "message": "instance-abcd1234 created",
         *           "orgId": "org-12345678",
         *           "orgName": "Acme Corporation",
         *           "resourceInstanceId": "instance-abcd1234",
         *           "resourceName": "Galera",
         *           "subscriptionId": "sub-abcd1234",
         *           "time": "2023-01-10T00:00:00Z",
         *           "userId": "user-12345678",
         *           "userName": "John Doe",
         *           "workflowFailures": [
         *             {
         *               "eventTime": "2020-01-01T00:00:00Z",
         *               "message": "Bootstrap failed for reason X"
         *             },
         *             {
         *               "eventTime": "2020-01-01T00:01:00Z",
         *               "message": "Compute failed for reason Y"
         *             }
         *           ]
         *         }
         *       ],
         *       "ids": [
         *         "event-12345678"
         *       ],
         *       "nextPageToken": "Ad sed nemo molestiae fugit repudiandae."
         *     } */
        ListAuditEventsResult: {
            /**
             * @description The list of events
             * @example [
             *       {
             *         "eventSource": "Customer, Infra or Maintenance",
             *         "id": "event-12345678",
             *         "message": "instance-abcd1234 created",
             *         "orgId": "org-12345678",
             *         "orgName": "Acme Corporation",
             *         "resourceInstanceId": "instance-abcd1234",
             *         "resourceName": "Galera",
             *         "subscriptionId": "sub-abcd1234",
             *         "time": "2023-01-10T00:00:00Z",
             *         "userId": "user-12345678",
             *         "userName": "John Doe",
             *         "workflowFailures": [
             *           {
             *             "eventTime": "2020-01-01T00:00:00Z",
             *             "message": "Bootstrap failed for reason X"
             *           },
             *           {
             *             "eventTime": "2020-01-01T00:01:00Z",
             *             "message": "Compute failed for reason Y"
             *           }
             *         ]
             *       },
             *       {
             *         "eventSource": "Customer, Infra or Maintenance",
             *         "id": "event-12345678",
             *         "message": "instance-abcd1234 created",
             *         "orgId": "org-12345678",
             *         "orgName": "Acme Corporation",
             *         "resourceInstanceId": "instance-abcd1234",
             *         "resourceName": "Galera",
             *         "subscriptionId": "sub-abcd1234",
             *         "time": "2023-01-10T00:00:00Z",
             *         "userId": "user-12345678",
             *         "userName": "John Doe",
             *         "workflowFailures": [
             *           {
             *             "eventTime": "2020-01-01T00:00:00Z",
             *             "message": "Bootstrap failed for reason X"
             *           },
             *           {
             *             "eventTime": "2020-01-01T00:01:00Z",
             *             "message": "Compute failed for reason Y"
             *           }
             *         ]
             *       }
             *     ]
             */
            events: components["schemas"]["DescribeAuditEventResult"][];
            /**
             * @description The list of event IDs
             * @example [
             *       "event-12345678"
             *     ]
             */
            ids: string[];
            /** @example Quia hic ut corporis quos. */
            nextPageToken?: string;
        };
        /** @example {
         *       "cloudProviderName": "aws"
         *     } */
        ListBYOAConfigRequestBody: {
            /**
             * @description Cloud Provider name to filter on
             * @example aws
             */
            cloudProviderName: string;
        };
        /** @example {
         *       "nextPageToken": "next-token",
         *       "types": [
         *         "m5.xlarge",
         *         "c5.xlarge",
         *         "r5.xlarge"
         *       ]
         *     } */
        ListComputeInstanceTypesResult: {
            /**
             * @description The next page token
             * @example next-token
             */
            nextPageToken?: string;
            /**
             * @description The list of compute instance type IDs
             * @example [
             *       "m5.xlarge",
             *       "c5.xlarge",
             *       "r5.xlarge"
             *     ]
             */
            types: string[];
        };
        /** @example {
         *       "CustomDomains": [
         *         {
         *           "customDomain": "mydomain.dev",
         *           "description": "Description of the domain",
         *           "id": "cd-12345678",
         *           "name": "Dev domain",
         *           "route53Configuration": {
         *             "awsAccountID": "123456789012",
         *             "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
         *           },
         *           "status": "READY",
         *           "statusMessage": "Account is ready"
         *         },
         *         {
         *           "customDomain": "mydomain.dev",
         *           "description": "Description of the domain",
         *           "id": "cd-12345678",
         *           "name": "Dev domain",
         *           "route53Configuration": {
         *             "awsAccountID": "123456789012",
         *             "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
         *           },
         *           "status": "READY",
         *           "statusMessage": "Account is ready"
         *         }
         *       ],
         *       "ids": [
         *         "cd-12345678",
         *         "cd-abcdefgh",
         *         "cd-1234efgh"
         *       ],
         *       "nextPageToken": "next-token"
         *     } */
        ListCustomDomainResult: {
            /**
             * @description The list of custom domains
             * @example [
             *       {
             *         "customDomain": "mydomain.dev",
             *         "description": "Description of the domain",
             *         "id": "cd-12345678",
             *         "name": "Dev domain",
             *         "route53Configuration": {
             *           "awsAccountID": "123456789012",
             *           "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
             *         },
             *         "status": "READY",
             *         "statusMessage": "Account is ready"
             *       },
             *       {
             *         "customDomain": "mydomain.dev",
             *         "description": "Description of the domain",
             *         "id": "cd-12345678",
             *         "name": "Dev domain",
             *         "route53Configuration": {
             *           "awsAccountID": "123456789012",
             *           "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
             *         },
             *         "status": "READY",
             *         "statusMessage": "Account is ready"
             *       },
             *       {
             *         "customDomain": "mydomain.dev",
             *         "description": "Description of the domain",
             *         "id": "cd-12345678",
             *         "name": "Dev domain",
             *         "route53Configuration": {
             *           "awsAccountID": "123456789012",
             *           "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
             *         },
             *         "status": "READY",
             *         "statusMessage": "Account is ready"
             *       },
             *       {
             *         "customDomain": "mydomain.dev",
             *         "description": "Description of the domain",
             *         "id": "cd-12345678",
             *         "name": "Dev domain",
             *         "route53Configuration": {
             *           "awsAccountID": "123456789012",
             *           "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
             *         },
             *         "status": "READY",
             *         "statusMessage": "Account is ready"
             *       }
             *     ]
             */
            CustomDomains?: components["schemas"]["DescribeCustomDomainResult"][];
            /** @example [
             *       "cd-12345678",
             *       "cd-abcdefgh",
             *       "cd-1234efgh"
             *     ] */
            ids?: string[];
            /**
             * @description Token to use for the next page
             * @example next-token
             */
            nextPageToken?: string;
        };
        /** @example {
         *       "customNetworks": [
         *         {
         *           "cidr": "10.0.0.0/16",
         *           "cloudProviderName": "aws",
         *           "cloudProviderRegion": "us-east-1",
         *           "id": "n-12345678",
         *           "name": "Prod us-east-1",
         *           "networkDefinitionType": "Custom",
         *           "networkFeaturesConfiguration": {
         *             "isPrivateLinkEnabled": true
         *           },
         *           "networkInstances": [
         *             {
         *               "awsAccountID": "123456789012",
         *               "cloudProviderNativeNetworkId": "vpc-12345678",
         *               "gcpProjectID": "my-project",
         *               "gcpProjectNumber": "123456789012",
         *               "hostClusterID": "hc-12345678"
         *             },
         *             {
         *               "awsAccountID": "123456789012",
         *               "cloudProviderNativeNetworkId": "vpc-12345678",
         *               "gcpProjectID": "my-project",
         *               "gcpProjectNumber": "123456789012",
         *               "hostClusterID": "hc-12345678"
         *             },
         *             {
         *               "awsAccountID": "123456789012",
         *               "cloudProviderNativeNetworkId": "vpc-12345678",
         *               "gcpProjectID": "my-project",
         *               "gcpProjectNumber": "123456789012",
         *               "hostClusterID": "hc-12345678"
         *             },
         *             {
         *               "awsAccountID": "123456789012",
         *               "cloudProviderNativeNetworkId": "vpc-12345678",
         *               "gcpProjectID": "my-project",
         *               "gcpProjectNumber": "123456789012",
         *               "hostClusterID": "hc-12345678"
         *             }
         *           ]
         *         },
         *         {
         *           "cidr": "10.0.0.0/16",
         *           "cloudProviderName": "aws",
         *           "cloudProviderRegion": "us-east-1",
         *           "id": "n-12345678",
         *           "name": "Prod us-east-1",
         *           "networkDefinitionType": "Custom",
         *           "networkFeaturesConfiguration": {
         *             "isPrivateLinkEnabled": true
         *           },
         *           "networkInstances": [
         *             {
         *               "awsAccountID": "123456789012",
         *               "cloudProviderNativeNetworkId": "vpc-12345678",
         *               "gcpProjectID": "my-project",
         *               "gcpProjectNumber": "123456789012",
         *               "hostClusterID": "hc-12345678"
         *             },
         *             {
         *               "awsAccountID": "123456789012",
         *               "cloudProviderNativeNetworkId": "vpc-12345678",
         *               "gcpProjectID": "my-project",
         *               "gcpProjectNumber": "123456789012",
         *               "hostClusterID": "hc-12345678"
         *             },
         *             {
         *               "awsAccountID": "123456789012",
         *               "cloudProviderNativeNetworkId": "vpc-12345678",
         *               "gcpProjectID": "my-project",
         *               "gcpProjectNumber": "123456789012",
         *               "hostClusterID": "hc-12345678"
         *             },
         *             {
         *               "awsAccountID": "123456789012",
         *               "cloudProviderNativeNetworkId": "vpc-12345678",
         *               "gcpProjectID": "my-project",
         *               "gcpProjectNumber": "123456789012",
         *               "hostClusterID": "hc-12345678"
         *             }
         *           ]
         *         }
         *       ]
         *     } */
        ListCustomNetworksResult: {
            /**
             * @description List of custom networks
             * @example [
             *       {
             *         "cidr": "10.0.0.0/16",
             *         "cloudProviderName": "aws",
             *         "cloudProviderRegion": "us-east-1",
             *         "id": "n-12345678",
             *         "name": "Prod us-east-1",
             *         "networkDefinitionType": "Custom",
             *         "networkFeaturesConfiguration": {
             *           "isPrivateLinkEnabled": true
             *         },
             *         "networkInstances": [
             *           {
             *             "awsAccountID": "123456789012",
             *             "cloudProviderNativeNetworkId": "vpc-12345678",
             *             "gcpProjectID": "my-project",
             *             "gcpProjectNumber": "123456789012",
             *             "hostClusterID": "hc-12345678"
             *           },
             *           {
             *             "awsAccountID": "123456789012",
             *             "cloudProviderNativeNetworkId": "vpc-12345678",
             *             "gcpProjectID": "my-project",
             *             "gcpProjectNumber": "123456789012",
             *             "hostClusterID": "hc-12345678"
             *           },
             *           {
             *             "awsAccountID": "123456789012",
             *             "cloudProviderNativeNetworkId": "vpc-12345678",
             *             "gcpProjectID": "my-project",
             *             "gcpProjectNumber": "123456789012",
             *             "hostClusterID": "hc-12345678"
             *           },
             *           {
             *             "awsAccountID": "123456789012",
             *             "cloudProviderNativeNetworkId": "vpc-12345678",
             *             "gcpProjectID": "my-project",
             *             "gcpProjectNumber": "123456789012",
             *             "hostClusterID": "hc-12345678"
             *           }
             *         ]
             *       },
             *       {
             *         "cidr": "10.0.0.0/16",
             *         "cloudProviderName": "aws",
             *         "cloudProviderRegion": "us-east-1",
             *         "id": "n-12345678",
             *         "name": "Prod us-east-1",
             *         "networkDefinitionType": "Custom",
             *         "networkFeaturesConfiguration": {
             *           "isPrivateLinkEnabled": true
             *         },
             *         "networkInstances": [
             *           {
             *             "awsAccountID": "123456789012",
             *             "cloudProviderNativeNetworkId": "vpc-12345678",
             *             "gcpProjectID": "my-project",
             *             "gcpProjectNumber": "123456789012",
             *             "hostClusterID": "hc-12345678"
             *           },
             *           {
             *             "awsAccountID": "123456789012",
             *             "cloudProviderNativeNetworkId": "vpc-12345678",
             *             "gcpProjectID": "my-project",
             *             "gcpProjectNumber": "123456789012",
             *             "hostClusterID": "hc-12345678"
             *           },
             *           {
             *             "awsAccountID": "123456789012",
             *             "cloudProviderNativeNetworkId": "vpc-12345678",
             *             "gcpProjectID": "my-project",
             *             "gcpProjectNumber": "123456789012",
             *             "hostClusterID": "hc-12345678"
             *           },
             *           {
             *             "awsAccountID": "123456789012",
             *             "cloudProviderNativeNetworkId": "vpc-12345678",
             *             "gcpProjectID": "my-project",
             *             "gcpProjectNumber": "123456789012",
             *             "hostClusterID": "hc-12345678"
             *           }
             *         ]
             *       }
             *     ]
             */
            customNetworks: components["schemas"]["CustomNetwork"][];
        };
        /** @example {
         *       "id": "r-12345678",
         *       "ids": [
         *         "r-12345678",
         *         "r-abcdefgh",
         *         "r-1234abcd"
         *       ],
         *       "nextPageToken": "next-token",
         *       "serviceId": "s-12345678"
         *     } */
        ListDependentResourcesResult: {
            /**
             * @description The ID of the resource
             * @example r-12345678
             */
            id?: string;
            /**
             * @description List of dependent resource IDs
             * @example [
             *       "r-12345678",
             *       "r-abcdefgh",
             *       "r-1234abcd"
             *     ]
             */
            ids: string[];
            /**
             * @description Token to use for the next page
             * @example next-token
             */
            nextPageToken?: string;
            /**
             * @description The service ID that this API bundle belongs to
             * @example s-12345678
             */
            serviceId?: string;
        };
        /** @example {
         *       "files": [
         *         {
         *           "description": "A file to store the configuration for the resource",
         *           "fileId": "f-12345678",
         *           "mountPath": "/etc/config",
         *           "name": "file.txt",
         *           "size": 1234,
         *           "type": "Config",
         *           "uploadTime": "2023-01-10T00:00:00Z",
         *           "uploadedBy": "user"
         *         },
         *         {
         *           "description": "A file to store the configuration for the resource",
         *           "fileId": "f-12345678",
         *           "mountPath": "/etc/config",
         *           "name": "file.txt",
         *           "size": 1234,
         *           "type": "Config",
         *           "uploadTime": "2023-01-10T00:00:00Z",
         *           "uploadedBy": "user"
         *         }
         *       ]
         *     } */
        ListFilesResult: {
            /**
             * @description List of files
             * @example [
             *       {
             *         "description": "A file to store the configuration for the resource",
             *         "fileId": "f-12345678",
             *         "mountPath": "/etc/config",
             *         "name": "file.txt",
             *         "size": 1234,
             *         "type": "Config",
             *         "uploadTime": "2023-01-10T00:00:00Z",
             *         "uploadedBy": "user"
             *       },
             *       {
             *         "description": "A file to store the configuration for the resource",
             *         "fileId": "f-12345678",
             *         "mountPath": "/etc/config",
             *         "name": "file.txt",
             *         "size": 1234,
             *         "type": "Config",
             *         "uploadTime": "2023-01-10T00:00:00Z",
             *         "uploadedBy": "user"
             *       },
             *       {
             *         "description": "A file to store the configuration for the resource",
             *         "fileId": "f-12345678",
             *         "mountPath": "/etc/config",
             *         "name": "file.txt",
             *         "size": 1234,
             *         "type": "Config",
             *         "uploadTime": "2023-01-10T00:00:00Z",
             *         "uploadedBy": "user"
             *       },
             *       {
             *         "description": "A file to store the configuration for the resource",
             *         "fileId": "f-12345678",
             *         "mountPath": "/etc/config",
             *         "name": "file.txt",
             *         "size": 1234,
             *         "type": "Config",
             *         "uploadTime": "2023-01-10T00:00:00Z",
             *         "uploadedBy": "user"
             *       }
             *     ]
             */
            files: components["schemas"]["FileMetadata"][];
        };
        /** @example {
         *       "helmPackages": [
         *         {
         *           "chartName": "my-chart",
         *           "chartRepoName": "my-repo",
         *           "chartRepoUrl": "https://my-repo.com",
         *           "chartValues": {
         *             "key1": "value1",
         *             "key2": 3,
         *             "key3": {
         *               "key4": "value4"
         *             }
         *           },
         *           "chartVersion": "1.0.0",
         *           "namespace": "default",
         *           "password": "my-password",
         *           "username": "my-user"
         *         },
         *         {
         *           "chartName": "my-chart",
         *           "chartRepoName": "my-repo",
         *           "chartRepoUrl": "https://my-repo.com",
         *           "chartValues": {
         *             "key1": "value1",
         *             "key2": 3,
         *             "key3": {
         *               "key4": "value4"
         *             }
         *           },
         *           "chartVersion": "1.0.0",
         *           "namespace": "default",
         *           "password": "my-password",
         *           "username": "my-user"
         *         },
         *         {
         *           "chartName": "my-chart",
         *           "chartRepoName": "my-repo",
         *           "chartRepoUrl": "https://my-repo.com",
         *           "chartValues": {
         *             "key1": "value1",
         *             "key2": 3,
         *             "key3": {
         *               "key4": "value4"
         *             }
         *           },
         *           "chartVersion": "1.0.0",
         *           "namespace": "default",
         *           "password": "my-password",
         *           "username": "my-user"
         *         }
         *       ]
         *     } */
        ListHelmPackagesResult: {
            /**
             * @description List of Helm packages
             * @example [
             *       {
             *         "chartName": "my-chart",
             *         "chartRepoName": "my-repo",
             *         "chartRepoUrl": "https://my-repo.com",
             *         "chartValues": {
             *           "key1": "value1",
             *           "key2": 3,
             *           "key3": {
             *             "key4": "value4"
             *           }
             *         },
             *         "chartVersion": "1.0.0",
             *         "namespace": "default",
             *         "password": "my-password",
             *         "username": "my-user"
             *       },
             *       {
             *         "chartName": "my-chart",
             *         "chartRepoName": "my-repo",
             *         "chartRepoUrl": "https://my-repo.com",
             *         "chartValues": {
             *           "key1": "value1",
             *           "key2": 3,
             *           "key3": {
             *             "key4": "value4"
             *           }
             *         },
             *         "chartVersion": "1.0.0",
             *         "namespace": "default",
             *         "password": "my-password",
             *         "username": "my-user"
             *       },
             *       {
             *         "chartName": "my-chart",
             *         "chartRepoName": "my-repo",
             *         "chartRepoUrl": "https://my-repo.com",
             *         "chartValues": {
             *           "key1": "value1",
             *           "key2": 3,
             *           "key3": {
             *             "key4": "value4"
             *           }
             *         },
             *         "chartVersion": "1.0.0",
             *         "namespace": "default",
             *         "password": "my-password",
             *         "username": "my-user"
             *       }
             *     ]
             */
            helmPackages?: components["schemas"]["HelmPackage"][];
        };
        /** @example {
         *       "identityProviders": [
         *         {
         *           "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
         *           "clientSecret": "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",
         *           "id": "idp-12345678",
         *           "identityProviderName": "Google",
         *           "status": "Ready"
         *         },
         *         {
         *           "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
         *           "clientSecret": "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",
         *           "id": "idp-12345678",
         *           "identityProviderName": "Google",
         *           "status": "Ready"
         *         }
         *       ]
         *     } */
        ListIdentityProvidersResult: {
            /**
             * @description The list of Identity Providers
             * @example [
             *       {
             *         "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
             *         "clientSecret": "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",
             *         "id": "idp-12345678",
             *         "identityProviderName": "Google",
             *         "status": "Ready"
             *       },
             *       {
             *         "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
             *         "clientSecret": "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",
             *         "id": "idp-12345678",
             *         "identityProviderName": "Google",
             *         "status": "Ready"
             *       },
             *       {
             *         "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
             *         "clientSecret": "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",
             *         "id": "idp-12345678",
             *         "identityProviderName": "Google",
             *         "status": "Ready"
             *       }
             *     ]
             */
            identityProviders: components["schemas"]["DescribeIdentityProviderResult"][];
        };
        /** @example {
         *       "ids": [
         *         "ip-12345678",
         *         "ip-12345679"
         *       ],
         *       "inputParameters": [
         *         {
         *           "defaultValue": "true",
         *           "dependentResourceId": "r-12345678",
         *           "description": "Non corporis ab id magnam.",
         *           "hasOptions": true,
         *           "id": "var-12345678",
         *           "isList": true,
         *           "key": "1",
         *           "labeledOptions": {
         *             "large": "t3.xlarge",
         *             "medium": "t3.large",
         *             "small": "t3.medium"
         *           },
         *           "limits": {
         *             "max": "Blanditiis voluptas.",
         *             "maxLength": "Et error sequi et dignissimos illo.",
         *             "min": "Et consequatur dolor est saepe velit voluptas.",
         *             "minLength": "Ad suscipit aut ut suscipit voluptatem."
         *           },
         *           "modifiable": true,
         *           "name": "13k",
         *           "options": [
         *             "true",
         *             "false"
         *           ],
         *           "required": true,
         *           "resourceId": "r-12345678",
         *           "serviceId": "s-12345678",
         *           "type": "Aut vitae."
         *         },
         *         {
         *           "defaultValue": "true",
         *           "dependentResourceId": "r-12345678",
         *           "description": "Non corporis ab id magnam.",
         *           "hasOptions": true,
         *           "id": "var-12345678",
         *           "isList": true,
         *           "key": "1",
         *           "labeledOptions": {
         *             "large": "t3.xlarge",
         *             "medium": "t3.large",
         *             "small": "t3.medium"
         *           },
         *           "limits": {
         *             "max": "Blanditiis voluptas.",
         *             "maxLength": "Et error sequi et dignissimos illo.",
         *             "min": "Et consequatur dolor est saepe velit voluptas.",
         *             "minLength": "Ad suscipit aut ut suscipit voluptatem."
         *           },
         *           "modifiable": true,
         *           "name": "13k",
         *           "options": [
         *             "true",
         *             "false"
         *           ],
         *           "required": true,
         *           "resourceId": "r-12345678",
         *           "serviceId": "s-12345678",
         *           "type": "Aut vitae."
         *         },
         *         {
         *           "defaultValue": "true",
         *           "dependentResourceId": "r-12345678",
         *           "description": "Non corporis ab id magnam.",
         *           "hasOptions": true,
         *           "id": "var-12345678",
         *           "isList": true,
         *           "key": "1",
         *           "labeledOptions": {
         *             "large": "t3.xlarge",
         *             "medium": "t3.large",
         *             "small": "t3.medium"
         *           },
         *           "limits": {
         *             "max": "Blanditiis voluptas.",
         *             "maxLength": "Et error sequi et dignissimos illo.",
         *             "min": "Et consequatur dolor est saepe velit voluptas.",
         *             "minLength": "Ad suscipit aut ut suscipit voluptatem."
         *           },
         *           "modifiable": true,
         *           "name": "13k",
         *           "options": [
         *             "true",
         *             "false"
         *           ],
         *           "required": true,
         *           "resourceId": "r-12345678",
         *           "serviceId": "s-12345678",
         *           "type": "Aut vitae."
         *         }
         *       ],
         *       "nextPageToken": "next-token"
         *     } */
        ListInputParametersResult: {
            /**
             * @description List of input parameter IDs
             * @example [
             *       "ip-12345678",
             *       "ip-12345679"
             *     ]
             */
            ids: string[];
            /**
             * @description The input parameters
             * @example [
             *       {
             *         "defaultValue": "true",
             *         "dependentResourceId": "r-12345678",
             *         "description": "Non corporis ab id magnam.",
             *         "hasOptions": true,
             *         "id": "var-12345678",
             *         "isList": true,
             *         "key": "1",
             *         "labeledOptions": {
             *           "large": "t3.xlarge",
             *           "medium": "t3.large",
             *           "small": "t3.medium"
             *         },
             *         "limits": {
             *           "max": "Blanditiis voluptas.",
             *           "maxLength": "Et error sequi et dignissimos illo.",
             *           "min": "Et consequatur dolor est saepe velit voluptas.",
             *           "minLength": "Ad suscipit aut ut suscipit voluptatem."
             *         },
             *         "modifiable": true,
             *         "name": "13k",
             *         "options": [
             *           "true",
             *           "false"
             *         ],
             *         "required": true,
             *         "resourceId": "r-12345678",
             *         "serviceId": "s-12345678",
             *         "type": "Aut vitae."
             *       },
             *       {
             *         "defaultValue": "true",
             *         "dependentResourceId": "r-12345678",
             *         "description": "Non corporis ab id magnam.",
             *         "hasOptions": true,
             *         "id": "var-12345678",
             *         "isList": true,
             *         "key": "1",
             *         "labeledOptions": {
             *           "large": "t3.xlarge",
             *           "medium": "t3.large",
             *           "small": "t3.medium"
             *         },
             *         "limits": {
             *           "max": "Blanditiis voluptas.",
             *           "maxLength": "Et error sequi et dignissimos illo.",
             *           "min": "Et consequatur dolor est saepe velit voluptas.",
             *           "minLength": "Ad suscipit aut ut suscipit voluptatem."
             *         },
             *         "modifiable": true,
             *         "name": "13k",
             *         "options": [
             *           "true",
             *           "false"
             *         ],
             *         "required": true,
             *         "resourceId": "r-12345678",
             *         "serviceId": "s-12345678",
             *         "type": "Aut vitae."
             *       },
             *       {
             *         "defaultValue": "true",
             *         "dependentResourceId": "r-12345678",
             *         "description": "Non corporis ab id magnam.",
             *         "hasOptions": true,
             *         "id": "var-12345678",
             *         "isList": true,
             *         "key": "1",
             *         "labeledOptions": {
             *           "large": "t3.xlarge",
             *           "medium": "t3.large",
             *           "small": "t3.medium"
             *         },
             *         "limits": {
             *           "max": "Blanditiis voluptas.",
             *           "maxLength": "Et error sequi et dignissimos illo.",
             *           "min": "Et consequatur dolor est saepe velit voluptas.",
             *           "minLength": "Ad suscipit aut ut suscipit voluptatem."
             *         },
             *         "modifiable": true,
             *         "name": "13k",
             *         "options": [
             *           "true",
             *           "false"
             *         ],
             *         "required": true,
             *         "resourceId": "r-12345678",
             *         "serviceId": "s-12345678",
             *         "type": "Aut vitae."
             *       },
             *       {
             *         "defaultValue": "true",
             *         "dependentResourceId": "r-12345678",
             *         "description": "Non corporis ab id magnam.",
             *         "hasOptions": true,
             *         "id": "var-12345678",
             *         "isList": true,
             *         "key": "1",
             *         "labeledOptions": {
             *           "large": "t3.xlarge",
             *           "medium": "t3.large",
             *           "small": "t3.medium"
             *         },
             *         "limits": {
             *           "max": "Blanditiis voluptas.",
             *           "maxLength": "Et error sequi et dignissimos illo.",
             *           "min": "Et consequatur dolor est saepe velit voluptas.",
             *           "minLength": "Ad suscipit aut ut suscipit voluptatem."
             *         },
             *         "modifiable": true,
             *         "name": "13k",
             *         "options": [
             *           "true",
             *           "false"
             *         ],
             *         "required": true,
             *         "resourceId": "r-12345678",
             *         "serviceId": "s-12345678",
             *         "type": "Aut vitae."
             *       }
             *     ]
             */
            inputParameters?: components["schemas"]["DescribeInputParameterResult"][];
            /**
             * @description Token to retrieve the next page of results
             * @example next-token
             */
            nextPageToken?: string;
        };
        /** @example {
         *       "invoices": [
         *         {
         *           "currency": "USD",
         *           "invoiceDate": "2021-01-01T00:00:00.000Z",
         *           "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
         *           "invoicePaymentTerm": "30",
         *           "invoiceStatus": "Open",
         *           "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
         *           "taxAmount": 10,
         *           "totalAmount": 110,
         *           "totalAmountWithoutTax": 100
         *         },
         *         {
         *           "currency": "USD",
         *           "invoiceDate": "2021-01-01T00:00:00.000Z",
         *           "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
         *           "invoicePaymentTerm": "30",
         *           "invoiceStatus": "Open",
         *           "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
         *           "taxAmount": 10,
         *           "totalAmount": 110,
         *           "totalAmountWithoutTax": 100
         *         },
         *         {
         *           "currency": "USD",
         *           "invoiceDate": "2021-01-01T00:00:00.000Z",
         *           "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
         *           "invoicePaymentTerm": "30",
         *           "invoiceStatus": "Open",
         *           "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
         *           "taxAmount": 10,
         *           "totalAmount": 110,
         *           "totalAmountWithoutTax": 100
         *         },
         *         {
         *           "currency": "USD",
         *           "invoiceDate": "2021-01-01T00:00:00.000Z",
         *           "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
         *           "invoicePaymentTerm": "30",
         *           "invoiceStatus": "Open",
         *           "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
         *           "taxAmount": 10,
         *           "totalAmount": 110,
         *           "totalAmountWithoutTax": 100
         *         }
         *       ]
         *     } */
        ListInvoicesResult: {
            /**
             * @description List of Invoices
             * @example [
             *       {
             *         "currency": "USD",
             *         "invoiceDate": "2021-01-01T00:00:00.000Z",
             *         "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
             *         "invoicePaymentTerm": "30",
             *         "invoiceStatus": "Open",
             *         "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
             *         "taxAmount": 10,
             *         "totalAmount": 110,
             *         "totalAmountWithoutTax": 100
             *       },
             *       {
             *         "currency": "USD",
             *         "invoiceDate": "2021-01-01T00:00:00.000Z",
             *         "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
             *         "invoicePaymentTerm": "30",
             *         "invoiceStatus": "Open",
             *         "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
             *         "taxAmount": 10,
             *         "totalAmount": 110,
             *         "totalAmountWithoutTax": 100
             *       },
             *       {
             *         "currency": "USD",
             *         "invoiceDate": "2021-01-01T00:00:00.000Z",
             *         "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
             *         "invoicePaymentTerm": "30",
             *         "invoiceStatus": "Open",
             *         "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
             *         "taxAmount": 10,
             *         "totalAmount": 110,
             *         "totalAmountWithoutTax": 100
             *       },
             *       {
             *         "currency": "USD",
             *         "invoiceDate": "2021-01-01T00:00:00.000Z",
             *         "invoiceId": "123MyCoolCorp980-2021-01-01-1234567890",
             *         "invoicePaymentTerm": "30",
             *         "invoiceStatus": "Open",
             *         "invoiceUrl": "https://my-cool-bucket.s3.amazonaws.com/invoices/123MyCoolCorp980/2021-01-01/123MyCoolCorp980-2021-01-01-1234567890.pdf",
             *         "taxAmount": 10,
             *         "totalAmount": 110,
             *         "totalAmountWithoutTax": 100
             *       }
             *     ]
             */
            invoices?: components["schemas"]["Invoice"][];
        };
        /** @example {
         *       "family": "COMPUTE_INFRA"
         *     } */
        ListLimitRequestBody: {
            /**
             * @description Limit family
             * @example COMPUTE_INFRA
             */
            family: string;
        };
        /** @example {
         *       "keys": [
         *         "MAX_VIRTUAL_CORES_PER_RESOURCE"
         *       ],
         *       "nextPageToken": "next-token"
         *     } */
        ListLimitResult: {
            /**
             * @description List of limit keys
             * @example [
             *       "MAX_VIRTUAL_CORES_PER_RESOURCE"
             *     ]
             */
            keys: string[];
            /**
             * @description Token to use for the next page
             * @example next-token
             */
            nextPageToken?: string;
        };
        /** @example {
         *       "ids": [
         *         "op-12345678"
         *       ],
         *       "nextPageToken": "next-token",
         *       "outputParameters": [
         *         {
         *           "description": "Username of the user created in the target system",
         *           "id": "op-12345678",
         *           "key": "username",
         *           "name": "Username",
         *           "resourceId": "r-12345678",
         *           "serviceId": "s-12345678",
         *           "value": "johndoe",
         *           "valueRef": "$var.username",
         *           "valueType": "Sit ab veritatis sed recusandae quo."
         *         },
         *         {
         *           "description": "Username of the user created in the target system",
         *           "id": "op-12345678",
         *           "key": "username",
         *           "name": "Username",
         *           "resourceId": "r-12345678",
         *           "serviceId": "s-12345678",
         *           "value": "johndoe",
         *           "valueRef": "$var.username",
         *           "valueType": "Sit ab veritatis sed recusandae quo."
         *         }
         *       ]
         *     } */
        ListOutputParametersResult: {
            /**
             * @description The IDs of the output parameters
             * @example [
             *       "op-12345678"
             *     ]
             */
            ids: string[];
            /**
             * @description The token to use for the next page of results
             * @example next-token
             */
            nextPageToken?: string;
            /**
             * @description The output parameters
             * @example [
             *       {
             *         "description": "Username of the user created in the target system",
             *         "id": "op-12345678",
             *         "key": "username",
             *         "name": "Username",
             *         "resourceId": "r-12345678",
             *         "serviceId": "s-12345678",
             *         "value": "johndoe",
             *         "valueRef": "$var.username",
             *         "valueType": "Sit ab veritatis sed recusandae quo."
             *       },
             *       {
             *         "description": "Username of the user created in the target system",
             *         "id": "op-12345678",
             *         "key": "username",
             *         "name": "Username",
             *         "resourceId": "r-12345678",
             *         "serviceId": "s-12345678",
             *         "value": "johndoe",
             *         "valueRef": "$var.username",
             *         "valueType": "Sit ab veritatis sed recusandae quo."
             *       }
             *     ]
             */
            outputParameters?: components["schemas"]["DescribeOutputParameterResult"][];
        };
        /** @example {
         *       "billingPlans": [
         *         {
         *           "allowCreatesWhenPaymentNotConfigured": true,
         *           "id": "bp-12345678",
         *           "maxNumberofInstances": 5,
         *           "planName": "STARTER",
         *           "pricing": {
         *             "cpuCoreHours": "0.001",
         *             "memoryGiBHours": "0.0001",
         *             "storageGiBHours": "0.0001"
         *           },
         *           "productTierId": "pt-12345678",
         *           "serviceId": "s-12345678"
         *         },
         *         {
         *           "allowCreatesWhenPaymentNotConfigured": true,
         *           "id": "bp-12345678",
         *           "maxNumberofInstances": 5,
         *           "planName": "STARTER",
         *           "pricing": {
         *             "cpuCoreHours": "0.001",
         *             "memoryGiBHours": "0.0001",
         *             "storageGiBHours": "0.0001"
         *           },
         *           "productTierId": "pt-12345678",
         *           "serviceId": "s-12345678"
         *         },
         *         {
         *           "allowCreatesWhenPaymentNotConfigured": true,
         *           "id": "bp-12345678",
         *           "maxNumberofInstances": 5,
         *           "planName": "STARTER",
         *           "pricing": {
         *             "cpuCoreHours": "0.001",
         *             "memoryGiBHours": "0.0001",
         *             "storageGiBHours": "0.0001"
         *           },
         *           "productTierId": "pt-12345678",
         *           "serviceId": "s-12345678"
         *         }
         *       ]
         *     } */
        ListProductTierBillingPlanResult: {
            /**
             * @description List of product tier billing plans
             * @example [
             *       {
             *         "allowCreatesWhenPaymentNotConfigured": true,
             *         "id": "bp-12345678",
             *         "maxNumberofInstances": 5,
             *         "planName": "STARTER",
             *         "pricing": {
             *           "cpuCoreHours": "0.001",
             *           "memoryGiBHours": "0.0001",
             *           "storageGiBHours": "0.0001"
             *         },
             *         "productTierId": "pt-12345678",
             *         "serviceId": "s-12345678"
             *       },
             *       {
             *         "allowCreatesWhenPaymentNotConfigured": true,
             *         "id": "bp-12345678",
             *         "maxNumberofInstances": 5,
             *         "planName": "STARTER",
             *         "pricing": {
             *           "cpuCoreHours": "0.001",
             *           "memoryGiBHours": "0.0001",
             *           "storageGiBHours": "0.0001"
             *         },
             *         "productTierId": "pt-12345678",
             *         "serviceId": "s-12345678"
             *       },
             *       {
             *         "allowCreatesWhenPaymentNotConfigured": true,
             *         "id": "bp-12345678",
             *         "maxNumberofInstances": 5,
             *         "planName": "STARTER",
             *         "pricing": {
             *           "cpuCoreHours": "0.001",
             *           "memoryGiBHours": "0.0001",
             *           "storageGiBHours": "0.0001"
             *         },
             *         "productTierId": "pt-12345678",
             *         "serviceId": "s-12345678"
             *       },
             *       {
             *         "allowCreatesWhenPaymentNotConfigured": true,
             *         "id": "bp-12345678",
             *         "maxNumberofInstances": 5,
             *         "planName": "STARTER",
             *         "pricing": {
             *           "cpuCoreHours": "0.001",
             *           "memoryGiBHours": "0.0001",
             *           "storageGiBHours": "0.0001"
             *         },
             *         "productTierId": "pt-12345678",
             *         "serviceId": "s-12345678"
             *       }
             *     ]
             */
            billingPlans: components["schemas"]["BillingPlan"][];
        };
        /** @example {
         *       "capabilities": [
         *         {
         *           "capability": "SERVERLESS",
         *           "configuration": {
         *             "EnableAutoStop": true,
         *             "MinimumNodesInPool": 5,
         *             "PortsMappingProxyConfig": {
         *               "MaxNumberOfClustersPerProxyInstance": 50,
         *               "NumberOfPortsPerCluster": 4
         *             },
         *             "ProxyId": "r-123456",
         *             "ReferenceProxyKey": "resource-proxy",
         *             "TargetPort": 5432
         *           }
         *         },
         *         {
         *           "capability": "SERVERLESS",
         *           "configuration": {
         *             "EnableAutoStop": true,
         *             "MinimumNodesInPool": 5,
         *             "PortsMappingProxyConfig": {
         *               "MaxNumberOfClustersPerProxyInstance": 50,
         *               "NumberOfPortsPerCluster": 4
         *             },
         *             "ProxyId": "r-123456",
         *             "ReferenceProxyKey": "resource-proxy",
         *             "TargetPort": 5432
         *           }
         *         },
         *         {
         *           "capability": "SERVERLESS",
         *           "configuration": {
         *             "EnableAutoStop": true,
         *             "MinimumNodesInPool": 5,
         *             "PortsMappingProxyConfig": {
         *               "MaxNumberOfClustersPerProxyInstance": 50,
         *               "NumberOfPortsPerCluster": 4
         *             },
         *             "ProxyId": "r-123456",
         *             "ReferenceProxyKey": "resource-proxy",
         *             "TargetPort": 5432
         *           }
         *         },
         *         {
         *           "capability": "SERVERLESS",
         *           "configuration": {
         *             "EnableAutoStop": true,
         *             "MinimumNodesInPool": 5,
         *             "PortsMappingProxyConfig": {
         *               "MaxNumberOfClustersPerProxyInstance": 50,
         *               "NumberOfPortsPerCluster": 4
         *             },
         *             "ProxyId": "r-123456",
         *             "ReferenceProxyKey": "resource-proxy",
         *             "TargetPort": 5432
         *           }
         *         }
         *       ]
         *     } */
        ListResourceCapabilitiesResponse: {
            /**
             * @description The configurationParameters to enable capabilities for the resource
             * @example [
             *       {
             *         "capability": "SERVERLESS",
             *         "configuration": {
             *           "EnableAutoStop": true,
             *           "MinimumNodesInPool": 5,
             *           "PortsMappingProxyConfig": {
             *             "MaxNumberOfClustersPerProxyInstance": 50,
             *             "NumberOfPortsPerCluster": 4
             *           },
             *           "ProxyId": "r-123456",
             *           "ReferenceProxyKey": "resource-proxy",
             *           "TargetPort": 5432
             *         }
             *       },
             *       {
             *         "capability": "SERVERLESS",
             *         "configuration": {
             *           "EnableAutoStop": true,
             *           "MinimumNodesInPool": 5,
             *           "PortsMappingProxyConfig": {
             *             "MaxNumberOfClustersPerProxyInstance": 50,
             *             "NumberOfPortsPerCluster": 4
             *           },
             *           "ProxyId": "r-123456",
             *           "ReferenceProxyKey": "resource-proxy",
             *           "TargetPort": 5432
             *         }
             *       },
             *       {
             *         "capability": "SERVERLESS",
             *         "configuration": {
             *           "EnableAutoStop": true,
             *           "MinimumNodesInPool": 5,
             *           "PortsMappingProxyConfig": {
             *             "MaxNumberOfClustersPerProxyInstance": 50,
             *             "NumberOfPortsPerCluster": 4
             *           },
             *           "ProxyId": "r-123456",
             *           "ReferenceProxyKey": "resource-proxy",
             *           "TargetPort": 5432
             *         }
             *       }
             *     ]
             */
            capabilities?: components["schemas"]["ResourceCapability"][];
        };
        /** @example {
         *       "snapshots": [
         *         {
         *           "completeTime": "2021-09-01T00:00:00Z",
         *           "createdTime": "2021-09-01T00:00:00Z",
         *           "encrypted": true,
         *           "progress": 100,
         *           "snapshotId": "instance-ss-12345678",
         *           "status": "completed"
         *         }
         *       ]
         *     } */
        ListResourceInstanceSnapshotsResult: {
            /**
             * @description The instance snapshots
             * @example [
             *       {
             *         "completeTime": "2021-09-01T00:00:00Z",
             *         "createdTime": "2021-09-01T00:00:00Z",
             *         "encrypted": true,
             *         "progress": 100,
             *         "snapshotId": "instance-ss-12345678",
             *         "status": "completed"
             *       }
             *     ]
             */
            snapshots?: components["schemas"]["InstanceSnapshot"][];
        };
        /** @example {
         *       "ids": [
         *         "r-12345678",
         *         "r-abcdefgh",
         *         "r-1234abcd"
         *       ],
         *       "nextPageToken": "next-token",
         *       "resources": [
         *         {
         *           "actionHooks": [
         *             {
         *               "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
         *               "scope": "CLUSTER",
         *               "type": "INIT"
         *             }
         *           ],
         *           "additionalSecurityContext": {
         *             "AddCapabilities": [
         *               "CAP_NET_ADMIN",
         *               "CAP_NET_RAW"
         *             ],
         *             "DropCapabilities": [
         *               "CAP_NET_ADMIN",
         *               "CAP_NET_RAW"
         *             ],
         *             "SupplementalGroupIDs": [
         *               1001,
         *               999
         *             ]
         *           },
         *           "backupConfiguration": {
         *             "backupPeriodInHours": 24,
         *             "backupRetentionInDays": 7
         *           },
         *           "blobStorageConfiguration": {
         *             "GCSConfiguration": {},
         *             "S3Configuration": {}
         *           },
         *           "capabilities": [
         *             {
         *               "capability": "SERVERLESS",
         *               "configuration": {
         *                 "EnableAutoStop": true,
         *                 "MinimumNodesInPool": 5,
         *                 "PortsMappingProxyConfig": {
         *                   "MaxNumberOfClustersPerProxyInstance": 50,
         *                   "NumberOfPortsPerCluster": 4
         *                 },
         *                 "ProxyId": "r-123456",
         *                 "ReferenceProxyKey": "resource-proxy",
         *                 "TargetPort": 5432
         *               }
         *             },
         *             {
         *               "capability": "SERVERLESS",
         *               "configuration": {
         *                 "EnableAutoStop": true,
         *                 "MinimumNodesInPool": 5,
         *                 "PortsMappingProxyConfig": {
         *                   "MaxNumberOfClustersPerProxyInstance": 50,
         *                   "NumberOfPortsPerCluster": 4
         *                 },
         *                 "ProxyId": "r-123456",
         *                 "ReferenceProxyKey": "resource-proxy",
         *                 "TargetPort": 5432
         *               }
         *             },
         *             {
         *               "capability": "SERVERLESS",
         *               "configuration": {
         *                 "EnableAutoStop": true,
         *                 "MinimumNodesInPool": 5,
         *                 "PortsMappingProxyConfig": {
         *                   "MaxNumberOfClustersPerProxyInstance": 50,
         *                   "NumberOfPortsPerCluster": 4
         *                 },
         *                 "ProxyId": "r-123456",
         *                 "ReferenceProxyKey": "resource-proxy",
         *                 "TargetPort": 5432
         *               }
         *             }
         *           ],
         *           "customLabels": {
         *             "key": "value"
         *           },
         *           "customSysCTLs": {
         *             "net.ipv4.tcp_syncookies": "1"
         *           },
         *           "customULimits": [
         *             {
         *               "ULimitsName": "NoProc",
         *               "ULimitsType": "Soft",
         *               "ULimitsValue": 1000
         *             },
         *             {
         *               "ULimitsName": "NoFile",
         *               "ULimitsType": "Hard",
         *               "ULimitsValue": 2048
         *             }
         *           ],
         *           "dependencies": [
         *             {
         *               "parameterMap": {
         *                 "clusterId": "writerId",
         *                 "clusterOrg": "userDatabase"
         *               },
         *               "resourceId": "r-12345678"
         *             },
         *             {
         *               "parameterMap": {
         *                 "clusterId": "readerId",
         *                 "clusterOrg": "userDatabase"
         *               },
         *               "resourceId": "r-abcdef12"
         *             }
         *           ],
         *           "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
         *           "environmentVariables": [
         *             {
         *               "name": "MYSQL_ROOT_PASSWORD",
         *               "value": "password"
         *             }
         *           ],
         *           "fileSystemConfiguration": {
         *             "EFSFileSystemConfiguration": {
         *               "PerformanceMode": "generalPurpose|maxIO",
         *               "ProvisionedThroughputInMibps": 125,
         *               "ThroughputMode": "provisioned|bursting|elastic"
         *             }
         *           },
         *           "helmChartConfiguration": {
         *             "chartName": "my-chart",
         *             "chartRepoName": "my-repo",
         *             "chartRepoUrl": "https://my-repo.com",
         *             "chartValues": {
         *               "key1": "value1",
         *               "key2": 3,
         *               "key3": {
         *                 "key4": "value4"
         *               }
         *             },
         *             "chartVersion": "1.0.0",
         *             "endpointConfiguration": {
         *               "admin": {
         *                 "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *                 "networkingType": "PRIVATE",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": false
         *               },
         *               "cluster": {
         *                 "host": "https://my-endpoint.com",
         *                 "networkingType": "PUBLIC",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": true
         *               }
         *             },
         *             "password": "my-password",
         *             "runtimeConfiguration": {
         *               "disableHooks": true,
         *               "recreate": true,
         *               "resetThenReuseValues": true,
         *               "resetValues": true,
         *               "reuseValues": true,
         *               "skipCRDs": true,
         *               "timeoutNanos": 1000000000,
         *               "upgradeCRDs": true,
         *               "wait": true,
         *               "waitForJobs": true
         *             },
         *             "username": "my-user"
         *           },
         *           "id": "r-12345678",
         *           "imageConfigId": "imgc-12345678",
         *           "infraConfigId": "ic-12345678",
         *           "internal": false,
         *           "isDeprecated": false,
         *           "key": "galera",
         *           "kustomizeConfiguration": {
         *             "endpointConfiguration": {
         *               "admin": {
         *                 "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *                 "networkingType": "PRIVATE",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": false
         *               },
         *               "cluster": {
         *                 "host": "https://my-endpoint.com",
         *                 "networkingType": "PUBLIC",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": true
         *               }
         *             },
         *             "gitConfiguration": {
         *               "accessToken": "my-token",
         *               "referenceName": "tags/v1.0.0",
         *               "repositoryUrl": "https://github.com/username/myrepo",
         *               "userName": "my-user"
         *             },
         *             "helmChartDependencies": [
         *               {
         *                 "chartName": "cert-manager",
         *                 "chartVersion": "v1.5.3"
         *               },
         *               {
         *                 "chartName": "nginx-ingress",
         *                 "chartVersion": "v0.48.1"
         *               },
         *               {
         *                 "chartName": "external-dns",
         *                 "chartVersion": "v0.7.0"
         *               },
         *               {
         *                 "chartName": "cnpg-operator",
         *                 "chartVersion": "v0.23.1"
         *               }
         *             ],
         *             "kustomizePath": "/kustomize"
         *           },
         *           "l4LoadBalancerConfiguration": {
         *             "ingressPortConfiguration": [
         *               {
         *                 "associatedResourceIDs": [
         *                   "r-12345678",
         *                   "r-abcdef12"
         *                 ],
         *                 "backendPort": 8080,
         *                 "ingressPort": 1234
         *               },
         *               {
         *                 "associatedResourceIDs": [
         *                   "r-12345678",
         *                   "r-abcdef12"
         *                 ],
         *                 "backendPort": 8081,
         *                 "ingressPort": 5678
         *               },
         *               {
         *                 "associatedResourceIDs": [
         *                   "r-vwxybz12",
         *                   "r-poij122v"
         *                 ],
         *                 "backendPort": 8082,
         *                 "ingressPort": 9012
         *               }
         *             ]
         *           },
         *           "l7LoadBalancerConfiguration": {
         *             "paths": [
         *               {
         *                 "associatedResourceID": "r-12345678",
         *                 "path": "/path",
         *                 "port": 8080
         *               }
         *             ]
         *           },
         *           "name": "Galera",
         *           "operatorCRDConfiguration": {
         *             "endpointConfiguration": {
         *               "admin": {
         *                 "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *                 "networkingType": "PRIVATE",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": false
         *               },
         *               "cluster": {
         *                 "host": "https://my-endpoint.com",
         *                 "networkingType": "PUBLIC",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": true
         *               }
         *             },
         *             "helmChartDependencies": [
         *               {
         *                 "chartName": "cert-manager",
         *                 "chartVersion": "v1.5.3"
         *               },
         *               {
         *                 "chartName": "nginx-ingress",
         *                 "chartVersion": "v0.48.1"
         *               },
         *               {
         *                 "chartName": "external-dns",
         *                 "chartVersion": "v0.7.0"
         *               },
         *               {
         *                 "chartName": "cnpg-operator",
         *                 "chartVersion": "v0.23.1"
         *               }
         *             ],
         *             "outputParameters": {
         *               "expiresAt": "$out.status.notAfter",
         *               "issuerName": "letsencrypt-prod"
         *             },
         *             "readinessConditions": {
         *               "$out.status.conditions[?(@.type=='Ready')].status": true
         *             },
         *             "supplementalFiles": [
         *               "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
         *               "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
         *             ],
         *             "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
         *           },
         *           "productTierId": "pt-12345678",
         *           "proxyType": "PortsBasedProxy",
         *           "resourceType": "Generic",
         *           "serviceId": "s-12345678",
         *           "terraformConfigurations": {
         *             "Accusamus sed facere consectetur et qui.": {
         *               "gitConfiguration": {
         *                 "accessToken": "my-token",
         *                 "referenceName": "tags/v1.0.0",
         *                 "repositoryUrl": "https://github.com/username/myrepo",
         *                 "userName": "my-user"
         *               },
         *               "privateModuleGitAccessTokens": {
         *                 "tokenName": "accessToken"
         *               },
         *               "requiredOutputKeys": [
         *                 "output1"
         *               ],
         *               "requiredOutputs": [
         *                 {
         *                   "exported": true,
         *                   "key": "output1"
         *                 }
         *               ],
         *               "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *               "terraformPath": "/project1/tf"
         *             },
         *             "Sequi asperiores.": {
         *               "gitConfiguration": {
         *                 "accessToken": "my-token",
         *                 "referenceName": "tags/v1.0.0",
         *                 "repositoryUrl": "https://github.com/username/myrepo",
         *                 "userName": "my-user"
         *               },
         *               "privateModuleGitAccessTokens": {
         *                 "tokenName": "accessToken"
         *               },
         *               "requiredOutputKeys": [
         *                 "output1"
         *               ],
         *               "requiredOutputs": [
         *                 {
         *                   "exported": true,
         *                   "key": "output1"
         *                 }
         *               ],
         *               "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *               "terraformPath": "/project1/tf"
         *             }
         *           }
         *         },
         *         {
         *           "actionHooks": [
         *             {
         *               "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
         *               "scope": "CLUSTER",
         *               "type": "INIT"
         *             }
         *           ],
         *           "additionalSecurityContext": {
         *             "AddCapabilities": [
         *               "CAP_NET_ADMIN",
         *               "CAP_NET_RAW"
         *             ],
         *             "DropCapabilities": [
         *               "CAP_NET_ADMIN",
         *               "CAP_NET_RAW"
         *             ],
         *             "SupplementalGroupIDs": [
         *               1001,
         *               999
         *             ]
         *           },
         *           "backupConfiguration": {
         *             "backupPeriodInHours": 24,
         *             "backupRetentionInDays": 7
         *           },
         *           "blobStorageConfiguration": {
         *             "GCSConfiguration": {},
         *             "S3Configuration": {}
         *           },
         *           "capabilities": [
         *             {
         *               "capability": "SERVERLESS",
         *               "configuration": {
         *                 "EnableAutoStop": true,
         *                 "MinimumNodesInPool": 5,
         *                 "PortsMappingProxyConfig": {
         *                   "MaxNumberOfClustersPerProxyInstance": 50,
         *                   "NumberOfPortsPerCluster": 4
         *                 },
         *                 "ProxyId": "r-123456",
         *                 "ReferenceProxyKey": "resource-proxy",
         *                 "TargetPort": 5432
         *               }
         *             },
         *             {
         *               "capability": "SERVERLESS",
         *               "configuration": {
         *                 "EnableAutoStop": true,
         *                 "MinimumNodesInPool": 5,
         *                 "PortsMappingProxyConfig": {
         *                   "MaxNumberOfClustersPerProxyInstance": 50,
         *                   "NumberOfPortsPerCluster": 4
         *                 },
         *                 "ProxyId": "r-123456",
         *                 "ReferenceProxyKey": "resource-proxy",
         *                 "TargetPort": 5432
         *               }
         *             },
         *             {
         *               "capability": "SERVERLESS",
         *               "configuration": {
         *                 "EnableAutoStop": true,
         *                 "MinimumNodesInPool": 5,
         *                 "PortsMappingProxyConfig": {
         *                   "MaxNumberOfClustersPerProxyInstance": 50,
         *                   "NumberOfPortsPerCluster": 4
         *                 },
         *                 "ProxyId": "r-123456",
         *                 "ReferenceProxyKey": "resource-proxy",
         *                 "TargetPort": 5432
         *               }
         *             }
         *           ],
         *           "customLabels": {
         *             "key": "value"
         *           },
         *           "customSysCTLs": {
         *             "net.ipv4.tcp_syncookies": "1"
         *           },
         *           "customULimits": [
         *             {
         *               "ULimitsName": "NoProc",
         *               "ULimitsType": "Soft",
         *               "ULimitsValue": 1000
         *             },
         *             {
         *               "ULimitsName": "NoFile",
         *               "ULimitsType": "Hard",
         *               "ULimitsValue": 2048
         *             }
         *           ],
         *           "dependencies": [
         *             {
         *               "parameterMap": {
         *                 "clusterId": "writerId",
         *                 "clusterOrg": "userDatabase"
         *               },
         *               "resourceId": "r-12345678"
         *             },
         *             {
         *               "parameterMap": {
         *                 "clusterId": "readerId",
         *                 "clusterOrg": "userDatabase"
         *               },
         *               "resourceId": "r-abcdef12"
         *             }
         *           ],
         *           "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
         *           "environmentVariables": [
         *             {
         *               "name": "MYSQL_ROOT_PASSWORD",
         *               "value": "password"
         *             }
         *           ],
         *           "fileSystemConfiguration": {
         *             "EFSFileSystemConfiguration": {
         *               "PerformanceMode": "generalPurpose|maxIO",
         *               "ProvisionedThroughputInMibps": 125,
         *               "ThroughputMode": "provisioned|bursting|elastic"
         *             }
         *           },
         *           "helmChartConfiguration": {
         *             "chartName": "my-chart",
         *             "chartRepoName": "my-repo",
         *             "chartRepoUrl": "https://my-repo.com",
         *             "chartValues": {
         *               "key1": "value1",
         *               "key2": 3,
         *               "key3": {
         *                 "key4": "value4"
         *               }
         *             },
         *             "chartVersion": "1.0.0",
         *             "endpointConfiguration": {
         *               "admin": {
         *                 "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *                 "networkingType": "PRIVATE",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": false
         *               },
         *               "cluster": {
         *                 "host": "https://my-endpoint.com",
         *                 "networkingType": "PUBLIC",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": true
         *               }
         *             },
         *             "password": "my-password",
         *             "runtimeConfiguration": {
         *               "disableHooks": true,
         *               "recreate": true,
         *               "resetThenReuseValues": true,
         *               "resetValues": true,
         *               "reuseValues": true,
         *               "skipCRDs": true,
         *               "timeoutNanos": 1000000000,
         *               "upgradeCRDs": true,
         *               "wait": true,
         *               "waitForJobs": true
         *             },
         *             "username": "my-user"
         *           },
         *           "id": "r-12345678",
         *           "imageConfigId": "imgc-12345678",
         *           "infraConfigId": "ic-12345678",
         *           "internal": false,
         *           "isDeprecated": false,
         *           "key": "galera",
         *           "kustomizeConfiguration": {
         *             "endpointConfiguration": {
         *               "admin": {
         *                 "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *                 "networkingType": "PRIVATE",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": false
         *               },
         *               "cluster": {
         *                 "host": "https://my-endpoint.com",
         *                 "networkingType": "PUBLIC",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": true
         *               }
         *             },
         *             "gitConfiguration": {
         *               "accessToken": "my-token",
         *               "referenceName": "tags/v1.0.0",
         *               "repositoryUrl": "https://github.com/username/myrepo",
         *               "userName": "my-user"
         *             },
         *             "helmChartDependencies": [
         *               {
         *                 "chartName": "cert-manager",
         *                 "chartVersion": "v1.5.3"
         *               },
         *               {
         *                 "chartName": "nginx-ingress",
         *                 "chartVersion": "v0.48.1"
         *               },
         *               {
         *                 "chartName": "external-dns",
         *                 "chartVersion": "v0.7.0"
         *               },
         *               {
         *                 "chartName": "cnpg-operator",
         *                 "chartVersion": "v0.23.1"
         *               }
         *             ],
         *             "kustomizePath": "/kustomize"
         *           },
         *           "l4LoadBalancerConfiguration": {
         *             "ingressPortConfiguration": [
         *               {
         *                 "associatedResourceIDs": [
         *                   "r-12345678",
         *                   "r-abcdef12"
         *                 ],
         *                 "backendPort": 8080,
         *                 "ingressPort": 1234
         *               },
         *               {
         *                 "associatedResourceIDs": [
         *                   "r-12345678",
         *                   "r-abcdef12"
         *                 ],
         *                 "backendPort": 8081,
         *                 "ingressPort": 5678
         *               },
         *               {
         *                 "associatedResourceIDs": [
         *                   "r-vwxybz12",
         *                   "r-poij122v"
         *                 ],
         *                 "backendPort": 8082,
         *                 "ingressPort": 9012
         *               }
         *             ]
         *           },
         *           "l7LoadBalancerConfiguration": {
         *             "paths": [
         *               {
         *                 "associatedResourceID": "r-12345678",
         *                 "path": "/path",
         *                 "port": 8080
         *               }
         *             ]
         *           },
         *           "name": "Galera",
         *           "operatorCRDConfiguration": {
         *             "endpointConfiguration": {
         *               "admin": {
         *                 "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *                 "networkingType": "PRIVATE",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": false
         *               },
         *               "cluster": {
         *                 "host": "https://my-endpoint.com",
         *                 "networkingType": "PUBLIC",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": true
         *               }
         *             },
         *             "helmChartDependencies": [
         *               {
         *                 "chartName": "cert-manager",
         *                 "chartVersion": "v1.5.3"
         *               },
         *               {
         *                 "chartName": "nginx-ingress",
         *                 "chartVersion": "v0.48.1"
         *               },
         *               {
         *                 "chartName": "external-dns",
         *                 "chartVersion": "v0.7.0"
         *               },
         *               {
         *                 "chartName": "cnpg-operator",
         *                 "chartVersion": "v0.23.1"
         *               }
         *             ],
         *             "outputParameters": {
         *               "expiresAt": "$out.status.notAfter",
         *               "issuerName": "letsencrypt-prod"
         *             },
         *             "readinessConditions": {
         *               "$out.status.conditions[?(@.type=='Ready')].status": true
         *             },
         *             "supplementalFiles": [
         *               "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
         *               "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
         *             ],
         *             "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
         *           },
         *           "productTierId": "pt-12345678",
         *           "proxyType": "PortsBasedProxy",
         *           "resourceType": "Generic",
         *           "serviceId": "s-12345678",
         *           "terraformConfigurations": {
         *             "Accusamus sed facere consectetur et qui.": {
         *               "gitConfiguration": {
         *                 "accessToken": "my-token",
         *                 "referenceName": "tags/v1.0.0",
         *                 "repositoryUrl": "https://github.com/username/myrepo",
         *                 "userName": "my-user"
         *               },
         *               "privateModuleGitAccessTokens": {
         *                 "tokenName": "accessToken"
         *               },
         *               "requiredOutputKeys": [
         *                 "output1"
         *               ],
         *               "requiredOutputs": [
         *                 {
         *                   "exported": true,
         *                   "key": "output1"
         *                 }
         *               ],
         *               "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *               "terraformPath": "/project1/tf"
         *             },
         *             "Sequi asperiores.": {
         *               "gitConfiguration": {
         *                 "accessToken": "my-token",
         *                 "referenceName": "tags/v1.0.0",
         *                 "repositoryUrl": "https://github.com/username/myrepo",
         *                 "userName": "my-user"
         *               },
         *               "privateModuleGitAccessTokens": {
         *                 "tokenName": "accessToken"
         *               },
         *               "requiredOutputKeys": [
         *                 "output1"
         *               ],
         *               "requiredOutputs": [
         *                 {
         *                   "exported": true,
         *                   "key": "output1"
         *                 }
         *               ],
         *               "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *               "terraformPath": "/project1/tf"
         *             }
         *           }
         *         },
         *         {
         *           "actionHooks": [
         *             {
         *               "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
         *               "scope": "CLUSTER",
         *               "type": "INIT"
         *             }
         *           ],
         *           "additionalSecurityContext": {
         *             "AddCapabilities": [
         *               "CAP_NET_ADMIN",
         *               "CAP_NET_RAW"
         *             ],
         *             "DropCapabilities": [
         *               "CAP_NET_ADMIN",
         *               "CAP_NET_RAW"
         *             ],
         *             "SupplementalGroupIDs": [
         *               1001,
         *               999
         *             ]
         *           },
         *           "backupConfiguration": {
         *             "backupPeriodInHours": 24,
         *             "backupRetentionInDays": 7
         *           },
         *           "blobStorageConfiguration": {
         *             "GCSConfiguration": {},
         *             "S3Configuration": {}
         *           },
         *           "capabilities": [
         *             {
         *               "capability": "SERVERLESS",
         *               "configuration": {
         *                 "EnableAutoStop": true,
         *                 "MinimumNodesInPool": 5,
         *                 "PortsMappingProxyConfig": {
         *                   "MaxNumberOfClustersPerProxyInstance": 50,
         *                   "NumberOfPortsPerCluster": 4
         *                 },
         *                 "ProxyId": "r-123456",
         *                 "ReferenceProxyKey": "resource-proxy",
         *                 "TargetPort": 5432
         *               }
         *             },
         *             {
         *               "capability": "SERVERLESS",
         *               "configuration": {
         *                 "EnableAutoStop": true,
         *                 "MinimumNodesInPool": 5,
         *                 "PortsMappingProxyConfig": {
         *                   "MaxNumberOfClustersPerProxyInstance": 50,
         *                   "NumberOfPortsPerCluster": 4
         *                 },
         *                 "ProxyId": "r-123456",
         *                 "ReferenceProxyKey": "resource-proxy",
         *                 "TargetPort": 5432
         *               }
         *             },
         *             {
         *               "capability": "SERVERLESS",
         *               "configuration": {
         *                 "EnableAutoStop": true,
         *                 "MinimumNodesInPool": 5,
         *                 "PortsMappingProxyConfig": {
         *                   "MaxNumberOfClustersPerProxyInstance": 50,
         *                   "NumberOfPortsPerCluster": 4
         *                 },
         *                 "ProxyId": "r-123456",
         *                 "ReferenceProxyKey": "resource-proxy",
         *                 "TargetPort": 5432
         *               }
         *             }
         *           ],
         *           "customLabels": {
         *             "key": "value"
         *           },
         *           "customSysCTLs": {
         *             "net.ipv4.tcp_syncookies": "1"
         *           },
         *           "customULimits": [
         *             {
         *               "ULimitsName": "NoProc",
         *               "ULimitsType": "Soft",
         *               "ULimitsValue": 1000
         *             },
         *             {
         *               "ULimitsName": "NoFile",
         *               "ULimitsType": "Hard",
         *               "ULimitsValue": 2048
         *             }
         *           ],
         *           "dependencies": [
         *             {
         *               "parameterMap": {
         *                 "clusterId": "writerId",
         *                 "clusterOrg": "userDatabase"
         *               },
         *               "resourceId": "r-12345678"
         *             },
         *             {
         *               "parameterMap": {
         *                 "clusterId": "readerId",
         *                 "clusterOrg": "userDatabase"
         *               },
         *               "resourceId": "r-abcdef12"
         *             }
         *           ],
         *           "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
         *           "environmentVariables": [
         *             {
         *               "name": "MYSQL_ROOT_PASSWORD",
         *               "value": "password"
         *             }
         *           ],
         *           "fileSystemConfiguration": {
         *             "EFSFileSystemConfiguration": {
         *               "PerformanceMode": "generalPurpose|maxIO",
         *               "ProvisionedThroughputInMibps": 125,
         *               "ThroughputMode": "provisioned|bursting|elastic"
         *             }
         *           },
         *           "helmChartConfiguration": {
         *             "chartName": "my-chart",
         *             "chartRepoName": "my-repo",
         *             "chartRepoUrl": "https://my-repo.com",
         *             "chartValues": {
         *               "key1": "value1",
         *               "key2": 3,
         *               "key3": {
         *                 "key4": "value4"
         *               }
         *             },
         *             "chartVersion": "1.0.0",
         *             "endpointConfiguration": {
         *               "admin": {
         *                 "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *                 "networkingType": "PRIVATE",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": false
         *               },
         *               "cluster": {
         *                 "host": "https://my-endpoint.com",
         *                 "networkingType": "PUBLIC",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": true
         *               }
         *             },
         *             "password": "my-password",
         *             "runtimeConfiguration": {
         *               "disableHooks": true,
         *               "recreate": true,
         *               "resetThenReuseValues": true,
         *               "resetValues": true,
         *               "reuseValues": true,
         *               "skipCRDs": true,
         *               "timeoutNanos": 1000000000,
         *               "upgradeCRDs": true,
         *               "wait": true,
         *               "waitForJobs": true
         *             },
         *             "username": "my-user"
         *           },
         *           "id": "r-12345678",
         *           "imageConfigId": "imgc-12345678",
         *           "infraConfigId": "ic-12345678",
         *           "internal": false,
         *           "isDeprecated": false,
         *           "key": "galera",
         *           "kustomizeConfiguration": {
         *             "endpointConfiguration": {
         *               "admin": {
         *                 "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *                 "networkingType": "PRIVATE",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": false
         *               },
         *               "cluster": {
         *                 "host": "https://my-endpoint.com",
         *                 "networkingType": "PUBLIC",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": true
         *               }
         *             },
         *             "gitConfiguration": {
         *               "accessToken": "my-token",
         *               "referenceName": "tags/v1.0.0",
         *               "repositoryUrl": "https://github.com/username/myrepo",
         *               "userName": "my-user"
         *             },
         *             "helmChartDependencies": [
         *               {
         *                 "chartName": "cert-manager",
         *                 "chartVersion": "v1.5.3"
         *               },
         *               {
         *                 "chartName": "nginx-ingress",
         *                 "chartVersion": "v0.48.1"
         *               },
         *               {
         *                 "chartName": "external-dns",
         *                 "chartVersion": "v0.7.0"
         *               },
         *               {
         *                 "chartName": "cnpg-operator",
         *                 "chartVersion": "v0.23.1"
         *               }
         *             ],
         *             "kustomizePath": "/kustomize"
         *           },
         *           "l4LoadBalancerConfiguration": {
         *             "ingressPortConfiguration": [
         *               {
         *                 "associatedResourceIDs": [
         *                   "r-12345678",
         *                   "r-abcdef12"
         *                 ],
         *                 "backendPort": 8080,
         *                 "ingressPort": 1234
         *               },
         *               {
         *                 "associatedResourceIDs": [
         *                   "r-12345678",
         *                   "r-abcdef12"
         *                 ],
         *                 "backendPort": 8081,
         *                 "ingressPort": 5678
         *               },
         *               {
         *                 "associatedResourceIDs": [
         *                   "r-vwxybz12",
         *                   "r-poij122v"
         *                 ],
         *                 "backendPort": 8082,
         *                 "ingressPort": 9012
         *               }
         *             ]
         *           },
         *           "l7LoadBalancerConfiguration": {
         *             "paths": [
         *               {
         *                 "associatedResourceID": "r-12345678",
         *                 "path": "/path",
         *                 "port": 8080
         *               }
         *             ]
         *           },
         *           "name": "Galera",
         *           "operatorCRDConfiguration": {
         *             "endpointConfiguration": {
         *               "admin": {
         *                 "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *                 "networkingType": "PRIVATE",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": false
         *               },
         *               "cluster": {
         *                 "host": "https://my-endpoint.com",
         *                 "networkingType": "PUBLIC",
         *                 "ports": [
         *                   8080,
         *                   8081
         *                 ],
         *                 "primary": true
         *               }
         *             },
         *             "helmChartDependencies": [
         *               {
         *                 "chartName": "cert-manager",
         *                 "chartVersion": "v1.5.3"
         *               },
         *               {
         *                 "chartName": "nginx-ingress",
         *                 "chartVersion": "v0.48.1"
         *               },
         *               {
         *                 "chartName": "external-dns",
         *                 "chartVersion": "v0.7.0"
         *               },
         *               {
         *                 "chartName": "cnpg-operator",
         *                 "chartVersion": "v0.23.1"
         *               }
         *             ],
         *             "outputParameters": {
         *               "expiresAt": "$out.status.notAfter",
         *               "issuerName": "letsencrypt-prod"
         *             },
         *             "readinessConditions": {
         *               "$out.status.conditions[?(@.type=='Ready')].status": true
         *             },
         *             "supplementalFiles": [
         *               "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
         *               "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
         *             ],
         *             "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
         *           },
         *           "productTierId": "pt-12345678",
         *           "proxyType": "PortsBasedProxy",
         *           "resourceType": "Generic",
         *           "serviceId": "s-12345678",
         *           "terraformConfigurations": {
         *             "Accusamus sed facere consectetur et qui.": {
         *               "gitConfiguration": {
         *                 "accessToken": "my-token",
         *                 "referenceName": "tags/v1.0.0",
         *                 "repositoryUrl": "https://github.com/username/myrepo",
         *                 "userName": "my-user"
         *               },
         *               "privateModuleGitAccessTokens": {
         *                 "tokenName": "accessToken"
         *               },
         *               "requiredOutputKeys": [
         *                 "output1"
         *               ],
         *               "requiredOutputs": [
         *                 {
         *                   "exported": true,
         *                   "key": "output1"
         *                 }
         *               ],
         *               "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *               "terraformPath": "/project1/tf"
         *             },
         *             "Sequi asperiores.": {
         *               "gitConfiguration": {
         *                 "accessToken": "my-token",
         *                 "referenceName": "tags/v1.0.0",
         *                 "repositoryUrl": "https://github.com/username/myrepo",
         *                 "userName": "my-user"
         *               },
         *               "privateModuleGitAccessTokens": {
         *                 "tokenName": "accessToken"
         *               },
         *               "requiredOutputKeys": [
         *                 "output1"
         *               ],
         *               "requiredOutputs": [
         *                 {
         *                   "exported": true,
         *                   "key": "output1"
         *                 }
         *               ],
         *               "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *               "terraformPath": "/project1/tf"
         *             }
         *           }
         *         }
         *       ]
         *     } */
        ListResourcesResult: {
            /**
             * @description List of resource IDs
             * @example [
             *       "r-12345678",
             *       "r-abcdefgh",
             *       "r-1234abcd"
             *     ]
             */
            ids: string[];
            /**
             * @description Token to use for the next page
             * @example next-token
             */
            nextPageToken?: string;
            /**
             * @description List of resources
             * @example [
             *       {
             *         "actionHooks": [
             *           {
             *             "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
             *             "scope": "CLUSTER",
             *             "type": "INIT"
             *           }
             *         ],
             *         "additionalSecurityContext": {
             *           "AddCapabilities": [
             *             "CAP_NET_ADMIN",
             *             "CAP_NET_RAW"
             *           ],
             *           "DropCapabilities": [
             *             "CAP_NET_ADMIN",
             *             "CAP_NET_RAW"
             *           ],
             *           "SupplementalGroupIDs": [
             *             1001,
             *             999
             *           ]
             *         },
             *         "backupConfiguration": {
             *           "backupPeriodInHours": 24,
             *           "backupRetentionInDays": 7
             *         },
             *         "blobStorageConfiguration": {
             *           "GCSConfiguration": {},
             *           "S3Configuration": {}
             *         },
             *         "capabilities": [
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           },
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           },
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           }
             *         ],
             *         "customLabels": {
             *           "key": "value"
             *         },
             *         "customSysCTLs": {
             *           "net.ipv4.tcp_syncookies": "1"
             *         },
             *         "customULimits": [
             *           {
             *             "ULimitsName": "NoProc",
             *             "ULimitsType": "Soft",
             *             "ULimitsValue": 1000
             *           },
             *           {
             *             "ULimitsName": "NoFile",
             *             "ULimitsType": "Hard",
             *             "ULimitsValue": 2048
             *           }
             *         ],
             *         "dependencies": [
             *           {
             *             "parameterMap": {
             *               "clusterId": "writerId",
             *               "clusterOrg": "userDatabase"
             *             },
             *             "resourceId": "r-12345678"
             *           },
             *           {
             *             "parameterMap": {
             *               "clusterId": "readerId",
             *               "clusterOrg": "userDatabase"
             *             },
             *             "resourceId": "r-abcdef12"
             *           }
             *         ],
             *         "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
             *         "environmentVariables": [
             *           {
             *             "name": "MYSQL_ROOT_PASSWORD",
             *             "value": "password"
             *           }
             *         ],
             *         "fileSystemConfiguration": {
             *           "EFSFileSystemConfiguration": {
             *             "PerformanceMode": "generalPurpose|maxIO",
             *             "ProvisionedThroughputInMibps": 125,
             *             "ThroughputMode": "provisioned|bursting|elastic"
             *           }
             *         },
             *         "helmChartConfiguration": {
             *           "chartName": "my-chart",
             *           "chartRepoName": "my-repo",
             *           "chartRepoUrl": "https://my-repo.com",
             *           "chartValues": {
             *             "key1": "value1",
             *             "key2": 3,
             *             "key3": {
             *               "key4": "value4"
             *             }
             *           },
             *           "chartVersion": "1.0.0",
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "password": "my-password",
             *           "runtimeConfiguration": {
             *             "disableHooks": true,
             *             "recreate": true,
             *             "resetThenReuseValues": true,
             *             "resetValues": true,
             *             "reuseValues": true,
             *             "skipCRDs": true,
             *             "timeoutNanos": 1000000000,
             *             "upgradeCRDs": true,
             *             "wait": true,
             *             "waitForJobs": true
             *           },
             *           "username": "my-user"
             *         },
             *         "id": "r-12345678",
             *         "imageConfigId": "imgc-12345678",
             *         "infraConfigId": "ic-12345678",
             *         "internal": false,
             *         "isDeprecated": false,
             *         "key": "galera",
             *         "kustomizeConfiguration": {
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "gitConfiguration": {
             *             "accessToken": "my-token",
             *             "referenceName": "tags/v1.0.0",
             *             "repositoryUrl": "https://github.com/username/myrepo",
             *             "userName": "my-user"
             *           },
             *           "helmChartDependencies": [
             *             {
             *               "chartName": "cert-manager",
             *               "chartVersion": "v1.5.3"
             *             },
             *             {
             *               "chartName": "nginx-ingress",
             *               "chartVersion": "v0.48.1"
             *             },
             *             {
             *               "chartName": "external-dns",
             *               "chartVersion": "v0.7.0"
             *             },
             *             {
             *               "chartName": "cnpg-operator",
             *               "chartVersion": "v0.23.1"
             *             }
             *           ],
             *           "kustomizePath": "/kustomize"
             *         },
             *         "l4LoadBalancerConfiguration": {
             *           "ingressPortConfiguration": [
             *             {
             *               "associatedResourceIDs": [
             *                 "r-12345678",
             *                 "r-abcdef12"
             *               ],
             *               "backendPort": 8080,
             *               "ingressPort": 1234
             *             },
             *             {
             *               "associatedResourceIDs": [
             *                 "r-12345678",
             *                 "r-abcdef12"
             *               ],
             *               "backendPort": 8081,
             *               "ingressPort": 5678
             *             },
             *             {
             *               "associatedResourceIDs": [
             *                 "r-vwxybz12",
             *                 "r-poij122v"
             *               ],
             *               "backendPort": 8082,
             *               "ingressPort": 9012
             *             }
             *           ]
             *         },
             *         "l7LoadBalancerConfiguration": {
             *           "paths": [
             *             {
             *               "associatedResourceID": "r-12345678",
             *               "path": "/path",
             *               "port": 8080
             *             }
             *           ]
             *         },
             *         "name": "Galera",
             *         "operatorCRDConfiguration": {
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "helmChartDependencies": [
             *             {
             *               "chartName": "cert-manager",
             *               "chartVersion": "v1.5.3"
             *             },
             *             {
             *               "chartName": "nginx-ingress",
             *               "chartVersion": "v0.48.1"
             *             },
             *             {
             *               "chartName": "external-dns",
             *               "chartVersion": "v0.7.0"
             *             },
             *             {
             *               "chartName": "cnpg-operator",
             *               "chartVersion": "v0.23.1"
             *             }
             *           ],
             *           "outputParameters": {
             *             "expiresAt": "$out.status.notAfter",
             *             "issuerName": "letsencrypt-prod"
             *           },
             *           "readinessConditions": {
             *             "$out.status.conditions[?(@.type=='Ready')].status": true
             *           },
             *           "supplementalFiles": [
             *             "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
             *             "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
             *           ],
             *           "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
             *         },
             *         "productTierId": "pt-12345678",
             *         "proxyType": "PortsBasedProxy",
             *         "resourceType": "Generic",
             *         "serviceId": "s-12345678",
             *         "terraformConfigurations": {
             *           "Accusamus sed facere consectetur et qui.": {
             *             "gitConfiguration": {
             *               "accessToken": "my-token",
             *               "referenceName": "tags/v1.0.0",
             *               "repositoryUrl": "https://github.com/username/myrepo",
             *               "userName": "my-user"
             *             },
             *             "privateModuleGitAccessTokens": {
             *               "tokenName": "accessToken"
             *             },
             *             "requiredOutputKeys": [
             *               "output1"
             *             ],
             *             "requiredOutputs": [
             *               {
             *                 "exported": true,
             *                 "key": "output1"
             *               }
             *             ],
             *             "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *             "terraformPath": "/project1/tf"
             *           },
             *           "Sequi asperiores.": {
             *             "gitConfiguration": {
             *               "accessToken": "my-token",
             *               "referenceName": "tags/v1.0.0",
             *               "repositoryUrl": "https://github.com/username/myrepo",
             *               "userName": "my-user"
             *             },
             *             "privateModuleGitAccessTokens": {
             *               "tokenName": "accessToken"
             *             },
             *             "requiredOutputKeys": [
             *               "output1"
             *             ],
             *             "requiredOutputs": [
             *               {
             *                 "exported": true,
             *                 "key": "output1"
             *               }
             *             ],
             *             "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *             "terraformPath": "/project1/tf"
             *           }
             *         }
             *       },
             *       {
             *         "actionHooks": [
             *           {
             *             "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
             *             "scope": "CLUSTER",
             *             "type": "INIT"
             *           }
             *         ],
             *         "additionalSecurityContext": {
             *           "AddCapabilities": [
             *             "CAP_NET_ADMIN",
             *             "CAP_NET_RAW"
             *           ],
             *           "DropCapabilities": [
             *             "CAP_NET_ADMIN",
             *             "CAP_NET_RAW"
             *           ],
             *           "SupplementalGroupIDs": [
             *             1001,
             *             999
             *           ]
             *         },
             *         "backupConfiguration": {
             *           "backupPeriodInHours": 24,
             *           "backupRetentionInDays": 7
             *         },
             *         "blobStorageConfiguration": {
             *           "GCSConfiguration": {},
             *           "S3Configuration": {}
             *         },
             *         "capabilities": [
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           },
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           },
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           }
             *         ],
             *         "customLabels": {
             *           "key": "value"
             *         },
             *         "customSysCTLs": {
             *           "net.ipv4.tcp_syncookies": "1"
             *         },
             *         "customULimits": [
             *           {
             *             "ULimitsName": "NoProc",
             *             "ULimitsType": "Soft",
             *             "ULimitsValue": 1000
             *           },
             *           {
             *             "ULimitsName": "NoFile",
             *             "ULimitsType": "Hard",
             *             "ULimitsValue": 2048
             *           }
             *         ],
             *         "dependencies": [
             *           {
             *             "parameterMap": {
             *               "clusterId": "writerId",
             *               "clusterOrg": "userDatabase"
             *             },
             *             "resourceId": "r-12345678"
             *           },
             *           {
             *             "parameterMap": {
             *               "clusterId": "readerId",
             *               "clusterOrg": "userDatabase"
             *             },
             *             "resourceId": "r-abcdef12"
             *           }
             *         ],
             *         "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
             *         "environmentVariables": [
             *           {
             *             "name": "MYSQL_ROOT_PASSWORD",
             *             "value": "password"
             *           }
             *         ],
             *         "fileSystemConfiguration": {
             *           "EFSFileSystemConfiguration": {
             *             "PerformanceMode": "generalPurpose|maxIO",
             *             "ProvisionedThroughputInMibps": 125,
             *             "ThroughputMode": "provisioned|bursting|elastic"
             *           }
             *         },
             *         "helmChartConfiguration": {
             *           "chartName": "my-chart",
             *           "chartRepoName": "my-repo",
             *           "chartRepoUrl": "https://my-repo.com",
             *           "chartValues": {
             *             "key1": "value1",
             *             "key2": 3,
             *             "key3": {
             *               "key4": "value4"
             *             }
             *           },
             *           "chartVersion": "1.0.0",
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "password": "my-password",
             *           "runtimeConfiguration": {
             *             "disableHooks": true,
             *             "recreate": true,
             *             "resetThenReuseValues": true,
             *             "resetValues": true,
             *             "reuseValues": true,
             *             "skipCRDs": true,
             *             "timeoutNanos": 1000000000,
             *             "upgradeCRDs": true,
             *             "wait": true,
             *             "waitForJobs": true
             *           },
             *           "username": "my-user"
             *         },
             *         "id": "r-12345678",
             *         "imageConfigId": "imgc-12345678",
             *         "infraConfigId": "ic-12345678",
             *         "internal": false,
             *         "isDeprecated": false,
             *         "key": "galera",
             *         "kustomizeConfiguration": {
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "gitConfiguration": {
             *             "accessToken": "my-token",
             *             "referenceName": "tags/v1.0.0",
             *             "repositoryUrl": "https://github.com/username/myrepo",
             *             "userName": "my-user"
             *           },
             *           "helmChartDependencies": [
             *             {
             *               "chartName": "cert-manager",
             *               "chartVersion": "v1.5.3"
             *             },
             *             {
             *               "chartName": "nginx-ingress",
             *               "chartVersion": "v0.48.1"
             *             },
             *             {
             *               "chartName": "external-dns",
             *               "chartVersion": "v0.7.0"
             *             },
             *             {
             *               "chartName": "cnpg-operator",
             *               "chartVersion": "v0.23.1"
             *             }
             *           ],
             *           "kustomizePath": "/kustomize"
             *         },
             *         "l4LoadBalancerConfiguration": {
             *           "ingressPortConfiguration": [
             *             {
             *               "associatedResourceIDs": [
             *                 "r-12345678",
             *                 "r-abcdef12"
             *               ],
             *               "backendPort": 8080,
             *               "ingressPort": 1234
             *             },
             *             {
             *               "associatedResourceIDs": [
             *                 "r-12345678",
             *                 "r-abcdef12"
             *               ],
             *               "backendPort": 8081,
             *               "ingressPort": 5678
             *             },
             *             {
             *               "associatedResourceIDs": [
             *                 "r-vwxybz12",
             *                 "r-poij122v"
             *               ],
             *               "backendPort": 8082,
             *               "ingressPort": 9012
             *             }
             *           ]
             *         },
             *         "l7LoadBalancerConfiguration": {
             *           "paths": [
             *             {
             *               "associatedResourceID": "r-12345678",
             *               "path": "/path",
             *               "port": 8080
             *             }
             *           ]
             *         },
             *         "name": "Galera",
             *         "operatorCRDConfiguration": {
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "helmChartDependencies": [
             *             {
             *               "chartName": "cert-manager",
             *               "chartVersion": "v1.5.3"
             *             },
             *             {
             *               "chartName": "nginx-ingress",
             *               "chartVersion": "v0.48.1"
             *             },
             *             {
             *               "chartName": "external-dns",
             *               "chartVersion": "v0.7.0"
             *             },
             *             {
             *               "chartName": "cnpg-operator",
             *               "chartVersion": "v0.23.1"
             *             }
             *           ],
             *           "outputParameters": {
             *             "expiresAt": "$out.status.notAfter",
             *             "issuerName": "letsencrypt-prod"
             *           },
             *           "readinessConditions": {
             *             "$out.status.conditions[?(@.type=='Ready')].status": true
             *           },
             *           "supplementalFiles": [
             *             "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
             *             "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
             *           ],
             *           "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
             *         },
             *         "productTierId": "pt-12345678",
             *         "proxyType": "PortsBasedProxy",
             *         "resourceType": "Generic",
             *         "serviceId": "s-12345678",
             *         "terraformConfigurations": {
             *           "Accusamus sed facere consectetur et qui.": {
             *             "gitConfiguration": {
             *               "accessToken": "my-token",
             *               "referenceName": "tags/v1.0.0",
             *               "repositoryUrl": "https://github.com/username/myrepo",
             *               "userName": "my-user"
             *             },
             *             "privateModuleGitAccessTokens": {
             *               "tokenName": "accessToken"
             *             },
             *             "requiredOutputKeys": [
             *               "output1"
             *             ],
             *             "requiredOutputs": [
             *               {
             *                 "exported": true,
             *                 "key": "output1"
             *               }
             *             ],
             *             "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *             "terraformPath": "/project1/tf"
             *           },
             *           "Sequi asperiores.": {
             *             "gitConfiguration": {
             *               "accessToken": "my-token",
             *               "referenceName": "tags/v1.0.0",
             *               "repositoryUrl": "https://github.com/username/myrepo",
             *               "userName": "my-user"
             *             },
             *             "privateModuleGitAccessTokens": {
             *               "tokenName": "accessToken"
             *             },
             *             "requiredOutputKeys": [
             *               "output1"
             *             ],
             *             "requiredOutputs": [
             *               {
             *                 "exported": true,
             *                 "key": "output1"
             *               }
             *             ],
             *             "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *             "terraformPath": "/project1/tf"
             *           }
             *         }
             *       },
             *       {
             *         "actionHooks": [
             *           {
             *             "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
             *             "scope": "CLUSTER",
             *             "type": "INIT"
             *           }
             *         ],
             *         "additionalSecurityContext": {
             *           "AddCapabilities": [
             *             "CAP_NET_ADMIN",
             *             "CAP_NET_RAW"
             *           ],
             *           "DropCapabilities": [
             *             "CAP_NET_ADMIN",
             *             "CAP_NET_RAW"
             *           ],
             *           "SupplementalGroupIDs": [
             *             1001,
             *             999
             *           ]
             *         },
             *         "backupConfiguration": {
             *           "backupPeriodInHours": 24,
             *           "backupRetentionInDays": 7
             *         },
             *         "blobStorageConfiguration": {
             *           "GCSConfiguration": {},
             *           "S3Configuration": {}
             *         },
             *         "capabilities": [
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           },
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           },
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           }
             *         ],
             *         "customLabels": {
             *           "key": "value"
             *         },
             *         "customSysCTLs": {
             *           "net.ipv4.tcp_syncookies": "1"
             *         },
             *         "customULimits": [
             *           {
             *             "ULimitsName": "NoProc",
             *             "ULimitsType": "Soft",
             *             "ULimitsValue": 1000
             *           },
             *           {
             *             "ULimitsName": "NoFile",
             *             "ULimitsType": "Hard",
             *             "ULimitsValue": 2048
             *           }
             *         ],
             *         "dependencies": [
             *           {
             *             "parameterMap": {
             *               "clusterId": "writerId",
             *               "clusterOrg": "userDatabase"
             *             },
             *             "resourceId": "r-12345678"
             *           },
             *           {
             *             "parameterMap": {
             *               "clusterId": "readerId",
             *               "clusterOrg": "userDatabase"
             *             },
             *             "resourceId": "r-abcdef12"
             *           }
             *         ],
             *         "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
             *         "environmentVariables": [
             *           {
             *             "name": "MYSQL_ROOT_PASSWORD",
             *             "value": "password"
             *           }
             *         ],
             *         "fileSystemConfiguration": {
             *           "EFSFileSystemConfiguration": {
             *             "PerformanceMode": "generalPurpose|maxIO",
             *             "ProvisionedThroughputInMibps": 125,
             *             "ThroughputMode": "provisioned|bursting|elastic"
             *           }
             *         },
             *         "helmChartConfiguration": {
             *           "chartName": "my-chart",
             *           "chartRepoName": "my-repo",
             *           "chartRepoUrl": "https://my-repo.com",
             *           "chartValues": {
             *             "key1": "value1",
             *             "key2": 3,
             *             "key3": {
             *               "key4": "value4"
             *             }
             *           },
             *           "chartVersion": "1.0.0",
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "password": "my-password",
             *           "runtimeConfiguration": {
             *             "disableHooks": true,
             *             "recreate": true,
             *             "resetThenReuseValues": true,
             *             "resetValues": true,
             *             "reuseValues": true,
             *             "skipCRDs": true,
             *             "timeoutNanos": 1000000000,
             *             "upgradeCRDs": true,
             *             "wait": true,
             *             "waitForJobs": true
             *           },
             *           "username": "my-user"
             *         },
             *         "id": "r-12345678",
             *         "imageConfigId": "imgc-12345678",
             *         "infraConfigId": "ic-12345678",
             *         "internal": false,
             *         "isDeprecated": false,
             *         "key": "galera",
             *         "kustomizeConfiguration": {
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "gitConfiguration": {
             *             "accessToken": "my-token",
             *             "referenceName": "tags/v1.0.0",
             *             "repositoryUrl": "https://github.com/username/myrepo",
             *             "userName": "my-user"
             *           },
             *           "helmChartDependencies": [
             *             {
             *               "chartName": "cert-manager",
             *               "chartVersion": "v1.5.3"
             *             },
             *             {
             *               "chartName": "nginx-ingress",
             *               "chartVersion": "v0.48.1"
             *             },
             *             {
             *               "chartName": "external-dns",
             *               "chartVersion": "v0.7.0"
             *             },
             *             {
             *               "chartName": "cnpg-operator",
             *               "chartVersion": "v0.23.1"
             *             }
             *           ],
             *           "kustomizePath": "/kustomize"
             *         },
             *         "l4LoadBalancerConfiguration": {
             *           "ingressPortConfiguration": [
             *             {
             *               "associatedResourceIDs": [
             *                 "r-12345678",
             *                 "r-abcdef12"
             *               ],
             *               "backendPort": 8080,
             *               "ingressPort": 1234
             *             },
             *             {
             *               "associatedResourceIDs": [
             *                 "r-12345678",
             *                 "r-abcdef12"
             *               ],
             *               "backendPort": 8081,
             *               "ingressPort": 5678
             *             },
             *             {
             *               "associatedResourceIDs": [
             *                 "r-vwxybz12",
             *                 "r-poij122v"
             *               ],
             *               "backendPort": 8082,
             *               "ingressPort": 9012
             *             }
             *           ]
             *         },
             *         "l7LoadBalancerConfiguration": {
             *           "paths": [
             *             {
             *               "associatedResourceID": "r-12345678",
             *               "path": "/path",
             *               "port": 8080
             *             }
             *           ]
             *         },
             *         "name": "Galera",
             *         "operatorCRDConfiguration": {
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "helmChartDependencies": [
             *             {
             *               "chartName": "cert-manager",
             *               "chartVersion": "v1.5.3"
             *             },
             *             {
             *               "chartName": "nginx-ingress",
             *               "chartVersion": "v0.48.1"
             *             },
             *             {
             *               "chartName": "external-dns",
             *               "chartVersion": "v0.7.0"
             *             },
             *             {
             *               "chartName": "cnpg-operator",
             *               "chartVersion": "v0.23.1"
             *             }
             *           ],
             *           "outputParameters": {
             *             "expiresAt": "$out.status.notAfter",
             *             "issuerName": "letsencrypt-prod"
             *           },
             *           "readinessConditions": {
             *             "$out.status.conditions[?(@.type=='Ready')].status": true
             *           },
             *           "supplementalFiles": [
             *             "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
             *             "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
             *           ],
             *           "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
             *         },
             *         "productTierId": "pt-12345678",
             *         "proxyType": "PortsBasedProxy",
             *         "resourceType": "Generic",
             *         "serviceId": "s-12345678",
             *         "terraformConfigurations": {
             *           "Accusamus sed facere consectetur et qui.": {
             *             "gitConfiguration": {
             *               "accessToken": "my-token",
             *               "referenceName": "tags/v1.0.0",
             *               "repositoryUrl": "https://github.com/username/myrepo",
             *               "userName": "my-user"
             *             },
             *             "privateModuleGitAccessTokens": {
             *               "tokenName": "accessToken"
             *             },
             *             "requiredOutputKeys": [
             *               "output1"
             *             ],
             *             "requiredOutputs": [
             *               {
             *                 "exported": true,
             *                 "key": "output1"
             *               }
             *             ],
             *             "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *             "terraformPath": "/project1/tf"
             *           },
             *           "Sequi asperiores.": {
             *             "gitConfiguration": {
             *               "accessToken": "my-token",
             *               "referenceName": "tags/v1.0.0",
             *               "repositoryUrl": "https://github.com/username/myrepo",
             *               "userName": "my-user"
             *             },
             *             "privateModuleGitAccessTokens": {
             *               "tokenName": "accessToken"
             *             },
             *             "requiredOutputKeys": [
             *               "output1"
             *             ],
             *             "requiredOutputs": [
             *               {
             *                 "exported": true,
             *                 "key": "output1"
             *               }
             *             ],
             *             "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *             "terraformPath": "/project1/tf"
             *           }
             *         }
             *       },
             *       {
             *         "actionHooks": [
             *           {
             *             "command": "curl -v -X POST https://$HOSTNAME:8080/cluster/init",
             *             "scope": "CLUSTER",
             *             "type": "INIT"
             *           }
             *         ],
             *         "additionalSecurityContext": {
             *           "AddCapabilities": [
             *             "CAP_NET_ADMIN",
             *             "CAP_NET_RAW"
             *           ],
             *           "DropCapabilities": [
             *             "CAP_NET_ADMIN",
             *             "CAP_NET_RAW"
             *           ],
             *           "SupplementalGroupIDs": [
             *             1001,
             *             999
             *           ]
             *         },
             *         "backupConfiguration": {
             *           "backupPeriodInHours": 24,
             *           "backupRetentionInDays": 7
             *         },
             *         "blobStorageConfiguration": {
             *           "GCSConfiguration": {},
             *           "S3Configuration": {}
             *         },
             *         "capabilities": [
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           },
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           },
             *           {
             *             "capability": "SERVERLESS",
             *             "configuration": {
             *               "EnableAutoStop": true,
             *               "MinimumNodesInPool": 5,
             *               "PortsMappingProxyConfig": {
             *                 "MaxNumberOfClustersPerProxyInstance": 50,
             *                 "NumberOfPortsPerCluster": 4
             *               },
             *               "ProxyId": "r-123456",
             *               "ReferenceProxyKey": "resource-proxy",
             *               "TargetPort": 5432
             *             }
             *           }
             *         ],
             *         "customLabels": {
             *           "key": "value"
             *         },
             *         "customSysCTLs": {
             *           "net.ipv4.tcp_syncookies": "1"
             *         },
             *         "customULimits": [
             *           {
             *             "ULimitsName": "NoProc",
             *             "ULimitsType": "Soft",
             *             "ULimitsValue": 1000
             *           },
             *           {
             *             "ULimitsName": "NoFile",
             *             "ULimitsType": "Hard",
             *             "ULimitsValue": 2048
             *           }
             *         ],
             *         "dependencies": [
             *           {
             *             "parameterMap": {
             *               "clusterId": "writerId",
             *               "clusterOrg": "userDatabase"
             *             },
             *             "resourceId": "r-12345678"
             *           },
             *           {
             *             "parameterMap": {
             *               "clusterId": "readerId",
             *               "clusterOrg": "userDatabase"
             *             },
             *             "resourceId": "r-abcdef12"
             *           }
             *         ],
             *         "description": "An resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
             *         "environmentVariables": [
             *           {
             *             "name": "MYSQL_ROOT_PASSWORD",
             *             "value": "password"
             *           }
             *         ],
             *         "fileSystemConfiguration": {
             *           "EFSFileSystemConfiguration": {
             *             "PerformanceMode": "generalPurpose|maxIO",
             *             "ProvisionedThroughputInMibps": 125,
             *             "ThroughputMode": "provisioned|bursting|elastic"
             *           }
             *         },
             *         "helmChartConfiguration": {
             *           "chartName": "my-chart",
             *           "chartRepoName": "my-repo",
             *           "chartRepoUrl": "https://my-repo.com",
             *           "chartValues": {
             *             "key1": "value1",
             *             "key2": 3,
             *             "key3": {
             *               "key4": "value4"
             *             }
             *           },
             *           "chartVersion": "1.0.0",
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "password": "my-password",
             *           "runtimeConfiguration": {
             *             "disableHooks": true,
             *             "recreate": true,
             *             "resetThenReuseValues": true,
             *             "resetValues": true,
             *             "reuseValues": true,
             *             "skipCRDs": true,
             *             "timeoutNanos": 1000000000,
             *             "upgradeCRDs": true,
             *             "wait": true,
             *             "waitForJobs": true
             *           },
             *           "username": "my-user"
             *         },
             *         "id": "r-12345678",
             *         "imageConfigId": "imgc-12345678",
             *         "infraConfigId": "ic-12345678",
             *         "internal": false,
             *         "isDeprecated": false,
             *         "key": "galera",
             *         "kustomizeConfiguration": {
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "gitConfiguration": {
             *             "accessToken": "my-token",
             *             "referenceName": "tags/v1.0.0",
             *             "repositoryUrl": "https://github.com/username/myrepo",
             *             "userName": "my-user"
             *           },
             *           "helmChartDependencies": [
             *             {
             *               "chartName": "cert-manager",
             *               "chartVersion": "v1.5.3"
             *             },
             *             {
             *               "chartName": "nginx-ingress",
             *               "chartVersion": "v0.48.1"
             *             },
             *             {
             *               "chartName": "external-dns",
             *               "chartVersion": "v0.7.0"
             *             },
             *             {
             *               "chartName": "cnpg-operator",
             *               "chartVersion": "v0.23.1"
             *             }
             *           ],
             *           "kustomizePath": "/kustomize"
             *         },
             *         "l4LoadBalancerConfiguration": {
             *           "ingressPortConfiguration": [
             *             {
             *               "associatedResourceIDs": [
             *                 "r-12345678",
             *                 "r-abcdef12"
             *               ],
             *               "backendPort": 8080,
             *               "ingressPort": 1234
             *             },
             *             {
             *               "associatedResourceIDs": [
             *                 "r-12345678",
             *                 "r-abcdef12"
             *               ],
             *               "backendPort": 8081,
             *               "ingressPort": 5678
             *             },
             *             {
             *               "associatedResourceIDs": [
             *                 "r-vwxybz12",
             *                 "r-poij122v"
             *               ],
             *               "backendPort": 8082,
             *               "ingressPort": 9012
             *             }
             *           ]
             *         },
             *         "l7LoadBalancerConfiguration": {
             *           "paths": [
             *             {
             *               "associatedResourceID": "r-12345678",
             *               "path": "/path",
             *               "port": 8080
             *             }
             *           ]
             *         },
             *         "name": "Galera",
             *         "operatorCRDConfiguration": {
             *           "endpointConfiguration": {
             *             "admin": {
             *               "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *               "networkingType": "PRIVATE",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": false
             *             },
             *             "cluster": {
             *               "host": "https://my-endpoint.com",
             *               "networkingType": "PUBLIC",
             *               "ports": [
             *                 8080,
             *                 8081
             *               ],
             *               "primary": true
             *             }
             *           },
             *           "helmChartDependencies": [
             *             {
             *               "chartName": "cert-manager",
             *               "chartVersion": "v1.5.3"
             *             },
             *             {
             *               "chartName": "nginx-ingress",
             *               "chartVersion": "v0.48.1"
             *             },
             *             {
             *               "chartName": "external-dns",
             *               "chartVersion": "v0.7.0"
             *             },
             *             {
             *               "chartName": "cnpg-operator",
             *               "chartVersion": "v0.23.1"
             *             }
             *           ],
             *           "outputParameters": {
             *             "expiresAt": "$out.status.notAfter",
             *             "issuerName": "letsencrypt-prod"
             *           },
             *           "readinessConditions": {
             *             "$out.status.conditions[?(@.type=='Ready')].status": true
             *           },
             *           "supplementalFiles": [
             *             "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
             *             "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
             *           ],
             *           "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
             *         },
             *         "productTierId": "pt-12345678",
             *         "proxyType": "PortsBasedProxy",
             *         "resourceType": "Generic",
             *         "serviceId": "s-12345678",
             *         "terraformConfigurations": {
             *           "Accusamus sed facere consectetur et qui.": {
             *             "gitConfiguration": {
             *               "accessToken": "my-token",
             *               "referenceName": "tags/v1.0.0",
             *               "repositoryUrl": "https://github.com/username/myrepo",
             *               "userName": "my-user"
             *             },
             *             "privateModuleGitAccessTokens": {
             *               "tokenName": "accessToken"
             *             },
             *             "requiredOutputKeys": [
             *               "output1"
             *             ],
             *             "requiredOutputs": [
             *               {
             *                 "exported": true,
             *                 "key": "output1"
             *               }
             *             ],
             *             "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *             "terraformPath": "/project1/tf"
             *           },
             *           "Sequi asperiores.": {
             *             "gitConfiguration": {
             *               "accessToken": "my-token",
             *               "referenceName": "tags/v1.0.0",
             *               "repositoryUrl": "https://github.com/username/myrepo",
             *               "userName": "my-user"
             *             },
             *             "privateModuleGitAccessTokens": {
             *               "tokenName": "accessToken"
             *             },
             *             "requiredOutputKeys": [
             *               "output1"
             *             ],
             *             "requiredOutputs": [
             *               {
             *                 "exported": true,
             *                 "key": "output1"
             *               }
             *             ],
             *             "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *             "terraformPath": "/project1/tf"
             *           }
             *         }
             *       }
             *     ]
             */
            resources?: components["schemas"]["DescribeResourceResult"][];
        };
        /** @example {
         *       "customDomains": [
         *         {
         *           "clusterEndpoint": "example.com",
         *           "customDomain": "mycustomdomain.com",
         *           "description": "My custom domain description",
         *           "environmentType": "DEV",
         *           "name": "MyCustomDomain",
         *           "status": "READY"
         *         },
         *         {
         *           "clusterEndpoint": "example.com",
         *           "customDomain": "mycustomdomain.com",
         *           "description": "My custom domain description",
         *           "environmentType": "DEV",
         *           "name": "MyCustomDomain",
         *           "status": "READY"
         *         },
         *         {
         *           "clusterEndpoint": "example.com",
         *           "customDomain": "mycustomdomain.com",
         *           "description": "My custom domain description",
         *           "environmentType": "DEV",
         *           "name": "MyCustomDomain",
         *           "status": "READY"
         *         },
         *         {
         *           "clusterEndpoint": "example.com",
         *           "customDomain": "mycustomdomain.com",
         *           "description": "My custom domain description",
         *           "environmentType": "DEV",
         *           "name": "MyCustomDomain",
         *           "status": "READY"
         *         }
         *       ]
         *     } */
        ListSaaSPortalCustomDomainsResult: {
            /**
             * @description The list of custom domains
             * @example [
             *       {
             *         "clusterEndpoint": "example.com",
             *         "customDomain": "mycustomdomain.com",
             *         "description": "My custom domain description",
             *         "environmentType": "DEV",
             *         "name": "MyCustomDomain",
             *         "status": "READY"
             *       },
             *       {
             *         "clusterEndpoint": "example.com",
             *         "customDomain": "mycustomdomain.com",
             *         "description": "My custom domain description",
             *         "environmentType": "DEV",
             *         "name": "MyCustomDomain",
             *         "status": "READY"
             *       },
             *       {
             *         "clusterEndpoint": "example.com",
             *         "customDomain": "mycustomdomain.com",
             *         "description": "My custom domain description",
             *         "environmentType": "DEV",
             *         "name": "MyCustomDomain",
             *         "status": "READY"
             *       },
             *       {
             *         "clusterEndpoint": "example.com",
             *         "customDomain": "mycustomdomain.com",
             *         "description": "My custom domain description",
             *         "environmentType": "DEV",
             *         "name": "MyCustomDomain",
             *         "status": "READY"
             *       }
             *     ]
             */
            customDomains: components["schemas"]["CustomDomain"][];
        };
        /** @example {
         *       "saasPortals": [
         *         {
         *           "customDomain": "mycustomdomain.com",
         *           "customDomainStatus": "READY",
         *           "detailedNetworkTopology": {
         *             "r-abcd1234": {
         *               "allowedIPRanges": [
         *                 "0.0.0.0/0"
         *               ],
         *               "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *               "clusterPorts": [
         *                 3306
         *               ],
         *               "main": true,
         *               "networkingType": "PUBLIC",
         *               "nodes": [
         *                 {
         *                   "availabilityZone": "us-east-2a",
         *                   "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *                   "healthStatus": "healthy",
         *                   "id": "primary-0",
         *                   "ports": [
         *                     3306
         *                   ],
         *                   "status": "RUNNING"
         *                 }
         *               ],
         *               "privateNetworkCIDR": "10.0.0.2/24",
         *               "privateNetworkID": "n-1234abcd",
         *               "publiclyAccessible": true,
         *               "resourceKey": "saasportal",
         *               "resourceName": "SaaS Portal"
         *             }
         *           },
         *           "emailConfig": {
         *             "smtpFromEmail": "example@gmail.com",
         *             "smtpHost": "smtp.gmail.com",
         *             "smtpPassword": "password",
         *             "smtpPort": 587,
         *             "smtpUsername": "username"
         *           },
         *           "endpoint": "https://saas-portal.example.com",
         *           "environmentType": "DEV",
         *           "googleAnalyticsTagID": "G-123456789",
         *           "imageConfig": {
         *             "imageName": "myimage",
         *             "imageRegistry": "ghcr.io",
         *             "imageTag": "latest"
         *           },
         *           "status": "READY"
         *         },
         *         {
         *           "customDomain": "mycustomdomain.com",
         *           "customDomainStatus": "READY",
         *           "detailedNetworkTopology": {
         *             "r-abcd1234": {
         *               "allowedIPRanges": [
         *                 "0.0.0.0/0"
         *               ],
         *               "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *               "clusterPorts": [
         *                 3306
         *               ],
         *               "main": true,
         *               "networkingType": "PUBLIC",
         *               "nodes": [
         *                 {
         *                   "availabilityZone": "us-east-2a",
         *                   "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *                   "healthStatus": "healthy",
         *                   "id": "primary-0",
         *                   "ports": [
         *                     3306
         *                   ],
         *                   "status": "RUNNING"
         *                 }
         *               ],
         *               "privateNetworkCIDR": "10.0.0.2/24",
         *               "privateNetworkID": "n-1234abcd",
         *               "publiclyAccessible": true,
         *               "resourceKey": "saasportal",
         *               "resourceName": "SaaS Portal"
         *             }
         *           },
         *           "emailConfig": {
         *             "smtpFromEmail": "example@gmail.com",
         *             "smtpHost": "smtp.gmail.com",
         *             "smtpPassword": "password",
         *             "smtpPort": 587,
         *             "smtpUsername": "username"
         *           },
         *           "endpoint": "https://saas-portal.example.com",
         *           "environmentType": "DEV",
         *           "googleAnalyticsTagID": "G-123456789",
         *           "imageConfig": {
         *             "imageName": "myimage",
         *             "imageRegistry": "ghcr.io",
         *             "imageTag": "latest"
         *           },
         *           "status": "READY"
         *         },
         *         {
         *           "customDomain": "mycustomdomain.com",
         *           "customDomainStatus": "READY",
         *           "detailedNetworkTopology": {
         *             "r-abcd1234": {
         *               "allowedIPRanges": [
         *                 "0.0.0.0/0"
         *               ],
         *               "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *               "clusterPorts": [
         *                 3306
         *               ],
         *               "main": true,
         *               "networkingType": "PUBLIC",
         *               "nodes": [
         *                 {
         *                   "availabilityZone": "us-east-2a",
         *                   "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *                   "healthStatus": "healthy",
         *                   "id": "primary-0",
         *                   "ports": [
         *                     3306
         *                   ],
         *                   "status": "RUNNING"
         *                 }
         *               ],
         *               "privateNetworkCIDR": "10.0.0.2/24",
         *               "privateNetworkID": "n-1234abcd",
         *               "publiclyAccessible": true,
         *               "resourceKey": "saasportal",
         *               "resourceName": "SaaS Portal"
         *             }
         *           },
         *           "emailConfig": {
         *             "smtpFromEmail": "example@gmail.com",
         *             "smtpHost": "smtp.gmail.com",
         *             "smtpPassword": "password",
         *             "smtpPort": 587,
         *             "smtpUsername": "username"
         *           },
         *           "endpoint": "https://saas-portal.example.com",
         *           "environmentType": "DEV",
         *           "googleAnalyticsTagID": "G-123456789",
         *           "imageConfig": {
         *             "imageName": "myimage",
         *             "imageRegistry": "ghcr.io",
         *             "imageTag": "latest"
         *           },
         *           "status": "READY"
         *         }
         *       ]
         *     } */
        ListSaaSPortalsResult: {
            /**
             * @description The list of saas portals
             * @example [
             *       {
             *         "customDomain": "mycustomdomain.com",
             *         "customDomainStatus": "READY",
             *         "detailedNetworkTopology": {
             *           "r-abcd1234": {
             *             "allowedIPRanges": [
             *               "0.0.0.0/0"
             *             ],
             *             "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *             "clusterPorts": [
             *               3306
             *             ],
             *             "main": true,
             *             "networkingType": "PUBLIC",
             *             "nodes": [
             *               {
             *                 "availabilityZone": "us-east-2a",
             *                 "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *                 "healthStatus": "healthy",
             *                 "id": "primary-0",
             *                 "ports": [
             *                   3306
             *                 ],
             *                 "status": "RUNNING"
             *               }
             *             ],
             *             "privateNetworkCIDR": "10.0.0.2/24",
             *             "privateNetworkID": "n-1234abcd",
             *             "publiclyAccessible": true,
             *             "resourceKey": "saasportal",
             *             "resourceName": "SaaS Portal"
             *           }
             *         },
             *         "emailConfig": {
             *           "smtpFromEmail": "example@gmail.com",
             *           "smtpHost": "smtp.gmail.com",
             *           "smtpPassword": "password",
             *           "smtpPort": 587,
             *           "smtpUsername": "username"
             *         },
             *         "endpoint": "https://saas-portal.example.com",
             *         "environmentType": "DEV",
             *         "googleAnalyticsTagID": "G-123456789",
             *         "imageConfig": {
             *           "imageName": "myimage",
             *           "imageRegistry": "ghcr.io",
             *           "imageTag": "latest"
             *         },
             *         "status": "READY"
             *       },
             *       {
             *         "customDomain": "mycustomdomain.com",
             *         "customDomainStatus": "READY",
             *         "detailedNetworkTopology": {
             *           "r-abcd1234": {
             *             "allowedIPRanges": [
             *               "0.0.0.0/0"
             *             ],
             *             "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *             "clusterPorts": [
             *               3306
             *             ],
             *             "main": true,
             *             "networkingType": "PUBLIC",
             *             "nodes": [
             *               {
             *                 "availabilityZone": "us-east-2a",
             *                 "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *                 "healthStatus": "healthy",
             *                 "id": "primary-0",
             *                 "ports": [
             *                   3306
             *                 ],
             *                 "status": "RUNNING"
             *               }
             *             ],
             *             "privateNetworkCIDR": "10.0.0.2/24",
             *             "privateNetworkID": "n-1234abcd",
             *             "publiclyAccessible": true,
             *             "resourceKey": "saasportal",
             *             "resourceName": "SaaS Portal"
             *           }
             *         },
             *         "emailConfig": {
             *           "smtpFromEmail": "example@gmail.com",
             *           "smtpHost": "smtp.gmail.com",
             *           "smtpPassword": "password",
             *           "smtpPort": 587,
             *           "smtpUsername": "username"
             *         },
             *         "endpoint": "https://saas-portal.example.com",
             *         "environmentType": "DEV",
             *         "googleAnalyticsTagID": "G-123456789",
             *         "imageConfig": {
             *           "imageName": "myimage",
             *           "imageRegistry": "ghcr.io",
             *           "imageTag": "latest"
             *         },
             *         "status": "READY"
             *       },
             *       {
             *         "customDomain": "mycustomdomain.com",
             *         "customDomainStatus": "READY",
             *         "detailedNetworkTopology": {
             *           "r-abcd1234": {
             *             "allowedIPRanges": [
             *               "0.0.0.0/0"
             *             ],
             *             "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *             "clusterPorts": [
             *               3306
             *             ],
             *             "main": true,
             *             "networkingType": "PUBLIC",
             *             "nodes": [
             *               {
             *                 "availabilityZone": "us-east-2a",
             *                 "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *                 "healthStatus": "healthy",
             *                 "id": "primary-0",
             *                 "ports": [
             *                   3306
             *                 ],
             *                 "status": "RUNNING"
             *               }
             *             ],
             *             "privateNetworkCIDR": "10.0.0.2/24",
             *             "privateNetworkID": "n-1234abcd",
             *             "publiclyAccessible": true,
             *             "resourceKey": "saasportal",
             *             "resourceName": "SaaS Portal"
             *           }
             *         },
             *         "emailConfig": {
             *           "smtpFromEmail": "example@gmail.com",
             *           "smtpHost": "smtp.gmail.com",
             *           "smtpPassword": "password",
             *           "smtpPort": 587,
             *           "smtpUsername": "username"
             *         },
             *         "endpoint": "https://saas-portal.example.com",
             *         "environmentType": "DEV",
             *         "googleAnalyticsTagID": "G-123456789",
             *         "imageConfig": {
             *           "imageName": "myimage",
             *           "imageRegistry": "ghcr.io",
             *           "imageTag": "latest"
             *         },
             *         "status": "READY"
             *       }
             *     ]
             */
            saasPortals: components["schemas"]["SaaSPortal"][];
        };
        /** @example {
         *       "ids": [
         *         "se-12345678",
         *         "se-23456789"
         *       ],
         *       "nextPageToken": "next-token"
         *     } */
        ListServiceEnvironmentsResult: {
            /**
             * @description The list of service environment IDs
             * @example [
             *       "se-12345678",
             *       "se-23456789"
             *     ]
             */
            ids: string[];
            /**
             * @description The next token to use to retrieve the next page of results
             * @example next-token
             */
            nextPageToken?: string;
        };
        /** @example {
         *       "nextPageToken": "next-token",
         *       "serviceIds": [
         *         "s-12345678",
         *         "s-abcdefgh"
         *       ],
         *       "services": [
         *         {
         *           "createdAt": "2019-01-01T00:00:00Z",
         *           "isDeprecated": false,
         *           "offerings": [
         *             {
         *               "assets": {
         *                 "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
         *                 "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
         *               },
         *               "billingPlans": [
         *                 {
         *                   "maxNumberofInstances": 4
         *                 }
         *               ],
         *               "productTierName": "Premium",
         *               "productTierURLKey": "premium",
         *               "resourceParameters": [
         *                 {
         *                   "name": "MySQL",
         *                   "urlKey": "mysql"
         *                 },
         *                 {
         *                   "name": "Redis",
         *                   "urlKey": "redis"
         *                 }
         *               ],
         *               "serviceAPIID": "sa-12345678",
         *               "serviceAPIVersion": "v1",
         *               "serviceEnvironmentName": "Production",
         *               "serviceEnvironmentURLKey": "prod",
         *               "serviceEnvironmentVisibility": "PRIVATE",
         *               "serviceModelName": "Bring Your Own Account",
         *               "serviceModelURLKey": "byoa"
         *             },
         *             {
         *               "productTierName": "Basic",
         *               "productTierURLKey": "basic",
         *               "resourceParameters": [
         *                 {
         *                   "name": "MySQL",
         *                   "urlKey": "mysql"
         *                 },
         *                 {
         *                   "name": "Redis",
         *                   "urlKey": "redis"
         *                 }
         *               ],
         *               "serviceAPIID": "sa-abcdefgh",
         *               "serviceAPIVersion": "v1",
         *               "serviceEnvironmentName": "Production",
         *               "serviceEnvironmentURLKey": "prod",
         *               "serviceEnvironmentVisibility": "PUBLIC",
         *               "serviceModelName": "Hosted",
         *               "serviceModelURLKey": "hosted"
         *             }
         *           ],
         *           "serviceDescription": "MySQL is a relational database",
         *           "serviceId": "s-12345678",
         *           "serviceName": "MySQL",
         *           "serviceOrgId": "org-12345678",
         *           "serviceProviderId": "sp-9zrg9W8Are",
         *           "serviceProviderName": "Omnistrate, Inc.",
         *           "serviceURLKey": "mysql"
         *         },
         *         {
         *           "createdAt": "2019-01-01T00:00:00Z",
         *           "isDeprecated": false,
         *           "offerings": [
         *             {
         *               "assets": {
         *                 "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
         *                 "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
         *               },
         *               "billingPlans": [
         *                 {
         *                   "maxNumberofInstances": 4
         *                 }
         *               ],
         *               "productTierName": "Premium",
         *               "productTierURLKey": "premium",
         *               "resourceParameters": [
         *                 {
         *                   "name": "MySQL",
         *                   "urlKey": "mysql"
         *                 },
         *                 {
         *                   "name": "Redis",
         *                   "urlKey": "redis"
         *                 }
         *               ],
         *               "serviceAPIID": "sa-12345678",
         *               "serviceAPIVersion": "v1",
         *               "serviceEnvironmentName": "Production",
         *               "serviceEnvironmentURLKey": "prod",
         *               "serviceEnvironmentVisibility": "PRIVATE",
         *               "serviceModelName": "Bring Your Own Account",
         *               "serviceModelURLKey": "byoa"
         *             },
         *             {
         *               "productTierName": "Basic",
         *               "productTierURLKey": "basic",
         *               "resourceParameters": [
         *                 {
         *                   "name": "MySQL",
         *                   "urlKey": "mysql"
         *                 },
         *                 {
         *                   "name": "Redis",
         *                   "urlKey": "redis"
         *                 }
         *               ],
         *               "serviceAPIID": "sa-abcdefgh",
         *               "serviceAPIVersion": "v1",
         *               "serviceEnvironmentName": "Production",
         *               "serviceEnvironmentURLKey": "prod",
         *               "serviceEnvironmentVisibility": "PUBLIC",
         *               "serviceModelName": "Hosted",
         *               "serviceModelURLKey": "hosted"
         *             }
         *           ],
         *           "serviceDescription": "MySQL is a relational database",
         *           "serviceId": "s-12345678",
         *           "serviceName": "MySQL",
         *           "serviceOrgId": "org-12345678",
         *           "serviceProviderId": "sp-9zrg9W8Are",
         *           "serviceProviderName": "Omnistrate, Inc.",
         *           "serviceURLKey": "mysql"
         *         },
         *         {
         *           "createdAt": "2019-01-01T00:00:00Z",
         *           "isDeprecated": false,
         *           "offerings": [
         *             {
         *               "assets": {
         *                 "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
         *                 "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
         *               },
         *               "billingPlans": [
         *                 {
         *                   "maxNumberofInstances": 4
         *                 }
         *               ],
         *               "productTierName": "Premium",
         *               "productTierURLKey": "premium",
         *               "resourceParameters": [
         *                 {
         *                   "name": "MySQL",
         *                   "urlKey": "mysql"
         *                 },
         *                 {
         *                   "name": "Redis",
         *                   "urlKey": "redis"
         *                 }
         *               ],
         *               "serviceAPIID": "sa-12345678",
         *               "serviceAPIVersion": "v1",
         *               "serviceEnvironmentName": "Production",
         *               "serviceEnvironmentURLKey": "prod",
         *               "serviceEnvironmentVisibility": "PRIVATE",
         *               "serviceModelName": "Bring Your Own Account",
         *               "serviceModelURLKey": "byoa"
         *             },
         *             {
         *               "productTierName": "Basic",
         *               "productTierURLKey": "basic",
         *               "resourceParameters": [
         *                 {
         *                   "name": "MySQL",
         *                   "urlKey": "mysql"
         *                 },
         *                 {
         *                   "name": "Redis",
         *                   "urlKey": "redis"
         *                 }
         *               ],
         *               "serviceAPIID": "sa-abcdefgh",
         *               "serviceAPIVersion": "v1",
         *               "serviceEnvironmentName": "Production",
         *               "serviceEnvironmentURLKey": "prod",
         *               "serviceEnvironmentVisibility": "PUBLIC",
         *               "serviceModelName": "Hosted",
         *               "serviceModelURLKey": "hosted"
         *             }
         *           ],
         *           "serviceDescription": "MySQL is a relational database",
         *           "serviceId": "s-12345678",
         *           "serviceName": "MySQL",
         *           "serviceOrgId": "org-12345678",
         *           "serviceProviderId": "sp-9zrg9W8Are",
         *           "serviceProviderName": "Omnistrate, Inc.",
         *           "serviceURLKey": "mysql"
         *         },
         *         {
         *           "createdAt": "2019-01-01T00:00:00Z",
         *           "isDeprecated": false,
         *           "offerings": [
         *             {
         *               "assets": {
         *                 "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
         *                 "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
         *               },
         *               "billingPlans": [
         *                 {
         *                   "maxNumberofInstances": 4
         *                 }
         *               ],
         *               "productTierName": "Premium",
         *               "productTierURLKey": "premium",
         *               "resourceParameters": [
         *                 {
         *                   "name": "MySQL",
         *                   "urlKey": "mysql"
         *                 },
         *                 {
         *                   "name": "Redis",
         *                   "urlKey": "redis"
         *                 }
         *               ],
         *               "serviceAPIID": "sa-12345678",
         *               "serviceAPIVersion": "v1",
         *               "serviceEnvironmentName": "Production",
         *               "serviceEnvironmentURLKey": "prod",
         *               "serviceEnvironmentVisibility": "PRIVATE",
         *               "serviceModelName": "Bring Your Own Account",
         *               "serviceModelURLKey": "byoa"
         *             },
         *             {
         *               "productTierName": "Basic",
         *               "productTierURLKey": "basic",
         *               "resourceParameters": [
         *                 {
         *                   "name": "MySQL",
         *                   "urlKey": "mysql"
         *                 },
         *                 {
         *                   "name": "Redis",
         *                   "urlKey": "redis"
         *                 }
         *               ],
         *               "serviceAPIID": "sa-abcdefgh",
         *               "serviceAPIVersion": "v1",
         *               "serviceEnvironmentName": "Production",
         *               "serviceEnvironmentURLKey": "prod",
         *               "serviceEnvironmentVisibility": "PUBLIC",
         *               "serviceModelName": "Hosted",
         *               "serviceModelURLKey": "hosted"
         *             }
         *           ],
         *           "serviceDescription": "MySQL is a relational database",
         *           "serviceId": "s-12345678",
         *           "serviceName": "MySQL",
         *           "serviceOrgId": "org-12345678",
         *           "serviceProviderId": "sp-9zrg9W8Are",
         *           "serviceProviderName": "Omnistrate, Inc.",
         *           "serviceURLKey": "mysql"
         *         }
         *       ]
         *     } */
        ListServiceOfferingsResult: {
            /**
             * @description Token to use for the next request
             * @example next-token
             */
            nextPageToken?: string;
            /**
             * @description The service IDs
             * @example [
             *       "s-12345678",
             *       "s-abcdefgh"
             *     ]
             */
            serviceIds: string[];
            /**
             * @description List of services
             * @example [
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "isDeprecated": false,
             *         "offerings": [
             *           {
             *             "assets": {
             *               "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
             *               "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
             *             },
             *             "billingPlans": [
             *               {
             *                 "maxNumberofInstances": 4
             *               }
             *             ],
             *             "productTierName": "Premium",
             *             "productTierURLKey": "premium",
             *             "resourceParameters": [
             *               {
             *                 "name": "MySQL",
             *                 "urlKey": "mysql"
             *               },
             *               {
             *                 "name": "Redis",
             *                 "urlKey": "redis"
             *               }
             *             ],
             *             "serviceAPIID": "sa-12345678",
             *             "serviceAPIVersion": "v1",
             *             "serviceEnvironmentName": "Production",
             *             "serviceEnvironmentURLKey": "prod",
             *             "serviceEnvironmentVisibility": "PRIVATE",
             *             "serviceModelName": "Bring Your Own Account",
             *             "serviceModelURLKey": "byoa"
             *           },
             *           {
             *             "productTierName": "Basic",
             *             "productTierURLKey": "basic",
             *             "resourceParameters": [
             *               {
             *                 "name": "MySQL",
             *                 "urlKey": "mysql"
             *               },
             *               {
             *                 "name": "Redis",
             *                 "urlKey": "redis"
             *               }
             *             ],
             *             "serviceAPIID": "sa-abcdefgh",
             *             "serviceAPIVersion": "v1",
             *             "serviceEnvironmentName": "Production",
             *             "serviceEnvironmentURLKey": "prod",
             *             "serviceEnvironmentVisibility": "PUBLIC",
             *             "serviceModelName": "Hosted",
             *             "serviceModelURLKey": "hosted"
             *           }
             *         ],
             *         "serviceDescription": "MySQL is a relational database",
             *         "serviceId": "s-12345678",
             *         "serviceName": "MySQL",
             *         "serviceOrgId": "org-12345678",
             *         "serviceProviderId": "sp-9zrg9W8Are",
             *         "serviceProviderName": "Omnistrate, Inc.",
             *         "serviceURLKey": "mysql"
             *       },
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "isDeprecated": false,
             *         "offerings": [
             *           {
             *             "assets": {
             *               "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
             *               "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
             *             },
             *             "billingPlans": [
             *               {
             *                 "maxNumberofInstances": 4
             *               }
             *             ],
             *             "productTierName": "Premium",
             *             "productTierURLKey": "premium",
             *             "resourceParameters": [
             *               {
             *                 "name": "MySQL",
             *                 "urlKey": "mysql"
             *               },
             *               {
             *                 "name": "Redis",
             *                 "urlKey": "redis"
             *               }
             *             ],
             *             "serviceAPIID": "sa-12345678",
             *             "serviceAPIVersion": "v1",
             *             "serviceEnvironmentName": "Production",
             *             "serviceEnvironmentURLKey": "prod",
             *             "serviceEnvironmentVisibility": "PRIVATE",
             *             "serviceModelName": "Bring Your Own Account",
             *             "serviceModelURLKey": "byoa"
             *           },
             *           {
             *             "productTierName": "Basic",
             *             "productTierURLKey": "basic",
             *             "resourceParameters": [
             *               {
             *                 "name": "MySQL",
             *                 "urlKey": "mysql"
             *               },
             *               {
             *                 "name": "Redis",
             *                 "urlKey": "redis"
             *               }
             *             ],
             *             "serviceAPIID": "sa-abcdefgh",
             *             "serviceAPIVersion": "v1",
             *             "serviceEnvironmentName": "Production",
             *             "serviceEnvironmentURLKey": "prod",
             *             "serviceEnvironmentVisibility": "PUBLIC",
             *             "serviceModelName": "Hosted",
             *             "serviceModelURLKey": "hosted"
             *           }
             *         ],
             *         "serviceDescription": "MySQL is a relational database",
             *         "serviceId": "s-12345678",
             *         "serviceName": "MySQL",
             *         "serviceOrgId": "org-12345678",
             *         "serviceProviderId": "sp-9zrg9W8Are",
             *         "serviceProviderName": "Omnistrate, Inc.",
             *         "serviceURLKey": "mysql"
             *       },
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "isDeprecated": false,
             *         "offerings": [
             *           {
             *             "assets": {
             *               "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
             *               "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
             *             },
             *             "billingPlans": [
             *               {
             *                 "maxNumberofInstances": 4
             *               }
             *             ],
             *             "productTierName": "Premium",
             *             "productTierURLKey": "premium",
             *             "resourceParameters": [
             *               {
             *                 "name": "MySQL",
             *                 "urlKey": "mysql"
             *               },
             *               {
             *                 "name": "Redis",
             *                 "urlKey": "redis"
             *               }
             *             ],
             *             "serviceAPIID": "sa-12345678",
             *             "serviceAPIVersion": "v1",
             *             "serviceEnvironmentName": "Production",
             *             "serviceEnvironmentURLKey": "prod",
             *             "serviceEnvironmentVisibility": "PRIVATE",
             *             "serviceModelName": "Bring Your Own Account",
             *             "serviceModelURLKey": "byoa"
             *           },
             *           {
             *             "productTierName": "Basic",
             *             "productTierURLKey": "basic",
             *             "resourceParameters": [
             *               {
             *                 "name": "MySQL",
             *                 "urlKey": "mysql"
             *               },
             *               {
             *                 "name": "Redis",
             *                 "urlKey": "redis"
             *               }
             *             ],
             *             "serviceAPIID": "sa-abcdefgh",
             *             "serviceAPIVersion": "v1",
             *             "serviceEnvironmentName": "Production",
             *             "serviceEnvironmentURLKey": "prod",
             *             "serviceEnvironmentVisibility": "PUBLIC",
             *             "serviceModelName": "Hosted",
             *             "serviceModelURLKey": "hosted"
             *           }
             *         ],
             *         "serviceDescription": "MySQL is a relational database",
             *         "serviceId": "s-12345678",
             *         "serviceName": "MySQL",
             *         "serviceOrgId": "org-12345678",
             *         "serviceProviderId": "sp-9zrg9W8Are",
             *         "serviceProviderName": "Omnistrate, Inc.",
             *         "serviceURLKey": "mysql"
             *       },
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "isDeprecated": false,
             *         "offerings": [
             *           {
             *             "assets": {
             *               "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
             *               "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
             *             },
             *             "billingPlans": [
             *               {
             *                 "maxNumberofInstances": 4
             *               }
             *             ],
             *             "productTierName": "Premium",
             *             "productTierURLKey": "premium",
             *             "resourceParameters": [
             *               {
             *                 "name": "MySQL",
             *                 "urlKey": "mysql"
             *               },
             *               {
             *                 "name": "Redis",
             *                 "urlKey": "redis"
             *               }
             *             ],
             *             "serviceAPIID": "sa-12345678",
             *             "serviceAPIVersion": "v1",
             *             "serviceEnvironmentName": "Production",
             *             "serviceEnvironmentURLKey": "prod",
             *             "serviceEnvironmentVisibility": "PRIVATE",
             *             "serviceModelName": "Bring Your Own Account",
             *             "serviceModelURLKey": "byoa"
             *           },
             *           {
             *             "productTierName": "Basic",
             *             "productTierURLKey": "basic",
             *             "resourceParameters": [
             *               {
             *                 "name": "MySQL",
             *                 "urlKey": "mysql"
             *               },
             *               {
             *                 "name": "Redis",
             *                 "urlKey": "redis"
             *               }
             *             ],
             *             "serviceAPIID": "sa-abcdefgh",
             *             "serviceAPIVersion": "v1",
             *             "serviceEnvironmentName": "Production",
             *             "serviceEnvironmentURLKey": "prod",
             *             "serviceEnvironmentVisibility": "PUBLIC",
             *             "serviceModelName": "Hosted",
             *             "serviceModelURLKey": "hosted"
             *           }
             *         ],
             *         "serviceDescription": "MySQL is a relational database",
             *         "serviceId": "s-12345678",
             *         "serviceName": "MySQL",
             *         "serviceOrgId": "org-12345678",
             *         "serviceProviderId": "sp-9zrg9W8Are",
             *         "serviceProviderName": "Omnistrate, Inc.",
             *         "serviceURLKey": "mysql"
             *       }
             *     ]
             */
            services?: components["schemas"]["DescribeServiceOfferingResult"][];
        };
        /** @example {
         *       "nextPageToken": "next-token",
         *       "servicePlans": [
         *         {
         *           "AutoApproveSubscription": false,
         *           "accountConfigIds": [
         *             "ac-12345678",
         *             "ac-23456789"
         *           ],
         *           "activeAccountConfigIds": {
         *             "aws": "ac-12345678",
         *             "gcp": "ac-23456789"
         *           },
         *           "apiVersion": "v1",
         *           "awsRegions": [
         *             "us-east-2",
         *             "ca-central-1"
         *           ],
         *           "deploymentConfigId": "dc-12345678",
         *           "gcpRegions": [
         *             "us-central1"
         *           ],
         *           "hasPendingChanges": true,
         *           "isProductTierDisabled": true,
         *           "latestMajorVersion": "3.0",
         *           "modelType": "CUSTOMER_HOSTED",
         *           "productTierDescription": "A premium product tier",
         *           "productTierDocumentation": "Any documentation",
         *           "productTierFeatures": {
         *             "BILLING": false,
         *             "LOGS": true,
         *             "METRICS": false
         *           },
         *           "productTierId": "pt-12345678",
         *           "productTierKey": "premium",
         *           "productTierName": "Premium",
         *           "productTierPlanDescription": "A premium plan",
         *           "productTierPricing": {
         *             "price1": "value1"
         *           },
         *           "productTierSupport": "Any support",
         *           "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
         *           "serviceApiId": "sa-12345678",
         *           "serviceEnvironmentId": "se-12345678",
         *           "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
         *           "serviceModelFeatures": [
         *             {
         *               "configuration": {
         *                 "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *                 "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *               },
         *               "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *             },
         *             {
         *               "configuration": {
         *                 "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *                 "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *               },
         *               "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *             },
         *             {
         *               "configuration": {
         *                 "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *                 "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *               },
         *               "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *             },
         *             {
         *               "configuration": {
         *                 "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *                 "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *               },
         *               "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *             }
         *           ],
         *           "serviceModelId": "sm-12345678",
         *           "serviceModelName": "MySQL multi-writer service hosted model",
         *           "tierType": "OMNISTRATE_DEDICATED_TENANCY",
         *           "versionSetStatus": "Preferred|Active|Deprecated|Pending"
         *         },
         *         {
         *           "AutoApproveSubscription": false,
         *           "accountConfigIds": [
         *             "ac-12345678",
         *             "ac-23456789"
         *           ],
         *           "activeAccountConfigIds": {
         *             "aws": "ac-12345678",
         *             "gcp": "ac-23456789"
         *           },
         *           "apiVersion": "v1",
         *           "awsRegions": [
         *             "us-east-2",
         *             "ca-central-1"
         *           ],
         *           "deploymentConfigId": "dc-12345678",
         *           "gcpRegions": [
         *             "us-central1"
         *           ],
         *           "hasPendingChanges": true,
         *           "isProductTierDisabled": true,
         *           "latestMajorVersion": "3.0",
         *           "modelType": "CUSTOMER_HOSTED",
         *           "productTierDescription": "A premium product tier",
         *           "productTierDocumentation": "Any documentation",
         *           "productTierFeatures": {
         *             "BILLING": false,
         *             "LOGS": true,
         *             "METRICS": false
         *           },
         *           "productTierId": "pt-12345678",
         *           "productTierKey": "premium",
         *           "productTierName": "Premium",
         *           "productTierPlanDescription": "A premium plan",
         *           "productTierPricing": {
         *             "price1": "value1"
         *           },
         *           "productTierSupport": "Any support",
         *           "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
         *           "serviceApiId": "sa-12345678",
         *           "serviceEnvironmentId": "se-12345678",
         *           "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
         *           "serviceModelFeatures": [
         *             {
         *               "configuration": {
         *                 "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *                 "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *               },
         *               "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *             },
         *             {
         *               "configuration": {
         *                 "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *                 "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *               },
         *               "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *             },
         *             {
         *               "configuration": {
         *                 "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *                 "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *               },
         *               "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *             },
         *             {
         *               "configuration": {
         *                 "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *                 "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *               },
         *               "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *             }
         *           ],
         *           "serviceModelId": "sm-12345678",
         *           "serviceModelName": "MySQL multi-writer service hosted model",
         *           "tierType": "OMNISTRATE_DEDICATED_TENANCY",
         *           "versionSetStatus": "Preferred|Active|Deprecated|Pending"
         *         }
         *       ]
         *     } */
        ListServicePlansResult: {
            /**
             * @description Token to use for the next page
             * @example next-token
             */
            nextPageToken?: string;
            /**
             * @description List of service plans
             * @example [
             *       {
             *         "AutoApproveSubscription": false,
             *         "accountConfigIds": [
             *           "ac-12345678",
             *           "ac-23456789"
             *         ],
             *         "activeAccountConfigIds": {
             *           "aws": "ac-12345678",
             *           "gcp": "ac-23456789"
             *         },
             *         "apiVersion": "v1",
             *         "awsRegions": [
             *           "us-east-2",
             *           "ca-central-1"
             *         ],
             *         "deploymentConfigId": "dc-12345678",
             *         "gcpRegions": [
             *           "us-central1"
             *         ],
             *         "hasPendingChanges": true,
             *         "isProductTierDisabled": true,
             *         "latestMajorVersion": "3.0",
             *         "modelType": "CUSTOMER_HOSTED",
             *         "productTierDescription": "A premium product tier",
             *         "productTierDocumentation": "Any documentation",
             *         "productTierFeatures": {
             *           "BILLING": false,
             *           "LOGS": true,
             *           "METRICS": false
             *         },
             *         "productTierId": "pt-12345678",
             *         "productTierKey": "premium",
             *         "productTierName": "Premium",
             *         "productTierPlanDescription": "A premium plan",
             *         "productTierPricing": {
             *           "price1": "value1"
             *         },
             *         "productTierSupport": "Any support",
             *         "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
             *         "serviceApiId": "sa-12345678",
             *         "serviceEnvironmentId": "se-12345678",
             *         "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
             *         "serviceModelFeatures": [
             *           {
             *             "configuration": {
             *               "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *               "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *             },
             *             "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *           },
             *           {
             *             "configuration": {
             *               "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *               "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *             },
             *             "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *           },
             *           {
             *             "configuration": {
             *               "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *               "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *             },
             *             "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *           },
             *           {
             *             "configuration": {
             *               "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *               "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *             },
             *             "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *           }
             *         ],
             *         "serviceModelId": "sm-12345678",
             *         "serviceModelName": "MySQL multi-writer service hosted model",
             *         "tierType": "OMNISTRATE_DEDICATED_TENANCY",
             *         "versionSetStatus": "Preferred|Active|Deprecated|Pending"
             *       },
             *       {
             *         "AutoApproveSubscription": false,
             *         "accountConfigIds": [
             *           "ac-12345678",
             *           "ac-23456789"
             *         ],
             *         "activeAccountConfigIds": {
             *           "aws": "ac-12345678",
             *           "gcp": "ac-23456789"
             *         },
             *         "apiVersion": "v1",
             *         "awsRegions": [
             *           "us-east-2",
             *           "ca-central-1"
             *         ],
             *         "deploymentConfigId": "dc-12345678",
             *         "gcpRegions": [
             *           "us-central1"
             *         ],
             *         "hasPendingChanges": true,
             *         "isProductTierDisabled": true,
             *         "latestMajorVersion": "3.0",
             *         "modelType": "CUSTOMER_HOSTED",
             *         "productTierDescription": "A premium product tier",
             *         "productTierDocumentation": "Any documentation",
             *         "productTierFeatures": {
             *           "BILLING": false,
             *           "LOGS": true,
             *           "METRICS": false
             *         },
             *         "productTierId": "pt-12345678",
             *         "productTierKey": "premium",
             *         "productTierName": "Premium",
             *         "productTierPlanDescription": "A premium plan",
             *         "productTierPricing": {
             *           "price1": "value1"
             *         },
             *         "productTierSupport": "Any support",
             *         "serviceApiDescription": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
             *         "serviceApiId": "sa-12345678",
             *         "serviceEnvironmentId": "se-12345678",
             *         "serviceModelDescription": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
             *         "serviceModelFeatures": [
             *           {
             *             "configuration": {
             *               "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *               "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *             },
             *             "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *           },
             *           {
             *             "configuration": {
             *               "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *               "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *             },
             *             "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *           },
             *           {
             *             "configuration": {
             *               "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *               "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *             },
             *             "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *           },
             *           {
             *             "configuration": {
             *               "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *               "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *             },
             *             "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *           }
             *         ],
             *         "serviceModelId": "sm-12345678",
             *         "serviceModelName": "MySQL multi-writer service hosted model",
             *         "tierType": "OMNISTRATE_DEDICATED_TENANCY",
             *         "versionSetStatus": "Preferred|Active|Deprecated|Pending"
             *       }
             *     ]
             */
            servicePlans: components["schemas"]["GetServicePlanResult"][];
        };
        /** @example {
         *       "ids": [
         *         "s-12345678",
         *         "s-abcdefgh",
         *         "s-1234efgh"
         *       ],
         *       "nextPageToken": "next-token",
         *       "services": [
         *         {
         *           "createdAt": "2019-01-01T00:00:00Z",
         *           "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *           "id": "s-12345678",
         *           "key": "mysql",
         *           "name": "MySQL multi-writer service",
         *           "roleType": "admin",
         *           "serviceEnvironments": [
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             },
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             },
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             },
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             }
         *           ],
         *           "serviceLogoURL": "Aliquid pariatur molestiae quod unde.",
         *           "serviceProviderID": "sp-12345678",
         *           "serviceProviderName": "Omnistrate, Inc."
         *         },
         *         {
         *           "createdAt": "2019-01-01T00:00:00Z",
         *           "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *           "id": "s-12345678",
         *           "key": "mysql",
         *           "name": "MySQL multi-writer service",
         *           "roleType": "admin",
         *           "serviceEnvironments": [
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             },
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             },
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             },
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             }
         *           ],
         *           "serviceLogoURL": "Aliquid pariatur molestiae quod unde.",
         *           "serviceProviderID": "sp-12345678",
         *           "serviceProviderName": "Omnistrate, Inc."
         *         },
         *         {
         *           "createdAt": "2019-01-01T00:00:00Z",
         *           "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *           "id": "s-12345678",
         *           "key": "mysql",
         *           "name": "MySQL multi-writer service",
         *           "roleType": "admin",
         *           "serviceEnvironments": [
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             },
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             },
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             },
         *             {
         *               "id": "se-12345678",
         *               "name": "dev",
         *               "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *               "saasPortalStatus": "READY",
         *               "saasPortalUrl": "https://saas-portal.example.com",
         *               "servicePlans": [
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 },
         *                 {
         *                   "description": "A Basic product tier",
         *                   "modelType": "CUSTOMER_HOSTED",
         *                   "name": "Basic",
         *                   "productTierID": "pt-12345678",
         *                   "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *                 }
         *               ],
         *               "sourceEnvironmentID": "se-12345678",
         *               "sourceEnvironmentName": "dev",
         *               "type": "DEV",
         *               "visibility": "private"
         *             }
         *           ],
         *           "serviceLogoURL": "Aliquid pariatur molestiae quod unde.",
         *           "serviceProviderID": "sp-12345678",
         *           "serviceProviderName": "Omnistrate, Inc."
         *         }
         *       ]
         *     } */
        ListServiceResult: {
            /**
             * @description List of service IDs
             * @example [
             *       "s-12345678",
             *       "s-abcdefgh",
             *       "s-1234efgh"
             *     ]
             */
            ids: string[];
            /**
             * @description Token to retrieve the next page of results
             * @example next-token
             */
            nextPageToken?: string;
            /**
             * @description List of services
             * @example [
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *         "id": "s-12345678",
             *         "key": "mysql",
             *         "name": "MySQL multi-writer service",
             *         "roleType": "admin",
             *         "serviceEnvironments": [
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           }
             *         ],
             *         "serviceLogoURL": "Aliquid pariatur molestiae quod unde.",
             *         "serviceProviderID": "sp-12345678",
             *         "serviceProviderName": "Omnistrate, Inc."
             *       },
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *         "id": "s-12345678",
             *         "key": "mysql",
             *         "name": "MySQL multi-writer service",
             *         "roleType": "admin",
             *         "serviceEnvironments": [
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           }
             *         ],
             *         "serviceLogoURL": "Aliquid pariatur molestiae quod unde.",
             *         "serviceProviderID": "sp-12345678",
             *         "serviceProviderName": "Omnistrate, Inc."
             *       },
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *         "id": "s-12345678",
             *         "key": "mysql",
             *         "name": "MySQL multi-writer service",
             *         "roleType": "admin",
             *         "serviceEnvironments": [
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           }
             *         ],
             *         "serviceLogoURL": "Aliquid pariatur molestiae quod unde.",
             *         "serviceProviderID": "sp-12345678",
             *         "serviceProviderName": "Omnistrate, Inc."
             *       },
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *         "id": "s-12345678",
             *         "key": "mysql",
             *         "name": "MySQL multi-writer service",
             *         "roleType": "admin",
             *         "serviceEnvironments": [
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           },
             *           {
             *             "id": "se-12345678",
             *             "name": "dev",
             *             "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
             *             "saasPortalStatus": "READY",
             *             "saasPortalUrl": "https://saas-portal.example.com",
             *             "servicePlans": [
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               },
             *               {
             *                 "description": "A Basic product tier",
             *                 "modelType": "CUSTOMER_HOSTED",
             *                 "name": "Basic",
             *                 "productTierID": "pt-12345678",
             *                 "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *               }
             *             ],
             *             "sourceEnvironmentID": "se-12345678",
             *             "sourceEnvironmentName": "dev",
             *             "type": "DEV",
             *             "visibility": "private"
             *           }
             *         ],
             *         "serviceLogoURL": "Aliquid pariatur molestiae quod unde.",
             *         "serviceProviderID": "sp-12345678",
             *         "serviceProviderName": "Omnistrate, Inc."
             *       }
             *     ]
             */
            services?: components["schemas"]["DescribeServiceResult"][];
        };
        /** @example {
         *       "ids": [
         *         "subr-12345678",
         *         "subr-abcdefgh",
         *         "subr-1234efgh"
         *       ],
         *       "nextPageToken": "next-token",
         *       "subscriptionRequests": [
         *         {
         *           "createdAt": "2019-01-01T00:00:00Z",
         *           "id": "subr-12345678",
         *           "productTierId": "pt-12345678",
         *           "productTierName": "Omnistrate Multi Tenancy",
         *           "rootUserEmail": "abc@gmail.com",
         *           "rootUserId": "org-12345678",
         *           "rootUserName": "John Doe",
         *           "serviceId": "s-12345678",
         *           "serviceLogoURL": "Mollitia sunt commodi.",
         *           "serviceName": "MySQL multi-writer service",
         *           "status": "PENDING",
         *           "updatedAt": "2019-01-01T00:00:00Z",
         *           "updatedByUserId": "user-12345678",
         *           "updatedByUserName": "John Doe"
         *         },
         *         {
         *           "createdAt": "2019-01-01T00:00:00Z",
         *           "id": "subr-12345678",
         *           "productTierId": "pt-12345678",
         *           "productTierName": "Omnistrate Multi Tenancy",
         *           "rootUserEmail": "abc@gmail.com",
         *           "rootUserId": "org-12345678",
         *           "rootUserName": "John Doe",
         *           "serviceId": "s-12345678",
         *           "serviceLogoURL": "Mollitia sunt commodi.",
         *           "serviceName": "MySQL multi-writer service",
         *           "status": "PENDING",
         *           "updatedAt": "2019-01-01T00:00:00Z",
         *           "updatedByUserId": "user-12345678",
         *           "updatedByUserName": "John Doe"
         *         }
         *       ]
         *     } */
        ListSubscriptionRequestsResult: {
            /**
             * @description List of subscription request IDs
             * @example [
             *       "subr-12345678",
             *       "subr-abcdefgh",
             *       "subr-1234efgh"
             *     ]
             */
            ids: string[];
            /**
             * @description The next token to use when listing subscription requests
             * @example next-token
             */
            nextPageToken?: string;
            /**
             * @description List of subscription requests
             * @example [
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "id": "subr-12345678",
             *         "productTierId": "pt-12345678",
             *         "productTierName": "Omnistrate Multi Tenancy",
             *         "rootUserEmail": "abc@gmail.com",
             *         "rootUserId": "org-12345678",
             *         "rootUserName": "John Doe",
             *         "serviceId": "s-12345678",
             *         "serviceLogoURL": "Mollitia sunt commodi.",
             *         "serviceName": "MySQL multi-writer service",
             *         "status": "PENDING",
             *         "updatedAt": "2019-01-01T00:00:00Z",
             *         "updatedByUserId": "user-12345678",
             *         "updatedByUserName": "John Doe"
             *       },
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "id": "subr-12345678",
             *         "productTierId": "pt-12345678",
             *         "productTierName": "Omnistrate Multi Tenancy",
             *         "rootUserEmail": "abc@gmail.com",
             *         "rootUserId": "org-12345678",
             *         "rootUserName": "John Doe",
             *         "serviceId": "s-12345678",
             *         "serviceLogoURL": "Mollitia sunt commodi.",
             *         "serviceName": "MySQL multi-writer service",
             *         "status": "PENDING",
             *         "updatedAt": "2019-01-01T00:00:00Z",
             *         "updatedByUserId": "user-12345678",
             *         "updatedByUserName": "John Doe"
             *       },
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "id": "subr-12345678",
             *         "productTierId": "pt-12345678",
             *         "productTierName": "Omnistrate Multi Tenancy",
             *         "rootUserEmail": "abc@gmail.com",
             *         "rootUserId": "org-12345678",
             *         "rootUserName": "John Doe",
             *         "serviceId": "s-12345678",
             *         "serviceLogoURL": "Mollitia sunt commodi.",
             *         "serviceName": "MySQL multi-writer service",
             *         "status": "PENDING",
             *         "updatedAt": "2019-01-01T00:00:00Z",
             *         "updatedByUserId": "user-12345678",
             *         "updatedByUserName": "John Doe"
             *       },
             *       {
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "id": "subr-12345678",
             *         "productTierId": "pt-12345678",
             *         "productTierName": "Omnistrate Multi Tenancy",
             *         "rootUserEmail": "abc@gmail.com",
             *         "rootUserId": "org-12345678",
             *         "rootUserName": "John Doe",
             *         "serviceId": "s-12345678",
             *         "serviceLogoURL": "Mollitia sunt commodi.",
             *         "serviceName": "MySQL multi-writer service",
             *         "status": "PENDING",
             *         "updatedAt": "2019-01-01T00:00:00Z",
             *         "updatedByUserId": "user-12345678",
             *         "updatedByUserName": "John Doe"
             *       }
             *     ]
             */
            subscriptionRequests?: components["schemas"]["DescribeSubscriptionRequestResult"][];
        };
        /** @example {
         *       "ids": [
         *         "sub-12345678",
         *         "sub-abcdefgh",
         *         "sub-1234efgh"
         *       ],
         *       "nextPageToken": "next-token",
         *       "subscriptions": [
         *         {
         *           "accountConfigIdentityId": "org-12345678",
         *           "cloudProviderNames": [
         *             "aws",
         *             "gcp"
         *           ],
         *           "createdAt": "2019-01-01T00:00:00Z",
         *           "defaultSubscription": true,
         *           "id": "sub-12345678",
         *           "productTierId": "pt-12345678",
         *           "productTierName": "Omnistrate Multi Tenancy",
         *           "roleType": "root",
         *           "rootUserId": "user-12345678",
         *           "serviceId": "s-12345678",
         *           "serviceLogoURL": "Eum beatae asperiores.",
         *           "serviceName": "MySQL multi-writer service",
         *           "serviceOrgId": "org-12345678",
         *           "serviceOrgName": "Omnistrate",
         *           "status": "ACTIVE",
         *           "subscriptionOwnerName": "John Doe"
         *         },
         *         {
         *           "accountConfigIdentityId": "org-12345678",
         *           "cloudProviderNames": [
         *             "aws",
         *             "gcp"
         *           ],
         *           "createdAt": "2019-01-01T00:00:00Z",
         *           "defaultSubscription": true,
         *           "id": "sub-12345678",
         *           "productTierId": "pt-12345678",
         *           "productTierName": "Omnistrate Multi Tenancy",
         *           "roleType": "root",
         *           "rootUserId": "user-12345678",
         *           "serviceId": "s-12345678",
         *           "serviceLogoURL": "Eum beatae asperiores.",
         *           "serviceName": "MySQL multi-writer service",
         *           "serviceOrgId": "org-12345678",
         *           "serviceOrgName": "Omnistrate",
         *           "status": "ACTIVE",
         *           "subscriptionOwnerName": "John Doe"
         *         }
         *       ]
         *     } */
        ListSubscriptionsResult: {
            /**
             * @description List of subscription IDs
             * @example [
             *       "sub-12345678",
             *       "sub-abcdefgh",
             *       "sub-1234efgh"
             *     ]
             */
            ids: string[];
            /**
             * @description The next token to use when listing subscriptions
             * @example next-token
             */
            nextPageToken?: string;
            /**
             * @description List of subscriptions
             * @example [
             *       {
             *         "accountConfigIdentityId": "org-12345678",
             *         "cloudProviderNames": [
             *           "aws",
             *           "gcp"
             *         ],
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "defaultSubscription": true,
             *         "id": "sub-12345678",
             *         "productTierId": "pt-12345678",
             *         "productTierName": "Omnistrate Multi Tenancy",
             *         "roleType": "root",
             *         "rootUserId": "user-12345678",
             *         "serviceId": "s-12345678",
             *         "serviceLogoURL": "Eum beatae asperiores.",
             *         "serviceName": "MySQL multi-writer service",
             *         "serviceOrgId": "org-12345678",
             *         "serviceOrgName": "Omnistrate",
             *         "status": "ACTIVE",
             *         "subscriptionOwnerName": "John Doe"
             *       },
             *       {
             *         "accountConfigIdentityId": "org-12345678",
             *         "cloudProviderNames": [
             *           "aws",
             *           "gcp"
             *         ],
             *         "createdAt": "2019-01-01T00:00:00Z",
             *         "defaultSubscription": true,
             *         "id": "sub-12345678",
             *         "productTierId": "pt-12345678",
             *         "productTierName": "Omnistrate Multi Tenancy",
             *         "roleType": "root",
             *         "rootUserId": "user-12345678",
             *         "serviceId": "s-12345678",
             *         "serviceLogoURL": "Eum beatae asperiores.",
             *         "serviceName": "MySQL multi-writer service",
             *         "serviceOrgId": "org-12345678",
             *         "serviceOrgName": "Omnistrate",
             *         "status": "ACTIVE",
             *         "subscriptionOwnerName": "John Doe"
             *       }
             *     ]
             */
            subscriptions?: components["schemas"]["DescribeSubscriptionResult"][];
        };
        /** @example {
         *       "nextPageToken": "next-token",
         *       "tierVersionSets": [
         *         {
         *           "autoApproveSubscription": false,
         *           "baseVersion": "3.0",
         *           "createdAt": "2020-01-01T00:00:00Z",
         *           "createdBy": "John Doe",
         *           "description": "Voluptas ipsum et consectetur maiores aliquid.",
         *           "enabledFeatures": [
         *             {
         *               "configuration": {
         *                 "provider": "native"
         *               },
         *               "feature": "LOGS",
         *               "scope": "INTERNAL"
         *             },
         *             {
         *               "configuration": {
         *                 "provider": "native"
         *               },
         *               "feature": "LOGS",
         *               "scope": "INTERNAL"
         *             },
         *             {
         *               "configuration": {
         *                 "provider": "native"
         *               },
         *               "feature": "LOGS",
         *               "scope": "INTERNAL"
         *             },
         *             {
         *               "configuration": {
         *                 "provider": "native"
         *               },
         *               "feature": "LOGS",
         *               "scope": "INTERNAL"
         *             }
         *           ],
         *           "features": {
         *             "BILLING": false,
         *             "LOGS": true,
         *             "METRICS": false
         *           },
         *           "instanceCount": 12,
         *           "latestUpgradePathId": "upgrade-12345678",
         *           "name": "Regular version set",
         *           "parentVersion": "2.0",
         *           "productTierId": "Nihil qui ex omnis repellat consectetur.",
         *           "releasedAt": "2020-01-01T00:00:00Z",
         *           "releasedBy": "John Doe",
         *           "resources": [
         *             {
         *               "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *               "id": "r-12345678",
         *               "imageConfigId": "imgc-12345678",
         *               "infraConfigId": "ic-12345678",
         *               "isExternal": true,
         *               "managedResourceType": "PortsBasedProxy",
         *               "name": "MySQL multi-writer service"
         *             },
         *             {
         *               "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *               "id": "r-12345678",
         *               "imageConfigId": "imgc-12345678",
         *               "infraConfigId": "ic-12345678",
         *               "isExternal": true,
         *               "managedResourceType": "PortsBasedProxy",
         *               "name": "MySQL multi-writer service"
         *             }
         *           ],
         *           "serviceId": "s-12345678",
         *           "serviceModelId": "Et ut error delectus quaerat placeat dolores.",
         *           "status": "Preferred|Active|Deprecated|Pending",
         *           "type": "Major|Incremental|UserDefined",
         *           "updatedAt": "2020-01-01T00:00:00Z",
         *           "version": "3.0"
         *         },
         *         {
         *           "autoApproveSubscription": false,
         *           "baseVersion": "3.0",
         *           "createdAt": "2020-01-01T00:00:00Z",
         *           "createdBy": "John Doe",
         *           "description": "Voluptas ipsum et consectetur maiores aliquid.",
         *           "enabledFeatures": [
         *             {
         *               "configuration": {
         *                 "provider": "native"
         *               },
         *               "feature": "LOGS",
         *               "scope": "INTERNAL"
         *             },
         *             {
         *               "configuration": {
         *                 "provider": "native"
         *               },
         *               "feature": "LOGS",
         *               "scope": "INTERNAL"
         *             },
         *             {
         *               "configuration": {
         *                 "provider": "native"
         *               },
         *               "feature": "LOGS",
         *               "scope": "INTERNAL"
         *             },
         *             {
         *               "configuration": {
         *                 "provider": "native"
         *               },
         *               "feature": "LOGS",
         *               "scope": "INTERNAL"
         *             }
         *           ],
         *           "features": {
         *             "BILLING": false,
         *             "LOGS": true,
         *             "METRICS": false
         *           },
         *           "instanceCount": 12,
         *           "latestUpgradePathId": "upgrade-12345678",
         *           "name": "Regular version set",
         *           "parentVersion": "2.0",
         *           "productTierId": "Nihil qui ex omnis repellat consectetur.",
         *           "releasedAt": "2020-01-01T00:00:00Z",
         *           "releasedBy": "John Doe",
         *           "resources": [
         *             {
         *               "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *               "id": "r-12345678",
         *               "imageConfigId": "imgc-12345678",
         *               "infraConfigId": "ic-12345678",
         *               "isExternal": true,
         *               "managedResourceType": "PortsBasedProxy",
         *               "name": "MySQL multi-writer service"
         *             },
         *             {
         *               "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *               "id": "r-12345678",
         *               "imageConfigId": "imgc-12345678",
         *               "infraConfigId": "ic-12345678",
         *               "isExternal": true,
         *               "managedResourceType": "PortsBasedProxy",
         *               "name": "MySQL multi-writer service"
         *             }
         *           ],
         *           "serviceId": "s-12345678",
         *           "serviceModelId": "Et ut error delectus quaerat placeat dolores.",
         *           "status": "Preferred|Active|Deprecated|Pending",
         *           "type": "Major|Incremental|UserDefined",
         *           "updatedAt": "2020-01-01T00:00:00Z",
         *           "version": "3.0"
         *         }
         *       ]
         *     } */
        ListTierVersionSetsResult: {
            /**
             * @description Token to use for the next request
             * @example next-token
             */
            nextPageToken?: string;
            /**
             * @description List of product-tier version sets.
             * @example [
             *       {
             *         "autoApproveSubscription": false,
             *         "baseVersion": "3.0",
             *         "createdAt": "2020-01-01T00:00:00Z",
             *         "createdBy": "John Doe",
             *         "description": "Voluptas ipsum et consectetur maiores aliquid.",
             *         "enabledFeatures": [
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           }
             *         ],
             *         "features": {
             *           "BILLING": false,
             *           "LOGS": true,
             *           "METRICS": false
             *         },
             *         "instanceCount": 12,
             *         "latestUpgradePathId": "upgrade-12345678",
             *         "name": "Regular version set",
             *         "parentVersion": "2.0",
             *         "productTierId": "Nihil qui ex omnis repellat consectetur.",
             *         "releasedAt": "2020-01-01T00:00:00Z",
             *         "releasedBy": "John Doe",
             *         "resources": [
             *           {
             *             "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *             "id": "r-12345678",
             *             "imageConfigId": "imgc-12345678",
             *             "infraConfigId": "ic-12345678",
             *             "isExternal": true,
             *             "managedResourceType": "PortsBasedProxy",
             *             "name": "MySQL multi-writer service"
             *           },
             *           {
             *             "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *             "id": "r-12345678",
             *             "imageConfigId": "imgc-12345678",
             *             "infraConfigId": "ic-12345678",
             *             "isExternal": true,
             *             "managedResourceType": "PortsBasedProxy",
             *             "name": "MySQL multi-writer service"
             *           }
             *         ],
             *         "serviceId": "s-12345678",
             *         "serviceModelId": "Et ut error delectus quaerat placeat dolores.",
             *         "status": "Preferred|Active|Deprecated|Pending",
             *         "type": "Major|Incremental|UserDefined",
             *         "updatedAt": "2020-01-01T00:00:00Z",
             *         "version": "3.0"
             *       },
             *       {
             *         "autoApproveSubscription": false,
             *         "baseVersion": "3.0",
             *         "createdAt": "2020-01-01T00:00:00Z",
             *         "createdBy": "John Doe",
             *         "description": "Voluptas ipsum et consectetur maiores aliquid.",
             *         "enabledFeatures": [
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           }
             *         ],
             *         "features": {
             *           "BILLING": false,
             *           "LOGS": true,
             *           "METRICS": false
             *         },
             *         "instanceCount": 12,
             *         "latestUpgradePathId": "upgrade-12345678",
             *         "name": "Regular version set",
             *         "parentVersion": "2.0",
             *         "productTierId": "Nihil qui ex omnis repellat consectetur.",
             *         "releasedAt": "2020-01-01T00:00:00Z",
             *         "releasedBy": "John Doe",
             *         "resources": [
             *           {
             *             "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *             "id": "r-12345678",
             *             "imageConfigId": "imgc-12345678",
             *             "infraConfigId": "ic-12345678",
             *             "isExternal": true,
             *             "managedResourceType": "PortsBasedProxy",
             *             "name": "MySQL multi-writer service"
             *           },
             *           {
             *             "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *             "id": "r-12345678",
             *             "imageConfigId": "imgc-12345678",
             *             "infraConfigId": "ic-12345678",
             *             "isExternal": true,
             *             "managedResourceType": "PortsBasedProxy",
             *             "name": "MySQL multi-writer service"
             *           }
             *         ],
             *         "serviceId": "s-12345678",
             *         "serviceModelId": "Et ut error delectus quaerat placeat dolores.",
             *         "status": "Preferred|Active|Deprecated|Pending",
             *         "type": "Major|Incremental|UserDefined",
             *         "updatedAt": "2020-01-01T00:00:00Z",
             *         "version": "3.0"
             *       },
             *       {
             *         "autoApproveSubscription": false,
             *         "baseVersion": "3.0",
             *         "createdAt": "2020-01-01T00:00:00Z",
             *         "createdBy": "John Doe",
             *         "description": "Voluptas ipsum et consectetur maiores aliquid.",
             *         "enabledFeatures": [
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           }
             *         ],
             *         "features": {
             *           "BILLING": false,
             *           "LOGS": true,
             *           "METRICS": false
             *         },
             *         "instanceCount": 12,
             *         "latestUpgradePathId": "upgrade-12345678",
             *         "name": "Regular version set",
             *         "parentVersion": "2.0",
             *         "productTierId": "Nihil qui ex omnis repellat consectetur.",
             *         "releasedAt": "2020-01-01T00:00:00Z",
             *         "releasedBy": "John Doe",
             *         "resources": [
             *           {
             *             "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *             "id": "r-12345678",
             *             "imageConfigId": "imgc-12345678",
             *             "infraConfigId": "ic-12345678",
             *             "isExternal": true,
             *             "managedResourceType": "PortsBasedProxy",
             *             "name": "MySQL multi-writer service"
             *           },
             *           {
             *             "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *             "id": "r-12345678",
             *             "imageConfigId": "imgc-12345678",
             *             "infraConfigId": "ic-12345678",
             *             "isExternal": true,
             *             "managedResourceType": "PortsBasedProxy",
             *             "name": "MySQL multi-writer service"
             *           }
             *         ],
             *         "serviceId": "s-12345678",
             *         "serviceModelId": "Et ut error delectus quaerat placeat dolores.",
             *         "status": "Preferred|Active|Deprecated|Pending",
             *         "type": "Major|Incremental|UserDefined",
             *         "updatedAt": "2020-01-01T00:00:00Z",
             *         "version": "3.0"
             *       },
             *       {
             *         "autoApproveSubscription": false,
             *         "baseVersion": "3.0",
             *         "createdAt": "2020-01-01T00:00:00Z",
             *         "createdBy": "John Doe",
             *         "description": "Voluptas ipsum et consectetur maiores aliquid.",
             *         "enabledFeatures": [
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           },
             *           {
             *             "configuration": {
             *               "provider": "native"
             *             },
             *             "feature": "LOGS",
             *             "scope": "INTERNAL"
             *           }
             *         ],
             *         "features": {
             *           "BILLING": false,
             *           "LOGS": true,
             *           "METRICS": false
             *         },
             *         "instanceCount": 12,
             *         "latestUpgradePathId": "upgrade-12345678",
             *         "name": "Regular version set",
             *         "parentVersion": "2.0",
             *         "productTierId": "Nihil qui ex omnis repellat consectetur.",
             *         "releasedAt": "2020-01-01T00:00:00Z",
             *         "releasedBy": "John Doe",
             *         "resources": [
             *           {
             *             "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *             "id": "r-12345678",
             *             "imageConfigId": "imgc-12345678",
             *             "infraConfigId": "ic-12345678",
             *             "isExternal": true,
             *             "managedResourceType": "PortsBasedProxy",
             *             "name": "MySQL multi-writer service"
             *           },
             *           {
             *             "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *             "id": "r-12345678",
             *             "imageConfigId": "imgc-12345678",
             *             "infraConfigId": "ic-12345678",
             *             "isExternal": true,
             *             "managedResourceType": "PortsBasedProxy",
             *             "name": "MySQL multi-writer service"
             *           }
             *         ],
             *         "serviceId": "s-12345678",
             *         "serviceModelId": "Et ut error delectus quaerat placeat dolores.",
             *         "status": "Preferred|Active|Deprecated|Pending",
             *         "type": "Major|Incremental|UserDefined",
             *         "updatedAt": "2020-01-01T00:00:00Z",
             *         "version": "3.0"
             *       }
             *     ]
             */
            tierVersionSets: components["schemas"]["TierVersionSet"][];
        };
        /** @example {
         *       "cloudProvider": "aws",
         *       "region": "us-west-2"
         *     } */
        ListVUnitsRequestBody: {
            /**
             * @description The infra / cloud provider name
             * @example aws
             */
            cloudProvider: string;
            /**
             * @description Region code specific to the cloud-provider
             * @example us-west-2
             */
            region: string;
        };
        /** @example {
         *       "ids": {
         *         "aws": [
         *           "vu-12345678",
         *           "vu-abcdefgh"
         *         ],
         *         "gcp": [
         *           "vu-1234efgh"
         *         ]
         *       },
         *       "nextPageToken": "next-token"
         *     } */
        ListVUnitsResult: {
            /**
             * @description List of VUnit IDs per Cloud provider
             * @example {
             *       "aws": [
             *         "vu-12345678",
             *         "vu-abcdefgh"
             *       ],
             *       "gcp": [
             *         "vu-1234efgh"
             *       ]
             *     }
             */
            ids?: {
                [key: string]: string[];
            };
            /**
             * @description Next page token
             * @example next-token
             */
            nextPageToken?: string;
        };
        /** @example {
         *       "associatedKubernetesServiceName": "my-service",
         *       "associatedResourceID": "r-12345678",
         *       "path": "/path",
         *       "port": 8080
         *     } */
        LoadBalancerPathConfiguration: {
            /**
             * @description Override the default target Kubernetes service name with this value
             * @example my-service
             */
            associatedKubernetesServiceName?: string;
            /**
             * @description The ID of the resource associated with the path
             * @example r-12345678
             */
            associatedResourceID: string;
            /**
             * @description The REST API path backed by the load balancer
             * @example /path
             */
            path: string;
            /**
             * Format: int64
             * @description The port to forward traffic to
             * @example 8080
             */
            port: number;
        };
        /** @example {
         *       "authorizationCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
         *       "companyDescription": "We sell xyz database software",
         *       "companyUrl": "https://www.mywebsite.com",
         *       "deviceCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
         *       "identityProviderName": "Google",
         *       "invitedEmail": "abc@gmail.com",
         *       "legalCompanyName": "mywebsite",
         *       "redirectUri": "https://www.example/redirect"
         *     } */
        LoginWithIdentityProviderRequestBody: {
            /**
             * @description The authorization code from the Identity Provider
             * @example 4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&
             */
            authorizationCode?: string;
            /** @example We sell xyz database software */
            companyDescription?: string;
            /** @example https://www.mywebsite.com */
            companyUrl?: string;
            /**
             * @description The device code from the Identity Provider
             * @example 4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&
             */
            deviceCode?: string;
            /**
             * @description The name of the Identity Provider
             * @example Google
             */
            identityProviderName: string;
            /**
             * Format: email
             * @description Email address that the user was invited with
             * @example abc@gmail.com
             */
            invitedEmail?: string;
            /** @example mywebsite */
            legalCompanyName?: string;
            /**
             * @description The redirect URI used to get the authorization code
             * @example https://www.example/redirect
             */
            redirectUri?: string;
        };
        /** @example {
         *       "orchestrationModifyDSL": "Quisquam suscipit aut enim."
         *     } */
        ModifyServicesOrchestrationRequestBody: {
            /**
             * @description base64 encoded content of services orchestration modify DSL
             * @example Pariatur non aut.
             */
            orchestrationModifyDSL: string;
        };
        /** @example {
         *       "isPrivateLinkEnabled": false
         *     } */
        NetworkFeaturesConfiguration: {
            /**
             * @description Indicates if PrivateLink is enabled for the network
             * @example false
             */
            isPrivateLinkEnabled?: boolean;
        };
        /** @example {
         *       "availabilityZone": "us-east-2a",
         *       "detailedHealth": {
         *         "ConnectivityStatus": "UNHEALTHY",
         *         "DiskHealth": "UNKNOWN",
         *         "LoadStatus": "LOAD_NORMAL",
         *         "NodeHealth": "HEALTHY",
         *         "ProcessHealth": "HEALTHY",
         *         "ProcessLiveness": "HEALTHY"
         *       },
         *       "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *       "healthStatus": "HEALTHY",
         *       "id": "primary-0",
         *       "kubernetesDashboardEndpoint": {
         *         "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
         *         "deploymentCellID": "hc-12345678"
         *       },
         *       "ports": [
         *         80,
         *         443
         *       ],
         *       "status": "RUNNING",
         *       "storageSize": 10,
         *       "vmInfo": {
         *         "architecture": "amd64",
         *         "azCode": "us-east-1a",
         *         "azID": "use1-az1",
         *         "externalIP": "3.44.113.6",
         *         "instanceType": "t2.small",
         *         "internalIP": "192.168.1.4",
         *         "k8sNodeName": "my-k8s-node",
         *         "kernelVersion": "5.10.228",
         *         "kubeletVersion": "1.31.3",
         *         "os": "linux",
         *         "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
         *       }
         *     } */
        NodeNetworkTopologyResult: {
            /**
             * @description The availability zone of the node
             * @example us-east-2a
             */
            availabilityZone?: string;
            detailedHealth?: components["schemas"]["DetailedNodeHealthResult"];
            /**
             * @description The endpoint of the node
             * @example primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud
             */
            endpoint?: string;
            /**
             * @description The heath status of the node
             * @example HEALTHY
             */
            healthStatus?: string;
            /**
             * @description The ID of the node
             * @example primary-0
             */
            id?: string;
            kubernetesDashboardEndpoint?: components["schemas"]["KubernetesDashboardEndpoint"];
            /**
             * @description The ports that this node exposes
             * @example [
             *       80,
             *       443
             *     ]
             */
            ports?: number[];
            /**
             * @description The status of the node
             * @example RUNNING
             */
            status?: string;
            /**
             * Format: int64
             * @description The storage size of the node in GiB
             * @example 10
             */
            storageSize?: number;
            vmInfo?: components["schemas"]["NodeVMInfoResult"];
        };
        /** @example {
         *       "architecture": "amd64",
         *       "azCode": "us-east-1a",
         *       "azID": "use1-az1",
         *       "externalIP": "3.44.53.111",
         *       "instanceType": "t2.small",
         *       "internalIP": "192.168.1.4",
         *       "k8sNodeName": "my-k8s-node",
         *       "kernelVersion": "5.10.228",
         *       "kubeletVersion": "1.31.3",
         *       "os": "linux",
         *       "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
         *     } */
        NodeVMInfoResult: {
            /**
             * @description The architecture of the VM
             * @example amd64
             */
            architecture: string;
            /**
             * @description The availability zone code of the VM
             * @example us-east-1a
             */
            azCode: string;
            /**
             * @description The availability zone ID of the VM
             * @example use1-az1
             */
            azID?: string;
            /**
             * @description The external IP of the VM
             * @example 3.44.53.111
             */
            externalIP?: string;
            /**
             * @description The instance type of the VM
             * @example t2.small
             */
            instanceType: string;
            /**
             * @description The internal IP of the VM
             * @example 192.168.1.4
             */
            internalIP: string;
            /**
             * @description The k8s node name of the VM
             * @example my-k8s-node
             */
            k8sNodeName: string;
            /**
             * @description The kernel version of the VM
             * @example 5.10.228
             */
            kernelVersion?: string;
            /**
             * @description The kubelet version of the VM
             * @example 1.31.3
             */
            kubeletVersion: string;
            /**
             * @description The operating system of the VM
             * @example linux
             */
            os: string;
            /**
             * @description The provider ID of the VM
             * @example aws:///ap-south-1b/i-06h696g4a643ahf01
             */
            providerID: string;
        };
        /** @example {
         *       "maxNumberofInstances": 5
         *     } */
        OfferingBillingPlan: {
            /**
             * Format: int64
             * @description Maximum number of instances
             * @example 5
             */
            maxNumberofInstances?: number;
        };
        /** @example {
         *       "status": "RUNNING"
         *     } */
        OmnistrateServiceHealthResult: {
            /**
             * @description The status of the service
             * @example RUNNING
             */
            status: string;
        };
        /** @example {
         *       "apiVersion": "z9a",
         *       "buildCommitSHA": "1234567890abcdef1234567890abcdef12345678",
         *       "buildTimestamp": "2020-01-01T00:00:00Z"
         *     } */
        OmnistrateServiceVersionResult: {
            /**
             * @description Omnistrate API version
             * @example tq
             */
            apiVersion: string;
            /**
             * @description The commit hash of the build
             * @example 1234567890abcdef1234567890abcdef12345678
             */
            buildCommitSHA: string;
            /**
             * @description The timestamp of the build
             * @example 2020-01-01T00:00:00Z
             */
            buildTimestamp: string;
        };
        /** @example {
         *       "endpointConfiguration": {
         *         "admin": {
         *           "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *           "networkingType": "PRIVATE",
         *           "ports": [
         *             8080,
         *             8081
         *           ],
         *           "primary": false
         *         },
         *         "cluster": {
         *           "host": "https://my-endpoint.com",
         *           "networkingType": "PUBLIC",
         *           "ports": [
         *             8080,
         *             8081
         *           ],
         *           "primary": true
         *         }
         *       },
         *       "helmChartDependencies": [
         *         {
         *           "chartName": "cert-manager",
         *           "chartVersion": "v1.5.3"
         *         },
         *         {
         *           "chartName": "nginx-ingress",
         *           "chartVersion": "v0.48.1"
         *         },
         *         {
         *           "chartName": "external-dns",
         *           "chartVersion": "v0.7.0"
         *         },
         *         {
         *           "chartName": "cnpg-operator",
         *           "chartVersion": "v0.23.1"
         *         }
         *       ],
         *       "outputParameters": {
         *         "expiresAt": "$out.status.notAfter",
         *         "issuerName": "letsencrypt-prod"
         *       },
         *       "readinessConditions": {
         *         "$out.status.conditions[?(@.type=='Ready')].status": true
         *       },
         *       "supplementalFiles": [
         *         "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
         *         "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
         *       ],
         *       "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
         *     } */
        OperatorCRDConfiguration: {
            /**
             * @description The endpoints from the Operator CRD Deployment to expose to the customer
             * @example {
             *       "admin": {
             *         "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
             *         "networkingType": "PRIVATE",
             *         "ports": [
             *           8080,
             *           8081
             *         ],
             *         "primary": false
             *       },
             *       "cluster": {
             *         "host": "https://my-endpoint.com",
             *         "networkingType": "PUBLIC",
             *         "ports": [
             *           8080,
             *           8081
             *         ],
             *         "primary": true
             *       }
             *     }
             */
            endpointConfiguration?: {
                [key: string]: components["schemas"]["Endpoint"];
            };
            /**
             * @description The helm chart dependencies for the CRD (including charts necessary to manage the operator) - Optional
             * @example [
             *       {
             *         "chartName": "cert-manager",
             *         "chartVersion": "v1.5.3"
             *       },
             *       {
             *         "chartName": "nginx-ingress",
             *         "chartVersion": "v0.48.1"
             *       },
             *       {
             *         "chartName": "external-dns",
             *         "chartVersion": "v0.7.0"
             *       },
             *       {
             *         "chartName": "cnpg-operator",
             *         "chartVersion": "v0.23.1"
             *       }
             *     ]
             */
            helmChartDependencies?: components["schemas"]["OperatorHelmChartDependency"][];
            /**
             * @description The output parameters to export to the user from the CRD
             * @example {
             *       "expiresAt": "$out.status.notAfter",
             *       "issuerName": "letsencrypt-prod"
             *     }
             */
            outputParameters?: {
                [key: string]: string;
            };
            /**
             * @description The readiness conditions to check for the CRD
             * @example {
             *       "$out.status.conditions[?(@.type=='Ready')].status": true
             *     }
             */
            readinessConditions?: {
                [key: string]: unknown;
            };
            /**
             * @description The supplemental files to apply with the CRD
             * @example [
             *       "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
             *       "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
             *     ]
             */
            supplementalFiles?: string[];
            /**
             * @description The template of the CRD to apply on every deployment
             * @example apiVersion: cert-manager.io/v1
             *     kind: ClusterIssuer
             *     metadata:
             *       name: letsencrypt-prod
             *     spec:
             *       acme:
             *         server: https://acme-v02.api.letsencrypt.org/directory
             *         email: test@example.com
             *         privateKeySecretRef:
             *           name: letsencrypt-prod
             *         solvers:
             *         - http01:
             *             ingress:
             *               class: nginx
             */
            template: string;
        };
        /** @example {
         *       "chartName": "cert-manager",
         *       "chartRepoName": "my-repo",
         *       "chartRepoUrl": "https://my-repo.com",
         *       "chartValues": {
         *         "key1": "value1",
         *         "key2": 3,
         *         "key3": {
         *           "key4": "value4"
         *         }
         *       },
         *       "chartVersion": "v1.5.3",
         *       "password": "my-password",
         *       "username": "my-user"
         *     } */
        OperatorHelmChartDependency: {
            /**
             * @description The name of the helm chart
             * @example cert-manager
             */
            chartName: string;
            /**
             * @description The repository name of the Helm chart
             * @example my-repo
             */
            chartRepoName?: string;
            /**
             * @description The repository URL of the Helm chart
             * @example https://my-repo.com
             */
            chartRepoUrl?: string;
            /**
             * @description The values of the Helm chart
             * @example {
             *       "key1": "value1",
             *       "key2": 3,
             *       "key3": {
             *         "key4": "value4"
             *       }
             *     }
             */
            chartValues?: {
                [key: string]: unknown;
            };
            /**
             * @description The version of the helm chart
             * @example v1.5.3
             */
            chartVersion: string;
            /**
             * @description The password to authenticate with the registry
             * @example my-password
             */
            password?: string;
            /**
             * @description The username to authenticate with the registry
             * @example my-user
             */
            username?: string;
        };
        /** @example {
         *       "email": "abc@gmail.com",
         *       "invitedAt": "2023-01-10T00:00:00Z",
         *       "name": "John Dae",
         *       "roleType": "reader",
         *       "userId": "user-abcd1234"
         *     } */
        OrgUsers: {
            /**
             * @description The email of the user
             * @example abc@gmail.com
             */
            email: string;
            /**
             * @description The time when the user was invited
             * @example 2023-01-10T00:00:00Z
             */
            invitedAt: string;
            /**
             * @description The name of the user
             * @example John Dae
             */
            name: string;
            /** @example reader */
            roleType: string;
            /**
             * @description The User ID
             * @example user-abcd1234
             */
            userId: string;
        };
        /** @example {
         *       "custom": false,
         *       "description": "The name of the server",
         *       "displayName": "Server Name",
         *       "isList": false,
         *       "key": "serverName",
         *       "type": "Boolean|Float64|String|JSON|Resource"
         *     } */
        OutputParameterEntity: {
            /**
             * @description Whether the parameter is custom
             * @example false
             */
            custom: boolean;
            /**
             * @description The parameter description
             * @example The name of the server
             */
            description: string;
            /**
             * @description The parameter display name
             * @example Server Name
             */
            displayName: string;
            /**
             * @description Whether the parameter is a list
             * @example false
             */
            isList: boolean;
            /**
             * @description The parameter key
             * @example serverName
             */
            key: string;
            /**
             * @description The parameter type
             * @example Boolean|Float64|String|JSON|Resource
             */
            type: string;
        };
        /** @example {
         *       "awsPrivateLinkConfigurations": [
         *         {
         *           "port": 80,
         *           "targetGroupName": "my-target-group"
         *         },
         *         {
         *           "port": 80,
         *           "targetGroupName": "my-target-group"
         *         }
         *       ]
         *     } */
        PrivateLinkConfiguration: {
            /**
             * @description The list of private link configurations
             * @example [
             *       {
             *         "port": 80,
             *         "targetGroupName": "my-target-group"
             *       },
             *       {
             *         "port": 80,
             *         "targetGroupName": "my-target-group"
             *       }
             *     ]
             */
            awsPrivateLinkConfigurations?: components["schemas"]["AWSPrivateLinkConfiguration"][];
        };
        /**
         * @description The private networking configuration for the network config
         * @example {
         *       "privateLinkConfiguration": {
         *         "awsPrivateLinkConfigurations": [
         *           {
         *             "port": 80,
         *             "targetGroupName": "my-target-group"
         *           },
         *           {
         *             "port": 80,
         *             "targetGroupName": "my-target-group"
         *           },
         *           {
         *             "port": 80,
         *             "targetGroupName": "my-target-group"
         *           },
         *           {
         *             "port": 80,
         *             "targetGroupName": "my-target-group"
         *           }
         *         ]
         *       }
         *     }
         */
        PrivateNetworkingConfiguration: {
            privateLinkConfiguration?: components["schemas"]["PrivateLinkConfiguration"];
        };
        /** @example {
         *       "configuration": {
         *         "provider": "native"
         *       },
         *       "feature": "LOGS",
         *       "scope": "INTERNAL"
         *     } */
        ProductTierFeatureDetail: {
            /**
             * @description The configuration parameters of the product tier feature
             * @example {
             *       "provider": "native"
             *     }
             */
            configuration?: {
                [key: string]: unknown;
            };
            /**
             * @description Feature name
             * @example LOGS
             */
            feature?: string;
            /**
             * @description Feature scope
             * @example INTERNAL
             */
            scope?: string;
        };
        /** @example {
         *       "openPorts": [
         *         "30000",
         *         "30001"
         *       ],
         *       "proxyEndpoint": "https://r-1234.instance-abcdefgh.region.aws.omnistrate.cloud"
         *     } */
        ProxyEndpoint: {
            /** @example [
             *       "30000",
             *       "30001"
             *     ] */
            openPorts?: string[];
            /** @example https://r-1234.instance-abcdefgh.region.aws.omnistrate.cloud */
            proxyEndpoint?: string;
        };
        /**
         * @description The public networking configuration for the network config
         * @example {
         *       "enableClusterLoadBalancer": true,
         *       "enableNodeLoadBalancer": true
         *     }
         */
        PublicNetworkingConfiguration: {
            /**
             * @description Enable a single load balancer for all replicas
             * @example true
             */
            enableClusterLoadBalancer?: boolean;
            /**
             * @description Create an external node load balancer per node rather than exposing the node ip directly
             * @example true
             */
            enableNodeLoadBalancer?: boolean;
        };
        /**
         * @description The status of the recent deployment failure
         * @example {
         *       "failedAt": "2021-09-01T00:00:00Z",
         *       "failureReason": "Failed to connect to the database"
         *     }
         */
        RecentDeploymentFailureStatus: {
            /**
             * @description The time at which the deployment failed
             * @example 2021-09-01T00:00:00Z
             */
            failedAt?: string;
            /**
             * @description The reason for the deployment failure
             * @example Failed to connect to the database
             */
            failureReason?: string;
        };
        /** @example {
         *       "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
         *       "customCommand": [
         *         "/bin/sh",
         *         "-c"
         *       ],
         *       "customImage": "my-custom-image:latest",
         *       "scope": "CLUSTER",
         *       "type": "ADD"
         *     } */
        RegisterActionHookRequestBody: {
            /**
             * @description The Base64 encoded command template to execute
             * @example ZWNobyAiaGVsbG8gd29ybGQi
             */
            commandTemplate: string;
            /**
             * @description The custom command to execute the hook with
             * @example [
             *       "/bin/sh",
             *       "-c"
             *     ]
             */
            customCommand?: string[];
            /**
             * @description The custom image to execute the hook
             * @example my-custom-image:latest
             */
            customImage?: string;
            /**
             * @description The scope of the hook
             * @example CLUSTER
             */
            scope: string;
            /**
             * @description The type of hook to execute
             * @example ADD
             */
            type: string;
        };
        /** @example {
         *       "metricEndpoint": "http://localhost:9187/metrics"
         *     } */
        RegisterResourceMetricsConfigRequestBody: {
            /**
             * @description The local host endpoint to supply prometheus metric
             * @example http://localhost:9187/metrics
             */
            metricEndpoint: string;
        };
        /** @example {
         *       "productTierId": "pt-12345678"
         *     } */
        ReleaseInfraConfigRequestBody: {
            /**
             * @description The product tier ID
             * @example pt-12345678
             */
            productTierId?: string;
        };
        /** @example {
         *       "isPreferred": true,
         *       "productTierId": "pt-12345678",
         *       "versionSetName": "v1",
         *       "versionSetType": "Major|Incremental|UserDefined"
         *     } */
        ReleaseServiceAPIRequestBody: {
            /**
             * @description Indicates whether this version set is preferred.
             * @default false
             * @example true
             */
            isPreferred: boolean;
            /**
             * @description The product tier ID
             * @example pt-12345678
             */
            productTierId?: string;
            /**
             * @description The name of the version set to release
             * @example v1
             */
            versionSetName?: string;
            /**
             * @description The version-set type of the product-tier.
             * @example Major|Incremental|UserDefined
             */
            versionSetType?: string;
        };
        /** @example {
         *       "isPreferred": true,
         *       "name": "Major version set"
         *     } */
        ReleaseTierVersionSetRequestBody: {
            /**
             * @description Indicates whether this version set is preferred.
             * @example true
             */
            isPreferred?: boolean;
            /**
             * @description The name of the product-tier version set.
             * @example Major version set
             */
            name?: string;
        };
        /** @example {
         *       "capacityToBeRemoved": 3
         *     } */
        RemoveCapacityFromResourceInstanceRequestBody: {
            /**
             * Format: int64
             * @description Number of replicas to be removed
             * @example 3
             */
            capacityToBeRemoved: number;
        };
        /** @example {
         *       "health": "UP",
         *       "id": "s-12345678",
         *       "report": {
         *         "se-12345678": {
         *           "sm-12345678": {
         *             "vu-11111111": "UNKNOWN",
         *             "vu-12345678": "UP",
         *             "vu-87654321": "DOWN"
         *           }
         *         }
         *       }
         *     } */
        ReportHealthResult: {
            /**
             * @description The health of the service
             * @example UP
             */
            health?: string;
            /**
             * @description The ID of the service
             * @example s-12345678
             */
            id?: string;
            /**
             * @description The health of each environment under this service
             * @example {
             *       "se-12345678": {
             *         "sm-12345678": {
             *           "vu-11111111": "UNKNOWN",
             *           "vu-12345678": "UP",
             *           "vu-87654321": "DOWN"
             *         }
             *       }
             *     }
             */
            report?: {
                [key: string]: components["schemas"]["EnvironmentHealthReport"];
            };
        };
        /** @example {
         *       "email": "abc@gmail.com"
         *     } */
        ResetPasswordRequestBody: {
            /**
             * Format: email
             * @example abc@gmail.com
             */
            email: string;
        };
        /**
         * @description The capability of a resource
         * @example {
         *       "capability": "SERVERLESS",
         *       "configuration": {
         *         "EnableAutoStop": true,
         *         "MinimumNodesInPool": 5,
         *         "PortsMappingProxyConfig": {
         *           "MaxNumberOfClustersPerProxyInstance": 50,
         *           "NumberOfPortsPerCluster": 4
         *         },
         *         "ProxyId": "r-123456",
         *         "ReferenceProxyKey": "resource-proxy",
         *         "TargetPort": 5432
         *       }
         *     }
         */
        ResourceCapability: {
            /**
             * @description The type of capability of a resource
             * @example SERVERLESS
             */
            capability: string;
            /**
             * @description The configuration parameters of a capability of a resource
             * @example {
             *       "EnableAutoStop": true,
             *       "MinimumNodesInPool": 5,
             *       "PortsMappingProxyConfig": {
             *         "MaxNumberOfClustersPerProxyInstance": 50,
             *         "NumberOfPortsPerCluster": 4
             *       },
             *       "ProxyId": "r-123456",
             *       "ReferenceProxyKey": "resource-proxy",
             *       "TargetPort": 5432
             *     }
             */
            configuration: {
                [key: string]: unknown;
            };
        };
        /**
         * @description Resource dependency relation specification
         * @example {
         *       "parameterMap": {
         *         "Distinctio nihil culpa quia architecto occaecati.": "Beatae reiciendis eveniet rerum voluptas deserunt adipisci.",
         *         "Quas aspernatur.": "Dolores sed consequatur illum corrupti corporis.",
         *         "Ut magnam dolorem hic ab.": "Voluptatem consectetur et aut sequi."
         *       },
         *       "resourceId": "Dolorum itaque perspiciatis iusto."
         *     }
         */
        ResourceDependency: {
            /**
             * @description A map of the source parameter to the resource dependency parameter
             * @example {
             *       "Deleniti consequuntur numquam corrupti.": "Delectus qui vitae et.",
             *       "Odit eum et earum pariatur ullam.": "Possimus fuga.",
             *       "Sed voluptatem.": "Adipisci aliquam neque."
             *     }
             */
            parameterMap?: {
                [key: string]: string;
            };
            /**
             * @description The ID of the resource
             * @example Nihil libero similique.
             */
            resourceId: string;
        };
        /** @example {
         *       "isAutoscalingEnabled": true,
         *       "isBackupEnabled": true,
         *       "isDeprecated": false,
         *       "name": "My Resource",
         *       "resourceId": "r-12345678",
         *       "resourceType": "Kustomize",
         *       "urlKey": "myResource"
         *     } */
        ResourceEntity: {
            /**
             * @description Whether the resource has autoscaling enabled
             * @example true
             */
            isAutoscalingEnabled?: boolean;
            /**
             * @description Whether the resource has backup enabled
             * @example true
             */
            isBackupEnabled: boolean;
            /**
             * @description Whether the service offering is deprecated
             * @default false
             * @example false
             */
            isDeprecated: boolean;
            /**
             * @description The resource name
             * @example My Resource
             */
            name: string;
            /**
             * @description The resource ID
             * @example r-12345678
             */
            resourceId: string;
            /**
             * @description The resource type
             * @example Kustomize
             */
            resourceType?: string;
            /**
             * @description The resource URL key
             * @example myResource
             */
            urlKey: string;
        };
        /** @example {
         *       "additionalEndpoints": {
         *         "admin": {
         *           "endpoint": "https://admin.instance-abcdefgh.region.aws.omnistrate.cloud",
         *           "networkingType": "PRIVATE",
         *           "openPorts": [
         *             30000
         *           ],
         *           "primary": false
         *         },
         *         "cluster": {
         *           "endpoint": "https://cluster.instance-abcdefgh.region.aws.omnistrate.cloud",
         *           "networkingType": "PUBLIC",
         *           "openPorts": [
         *             443
         *           ],
         *           "primary": true
         *         }
         *       },
         *       "allowedIPRanges": [
         *         "0.0.0.0/0"
         *       ],
         *       "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *       "clusterPorts": [
         *         443
         *       ],
         *       "customDNSEndpoint": {
         *         "dnsHost": "my-custom-dns.com",
         *         "name": "DNS to access the dashboard",
         *         "status": "READY"
         *       },
         *       "hasCompute": true,
         *       "main": true,
         *       "networkingType": "PUBLIC",
         *       "nodes": [
         *         {
         *           "availabilityZone": "us-east-2a",
         *           "detailedHealth": {
         *             "ConnectivityStatus": "UNHEALTHY",
         *             "DiskHealth": "UNKNOWN",
         *             "LoadStatus": "LOAD_NORMAL",
         *             "NodeHealth": "HEALTHY",
         *             "ProcessHealth": "HEALTHY",
         *             "ProcessLiveness": "HEALTHY"
         *           },
         *           "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *           "healthStatus": "HEALTHY",
         *           "id": "primary-0",
         *           "kubernetesDashboardEndpoint": {
         *             "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
         *             "deploymentCellID": "hc-12345678"
         *           },
         *           "ports": [
         *             80,
         *             443
         *           ],
         *           "status": "RUNNING",
         *           "storageSize": 10,
         *           "vmInfo": {
         *             "architecture": "amd64",
         *             "azCode": "us-east-1a",
         *             "azID": "use1-az1",
         *             "externalIP": "3.44.113.6",
         *             "instanceType": "t2.small",
         *             "internalIP": "192.168.1.4",
         *             "k8sNodeName": "my-k8s-node",
         *             "kernelVersion": "5.10.228",
         *             "kubeletVersion": "1.31.3",
         *             "os": "linux",
         *             "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
         *           }
         *         },
         *         {
         *           "availabilityZone": "us-east-2a",
         *           "detailedHealth": {
         *             "ConnectivityStatus": "UNHEALTHY",
         *             "DiskHealth": "UNKNOWN",
         *             "LoadStatus": "LOAD_NORMAL",
         *             "NodeHealth": "HEALTHY",
         *             "ProcessHealth": "HEALTHY",
         *             "ProcessLiveness": "HEALTHY"
         *           },
         *           "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *           "healthStatus": "HEALTHY",
         *           "id": "primary-0",
         *           "kubernetesDashboardEndpoint": {
         *             "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
         *             "deploymentCellID": "hc-12345678"
         *           },
         *           "ports": [
         *             80,
         *             443
         *           ],
         *           "status": "RUNNING",
         *           "storageSize": 10,
         *           "vmInfo": {
         *             "architecture": "amd64",
         *             "azCode": "us-east-1a",
         *             "azID": "use1-az1",
         *             "externalIP": "3.44.113.6",
         *             "instanceType": "t2.small",
         *             "internalIP": "192.168.1.4",
         *             "k8sNodeName": "my-k8s-node",
         *             "kernelVersion": "5.10.228",
         *             "kubeletVersion": "1.31.3",
         *             "os": "linux",
         *             "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
         *           }
         *         },
         *         {
         *           "availabilityZone": "us-east-2a",
         *           "detailedHealth": {
         *             "ConnectivityStatus": "UNHEALTHY",
         *             "DiskHealth": "UNKNOWN",
         *             "LoadStatus": "LOAD_NORMAL",
         *             "NodeHealth": "HEALTHY",
         *             "ProcessHealth": "HEALTHY",
         *             "ProcessLiveness": "HEALTHY"
         *           },
         *           "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *           "healthStatus": "HEALTHY",
         *           "id": "primary-0",
         *           "kubernetesDashboardEndpoint": {
         *             "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
         *             "deploymentCellID": "hc-12345678"
         *           },
         *           "ports": [
         *             80,
         *             443
         *           ],
         *           "status": "RUNNING",
         *           "storageSize": 10,
         *           "vmInfo": {
         *             "architecture": "amd64",
         *             "azCode": "us-east-1a",
         *             "azID": "use1-az1",
         *             "externalIP": "3.44.113.6",
         *             "instanceType": "t2.small",
         *             "internalIP": "192.168.1.4",
         *             "k8sNodeName": "my-k8s-node",
         *             "kernelVersion": "5.10.228",
         *             "kubeletVersion": "1.31.3",
         *             "os": "linux",
         *             "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
         *           }
         *         }
         *       ],
         *       "privateNetworkCIDR": "10.0.0.2/24",
         *       "privateNetworkID": "n-1234abcd",
         *       "proxyEndpoint": {
         *         "openPorts": [
         *           "30000",
         *           "30001"
         *         ],
         *         "proxyEndpoint": "https://r-1234.instance-abcdefgh.region.aws.omnistrate.cloud"
         *       },
         *       "publiclyAccessible": true,
         *       "recentDeploymentFailure": {
         *         "failedAt": "2021-09-01T00:00:00Z",
         *         "failureReason": "Failed to connect to the database"
         *       },
         *       "resourceInstanceMetadata": {
         *         "KustomizeGeneratedTemplates": "template"
         *       },
         *       "resourceKey": "primary",
         *       "resourceName": "Primary MySQL DB Node",
         *       "resourceType": "Kustomize"
         *     } */
        ResourceNetworkTopologyResult: {
            /**
             * @description The additional endpoints for this resource
             * @example {
             *       "admin": {
             *         "endpoint": "https://admin.instance-abcdefgh.region.aws.omnistrate.cloud",
             *         "networkingType": "PRIVATE",
             *         "openPorts": [
             *           30000
             *         ],
             *         "primary": false
             *       },
             *       "cluster": {
             *         "endpoint": "https://cluster.instance-abcdefgh.region.aws.omnistrate.cloud",
             *         "networkingType": "PUBLIC",
             *         "openPorts": [
             *           443
             *         ],
             *         "primary": true
             *       }
             *     }
             */
            additionalEndpoints?: {
                [key: string]: components["schemas"]["ClusterEndpoint"];
            };
            /**
             * @description The allowed IP ranges for this resource
             * @example [
             *       "0.0.0.0/0"
             *     ]
             */
            allowedIPRanges: string[];
            /**
             * @description The primary cluster endpoint that load-balances across replicas of this resource
             * @example primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud
             */
            clusterEndpoint: string;
            /**
             * @description The ports that the whole cluster exposes
             * @example [
             *       443
             *     ]
             */
            clusterPorts?: number[];
            customDNSEndpoint?: components["schemas"]["CustomDNSEndpoint"];
            /**
             * @description Whether this resource has associated compute
             * @example true
             */
            hasCompute: boolean;
            /**
             * @description Whether this is the main resource
             * @example true
             */
            main: boolean;
            /**
             * @description The networking type for this resource
             * @example PUBLIC
             */
            networkingType: string;
            /**
             * @description The nodes that this resource is deployed on
             * @example [
             *       {
             *         "availabilityZone": "us-east-2a",
             *         "detailedHealth": {
             *           "ConnectivityStatus": "UNHEALTHY",
             *           "DiskHealth": "UNKNOWN",
             *           "LoadStatus": "LOAD_NORMAL",
             *           "NodeHealth": "HEALTHY",
             *           "ProcessHealth": "HEALTHY",
             *           "ProcessLiveness": "HEALTHY"
             *         },
             *         "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *         "healthStatus": "HEALTHY",
             *         "id": "primary-0",
             *         "kubernetesDashboardEndpoint": {
             *           "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
             *           "deploymentCellID": "hc-12345678"
             *         },
             *         "ports": [
             *           80,
             *           443
             *         ],
             *         "status": "RUNNING",
             *         "storageSize": 10,
             *         "vmInfo": {
             *           "architecture": "amd64",
             *           "azCode": "us-east-1a",
             *           "azID": "use1-az1",
             *           "externalIP": "3.44.113.6",
             *           "instanceType": "t2.small",
             *           "internalIP": "192.168.1.4",
             *           "k8sNodeName": "my-k8s-node",
             *           "kernelVersion": "5.10.228",
             *           "kubeletVersion": "1.31.3",
             *           "os": "linux",
             *           "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
             *         }
             *       },
             *       {
             *         "availabilityZone": "us-east-2a",
             *         "detailedHealth": {
             *           "ConnectivityStatus": "UNHEALTHY",
             *           "DiskHealth": "UNKNOWN",
             *           "LoadStatus": "LOAD_NORMAL",
             *           "NodeHealth": "HEALTHY",
             *           "ProcessHealth": "HEALTHY",
             *           "ProcessLiveness": "HEALTHY"
             *         },
             *         "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *         "healthStatus": "HEALTHY",
             *         "id": "primary-0",
             *         "kubernetesDashboardEndpoint": {
             *           "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
             *           "deploymentCellID": "hc-12345678"
             *         },
             *         "ports": [
             *           80,
             *           443
             *         ],
             *         "status": "RUNNING",
             *         "storageSize": 10,
             *         "vmInfo": {
             *           "architecture": "amd64",
             *           "azCode": "us-east-1a",
             *           "azID": "use1-az1",
             *           "externalIP": "3.44.113.6",
             *           "instanceType": "t2.small",
             *           "internalIP": "192.168.1.4",
             *           "k8sNodeName": "my-k8s-node",
             *           "kernelVersion": "5.10.228",
             *           "kubeletVersion": "1.31.3",
             *           "os": "linux",
             *           "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
             *         }
             *       },
             *       {
             *         "availabilityZone": "us-east-2a",
             *         "detailedHealth": {
             *           "ConnectivityStatus": "UNHEALTHY",
             *           "DiskHealth": "UNKNOWN",
             *           "LoadStatus": "LOAD_NORMAL",
             *           "NodeHealth": "HEALTHY",
             *           "ProcessHealth": "HEALTHY",
             *           "ProcessLiveness": "HEALTHY"
             *         },
             *         "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *         "healthStatus": "HEALTHY",
             *         "id": "primary-0",
             *         "kubernetesDashboardEndpoint": {
             *           "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
             *           "deploymentCellID": "hc-12345678"
             *         },
             *         "ports": [
             *           80,
             *           443
             *         ],
             *         "status": "RUNNING",
             *         "storageSize": 10,
             *         "vmInfo": {
             *           "architecture": "amd64",
             *           "azCode": "us-east-1a",
             *           "azID": "use1-az1",
             *           "externalIP": "3.44.113.6",
             *           "instanceType": "t2.small",
             *           "internalIP": "192.168.1.4",
             *           "k8sNodeName": "my-k8s-node",
             *           "kernelVersion": "5.10.228",
             *           "kubeletVersion": "1.31.3",
             *           "os": "linux",
             *           "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
             *         }
             *       },
             *       {
             *         "availabilityZone": "us-east-2a",
             *         "detailedHealth": {
             *           "ConnectivityStatus": "UNHEALTHY",
             *           "DiskHealth": "UNKNOWN",
             *           "LoadStatus": "LOAD_NORMAL",
             *           "NodeHealth": "HEALTHY",
             *           "ProcessHealth": "HEALTHY",
             *           "ProcessLiveness": "HEALTHY"
             *         },
             *         "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *         "healthStatus": "HEALTHY",
             *         "id": "primary-0",
             *         "kubernetesDashboardEndpoint": {
             *           "dashboardEndpoint": "https://kubernetes-dashboard.hc-12345678.region.cloudprovider.f2e0a955bb84.cloud/#/pod/instance-abcdefgh/primary-0?namespace=instance-abcdefgh",
             *           "deploymentCellID": "hc-12345678"
             *         },
             *         "ports": [
             *           80,
             *           443
             *         ],
             *         "status": "RUNNING",
             *         "storageSize": 10,
             *         "vmInfo": {
             *           "architecture": "amd64",
             *           "azCode": "us-east-1a",
             *           "azID": "use1-az1",
             *           "externalIP": "3.44.113.6",
             *           "instanceType": "t2.small",
             *           "internalIP": "192.168.1.4",
             *           "k8sNodeName": "my-k8s-node",
             *           "kernelVersion": "5.10.228",
             *           "kubeletVersion": "1.31.3",
             *           "os": "linux",
             *           "providerID": "aws:///ap-south-1b/i-06h696g4a643ahf01"
             *         }
             *       }
             *     ]
             */
            nodes?: components["schemas"]["NodeNetworkTopologyResult"][];
            /**
             * @description The private network CIDR for this resource
             * @example 10.0.0.2/24
             */
            privateNetworkCIDR?: string;
            /**
             * @description The private network ID for this resource
             * @example n-1234abcd
             */
            privateNetworkID?: string;
            proxyEndpoint?: components["schemas"]["ProxyEndpoint"];
            /**
             * @description Whether this resource is publicly accessible
             * @example true
             */
            publiclyAccessible: boolean;
            recentDeploymentFailure?: components["schemas"]["RecentDeploymentFailureStatus"];
            /**
             * @description The resource instance metadata
             * @example {
             *       "KustomizeGeneratedTemplates": "template"
             *     }
             */
            resourceInstanceMetadata?: unknown;
            /**
             * @description The key of the resource
             * @example primary
             */
            resourceKey: string;
            /**
             * @description The name of the resource
             * @example Primary MySQL DB Node
             */
            resourceName: string;
            /**
             * @description The type of the resource
             * @example Kustomize
             */
            resourceType?: string;
        };
        /**
         * @description Resource requirements
         * @example {
         *       "limits": {
         *         "cpu": "1",
         *         "memory": "500Mi"
         *       },
         *       "requests": {
         *         "cpu": "0.5",
         *         "memory": "200Mi"
         *       }
         *     }
         */
        ResourceSpec: {
            /**
             * @description The maximum amount of CPU and memory that the container can use
             * @example {
             *       "cpu": "1",
             *       "memory": "500Mi"
             *     }
             */
            limits?: {
                /**
                 * @description The maximum amount of CPU that the container can use
                 * @example 1
                 */
                cpu?: string;
                /**
                 * @description The maximum amount of memory that the container can use
                 * @example 500Mi
                 */
                memory?: string;
            };
            /**
             * @description The amount of CPU and memory that Kubernetes will guarantee for the container
             * @example {
             *       "cpu": "0.5",
             *       "memory": "200Mi"
             *     }
             */
            requests?: {
                /**
                 * @description The amount of CPU that Kubernetes will guarantee for the container
                 * @example 0.5
                 */
                cpu?: string;
                /**
                 * @description The amount of memory that Kubernetes will guarantee for the container
                 * @example 200Mi
                 */
                memory?: string;
            };
        };
        /** @example {
         *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *       "id": "r-12345678",
         *       "imageConfigId": "imgc-12345678",
         *       "infraConfigId": "ic-12345678",
         *       "isExternal": true,
         *       "managedResourceType": "PortsBasedProxy",
         *       "name": "MySQL multi-writer service"
         *     } */
        ResourceSummary: {
            /**
             * @description A brief description of the resource
             * @example A MySQL SaaS specializing in multi-writer clusters for high availability
             */
            description: string;
            /**
             * @description The ID of the resource
             * @example r-12345678
             */
            id: string;
            /**
             * @description The ID of the image configuration that this resource refers to
             * @example imgc-12345678
             */
            imageConfigId?: string;
            /**
             * @description The ID of the infrastructure configuration that this resource refers to
             * @example ic-12345678
             */
            infraConfigId?: string;
            /**
             * @description Whether the resource is external
             * @example true
             */
            isExternal: boolean;
            /**
             * @description The managed resource type of instance
             * @example PortsBasedProxy
             */
            managedResourceType?: string;
            /**
             * @description The name of the resource
             * @example MySQL multi-writer service
             */
            name: string;
        };
        /** @example {
         *       "network_type": "PUBLIC"
         *     } */
        RestoreResourceInstanceFromSnapshotRequestBody: {
            /**
             * @description The network type
             * @example PUBLIC
             */
            network_type?: string;
        };
        /** @example {
         *       "network_type": "PUBLIC",
         *       "targetRestoreTime": "2021-09-01T00:00:00Z"
         *     } */
        RestoreResourceInstanceRequestBody: {
            /**
             * @description The network type
             * @example PUBLIC
             */
            network_type?: string;
            /**
             * @description The target restore time
             * @example 2021-09-01T00:00:00Z
             */
            targetRestoreTime: string;
        };
        /** @example {
         *       "awsAccountID": "123456789012"
         *     } */
        Route53Configuration: {
            /**
             * @description The AWS account hosting the the hosted zone for the domain
             * @example 123456789012
             */
            awsAccountID: string;
        };
        /** @example {
         *       "awsAccountID": "123456789012",
         *       "awsCloudFormationTemplateURL": "https://s3.amazonaws.com/my-bucket/my-template.json"
         *     } */
        Route53ConfigurationDescription: {
            /**
             * @description The AWS account hosting the the hosted zone for the domain
             * @example 123456789012
             */
            awsAccountID: string;
            /**
             * @description The URL to the CloudFormation template
             * @example https://s3.amazonaws.com/my-bucket/my-template.json
             */
            awsCloudFormationTemplateURL: string;
        };
        /** @example {
         *       "customDomain": "mycustomdomain.com",
         *       "customDomainStatus": "READY",
         *       "detailedNetworkTopology": {
         *         "r-abcd1234": {
         *           "allowedIPRanges": [
         *             "0.0.0.0/0"
         *           ],
         *           "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *           "clusterPorts": [
         *             3306
         *           ],
         *           "main": true,
         *           "networkingType": "PUBLIC",
         *           "nodes": [
         *             {
         *               "availabilityZone": "us-east-2a",
         *               "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
         *               "healthStatus": "healthy",
         *               "id": "primary-0",
         *               "ports": [
         *                 3306
         *               ],
         *               "status": "RUNNING"
         *             }
         *           ],
         *           "privateNetworkCIDR": "10.0.0.2/24",
         *           "privateNetworkID": "n-1234abcd",
         *           "publiclyAccessible": true,
         *           "resourceKey": "saasportal",
         *           "resourceName": "SaaS Portal"
         *         }
         *       },
         *       "emailConfig": {
         *         "smtpFromEmail": "example@gmail.com",
         *         "smtpHost": "smtp.gmail.com",
         *         "smtpPassword": "password",
         *         "smtpPort": 587,
         *         "smtpUsername": "username"
         *       },
         *       "endpoint": "https://saas-portal.example.com",
         *       "environmentType": "DEV",
         *       "googleAnalyticsTagID": "G-123456789",
         *       "imageConfig": {
         *         "imageName": "myimage",
         *         "imageRegistry": "ghcr.io",
         *         "imageTag": "latest"
         *       },
         *       "status": "READY"
         *     } */
        SaaSPortal: {
            /**
             * @description The custom domain of the SaaS portal
             * @example mycustomdomain.com
             */
            customDomain?: string;
            /**
             * @description The custom domain status of the SaaS portal
             * @example READY
             */
            customDomainStatus?: string;
            /**
             * @description The detailed network topology of the SaaS portal
             * @example {
             *       "r-abcd1234": {
             *         "allowedIPRanges": [
             *           "0.0.0.0/0"
             *         ],
             *         "clusterEndpoint": "primary.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *         "clusterPorts": [
             *           3306
             *         ],
             *         "main": true,
             *         "networkingType": "PUBLIC",
             *         "nodes": [
             *           {
             *             "availabilityZone": "us-east-2a",
             *             "endpoint": "primary-0.instance-abcd1234.us-east-2.aws.omnistrate.cloud",
             *             "healthStatus": "healthy",
             *             "id": "primary-0",
             *             "ports": [
             *               3306
             *             ],
             *             "status": "RUNNING"
             *           }
             *         ],
             *         "privateNetworkCIDR": "10.0.0.2/24",
             *         "privateNetworkID": "n-1234abcd",
             *         "publiclyAccessible": true,
             *         "resourceKey": "saasportal",
             *         "resourceName": "SaaS Portal"
             *       }
             *     }
             */
            detailedNetworkTopology?: {
                [key: string]: components["schemas"]["ResourceNetworkTopologyResult"];
            };
            emailConfig?: components["schemas"]["SaaSPortalEmailConfig"];
            /**
             * @description The endpoint of the SaaS portal for this environment type
             * @example https://saas-portal.example.com
             */
            endpoint?: string;
            /**
             * @description The environment type for the SaaS portal
             * @example DEV
             */
            environmentType: string;
            /**
             * @description The Google Analytics tag ID for the SaaS portal
             * @example G-123456789
             */
            googleAnalyticsTagID?: string;
            imageConfig?: components["schemas"]["SaaSPortalImageConfig"];
            /**
             * @description The status of the SaaS portal for this environment type
             * @example READY
             */
            status: string;
        };
        /** @example {
         *       "smtpFromEmail": "example@gmail.com",
         *       "smtpHost": "smtp.gmail.com",
         *       "smtpPassword": "password",
         *       "smtpPort": 587,
         *       "smtpUsername": "username"
         *     } */
        SaaSPortalEmailConfig: {
            /**
             * @description The SMTP from email
             * @example example@gmail.com
             */
            smtpFromEmail: string;
            /**
             * @description The SMTP host
             * @example smtp.gmail.com
             */
            smtpHost: string;
            /**
             * @description The SMTP password
             * @example password
             */
            smtpPassword: string;
            /**
             * Format: int64
             * @description The SMTP port
             * @example 587
             */
            smtpPort?: number;
            /**
             * @description The SMTP username
             * @example username
             */
            smtpUsername: string;
        };
        /** @example {
         *       "imageName": "myimage",
         *       "imageRegistry": "ghcr.io",
         *       "imageTag": "latest"
         *     } */
        SaaSPortalImageConfig: {
            /**
             * @description The image name for the SaaS portal
             * @example myimage
             */
            imageName: string;
            /**
             * @description The image registry for the SaaS portal
             * @example ghcr.io
             */
            imageRegistry: string;
            /**
             * @description The image tag for the SaaS portal
             * @example latest
             */
            imageTag: string;
        };
        /** @example {
         *       "helmPackage": {
         *         "chartName": "my-chart",
         *         "chartRepoName": "my-repo",
         *         "chartRepoUrl": "https://my-repo.com",
         *         "chartValues": {
         *           "key1": "value1",
         *           "key2": 3,
         *           "key3": {
         *             "key4": "value4"
         *           }
         *         },
         *         "chartVersion": "1.0.0",
         *         "namespace": "default",
         *         "password": "my-password",
         *         "username": "my-user"
         *       }
         *     } */
        SaveHelmPackageRequestBody: {
            helmPackage: components["schemas"]["HelmPackage"];
        };
        /** @example {
         *       "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
         *       "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
         *     } */
        ServiceAssets: {
            /**
             * @description The URL for CloudFormation onboarding
             * @example https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa
             */
            cloudFormationURL?: string;
            /**
             * @description The URL for CloudFormation onboarding without LoadBalancer policy
             * @example https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false
             */
            cloudFormationURLNoLB?: string;
        };
        /** @example {
         *       "dependsOnDeployment": [
         *         "instanceDeploymentAlias1",
         *         "instanceDeploymentAlias2"
         *       ],
         *       "instanceDeploymentAlias": "instanceDeploymentAlias",
         *       "instanceId": "i-12345678",
         *       "serviceId": "s-12345678",
         *       "status": "PENDING",
         *       "statusMessage": "Creating deployment",
         *       "subscriptionId": "Et quod libero impedit aspernatur possimus."
         *     } */
        ServiceDeploymentDetails: {
            /**
             * @description The deployment keys that this deployment depends on
             * @example [
             *       "instanceDeploymentAlias1",
             *       "instanceDeploymentAlias2"
             *     ]
             */
            dependsOnDeployment?: string[];
            /**
             * @description The instance deployment alias
             * @example instanceDeploymentAlias
             */
            instanceDeploymentAlias: string;
            /**
             * @description The instance ID
             * @example i-12345678
             */
            instanceId?: string;
            /**
             * @description The service ID
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The status of the service deployment
             * @example PENDING
             */
            status?: string;
            /**
             * @description The status message of the service deployment
             * @example Creating deployment
             */
            statusMessage?: string;
            /**
             * @description The instance subscription ID
             * @example Veniam incidunt molestiae suscipit nostrum.
             */
            subscriptionId: string;
        };
        /** @example {
         *       "id": "se-12345678",
         *       "name": "dev",
         *       "promoteStatus": "IN_SYNC|OUT_OF_SYNC|UNKNOWN",
         *       "saasPortalStatus": "READY",
         *       "saasPortalUrl": "https://saas-portal.example.com",
         *       "servicePlans": [
         *         {
         *           "description": "A Basic product tier",
         *           "modelType": "CUSTOMER_HOSTED",
         *           "name": "Basic",
         *           "productTierID": "pt-12345678",
         *           "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *         },
         *         {
         *           "description": "A Basic product tier",
         *           "modelType": "CUSTOMER_HOSTED",
         *           "name": "Basic",
         *           "productTierID": "pt-12345678",
         *           "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *         },
         *         {
         *           "description": "A Basic product tier",
         *           "modelType": "CUSTOMER_HOSTED",
         *           "name": "Basic",
         *           "productTierID": "pt-12345678",
         *           "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *         },
         *         {
         *           "description": "A Basic product tier",
         *           "modelType": "CUSTOMER_HOSTED",
         *           "name": "Basic",
         *           "productTierID": "pt-12345678",
         *           "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *         }
         *       ],
         *       "sourceEnvironmentID": "se-12345678",
         *       "sourceEnvironmentName": "dev",
         *       "type": "DEV",
         *       "visibility": "private"
         *     } */
        ServiceEnvironment: {
            /**
             * @description Service environment ID
             * @example se-12345678
             */
            id: string;
            /**
             * @description Name of the Service Environment
             * @example dev
             */
            name: string;
            /**
             * @description The status of the promotion
             * @example IN_SYNC|OUT_OF_SYNC|UNKNOWN
             */
            promoteStatus?: string;
            /**
             * @description The status of the SaaS portal for this environment type
             * @example READY
             */
            saasPortalStatus?: string;
            /**
             * @description The URL of the SaaS portal for this environment type
             * @example https://saas-portal.example.com
             */
            saasPortalUrl?: string;
            /**
             * @description List of service plans
             * @example [
             *       {
             *         "description": "A Basic product tier",
             *         "modelType": "CUSTOMER_HOSTED",
             *         "name": "Basic",
             *         "productTierID": "pt-12345678",
             *         "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *       },
             *       {
             *         "description": "A Basic product tier",
             *         "modelType": "CUSTOMER_HOSTED",
             *         "name": "Basic",
             *         "productTierID": "pt-12345678",
             *         "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *       },
             *       {
             *         "description": "A Basic product tier",
             *         "modelType": "CUSTOMER_HOSTED",
             *         "name": "Basic",
             *         "productTierID": "pt-12345678",
             *         "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *       },
             *       {
             *         "description": "A Basic product tier",
             *         "modelType": "CUSTOMER_HOSTED",
             *         "name": "Basic",
             *         "productTierID": "pt-12345678",
             *         "tierType": "OMNISTRATE_DEDICATED_TENANCY"
             *       }
             *     ]
             */
            servicePlans: components["schemas"]["ServicePlan"][];
            /**
             * @description The source environment ID
             * @example se-12345678
             */
            sourceEnvironmentID?: string;
            /**
             * @description The source environment name
             * @example dev
             */
            sourceEnvironmentName?: string;
            /** @example DEV */
            type?: string;
            /**
             * @description Visibility of the service environment
             * @example private
             */
            visibility: string;
        };
        /** @example {
         *       "configuration": {
         *         "Ipsa ab officia aliquam voluptas.": "Est quae perspiciatis quae nihil nam.",
         *         "Placeat suscipit.": "Eum aperiam sunt reiciendis."
         *       },
         *       "feature": "Repellendus architecto quis."
         *     } */
        ServiceModelFeatureDetail: {
            /** @example {
             *       "Ad doloremque officia.": "Sint eos voluptatibus tempora voluptatum.",
             *       "Eum vel.": "Enim sit ea dignissimos unde sapiente.",
             *       "Maxime adipisci quae deleniti et.": "Vitae fuga soluta explicabo."
             *     } */
            configuration: {
                [key: string]: unknown;
            };
            /** @example Quo officiis molestiae. */
            feature: string;
        };
        /** @example {
         *       "AutoApproveSubscription": false,
         *       "assets": {
         *         "cloudFormationURL": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa",
         *         "cloudFormationURLNoLB": "https://us-east-1.console.aws.amazon.com/cloudformation/home?region=us-east-1#/stacks/quickcreate?templateURL=https://s3.amazonaws.com/omnistrate-cloudformation-dev/org-EUVvex3bVm/account-config-setup-template.yaml&stackName=AccountConfigSetup&param_AccountConfigIdentityId=org-EUVvex3bVm&param_OIDCIssuerURLWithoutPrefix=oidc.eks.us-east-2.amazonaws.com/id/C339DC3726AD36506FB7ABE55754784F&param_OIDCIssuerThumbprintList=9e99a48a9960b14926bb7f3b02e22da2b0ab7280&param_ServiceAccount=bootstrap-sa&param_CreateLoadBalancerPolicy=false"
         *       },
         *       "awsRegions": [
         *         "us-east-2",
         *         "ca-central-1"
         *       ],
         *       "billingPlans": [
         *         {
         *           "maxNumberofInstances": 5
         *         },
         *         {
         *           "maxNumberofInstances": 5
         *         },
         *         {
         *           "maxNumberofInstances": 5
         *         }
         *       ],
         *       "cloudProviders": [
         *         "AWS",
         *         "GCP",
         *         "Azure"
         *       ],
         *       "gcpRegions": [
         *         "us-central1"
         *       ],
         *       "productTierDescription": "A premium product tier",
         *       "productTierDocumentation": "Any documentation",
         *       "productTierID": "pt-12345678",
         *       "productTierName": "Premium",
         *       "productTierPlanDescription": "A premium plan",
         *       "productTierPricing": {
         *         "price1": "value1"
         *       },
         *       "productTierSupport": "Any support",
         *       "productTierType": "OMNISTRATE_DEDICATED_TENANCY",
         *       "productTierURLKey": "premium",
         *       "productTierVersion": "1.0.0",
         *       "resourceParameters": [
         *         {
         *           "name": "MySQL",
         *           "resourceId": "r-12345678",
         *           "urlKey": "mysql"
         *         },
         *         {
         *           "name": "Redis",
         *           "resourceId": "r-abcdefgh",
         *           "urlKey": "redis"
         *         }
         *       ],
         *       "serviceAPIID": "sa-12345678",
         *       "serviceAPIVersion": "v1",
         *       "serviceEnvironmentID": "se-12345678",
         *       "serviceEnvironmentName": "Development",
         *       "serviceEnvironmentType": "DEV",
         *       "serviceEnvironmentURLKey": "dev",
         *       "serviceEnvironmentVisibility": "PRIVATE",
         *       "serviceLogoURL": "Velit odio nulla et placeat tempora sed.",
         *       "serviceModelFeatures": [
         *         {
         *           "configuration": {
         *             "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *             "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *           },
         *           "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *         },
         *         {
         *           "configuration": {
         *             "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *             "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *           },
         *           "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *         },
         *         {
         *           "configuration": {
         *             "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *             "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *           },
         *           "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *         },
         *         {
         *           "configuration": {
         *             "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
         *             "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
         *           },
         *           "feature": "Eum temporibus voluptate inventore est consectetur omnis."
         *         }
         *       ],
         *       "serviceModelID": "sm-12345678",
         *       "serviceModelName": "Hosted",
         *       "serviceModelStatus": "Ready",
         *       "serviceModelType": "CUSTOMER_HOSTED, OMNISTRATE_HOSTED, BYOA",
         *       "serviceModelURLKey": "hosted",
         *       "supportsPublicNetwork": false
         *     } */
        ServiceOffering: {
            /**
             * @description Auto approve subscription or not
             * @example false
             */
            AutoApproveSubscription: boolean;
            assets?: components["schemas"]["ServiceAssets"];
            /**
             * @description The AWS regions that this service offering is available on
             * @example [
             *       "us-east-2",
             *       "ca-central-1"
             *     ]
             */
            awsRegions?: string[];
            /**
             * @description List of billing plans for this product tier.
             * @example [
             *       {
             *         "maxNumberofInstances": 5
             *       },
             *       {
             *         "maxNumberofInstances": 5
             *       }
             *     ]
             */
            billingPlans?: components["schemas"]["OfferingBillingPlan"][];
            /**
             * @description List of supported cloud providers for this product tier.
             * @example [
             *       "AWS",
             *       "GCP",
             *       "Azure"
             *     ]
             */
            cloudProviders?: string[];
            /**
             * @description The GCP regions that this service offering is available on
             * @example [
             *       "us-central1"
             *     ]
             */
            gcpRegions?: string[];
            /**
             * @description A brief description of the product tier
             * @example A premium product tier
             */
            productTierDescription?: string;
            /**
             * @description Documentation
             * @example Any documentation
             */
            productTierDocumentation: string;
            /**
             * @description The service product ID
             * @example pt-12345678
             */
            productTierID: string;
            /**
             * @description The product tier name
             * @example Premium
             */
            productTierName: string;
            /**
             * @description A brief description for the end user of the product tier
             * @example A premium plan
             */
            productTierPlanDescription?: string;
            /**
             * @description Pricing
             * @example {
             *       "price1": "value1"
             *     }
             */
            productTierPricing: unknown;
            /**
             * @description Support
             * @example Any support
             */
            productTierSupport: string;
            /**
             * @description Tier type
             * @example OMNISTRATE_DEDICATED_TENANCY
             */
            productTierType: string;
            /**
             * @description The product tier URL key
             * @example premium
             */
            productTierURLKey: string;
            /**
             * @description The product tier version
             * @example 1.0.0
             */
            productTierVersion: string;
            /**
             * @description The resource parameters
             * @example [
             *       {
             *         "name": "MySQL",
             *         "resourceId": "r-12345678",
             *         "urlKey": "mysql"
             *       },
             *       {
             *         "name": "Redis",
             *         "resourceId": "r-abcdefgh",
             *         "urlKey": "redis"
             *       }
             *     ]
             */
            resourceParameters: components["schemas"]["ResourceEntity"][];
            /**
             * @description The service API ID
             * @example sa-12345678
             */
            serviceAPIID: string;
            /**
             * @description The service API version
             * @example v1
             */
            serviceAPIVersion: string;
            /**
             * @description The service Environment ID
             * @example se-12345678
             */
            serviceEnvironmentID: string;
            /**
             * @description The service environment name
             * @example Development
             */
            serviceEnvironmentName: string;
            /**
             * @description The service environment type
             * @example DEV
             */
            serviceEnvironmentType: string;
            /**
             * @description The service environment URL key
             * @example dev
             */
            serviceEnvironmentURLKey: string;
            /**
             * @description The service environment visibility
             * @example PRIVATE
             */
            serviceEnvironmentVisibility: string;
            /**
             * @description The logo for the service
             * @example Amet neque aperiam.
             */
            serviceLogoURL: string;
            /**
             * @description Enabled service model features
             * @example [
             *       {
             *         "configuration": {
             *           "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *           "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *         },
             *         "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *       },
             *       {
             *         "configuration": {
             *           "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *           "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *         },
             *         "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *       },
             *       {
             *         "configuration": {
             *           "Sint voluptate dolor iusto sed distinctio inventore.": "Laborum incidunt corrupti.",
             *           "Voluptas pariatur.": "Laboriosam eligendi omnis voluptatem ut minima."
             *         },
             *         "feature": "Eum temporibus voluptate inventore est consectetur omnis."
             *       }
             *     ]
             */
            serviceModelFeatures?: components["schemas"]["ServiceModelFeatureDetail"][];
            /**
             * @description The service Model ID
             * @example sm-12345678
             */
            serviceModelID: string;
            /**
             * @description The service model name
             * @example Hosted
             */
            serviceModelName: string;
            /**
             * @description The service model status
             * @example Ready
             */
            serviceModelStatus: string;
            /**
             * @description The type of the service model. CUSTOMER_HOSTED is a service model that is hosted in the customer account and managed by Omnistrate. OMNISTRATE_HOSTED is a service model that is managed by Omnistrate platform. BYOA is a service model that is hosted in the service provider's account and managed by Omnistrate.
             * @example CUSTOMER_HOSTED, OMNISTRATE_HOSTED, BYOA
             */
            serviceModelType: string;
            /**
             * @description The service model URL key
             * @example hosted
             */
            serviceModelURLKey: string;
            /**
             * @description Indicates whether any of the resources in the product tier support public network
             * @example false
             */
            supportsPublicNetwork?: boolean;
        };
        /** @example {
         *       "description": "A Basic product tier",
         *       "modelType": "CUSTOMER_HOSTED",
         *       "name": "Basic",
         *       "productTierID": "pt-12345678",
         *       "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *     } */
        ServicePlan: {
            /**
             * @description Description of the Product Tier
             * @example A Basic product tier
             */
            description: string;
            /**
             * @description The model type encapsulating this service
             * @example CUSTOMER_HOSTED
             */
            modelType: string;
            /**
             * @description Name of the Product Tier
             * @example Basic
             */
            name: string;
            /**
             * @description Product tier ID
             * @example pt-12345678
             */
            productTierID: string;
            /**
             * @description Product tier type
             * @example OMNISTRATE_DEDICATED_TENANCY
             */
            tierType: string;
        };
        /** @example {
         *       "environmentVariables": [
         *         {
         *           "key": "MYSQL_ROOT_PASSWORD",
         *           "value": "password"
         *         }
         *       ]
         *     } */
        SetEnvironmentVariablesRequestBody: {
            /**
             * @description The environment variables that this resource requires
             * @example [
             *       {
             *         "key": "MYSQL_ROOT_PASSWORD",
             *         "value": "password"
             *       }
             *     ]
             */
            environmentVariables?: components["schemas"]["EnvironmentVariable"][];
        };
        /** @example {
         *       "email": "abc@gmail.com",
         *       "hashedPassword": "deprecated",
         *       "password": "password"
         *     } */
        SigninRequestBody: {
            /**
             * Format: email
             * @example abc@gmail.com
             */
            email: string;
            /** @example deprecated */
            hashedPassword?: string;
            /** @example password */
            password?: string;
        };
        /** @example {
         *       "jwtToken": ""
         *     } */
        SigninResult: {
            /**
             * @description The jwt token
             * @example
             */
            jwtToken: string;
        };
        /** @example {
         *       "companyDescription": "We sell xyz database software",
         *       "companyUrl": "https://www.mywebsite.com",
         *       "email": "abc@gmail.com",
         *       "legalCompanyName": "mywebsite",
         *       "name": "John Doe",
         *       "password": "password"
         *     } */
        SignupRequestBody: {
            /** @example We sell xyz database software */
            companyDescription?: string;
            /** @example https://www.mywebsite.com */
            companyUrl?: string;
            /**
             * Format: email
             * @example abc@gmail.com
             */
            email: string;
            /**
             * @default
             * @example mywebsite
             */
            legalCompanyName: string;
            /** @example John Doe */
            name: string;
            /** @example password */
            password: string;
        };
        /** @example {
         *       "email": "abc@gmail.com",
         *       "name": "John Dae",
         *       "roleType": "reader",
         *       "subscriptionId": "sub-abcd1234",
         *       "userId": "user-abcd1234"
         *     } */
        SubscriptionUsers: {
            /**
             * @description The email of the user
             * @example abc@gmail.com
             */
            email: string;
            /**
             * @description The name of the user
             * @example John Dae
             */
            name: string;
            /** @example reader */
            roleType: string;
            /**
             * @description The subscription ID
             * @example sub-abcd1234
             */
            subscriptionId: string;
            /**
             * @description The User ID
             * @example user-abcd1234
             */
            userId: string;
        };
        /** @example {
         *       "gitConfiguration": {
         *         "accessToken": "my-token",
         *         "referenceName": "tags/v1.0.0",
         *         "repositoryUrl": "https://github.com/username/myrepo",
         *         "userName": "my-user"
         *       },
         *       "privateModuleGitAccessTokens": {
         *         "tokenName": "accessToken"
         *       },
         *       "requiredOutputKeys": [
         *         "output1"
         *       ],
         *       "requiredOutputs": [
         *         {
         *           "exported": true,
         *           "key": "output1"
         *         }
         *       ],
         *       "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *       "terraformPath": "/project1/tf"
         *     } */
        TerraformConfiguration: {
            gitConfiguration?: components["schemas"]["GitConfiguration"];
            /**
             * @description The git access tokens for private modules
             * @example {
             *       "tokenName": "accessToken"
             *     }
             */
            privateModuleGitAccessTokens?: {
                [key: string]: string;
            };
            /**
             * @description The required output keys to export
             * @example [
             *       "output1"
             *     ]
             */
            requiredOutputKeys?: string[];
            /**
             * @description The required output keys to export
             * @example [
             *       {
             *         "exported": true,
             *         "key": "output1"
             *       }
             *     ]
             */
            requiredOutputs?: components["schemas"]["TerraformOutput"][];
            /**
             * @description The identity to use for terraform execution
             * @example arn:aws:iam::123456789012:role/role-name
             */
            terraformExecutionIdentity?: string;
            /**
             * @description The path to the terraform files directory
             * @example /project1/tf
             */
            terraformPath: string;
        };
        /** @example {
         *       "exported": true,
         *       "key": "output1"
         *     } */
        TerraformOutput: {
            /**
             * @description Whether the output is exported
             * @example true
             */
            exported: boolean;
            /**
             * @description The key of the output
             * @example output1
             */
            key: string;
        };
        /**
         * @description Details about the product-tier version set.
         * @example {
         *       "autoApproveSubscription": false,
         *       "baseVersion": "3.0",
         *       "createdAt": "2020-01-01T00:00:00Z",
         *       "createdBy": "John Doe",
         *       "description": "Autem non qui.",
         *       "enabledFeatures": [
         *         {
         *           "configuration": {
         *             "provider": "native"
         *           },
         *           "feature": "LOGS",
         *           "scope": "INTERNAL"
         *         },
         *         {
         *           "configuration": {
         *             "provider": "native"
         *           },
         *           "feature": "LOGS",
         *           "scope": "INTERNAL"
         *         }
         *       ],
         *       "features": {
         *         "BILLING": false,
         *         "LOGS": true,
         *         "METRICS": false
         *       },
         *       "instanceCount": 12,
         *       "latestUpgradePathId": "upgrade-12345678",
         *       "name": "Regular version set",
         *       "parentVersion": "2.0",
         *       "productTierId": "A consectetur.",
         *       "releasedAt": "2020-01-01T00:00:00Z",
         *       "releasedBy": "John Doe",
         *       "resources": [
         *         {
         *           "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *           "id": "r-12345678",
         *           "imageConfigId": "imgc-12345678",
         *           "infraConfigId": "ic-12345678",
         *           "isExternal": true,
         *           "managedResourceType": "PortsBasedProxy",
         *           "name": "MySQL multi-writer service"
         *         },
         *         {
         *           "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *           "id": "r-12345678",
         *           "imageConfigId": "imgc-12345678",
         *           "infraConfigId": "ic-12345678",
         *           "isExternal": true,
         *           "managedResourceType": "PortsBasedProxy",
         *           "name": "MySQL multi-writer service"
         *         },
         *         {
         *           "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *           "id": "r-12345678",
         *           "imageConfigId": "imgc-12345678",
         *           "infraConfigId": "ic-12345678",
         *           "isExternal": true,
         *           "managedResourceType": "PortsBasedProxy",
         *           "name": "MySQL multi-writer service"
         *         },
         *         {
         *           "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *           "id": "r-12345678",
         *           "imageConfigId": "imgc-12345678",
         *           "infraConfigId": "ic-12345678",
         *           "isExternal": true,
         *           "managedResourceType": "PortsBasedProxy",
         *           "name": "MySQL multi-writer service"
         *         }
         *       ],
         *       "serviceId": "s-12345678",
         *       "serviceModelId": "Voluptatibus quod fuga sapiente doloremque deleniti.",
         *       "status": "Preferred|Active|Deprecated|Pending",
         *       "type": "Major|Incremental|UserDefined",
         *       "updatedAt": "2020-01-01T00:00:00Z",
         *       "version": "3.0"
         *     }
         */
        TierVersionSet: {
            /**
             * @description Auto approve subscription or not
             * @example false
             */
            autoApproveSubscription?: boolean;
            /**
             * @description The base version of the version set.
             * @example 3.0
             */
            baseVersion: string;
            /**
             * @description The timestamp when the version set was created.
             * @example 2020-01-01T00:00:00Z
             */
            createdAt: string;
            /**
             * @description The name of the user who created the version set.
             * @example John Doe
             */
            createdBy?: string;
            /**
             * @description A brief description of the product-tier version set.
             * @example Doloremque omnis.
             */
            description?: string;
            /**
             * @description The features that are enabled for this product tier, including scope details and configuration
             * @example [
             *       {
             *         "configuration": {
             *           "provider": "native"
             *         },
             *         "feature": "LOGS",
             *         "scope": "INTERNAL"
             *       },
             *       {
             *         "configuration": {
             *           "provider": "native"
             *         },
             *         "feature": "LOGS",
             *         "scope": "INTERNAL"
             *       },
             *       {
             *         "configuration": {
             *           "provider": "native"
             *         },
             *         "feature": "LOGS",
             *         "scope": "INTERNAL"
             *       },
             *       {
             *         "configuration": {
             *           "provider": "native"
             *         },
             *         "feature": "LOGS",
             *         "scope": "INTERNAL"
             *       }
             *     ]
             */
            enabledFeatures: components["schemas"]["ProductTierFeatureDetail"][];
            /**
             * @description The features that are enabled / disabled for this product tier
             * @example {
             *       "BILLING": false,
             *       "LOGS": true,
             *       "METRICS": false
             *     }
             */
            features: {
                [key: string]: boolean;
            };
            /**
             * Format: int64
             * @description The number of instances that are currently running this version set.
             * @example 12
             */
            instanceCount?: number;
            /**
             * @description The ID of the latest upgrade path away from the tier-version set.
             * @example upgrade-12345678
             */
            latestUpgradePathId?: string;
            /**
             * @description The name of the product-tier version set.
             * @example Regular version set
             */
            name?: string;
            /**
             * @description The parent version of this release.
             * @example 2.0
             */
            parentVersion?: string;
            /**
             * @description The product tier ID that this version set belongs to.
             * @example Voluptas optio reprehenderit deserunt voluptatem.
             */
            productTierId: string;
            /**
             * @description The timestamp when the version set was released.
             * @example 2020-01-01T00:00:00Z
             */
            releasedAt: string;
            /**
             * @description The name of the user who released the version set.
             * @example John Doe
             */
            releasedBy?: string;
            /**
             * @description List of resources that are part of this version set.
             * @example [
             *       {
             *         "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *         "id": "r-12345678",
             *         "imageConfigId": "imgc-12345678",
             *         "infraConfigId": "ic-12345678",
             *         "isExternal": true,
             *         "managedResourceType": "PortsBasedProxy",
             *         "name": "MySQL multi-writer service"
             *       },
             *       {
             *         "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
             *         "id": "r-12345678",
             *         "imageConfigId": "imgc-12345678",
             *         "infraConfigId": "ic-12345678",
             *         "isExternal": true,
             *         "managedResourceType": "PortsBasedProxy",
             *         "name": "MySQL multi-writer service"
             *       }
             *     ]
             */
            resources?: components["schemas"]["ResourceSummary"][];
            /**
             * @description ID of the Service
             * @example s-12345678
             */
            serviceId: string;
            /**
             * @description The service model ID that this version set belongs to.
             * @example Saepe ut.
             */
            serviceModelId: string;
            /**
             * @description The tier version set status.
             * @example Preferred|Active|Deprecated|Pending
             */
            status: string;
            /**
             * @description The version-set type of the product-tier.
             * @example Major|Incremental|UserDefined
             */
            type: string;
            /**
             * @description The timestamp when the version set was updated.
             * @example 2020-01-01T00:00:00Z
             */
            updatedAt: string;
            /**
             * @description The version number for the specific version set.
             * @example 3.0
             */
            version: string;
        };
        /** @example {
         *       "autoscalingPolicy": {
         *         "maxReplicas": 4,
         *         "minReplicas": 1
         *       },
         *       "cpuArchitecture": "X86_64|ARM64",
         *       "description": "my compute config description",
         *       "name": "my compute config",
         *       "replicaCount": "3",
         *       "resources": {
         *         "limits": {
         *           "cpu": "1",
         *           "memory": "500Mi"
         *         },
         *         "requests": {
         *           "cpu": "0.5",
         *           "memory": "200Mi"
         *         }
         *       },
         *       "rootVolumeSizeGi": 10,
         *       "warmPoolConfiguration": {
         *         "minimumNodesInPool": 1
         *       }
         *     } */
        UpdateComputeConfigRequestBody: {
            autoscalingPolicy?: components["schemas"]["AutoscalingPolicy"];
            /**
             * @description Processor architecture
             * @example X86_64|ARM64
             */
            cpuArchitecture?: string;
            /**
             * @description Description of the compute config
             * @example my compute config description
             */
            description?: string;
            /**
             * @description Name of the compute config
             * @example my compute config
             */
            name?: string;
            /**
             * @description Number of replicas to provision for this logical pool of nodes per instance of the resource
             * @example 3
             */
            replicaCount?: string;
            resources?: components["schemas"]["ResourceSpec"];
            /**
             * Format: int64
             * @description Size of the root volume in Gi
             * @example 10
             */
            rootVolumeSizeGi?: number;
            warmPoolConfiguration?: components["schemas"]["WarmPoolConfiguration"];
        };
        /** @example {
         *       "name": "Dev us-east-1"
         *     } */
        UpdateCustomNetworkRequestBody: {
            /**
             * @description User friendly network name to help distinguish networks with same CIDRs
             * @example Dev us-east-1
             */
            name?: string;
        };
        /** @example {
         *       "description": "A production deployment config",
         *       "infraRollConfiguration": {
         *         "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
         *         "maximumNumberOfResourceInstancesPerBatch": 1,
         *         "maximumUnavailableReplicas": 1
         *       },
         *       "name": "Production",
         *       "rolloutPriorityList": [
         *         "region-12345678",
         *         "region-abcd1234",
         *         "region-3c3c3c3c"
         *       ]
         *     } */
        UpdateDeploymentConfigRequestBody: {
            /**
             * @description A brief description of the deployment config
             * @example A production deployment config
             */
            description?: string;
            infraRollConfiguration?: components["schemas"]["InfraRollConfiguration"];
            /**
             * @description Name of the deployment config
             * @example Production
             */
            name?: string;
            /** @example [
             *       "region-12345678",
             *       "region-abcd1234",
             *       "region-3c3c3c3c"
             *     ] */
            rolloutPriorityList?: string[];
        };
        /** @example {
         *       "description": "A file to store the configuration for the resource",
         *       "mountPath": "/etc/config",
         *       "name": "file.txt"
         *     } */
        UpdateFileMetadataRequestBody: {
            /**
             * @description The description of the file
             * @example A file to store the configuration for the resource
             */
            description?: string;
            /**
             * @description The mount path of the file
             * @example /etc/config
             */
            mountPath?: string;
            /**
             * @description The name of the file
             * @example file.txt
             */
            name?: string;
        };
        /** @example {
         *       "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
         *       "clientSecret": "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"
         *     } */
        UpdateIdentityProviderRequestBody: {
            /**
             * @description The Client ID of the Identity Provider
             * @example 205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com
             */
            clientId?: string;
            /**
             * @description The Client Secret of the Identity Provider
             * @example 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
             */
            clientSecret?: string;
        };
        /** @example {
         *       "customImageCommandsAndArgs": {
         *         "args": [
         *           "-d",
         *           "mysql"
         *         ],
         *         "commands": [
         *           "echo",
         *           "Hello, World!"
         *         ]
         *       },
         *       "description": "An image configuration for my new entity",
         *       "imageName": "mysql",
         *       "imageRegistryId": "ir-12345678",
         *       "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
         *       "imageTag": "v1"
         *     } */
        UpdateImageConfigRequestBody: {
            customImageCommandsAndArgs?: components["schemas"]["CustomImageCommandsAndArgs"];
            /**
             * @description A brief description of the image configuration
             * @example An image configuration for my new entity
             */
            description?: string;
            /**
             * @description Name of the container image
             * @example mysql
             */
            imageName?: string;
            /**
             * @description The image registry ID to use for the infra
             * @example ir-12345678
             */
            imageRegistryId?: string;
            /**
             * @description PEM-encoded Public key part of the key used to sign the container image
             * @example -----BEGIN PUBLIC KEY-----
             *     MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT
             *     7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==
             *     -----END PUBLIC KEY-----
             *
             */
            imageSignaturePublicKeyPEM?: string;
            /**
             * @description Tag representing the software image version that is currently preferred
             * @example v1
             */
            imageTag?: string;
        };
        /** @example {
         *       "description": "DockerHub is a public Docker Image Registry",
         *       "host": "docker.io",
         *       "name": "DockerHub",
         *       "password": "mypassword",
         *       "username": "myusername"
         *     } */
        UpdateImageRegistryRequestBody: {
            /**
             * @description A brief description of the Image Registry
             * @example DockerHub is a public Docker Image Registry
             */
            description?: string;
            /**
             * @description The Image Registry host
             * @example docker.io
             */
            host?: string;
            /**
             * @description Name of the Image Registry
             * @example DockerHub
             */
            name?: string;
            /**
             * @description The password to use when authenticating to the Image Registry
             * @example mypassword
             */
            password?: string;
            /**
             * @description The username to use when authenticating to the Image Registry
             * @example myusername
             */
            username?: string;
        };
        /** @example {
         *       "computeConfigId": "cc-12345678",
         *       "customTag": {
         *         "key": "customKey",
         *         "value": "customValue"
         *       },
         *       "description": "Infra config used for the base tier MySQL service",
         *       "name": "MySQL Writer Infra Config",
         *       "networkConfigId": "nc-12345678",
         *       "storageConfigId": "sc-12345678"
         *     } */
        UpdateInfraConfigRequestBody: {
            /**
             * @description The compute config ID
             * @example cc-12345678
             */
            computeConfigId?: string;
            customTag?: components["schemas"]["EnvironmentVariable"];
            /**
             * @description The description for the infra config
             * @example Infra config used for the base tier MySQL service
             */
            description?: string;
            /**
             * @description The name of the infra config
             * @example MySQL Writer Infra Config
             */
            name?: string;
            /**
             * @description The network config ID
             * @example nc-12345678
             */
            networkConfigId?: string;
            /**
             * @description The storage config ID per compute node
             * @example sc-12345678
             */
            storageConfigId?: string;
        };
        /** @example {
         *       "defaultValue": "[\"1\", \"2.8\", \"3\"]",
         *       "description": "Tempore officia dolorum dolorem molestiae quia aut.",
         *       "hasOptions": false,
         *       "labeledOptions": {
         *         "large": "t3.xlarge",
         *         "medium": "t3.large",
         *         "small": "t3.medium"
         *       },
         *       "limits": {
         *         "max": "Sit explicabo delectus aut nisi consequuntur.",
         *         "maxLength": "Sunt amet provident.",
         *         "min": "Cumque temporibus dolores vitae dolores doloremque illum.",
         *         "minLength": "Qui odio laudantium illum."
         *       },
         *       "modifiable": false,
         *       "name": "ux",
         *       "options": [
         *         "[\"1\", \"2.8\", \"3\"]",
         *         "[\"3.4\", \"4.5\"]"
         *       ],
         *       "required": false
         *     } */
        UpdateInputParameterRequestBody: {
            /**
             * @description Default value to use for an optional input parameter represented as a string
             * @example ["1", "2.8", "3"]
             */
            defaultValue?: string;
            /**
             * @description A brief description of the input parameter
             * @example Quos qui numquam sit.
             */
            description?: string;
            /**
             * @description Marks the input parameter to be selectable from a list of values
             * @example true
             */
            hasOptions?: boolean;
            /**
             * @description A map for labeled options. The key is the label and the value is the option. When the option is selected, the label will be displayed to the end customer. Specify either options or labeledOptions when defining the input parameter.
             * @example {
             *       "large": "t3.xlarge",
             *       "medium": "t3.large",
             *       "small": "t3.medium"
             *     }
             */
            labeledOptions?: {
                [key: string]: string;
            };
            limits?: components["schemas"]["Limits"];
            /**
             * @description Marks the input parameter as immutable
             * @example false
             */
            modifiable?: boolean;
            /**
             * @description External name for the input parameter
             * @example mn4
             */
            name?: string;
            /**
             * @description A list of options to restrict the value of the input parameter to (represented as a string)
             * @example [
             *       "[\"1\", \"2.8\", \"3\"]",
             *       "[\"3.4\", \"4.5\"]"
             *     ]
             */
            options?: string[];
            /**
             * @description Enforces the input parameter as a required parameter
             * @example true
             */
            required?: boolean;
        };
        /** @example {
         *       "instanceStorageIops": "7500",
         *       "instanceStorageThroughputMiBps": "128",
         *       "instanceStorageType": "AWS::EBS_GP2"
         *     } */
        UpdateInstanceStorageVolumeConfigRequestBody: {
            /**
             * @description The IOPS provisioned for the configured instance storage type
             * @example 7500
             */
            instanceStorageIops?: string;
            /**
             * @description The throughput (in MiBps) provisioned for the configured instance storage type
             * @example 128
             */
            instanceStorageThroughputMiBps?: string;
            /**
             * @description The type of the storage for a compute instance
             * @example AWS::EBS_GP2
             */
            instanceStorageType?: string;
        };
        /** @example {
         *       "description": "A premium limit",
         *       "name": "Premium Tier",
         *       "value": 4
         *     } */
        UpdateLimitRequestBody: {
            /**
             * @description A brief description of the limit
             * @example A premium limit
             */
            description?: string;
            /**
             * @description Name of the limit
             * @example Premium Tier
             */
            name?: string;
            /**
             * Format: int64
             * @description Value of the limit being enforced
             * @example 4
             */
            value: number;
        };
        /** @example {
         *       "description": "A multi-zone HA network config",
         *       "endpointPerReplica": true,
         *       "internal": true,
         *       "name": "Multi-zone",
         *       "openPorts": [
         *         1299,
         *         3306
         *       ],
         *       "privateNetworkingConfiguration": {
         *         "privateLinkConfiguration": {
         *           "awsPrivateLinkConfigurations": [
         *             {
         *               "port": 80,
         *               "targetGroupName": "my-target-group"
         *             },
         *             {
         *               "port": 80,
         *               "targetGroupName": "my-target-group"
         *             },
         *             {
         *               "port": 80,
         *               "targetGroupName": "my-target-group"
         *             },
         *             {
         *               "port": 80,
         *               "targetGroupName": "my-target-group"
         *             }
         *           ]
         *         }
         *       },
         *       "publicNetworkingConfiguration": {
         *         "enableClusterLoadBalancer": true,
         *         "enableNodeLoadBalancer": true
         *       },
         *       "stableEgressIP": true,
         *       "tlsTerminationPort": 443,
         *       "zoneConfiguration": "Rerum voluptatem."
         *     } */
        UpdateNetworkConfigRequestBody: {
            /**
             * @description A brief description of the network config
             * @example A multi-zone HA network config
             */
            description?: string;
            /**
             * @description Generates a DNS endpoint per-replica for this network config
             * @example true
             */
            endpointPerReplica?: boolean;
            /**
             * @description Restrict access to this network config to the internal network
             * @example true
             */
            internal?: boolean;
            /**
             * @description Name of the network config
             * @example Multi-zone
             */
            name?: string;
            /**
             * @description Ports to map to the generated DNS endpoint
             * @example [
             *       1299,
             *       3306
             *     ]
             */
            openPorts?: number[];
            privateNetworkingConfiguration?: components["schemas"]["PrivateNetworkingConfiguration"];
            publicNetworkingConfiguration?: components["schemas"]["PublicNetworkingConfiguration"];
            /**
             * @description Create an external node load balancer per node rather than expose the node ip directly
             * @example true
             */
            stableEgressIP?: boolean;
            /**
             * Format: int64
             * @description The port that hosts the reverse proxy for TLS termination
             * @example 443
             */
            tlsTerminationPort?: number;
            /**
             * @description The preferred type of zonal availability for this resource and the specific zone(s) to deploy in
             * @example Quo voluptatem.
             */
            zoneConfiguration?: string;
        };
        /** @example {
         *       "description": "Username of the user created in the target system",
         *       "name": "Username",
         *       "value": "johndoe",
         *       "valueRef": "$var.username",
         *       "valueType": "Nam et quibusdam non."
         *     } */
        UpdateOutputParameterRequestBody: {
            /**
             * @description Description of the output variable being exported
             * @example Username of the user created in the target system
             */
            description?: string;
            /**
             * @description External name of the output variable being exported
             * @example Username
             */
            name?: string;
            /**
             * @description Value of the output variable being exported
             * @example johndoe
             */
            value?: string;
            /**
             * @description Reference to an input variable that will be used to set the value of the output variable being exported
             * @example $var.username
             */
            valueRef?: string;
            /** @example Sint quae quo quae quidem. */
            valueType?: string;
        };
        /** @example {
         *       "currentPassword": "currentPassword",
         *       "currentPasswordHash": "currentPasswordHash",
         *       "password": "password"
         *     } */
        UpdatePasswordRequestBody: {
            /** @example currentPassword */
            currentPassword?: string;
            /** @example currentPasswordHash */
            currentPasswordHash?: string;
            /** @example password */
            password: string;
        };
        /** @example {
         *       "allowCreatesWhenPaymentNotConfigured": true,
         *       "maxNumberofInstances": 5,
         *       "planName": "STARTER",
         *       "pricing": {
         *         "cpuCoreHours": "0.001",
         *         "memoryGBHours": "0.0001"
         *       }
         *     } */
        UpdateProductTierBillingPlanRequestBody: {
            /**
             * @description Allow creates when payment not configured
             * @example true
             */
            allowCreatesWhenPaymentNotConfigured?: boolean;
            /**
             * Format: int64
             * @description Maximum number of instances
             * @example 5
             */
            maxNumberofInstances?: number;
            /**
             * @description Plan name
             * @example STARTER
             */
            planName?: string;
            /**
             * @description Pricing in dollars.
             * @example {
             *       "cpuCoreHours": "0.001",
             *       "memoryGBHours": "0.0001"
             *     }
             */
            pricing?: unknown;
        };
        /** @example {
         *       "autoApproveSubscription": false,
         *       "awsRegions": [
         *         "us-east-2",
         *         "ca-central-1"
         *       ],
         *       "description": "A premium product tier",
         *       "documentation": "Any documentation",
         *       "gcpRegions": [
         *         "us-central1"
         *       ],
         *       "isDisabled": false,
         *       "name": "Premium",
         *       "planDescription": "A premium plan",
         *       "pricing": {
         *         "price1": "value1"
         *       },
         *       "support": "Any support",
         *       "tierType": "OMNISTRATE_DEDICATED_TENANCY"
         *     } */
        UpdateProductTierRequestBody: {
            /**
             * @description Auto approve subscription or not
             * @example false
             */
            autoApproveSubscription?: boolean;
            /**
             * @description The AWS regions that this product tier is available on
             * @example [
             *       "us-east-2",
             *       "ca-central-1"
             *     ]
             */
            awsRegions?: string[];
            /**
             * @description A brief description of the product tier
             * @example A premium product tier
             */
            description?: string;
            /**
             * @description Documentation
             * @example Any documentation
             */
            documentation?: string;
            /**
             * @description The GCP regions that this product tier is available on
             * @example [
             *       "us-central1"
             *     ]
             */
            gcpRegions?: string[];
            /**
             * @description Update the product tier's state as enabled/disabled. Enabling the product tier will let end-customers subscribe and use the service plan.
             * @example false
             */
            isDisabled?: boolean;
            /**
             * @description Name of the product tier
             * @example Premium
             */
            name?: string;
            /**
             * @description A brief description for the end user of the product tier
             * @example A premium plan
             */
            planDescription?: string;
            /**
             * @description Pricing
             * @example {
             *       "price1": "value1"
             *     }
             */
            pricing?: unknown;
            /**
             * @description Support
             * @example Any support
             */
            support?: string;
            /**
             * @description Tier type
             * @example OMNISTRATE_DEDICATED_TENANCY
             */
            tierType?: string;
        };
        /** @example {
         *       "requestParams": {
         *         "param1": "value1",
         *         "param2": "value2"
         *       }
         *     } */
        UpdateResourceInstanceRequestBody: {
            /**
             * @description The request parameters
             * @example {
             *       "param1": "value1",
             *       "param2": "value2"
             *     }
             */
            requestParams?: unknown;
        };
        /** @example {
         *       "additionalSecurityContext": {
         *         "AddCapabilities": [
         *           "CAP_NET_ADMIN",
         *           "CAP_NET_RAW"
         *         ],
         *         "DropCapabilities": [
         *           "CAP_NET_ADMIN",
         *           "CAP_NET_RAW"
         *         ],
         *         "SupplementalGroupIDs": [
         *           1001,
         *           999
         *         ]
         *       },
         *       "backupConfiguration": {
         *         "backupPeriodInHours": 24,
         *         "backupRetentionInDays": 7
         *       },
         *       "customLabels": {
         *         "key": "value"
         *       },
         *       "customSysCTLs": {
         *         "net.ipv4.tcp_syncookies": "1"
         *       },
         *       "customULimits": [
         *         {
         *           "ULimitsName": "NoProc",
         *           "ULimitsType": "Soft",
         *           "ULimitsValue": 1000
         *         },
         *         {
         *           "ULimitsName": "NoFile",
         *           "ULimitsType": "Hard",
         *           "ULimitsValue": 2048
         *         }
         *       ],
         *       "dependencies": [
         *         {
         *           "parameterMap": {
         *             "clusterId": "writerId",
         *             "clusterOrg": "userDatabase"
         *           },
         *           "resourceId": "r-12345678"
         *         },
         *         {
         *           "parameterMap": {
         *             "clusterId": "readerId",
         *             "clusterOrg": "userDatabase"
         *           },
         *           "resourceId": "r-abcdef12"
         *         }
         *       ],
         *       "description": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
         *       "environmentVariables": [
         *         {
         *           "key": "MYSQL_ROOT_PASSWORD",
         *           "value": "password"
         *         }
         *       ],
         *       "helmChartConfiguration": {
         *         "chartName": "my-chart",
         *         "chartRepoName": "my-repo",
         *         "chartRepoUrl": "https://my-repo.com",
         *         "chartValues": {
         *           "key1": "value1",
         *           "key2": 3,
         *           "key3": {
         *             "key4": "value4"
         *           }
         *         },
         *         "chartVersion": "1.0.0",
         *         "endpointConfiguration": {
         *           "admin": {
         *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *             "networkingType": "PRIVATE",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": false
         *           },
         *           "cluster": {
         *             "host": "https://my-endpoint.com",
         *             "networkingType": "PUBLIC",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": true
         *           }
         *         },
         *         "password": "my-password",
         *         "runtimeConfiguration": {
         *           "disableHooks": true,
         *           "recreate": true,
         *           "resetThenReuseValues": true,
         *           "resetValues": true,
         *           "reuseValues": true,
         *           "skipCRDs": true,
         *           "timeoutNanos": 1000000000,
         *           "upgradeCRDs": true,
         *           "wait": true,
         *           "waitForJobs": true
         *         },
         *         "username": "my-user"
         *       },
         *       "imageConfigId": "imgc-12345678",
         *       "infraConfigId": "ic-12345678",
         *       "kustomizeConfiguration": {
         *         "endpointConfiguration": {
         *           "admin": {
         *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *             "networkingType": "PRIVATE",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": false
         *           },
         *           "cluster": {
         *             "host": "https://my-endpoint.com",
         *             "networkingType": "PUBLIC",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": true
         *           }
         *         },
         *         "gitConfiguration": {
         *           "accessToken": "my-token",
         *           "referenceName": "tags/v1.0.0",
         *           "repositoryUrl": "https://github.com/username/myrepo",
         *           "userName": "my-user"
         *         },
         *         "helmChartDependencies": [
         *           {
         *             "chartName": "cert-manager",
         *             "chartVersion": "v1.5.3"
         *           },
         *           {
         *             "chartName": "nginx-ingress",
         *             "chartVersion": "v0.48.1"
         *           },
         *           {
         *             "chartName": "external-dns",
         *             "chartVersion": "v0.7.0"
         *           },
         *           {
         *             "chartName": "cnpg-operator",
         *             "chartVersion": "v0.23.1"
         *           }
         *         ],
         *         "kustomizePath": "/kustomize"
         *       },
         *       "l4LoadBalancerConfiguration": {
         *         "ingressPortConfiguration": [
         *           {
         *             "associatedResourceIDs": [
         *               "r-12345678",
         *               "r-abcdef12"
         *             ],
         *             "backendPort": 8080,
         *             "ingressPort": 1234
         *           },
         *           {
         *             "associatedResourceIDs": [
         *               "r-12345678",
         *               "r-abcdef12"
         *             ],
         *             "backendPort": 8081,
         *             "ingressPort": 5678
         *           },
         *           {
         *             "associatedResourceIDs": [
         *               "r-vwxybz12",
         *               "r-poij122v"
         *             ],
         *             "backendPort": 8082,
         *             "ingressPort": 9012
         *           }
         *         ]
         *       },
         *       "l7LoadBalancerConfiguration": {
         *         "paths": [
         *           {
         *             "associatedResourceID": "r-12345678",
         *             "path": "/path",
         *             "port": 8080
         *           }
         *         ]
         *       },
         *       "name": "Galera",
         *       "operatorCRDConfiguration": {
         *         "endpointConfiguration": {
         *           "admin": {
         *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
         *             "networkingType": "PRIVATE",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": false
         *           },
         *           "cluster": {
         *             "host": "https://my-endpoint.com",
         *             "networkingType": "PUBLIC",
         *             "ports": [
         *               8080,
         *               8081
         *             ],
         *             "primary": true
         *           }
         *         },
         *         "helmChartDependencies": [
         *           {
         *             "chartName": "cert-manager",
         *             "chartVersion": "v1.5.3"
         *           },
         *           {
         *             "chartName": "nginx-ingress",
         *             "chartVersion": "v0.48.1"
         *           },
         *           {
         *             "chartName": "external-dns",
         *             "chartVersion": "v0.7.0"
         *           },
         *           {
         *             "chartName": "cnpg-operator",
         *             "chartVersion": "v0.23.1"
         *           }
         *         ],
         *         "outputParameters": {
         *           "expiresAt": "$out.status.notAfter",
         *           "issuerName": "letsencrypt-prod"
         *         },
         *         "readinessConditions": {
         *           "$out.status.conditions[?(@.type=='Ready')].status": true
         *         },
         *         "supplementalFiles": [
         *           "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
         *           "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
         *         ],
         *         "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
         *       },
         *       "terraformConfigurations": {
         *         "Dolorem et nostrum quia.": {
         *           "gitConfiguration": {
         *             "accessToken": "my-token",
         *             "referenceName": "tags/v1.0.0",
         *             "repositoryUrl": "https://github.com/username/myrepo",
         *             "userName": "my-user"
         *           },
         *           "privateModuleGitAccessTokens": {
         *             "tokenName": "accessToken"
         *           },
         *           "requiredOutputKeys": [
         *             "output1"
         *           ],
         *           "requiredOutputs": [
         *             {
         *               "exported": true,
         *               "key": "output1"
         *             }
         *           ],
         *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *           "terraformPath": "/project1/tf"
         *         },
         *         "Est quae autem ducimus non voluptas.": {
         *           "gitConfiguration": {
         *             "accessToken": "my-token",
         *             "referenceName": "tags/v1.0.0",
         *             "repositoryUrl": "https://github.com/username/myrepo",
         *             "userName": "my-user"
         *           },
         *           "privateModuleGitAccessTokens": {
         *             "tokenName": "accessToken"
         *           },
         *           "requiredOutputKeys": [
         *             "output1"
         *           ],
         *           "requiredOutputs": [
         *             {
         *               "exported": true,
         *               "key": "output1"
         *             }
         *           ],
         *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *           "terraformPath": "/project1/tf"
         *         },
         *         "Labore distinctio et cupiditate aspernatur consequatur ut.": {
         *           "gitConfiguration": {
         *             "accessToken": "my-token",
         *             "referenceName": "tags/v1.0.0",
         *             "repositoryUrl": "https://github.com/username/myrepo",
         *             "userName": "my-user"
         *           },
         *           "privateModuleGitAccessTokens": {
         *             "tokenName": "accessToken"
         *           },
         *           "requiredOutputKeys": [
         *             "output1"
         *           ],
         *           "requiredOutputs": [
         *             {
         *               "exported": true,
         *               "key": "output1"
         *             }
         *           ],
         *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
         *           "terraformPath": "/project1/tf"
         *         }
         *       }
         *     } */
        UpdateResourceRequestBody: {
            additionalSecurityContext?: components["schemas"]["AdditionalSecurityContext"];
            backupConfiguration?: components["schemas"]["BackupConfiguration"];
            /**
             * @description Custom labels for the resource
             * @example {
             *       "key": "value"
             *     }
             */
            customLabels?: {
                [key: string]: string;
            };
            /**
             * @description Custom sysctl settings for the resource
             * @example {
             *       "net.ipv4.tcp_syncookies": "1"
             *     }
             */
            customSysCTLs?: {
                [key: string]: string;
            };
            /**
             * @description Custom ulimits for the resource
             * @example [
             *       {
             *         "ULimitsName": "NoProc",
             *         "ULimitsType": "Soft",
             *         "ULimitsValue": 1000
             *       },
             *       {
             *         "ULimitsName": "NoFile",
             *         "ULimitsType": "Hard",
             *         "ULimitsValue": 2048
             *       }
             *     ]
             */
            customULimits?: components["schemas"]["CustomULimits"][];
            /** @example [
             *       {
             *         "parameterMap": {
             *           "clusterId": "writerId",
             *           "clusterOrg": "userDatabase"
             *         },
             *         "resourceId": "r-12345678"
             *       },
             *       {
             *         "parameterMap": {
             *           "clusterId": "readerId",
             *           "clusterOrg": "userDatabase"
             *         },
             *         "resourceId": "r-abcdef12"
             *       }
             *     ] */
            dependencies?: components["schemas"]["ResourceDependency"][];
            /**
             * @description A brief description of the resource
             * @example A resource to manage a hosted public SaaS offering of a multi-writer MySQL service
             */
            description?: string;
            /**
             * @description The environment variables that this resource requires
             * @example [
             *       {
             *         "key": "MYSQL_ROOT_PASSWORD",
             *         "value": "password"
             *       }
             *     ]
             */
            environmentVariables?: components["schemas"]["EnvironmentVariable"][];
            helmChartConfiguration?: components["schemas"]["HelmChartConfiguration"];
            /**
             * @description The ID of the image configuration that this resource refers to
             * @example imgc-12345678
             */
            imageConfigId?: string;
            /**
             * @description The ID of the infrastructure configuration that this resource refers to
             * @example ic-12345678
             */
            infraConfigId?: string;
            kustomizeConfiguration?: components["schemas"]["KustomizeConfiguration"];
            l4LoadBalancerConfiguration?: components["schemas"]["L4LoadBalancerConfiguration"];
            l7LoadBalancerConfiguration?: components["schemas"]["L7LoadBalancerConfiguration"];
            /**
             * @description Name of the resource
             * @example Galera
             */
            name?: string;
            operatorCRDConfiguration?: components["schemas"]["OperatorCRDConfiguration"];
            /**
             * @description The Terraform configurations for various cloud providers
             * @example {
             *       "Ratione adipisci ut eos porro fugiat enim.": {
             *         "gitConfiguration": {
             *           "accessToken": "my-token",
             *           "referenceName": "tags/v1.0.0",
             *           "repositoryUrl": "https://github.com/username/myrepo",
             *           "userName": "my-user"
             *         },
             *         "privateModuleGitAccessTokens": {
             *           "tokenName": "accessToken"
             *         },
             *         "requiredOutputKeys": [
             *           "output1"
             *         ],
             *         "requiredOutputs": [
             *           {
             *             "exported": true,
             *             "key": "output1"
             *           }
             *         ],
             *         "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *         "terraformPath": "/project1/tf"
             *       },
             *       "Repudiandae nobis optio voluptates.": {
             *         "gitConfiguration": {
             *           "accessToken": "my-token",
             *           "referenceName": "tags/v1.0.0",
             *           "repositoryUrl": "https://github.com/username/myrepo",
             *           "userName": "my-user"
             *         },
             *         "privateModuleGitAccessTokens": {
             *           "tokenName": "accessToken"
             *         },
             *         "requiredOutputKeys": [
             *           "output1"
             *         ],
             *         "requiredOutputs": [
             *           {
             *             "exported": true,
             *             "key": "output1"
             *           }
             *         ],
             *         "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *         "terraformPath": "/project1/tf"
             *       },
             *       "Voluptates omnis autem perferendis.": {
             *         "gitConfiguration": {
             *           "accessToken": "my-token",
             *           "referenceName": "tags/v1.0.0",
             *           "repositoryUrl": "https://github.com/username/myrepo",
             *           "userName": "my-user"
             *         },
             *         "privateModuleGitAccessTokens": {
             *           "tokenName": "accessToken"
             *         },
             *         "requiredOutputKeys": [
             *           "output1"
             *         ],
             *         "requiredOutputs": [
             *           {
             *             "exported": true,
             *             "key": "output1"
             *           }
             *         ],
             *         "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
             *         "terraformPath": "/project1/tf"
             *       }
             *     }
             */
            terraformConfigurations?: {
                [key: string]: components["schemas"]["TerraformConfiguration"];
            };
        };
        /** @example {
         *       "customDomain": "mycustomdomain.com",
         *       "description": "My custom domain description",
         *       "name": "MyCustomDomain"
         *     } */
        UpdateSaaSPortalCustomDomainRequestBody: {
            /**
             * @description The custom domain
             * @example mycustomdomain.com
             */
            customDomain?: string;
            /**
             * @description The custom domain description
             * @example My custom domain description
             */
            description?: string;
            /**
             * @description The custom domain name
             * @example MyCustomDomain
             */
            name?: string;
        };
        /** @example {
         *       "customDomain": "mycustomdomain.com",
         *       "emailConfig": {
         *         "smtpFromEmail": "example@gmail.com",
         *         "smtpHost": "smtp.gmail.com",
         *         "smtpPassword": "password",
         *         "smtpPort": 587,
         *         "smtpUsername": "username"
         *       },
         *       "googleAnalyticsTagID": "G-123456789",
         *       "imageConfig": {
         *         "imageName": "myimage",
         *         "imageRegistry": "ghcr.io",
         *         "imageTag": "latest"
         *       }
         *     } */
        UpdateSaaSPortalRequestBody: {
            /**
             * @description The custom domain for the SaaS portal
             * @example mycustomdomain.com
             */
            customDomain?: string;
            emailConfig?: components["schemas"]["SaaSPortalEmailConfig"];
            /**
             * @description The Google Analytics tag ID for the SaaS portal
             * @example G-123456789
             */
            googleAnalyticsTagID?: string;
            imageConfig?: components["schemas"]["SaaSPortalImageConfig"];
        };
        /** @example {
         *       "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability"
         *     } */
        UpdateServiceAPIRequestBody: {
            /**
             * @description A brief description of the service API bundle
             * @example A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability
             */
            description?: string;
        };
        /** @example {
         *       "autoApproveSubscription": false,
         *       "deploymentConfigId": "dc-12345678",
         *       "description": "The production environment for the MySQL multi-writer service",
         *       "name": "Production",
         *       "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
         *       "sourceEnvironmentId": "se-12345678",
         *       "visibility": "Consequatur ut dolorem doloribus et quo laborum."
         *     } */
        UpdateServiceEnvironmentRequestBody: {
            /**
             * @description Auto approve subscription or not
             * @example false
             */
            autoApproveSubscription?: boolean;
            /**
             * @description The deployment configuration ID
             * @example dc-12345678
             */
            deploymentConfigId?: string;
            /**
             * @description A brief description of the service environment
             * @example The production environment for the MySQL multi-writer service
             */
            description?: string;
            /**
             * @description Name of the Service Environment
             * @example Production
             */
            name?: string;
            /**
             * @description PEM-encoded Public key part of the key used to sign the JWT tokens for the service control plane APIs
             * @example -----BEGIN PUBLIC KEY-----
             *     MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT
             *     7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==
             *     -----END PUBLIC KEY-----
             *
             */
            serviceAuthPublicKey?: string;
            /**
             * @description The ID of the service environment to use for promoting changes to this environment
             * @example se-12345678
             */
            sourceEnvironmentId?: string;
            /**
             * @description This parameter is used to configure the visibility of the service control-plane APIs
             * @example Voluptas fuga.
             */
            visibility?: string;
        };
        /** @example {
         *       "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
         *       "name": "MySQL multi-writer service hosted model"
         *     } */
        UpdateServiceModelRequestBody: {
            /**
             * @description A brief description of the service model
             * @example A MySQL Hosted SaaS specializing in multi-writer clusters for high availability
             */
            description?: string;
            /**
             * @description Name of the Service Model
             * @example MySQL multi-writer service hosted model
             */
            name?: string;
        };
        /** @example {
         *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
         *       "name": "MySQL multi-writer service",
         *       "serviceLogoURL": "Eaque consequatur aut libero."
         *     } */
        UpdateServiceRequestBody: {
            /**
             * @description A brief description of the service
             * @example A MySQL SaaS specializing in multi-writer clusters for high availability
             */
            description?: string;
            /**
             * @description Name of the Service
             * @example MySQL multi-writer service
             */
            name?: string;
            /**
             * @description The logo for the service
             * @example Aliquam amet quam.
             */
            serviceLogoURL?: string;
        };
        /** @example {
         *       "description": "A storage volume set to store the MySQL data directory",
         *       "disableBackup": false,
         *       "name": "MySQL Data Volume"
         *     } */
        UpdateStorageVolumeConfigRequestBody: {
            /**
             * @description A brief description of the context for the storage volume pool
             * @example A storage volume set to store the MySQL data directory
             */
            description?: string;
            /**
             * @description Disable backup for the storage volume
             * @example false
             */
            disableBackup?: boolean;
            /**
             * @description Name of the storage volume pool
             * @example MySQL Data Volume
             */
            name?: string;
        };
        /** @example {
         *       "instanceStorageSizeGi": "$var.storage_size"
         *     } */
        UpdateStorageVolumeSizeConfigRequestBody: {
            /**
             * @description The storage size (in Gi) provisioned for the configured instance storage type
             * @example $var.storage_size
             */
            instanceStorageSizeGi: string;
        };
        /** @example {
         *       "address": {
         *         "addressLine1": "1234 Main St",
         *         "addressLine2": "Apt 123",
         *         "addressLine3": "Building 123",
         *         "city": "San Francisco",
         *         "country": "US",
         *         "state": "CA",
         *         "zip": "94123"
         *       },
         *       "name": "John Dae",
         *       "orgDescription": "ACME Inc.",
         *       "orgFavIconURL": "http://legrosfritsch.info/adele",
         *       "orgLogoURL": "http://fritschnolan.biz/laurine_leuschke",
         *       "orgName": "ACME",
         *       "orgPrivacyPolicy": "Qui alias ipsa.",
         *       "orgSupportEmail": "support@example.com",
         *       "orgTermsOfUse": "Consectetur odit repellat rerum voluptatum perferendis.",
         *       "orgURL": "something.acme"
         *     } */
        UpdateUserRequestBody: {
            address?: components["schemas"]["Address"];
            /**
             * @description The name of the user
             * @example John Dae
             */
            name?: string;
            /**
             * @description The description of the org that this user owns
             * @example ACME Inc.
             */
            orgDescription?: string;
            /**
             * Format: uri
             * @description The favicon of the org that this user owns
             * @example http://wuckert.org/shaun.auer
             */
            orgFavIconURL?: string;
            /**
             * Format: uri
             * @description The logo of the org that this user owns
             * @example http://jacobi.net/amie.doyle
             */
            orgLogoURL?: string;
            /**
             * @description The org name that this user owns
             * @example ACME
             */
            orgName?: string;
            /**
             * @description The privacy policy for the org that this user owns in an HTML format
             * @example Quo similique ratione explicabo architecto beatae.
             */
            orgPrivacyPolicy?: string;
            /**
             * @description The support email of the org that this user owns
             * @example support@example.com
             */
            orgSupportEmail?: string;
            /**
             * @description The terms of use for the org that this user owns in an HTML format
             * @example Vitae quaerat sint saepe quo.
             */
            orgTermsOfUse?: string;
            /**
             * @description The url of the org that this user owns
             * @example something.acme
             */
            orgURL?: string;
        };
        /** @example {
         *       "dimension": "core/hours",
         *       "total": 0.67
         *     } */
        UsagePerDimension: {
            /**
             * @description Dimension of usage
             * @example core/hours
             */
            dimension?: string;
            /**
             * Format: double
             * @description Total amount of usage during the period
             * @example 0.67
             */
            total?: number;
        };
        /** @example {
         *       "vunits": {
         *         "vu-11111111": "UNKNOWN",
         *         "vu-12345678": "UP",
         *         "vu-87654321": "DOWN"
         *       }
         *     } */
        VUnitHealthReport: {
            /**
             * @description The health of each vunit under this service environment
             * @example {
             *       "vu-11111111": "UNKNOWN",
             *       "vu-12345678": "UP",
             *       "vu-87654321": "DOWN"
             *     }
             */
            vunits?: {
                [key: string]: string;
            };
        };
        /** @example {
         *       "email": "abc@gmail.com",
         *       "token": "fc7b8dea-a50b-4c9a-8864-fc3d845a2be6"
         *     } */
        ValidateTokenRequestBody: {
            /**
             * Format: email
             * @example abc@gmail.com
             */
            email: string;
            /** @example fc7b8dea-a50b-4c9a-8864-fc3d845a2be6 */
            token: string;
        };
        /**
         * @description Warm pool configuration for compute nodes
         * @example {
         *       "minimumNodesInPool": 1,
         *       "minimumPercentageNodesInPool": 5
         *     }
         */
        WarmPoolConfiguration: {
            /**
             * Format: int64
             * @description Minimum number of compute nodes in pool
             * @default 1
             * @example 1
             */
            minimumNodesInPool: number;
            /**
             * Format: int64
             * @description Minimum percentage of compute nodes in pool
             * @default 0
             * @example 5
             */
            minimumPercentageNodesInPool: number;
        };
        /** @example {
         *       "eventTime": "2020-01-01T00:00:00Z",
         *       "message": "Bootstrap failed for reason X"
         *     } */
        WorkflowFailure: {
            /**
             * @description The time of the event
             * @example 2020-01-01T00:00:00Z
             */
            eventTime: string;
            /**
             * @description Details of the event
             * @example Bootstrap failed for reason X
             */
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "account-config-api/CreateAccountConfig": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "awsAccessKey": "Tenetur numquam.",
                 *       "awsAccountID": "123456789012",
                 *       "awsBootstrapRoleARN": "arn:aws:iam::<ACCOUNT_ID>:role/<ROLE_NAME>",
                 *       "awsSecretKey": "Et nostrum harum eos suscipit iusto.",
                 *       "byoaInstanceID": "instance-12345678",
                 *       "cloudProviderId": "infra-12345678",
                 *       "description": "An AWS account hosting multiple dev environments",
                 *       "gcpProjectID": "my-project",
                 *       "gcpProjectNumber": "123456789012",
                 *       "gcpServiceAccountEmail": "bootstrap@my-project.iam.gserviceaccount.com",
                 *       "gcpServiceAccountKey": "Totam quisquam nostrum.",
                 *       "name": "Dev AWS account"
                 *     } */
                "application/json": components["schemas"]["CreateAccountConfigRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create an account config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "account-config-api/DescribeAccountConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Account Config ID to operate on
                 * @example ac-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeAccountConfigResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe an account config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "account-config-api/DeleteAccountConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Account Config ID to operate on
                 * @example ac-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete an account config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "account-config-api/DescribeAccountConfigByAWSAccountID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The AWS account ID
                 * @example 123456789012
                 */
                awsAccountID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeAccountConfigByAWSAccountIDResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe an account config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "account-config-api/ListBYOAConfig": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "cloudProviderName": "aws"
                 *     } */
                "application/json": components["schemas"]["ListBYOAConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAccountConfigResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list account configs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "account-config-api/ListAccountConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Cloud Provider name to filter on
                 * @example aws
                 */
                cloudProviderName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAccountConfigResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list account configs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "account-config-api/DescribeAccountConfigByGCPProjectID": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The GCP project ID
                 * @example my-project
                 */
                gcpProjectID: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeAccountConfigByGCPProjectIDResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe an account config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "account-config-api/AccountConfigIdentityID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountConfigIdentityIDResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to get an account config identity id */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "account-config-api/VerifyAccountConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Account Config ID to operate on
                 * @example ac-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list account configs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "availability-zone-api/DescribeAvailabilityZone": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example az-12345678 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeAvailabilityZoneResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe an availability zone */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "availability-zone-api/ListAvailabilityZone": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The cloud provider for this compute instance type config
                 * @example aws
                 */
                cloudProviderName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list availability zones */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "availability-zone-api/GetAvailabilityZoneByCode": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Cloud-provider native availability zone code
                 * @example us-east-1a
                 */
                code: string;
                /**
                 * @description The cloud provider for this compute instance type config
                 * @example aws
                 */
                cloudProviderName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to get an availability zone by code */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "availability-zone-api/ListAvailabilityZonesByRegionCode": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example us-east-1 */
                regionCode: string;
                /**
                 * @description The cloud provider for this compute instance type config
                 * @example aws
                 */
                cloudProviderName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list availability zones by region code */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "signup-api/ChangePassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "abc@gmail.com",
                 *       "password": "password",
                 *       "token": "fc7b8dea-a50b-4c9a-8864-fc3d845a2be6"
                 *     } */
                "application/json": components["schemas"]["ChangePasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to change password */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "cloud-provider-api/ListCloudProvider": {
        parameters: {
            query?: {
                /**
                 * @description Service ID. If specified together with serviceModelId,list the cloud provider of the service model. Otherwise list all cloud provider.
                 * @example s-12345678
                 */
                serviceId?: string;
                /**
                 * @description Service model ID. If specified together with serviceId,list the cloud provider of the service model. Otherwise list all cloud provider.
                 * @example sm-12345678
                 */
                serviceModelId?: string;
                /**
                 * @description Product tier ID. If specified together with serviceId,list the cloud provider of the product tier. Otherwise list all cloud provider.
                 * @example pt-12345678
                 */
                productTierId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list cloud providers */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "cloud-provider-api/DescribeCloudProvider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the CloudProvider
                 * @example infra-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeCloudProviderResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe an cloud provider */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "cloud-provider-api/GetCloudProviderByName": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Name of the CloudProvider
                 * @example aws
                 */
                name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to get an cloud provider by name */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "compose-gen-api/CheckIfContainerImageAccessible": {
        parameters: {
            query: {
                /**
                 * @description Registry where the image is stored
                 * @example docker.io
                 */
                imageRegistry: string;
                /**
                 * @description Username to access the image registry
                 * @example username
                 */
                username?: string;
                /**
                 * @description Password to access the image registry
                 * @example password
                 */
                password?: string;
                /**
                 * @description Name of the image along with the tag. Include the repository name if the image is not from the official repository
                 * @example library/mysql:5.7
                 */
                image: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CheckIfContainerImageAccessibleResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to build a service from compose spec */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "compose-gen-api/GenerateComposeSpecFromContainerImage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "environmentVariables": [
                 *         {
                 *           "key": "MYSQL_ROOT_PASSWORD",
                 *           "value": "password"
                 *         }
                 *       ],
                 *       "image": "library/mysql:5.7",
                 *       "imageRegistry": "docker.io",
                 *       "password": "password",
                 *       "username": "username"
                 *     } */
                "application/json": components["schemas"]["GenerateComposeSpecFromContainerImageRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerateComposeSpecFromContainerImageResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to build a service from compose spec */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "contactus-api/Contactus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "company": "ABC",
                 *       "email": "abc@gmail.com",
                 *       "message": "this is a test",
                 *       "name": "John Doe"
                 *     } */
                "application/json": components["schemas"]["ContactusRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to contactus */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "custom-domain-api/ListCustomDomain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCustomDomainResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list Custom Domains */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "custom-domain-api/CreateCustomDomain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "customDomain": "mydomain.dev",
                 *       "description": "Description of the domain",
                 *       "name": "Dev domain",
                 *       "route53Configuration": {
                 *         "awsAccountID": "123456789012"
                 *       }
                 *     } */
                "application/json": components["schemas"]["CreateCustomDomainRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create an Custom Domain */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "custom-domain-api/DescribeCustomDomain": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description custom domain ID to operate on
                 * @example cd-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeCustomDomainResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe an Custom Domain */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "custom-domain-api/DeleteCustomDomain": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description custom domain ID to operate on
                 * @example cd-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete an Custom Domain */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "custom-domain-api/CustomDomainIdentityID": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccountConfigIdentityIDResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to get an Custom Domain identity id */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "custom-domain-api/VerifyCustomDomain": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description custom domain ID to operate on
                 * @example cd-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list Custom Domains */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/CustomerInviteUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "abc@example.com"
                 *     } */
                "application/json": components["schemas"]["ResetPasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to invite user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/CustomerLoginWithIdentityProvider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "authorizationCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
                 *       "companyDescription": "We sell xyz database software",
                 *       "companyUrl": "https://www.mywebsite.com",
                 *       "environmentType": "DEV",
                 *       "identityProviderName": "Google",
                 *       "invitedEmail": "abc@gmail.com",
                 *       "legalCompanyName": "mywebsite",
                 *       "redirectUri": "https://www.example/redirect"
                 *     } */
                "application/json": components["schemas"]["CustomerLoginWithIdentityProviderRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SigninResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to signin */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/CustomerResetPassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "abc@example.com"
                 *     } */
                "application/json": components["schemas"]["ResetPasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to signin */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/CustomerSignin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "abc@gmail.com",
                 *       "environmentType": "DEV",
                 *       "hashedPassword": "deprecated",
                 *       "password": "password"
                 *     } */
                "application/json": components["schemas"]["CustomerSigninRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SigninResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to signin */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/CustomerSignup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "companyDescription": "We sell xyz database software",
                 *       "companyUrl": "https://www.mywebsite.com",
                 *       "email": "abc@gmail.com",
                 *       "legalCompanyName": "mywebsite",
                 *       "name": "John Doe",
                 *       "password": "password"
                 *     } */
                "application/json": components["schemas"]["SignupRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "demo-api/Demo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "company": "ABC",
                 *       "email": "abc@gmail.com",
                 *       "name": "John Doe",
                 *       "phone": "+1-234567890"
                 *     } */
                "application/json": components["schemas"]["DemoRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to demo */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "deployment-config-api/ListDeploymentConfigs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list deployment configs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "deployment-config-api/CreateDeploymentConfig": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A production deployment config",
                 *       "infraRollConfiguration": {
                 *         "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
                 *         "maximumNumberOfResourceInstancesPerBatch": 1,
                 *         "maximumUnavailableReplicas": 1
                 *       },
                 *       "name": "Production",
                 *       "rolloutPriorityList": [
                 *         "region-12345678",
                 *         "region-abcd1234",
                 *         "region-3c3c3c3c"
                 *       ]
                 *     } */
                "application/json": components["schemas"]["CreateDeploymentConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create the deployment config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "deployment-config-api/DescribeDeploymentConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The deployment configuration ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeDeploymentConfigResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe the deployment config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "deployment-config-api/DeleteDeploymentConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The deployment configuration ID
                 * @example dc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete the deployment config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "deployment-config-api/UpdateDeploymentConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The deployment configuration ID
                 * @example dc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A production deployment config",
                 *       "infraRollConfiguration": {
                 *         "infraRolloutStrategy": "NEW_DEPLOYMENT_ONLY",
                 *         "maximumNumberOfResourceInstancesPerBatch": 1,
                 *         "maximumUnavailableReplicas": 1
                 *       },
                 *       "name": "Production",
                 *       "rolloutPriorityList": [
                 *         "region-12345678",
                 *         "region-abcd1234",
                 *         "region-3c3c3c3c"
                 *       ]
                 *     } */
                "application/json": components["schemas"]["UpdateDeploymentConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update the deployment config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "global-api/registrationServiceHealth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OmnistrateServiceHealthResult"];
                };
            };
        };
    };
    "helm-package-api/ListHelmPackages": {
        parameters: {
            query?: {
                /**
                 * @description The chart name to filter by
                 * @example my-chart
                 */
                chartName?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListHelmPackagesResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list helm packages */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "helm-package-api/SaveHelmPackage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "helmPackage": {
                 *         "chartName": "my-chart",
                 *         "chartRepoName": "my-repo",
                 *         "chartRepoUrl": "https://my-repo.com",
                 *         "chartValues": {
                 *           "key1": "value1",
                 *           "key2": 3,
                 *           "key3": {
                 *             "key4": "value4"
                 *           }
                 *         },
                 *         "chartVersion": "1.0.0",
                 *         "namespace": "default",
                 *         "password": "my-password",
                 *         "username": "my-user"
                 *       }
                 *     } */
                "application/json": components["schemas"]["SaveHelmPackageRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a helm package */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "helm-package-api/DescribeHelmPackage": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The chart name of the Helm package to describe
                 * @example my-chart
                 */
                chartName: string;
                /**
                 * @description The chart version of the Helm package to describe
                 * @example 1.0.0
                 */
                chartVersion: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HelmPackage"];
                };
            };
            /** @description bad_request: Response used on a bad request to describe a helm package */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a helm package */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "helm-package-api/DeleteHelmPackage": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The chart name of the Helm package to delete
                 * @example my-chart
                 */
                chartName: string;
                /**
                 * @description The chart version of the Helm package to delete
                 * @example 1.0.0
                 */
                chartVersion: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request to delete a helm package */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a helm package */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "identity-provider-api/ListIdentityProviders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListIdentityProvidersResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list identity providers */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "identity-provider-api/CreateIdentityProvider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
                 *       "clientSecret": "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",
                 *       "identityProviderName": "Google"
                 *     } */
                "application/json": components["schemas"]["CreateIdentityProviderRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create an identity provider */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "identity-provider-api/DescribeIdentityProvider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The Identity Provider ID
                 * @example idp-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeIdentityProviderResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list identity providers */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "identity-provider-api/VerifyIdentityProvider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The Identity Provider ID
                 * @example idp-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeIdentityProviderResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to verify identity provider */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "identity-provider-api/DeleteIdentityProvider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The Identity Provider ID
                 * @example idp-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list identity providers */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "identity-provider-api/UpdateIdentityProvider": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The Identity Provider ID
                 * @example idp-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "clientId": "205376496935-vtfpdnseqmjhsynlh0bsufl38k0test.apps.googleusercontent.com",
                 *       "clientSecret": "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"
                 *     } */
                "application/json": components["schemas"]["UpdateIdentityProviderRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list identity providers */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-registry-api/ListImageRegistry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list image registries */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-registry-api/CreateImageRegistry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "DockerHub is a public Docker Image Registry",
                 *       "host": "docker.io",
                 *       "name": "DockerHub",
                 *       "password": "mypassword",
                 *       "username": "myusername"
                 *     } */
                "application/json": components["schemas"]["CreateImageRegistryRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create an image registry */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-registry-api/DescribeImageRegistry": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the Image Registry
                 * @example ir-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeImageRegistryResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe an image registry */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-registry-api/DeleteImageRegistry": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the Image Registry
                 * @example ir-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete an image registry */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-registry-api/UpdateImageRegistry": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the Image Registry
                 * @example ir-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "DockerHub is a public Docker Image Registry",
                 *       "host": "docker.io",
                 *       "name": "DockerHub",
                 *       "password": "mypassword",
                 *       "username": "myusername"
                 *     } */
                "application/json": components["schemas"]["UpdateImageRegistryRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update an image registry */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/InviteUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "abc@gmail.com",
                 *       "roleType": "reader"
                 *     } */
                "application/json": components["schemas"]["InviteUserRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to invite user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "invoice-api/ListInvoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListInvoicesResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list invoices */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "limit-api/ListLimit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "family": "COMPUTE_INFRA"
                 *     } */
                "application/json": components["schemas"]["ListLimitRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListLimitResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list limit */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "limit-api/DescribeLimit": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Limit family
                 * @example COMPUTE_INFRA
                 */
                family: string;
                /**
                 * @description Unique key to identify the limit
                 * @example MAX_VIRTUAL_CORES_PER_RESOURCE
                 */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeLimitResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe limit */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "limit-api/DeleteLimit": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Limit family
                 * @example COMPUTE_INFRA
                 */
                family: string;
                /**
                 * @description Unique key to identify the limit
                 * @example MAX_VIRTUAL_CORES_PER_RESOURCE
                 */
                key: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete limit */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "limit-api/UpdateLimit": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Limit family
                 * @example COMPUTE_INFRA
                 */
                family: string;
                /**
                 * @description Unique key to identify the limit
                 * @example MAX_VIRTUAL_CORES_PER_RESOURCE
                 */
                key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A premium limit",
                 *       "name": "Premium Tier",
                 *       "value": 4
                 *     } */
                "application/json": components["schemas"]["UpdateLimitRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update limit */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "signin-api/LoginWithIdentityProvider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "authorizationCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
                 *       "companyDescription": "We sell xyz database software",
                 *       "companyUrl": "https://www.mywebsite.com",
                 *       "deviceCode": "4/P7q7W91a-oMsCeLvIaQm6bTrgtp7&",
                 *       "identityProviderName": "Google",
                 *       "invitedEmail": "abc@gmail.com",
                 *       "legalCompanyName": "mywebsite",
                 *       "redirectUri": "https://www.example/redirect"
                 *     } */
                "application/json": components["schemas"]["LoginWithIdentityProviderRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SigninResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to login with identity provider */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/Logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to logout */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/DescribeUsersByOrg": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeUsersByOrgResult"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "plan-api/DescribePlan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribePlanResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to add plan */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "plan-api/ChangePlan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "planName": "STARTER"
                 *     } */
                "application/json": components["schemas"]["ChangePlanRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to add plan */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "region-api/DescribeRegion": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the Region
                 * @example region-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeRegionResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a region */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "region-api/ListRegion": {
        parameters: {
            query?: {
                /**
                 * @description Service ID. If specified together with serviceModelId,list the regions of the service model. Otherwise list all regions.
                 * @example s-12345678
                 */
                serviceId?: string;
                /**
                 * @description Service model ID. If specified together with serviceId,list the regions of the service model. Otherwise list all regions.
                 * @example sm-12345678
                 */
                serviceModelId?: string;
                /**
                 * @description Product tier ID. If specified together with serviceId,list the regions of the product tier. Otherwise list all regions.
                 * @example pt-12345678
                 */
                productTierId?: string;
                /**
                 * @description Model type. If specified, list regions for the specified model type.
                 * @example CUSTOMER_HOSTED
                 */
                modelType?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The cloud provider for this compute instance type config
                 * @example aws
                 */
                cloudProviderName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list regions */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "region-api/GetRegionByCode": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Cloud-provider native region code
                 * @example us-east-1
                 */
                code: string;
                /**
                 * @description The cloud provider for this compute instance type config
                 * @example aws
                 */
                cloudProviderName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to get a region by code */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "signup-api/ResetPassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "abc@gmail.com"
                 *     } */
                "application/json": components["schemas"]["ResetPasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to reset password */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/ListAllResourceInstances": {
        parameters: {
            query?: {
                /**
                 * @description The environment type to filter by
                 * @example DEV
                 */
                environmentType?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAllResourceInstancesResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list all resource instances */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/GenerateTokenForDeploymentCellDashboard": {
        parameters: {
            query: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId: string;
            };
            header?: never;
            path: {
                /**
                 * @description The instance ID whose deployment cell dashboard token is to be generated
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerateTokenForDeploymentCellDashboardResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to generate a kubernetes dashboard token. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "audit-events-api/ListAuditEventsForInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the resource instance
                 * @example instance-12345678
                 */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAuditEventsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list event */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "audit-events-api/DeprecatedListAuditEventsForInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the resource instance
                 * @example instance-12345678
                 */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAuditEventsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list event */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/ListResourceInstances": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service key
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list resource instances */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/CreateResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "cloud_provider": "aws",
                 *       "custom_network_id": "n-1234567890",
                 *       "externalBillingId": "external-billing-id-1234",
                 *       "network_type": "PUBLIC",
                 *       "region": "us-east-1",
                 *       "requestParams": {
                 *         "param1": "value1",
                 *         "param2": "value2"
                 *       }
                 *     } */
                "application/json": components["schemas"]["CreateResourceInstanceRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServicesOrchestrationResponseBody"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/DescribeResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeResourceInstanceResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/DeleteResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/UpdateResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "requestParams": {
                 *         "param1": "value1",
                 *         "param2": "value2"
                 *       }
                 *     } */
                "application/json": components["schemas"]["UpdateResourceInstanceRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/AddCapacityToResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "capacityToBeAdded": 3
                 *     } */
                "application/json": components["schemas"]["AddCapacityToResourceInstanceRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to add capacity to a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/AddCustomDNSToResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example http-service
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "customDNS": "my-custom-dns.com",
                 *       "targetPort": 8080
                 *     } */
                "application/json": components["schemas"]["AddCustomDNSToResourceInstanceRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/RemoveCustomDNSFromResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example http-service
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/FailoverResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "failedReplicaAction": "FAILOVER_AND_RESTART",
                 *       "failedReplicaID": "db-0"
                 *     } */
                "application/json": components["schemas"]["FailoverResourceInstanceRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to failover a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/RemoveCapacityFromResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "capacityToBeRemoved": 3
                 *     } */
                "application/json": components["schemas"]["RemoveCapacityFromResourceInstanceRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to remove capacity from a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/RestartResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to restart a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/RestoreResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "network_type": "PUBLIC",
                 *       "targetRestoreTime": "2021-09-01T00:00:00Z"
                 *     } */
                "application/json": components["schemas"]["RestoreResourceInstanceRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServicesOrchestrationResponseBody"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/ListResourceInstanceSnapshots": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service key
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResourceInstanceSnapshotsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list snapshots of a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/StartResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to start a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/StopResourceInstance": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The instance ID
                 * @example instance-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to stop a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/RestoreResourceInstanceFromSnapshot": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
                /**
                 * @description The resource key
                 * @example mysql
                 */
                resourceKey: string;
                /**
                 * @description The snapshot ID
                 * @example instance-ss-abcd1234
                 */
                snapshotId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "network_type": "PUBLIC"
                 *     } */
                "application/json": components["schemas"]["RestoreResourceInstanceFromSnapshotRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServicesOrchestrationResponseBody"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "audit-events-api/ListAuditEventsForServicePlan": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAuditEventsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list event */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "audit-events-api/DeprecatedListAuditEventsForServicePlan": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
                /**
                 * @description The product tier name
                 * @example premium
                 */
                productTierKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAuditEventsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list event */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-instance-api/ResourceInstanceProvisionerSetupKit": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service provider ID
                 * @example omnistrate
                 */
                serviceProviderId: string;
                /**
                 * @description The service name
                 * @example service-orchestration
                 */
                serviceKey: string;
                /**
                 * @description The service API version
                 * @example v1
                 */
                serviceAPIVersion: string;
                /**
                 * @description The service environment name
                 * @example dev
                 */
                serviceEnvironmentKey: string;
                /**
                 * @description The service model name
                 * @example hosted
                 */
                serviceModelKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to setup kit for a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "audit-events-api/ListAllAuditEvents": {
        parameters: {
            query?: {
                /**
                 * @description The service ID to list events for
                 * @example s-123456
                 */
                serviceID?: string;
                /** @example PROD|PRIVATE|CANARY|STAGING|QA|DEV */
                environmentType?: string;
                /**
                 * @description The event types to filter by
                 * @example [
                 *       "Quia sit quaerat porro et.",
                 *       "Dolore enim maiores dolorem."
                 *     ]
                 */
                eventSourceTypes?: string[];
                /**
                 * @description The instance ID to list events for
                 * @example instance-12345678
                 */
                instanceID?: string;
                /**
                 * @description The next token to use for pagination
                 * @example token
                 */
                nextPageToken?: string;
                /**
                 * @description The number of events to return per page
                 * @example 10
                 */
                pageSize?: number;
                /**
                 * @description Start date of the events
                 * @example 2023-01-01T10:00:00Z
                 */
                startDate?: string;
                /**
                 * @description End date of the events
                 * @example 2024-01-01T10:00:00Z
                 */
                endDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAuditEventsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list all events */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "audit-events-api/DescribeAuditEvent": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the event
                 * @example event-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeAuditEventResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe event */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "custom-network-api/ListCustomNetworks": {
        parameters: {
            query?: {
                /**
                 * @description The name of the cloud provider that custom network should be created in
                 * @example aws
                 */
                cloudProviderName?: string;
                /**
                 * @description The region of the cloud provider that the network should be created in
                 * @example us-east-1
                 */
                cloudProviderRegion?: string;
                /**
                 * @description Flag indicating whether to return only custom networks, or to include default and imported networks as well
                 * @example false
                 */
                customNetworksOnly?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCustomNetworksResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list custom networks */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "custom-network-api/CreateCustomNetwork": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "cidr": "10.0.0.0/16",
                 *       "cloudProviderName": "aws",
                 *       "cloudProviderRegion": "us-east-1",
                 *       "name": "Prod us-east-1",
                 *       "networkFeaturesConfiguration": {
                 *         "isPrivateLinkEnabled": false
                 *       }
                 *     } */
                "application/json": components["schemas"]["CreateCustomNetworkRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomNetwork"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a custom network */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "custom-network-api/DescribeCustomNetwork": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of a custom network
                 * @example n-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomNetwork"];
                };
            };
            /** @description bad_request: Response used on a bad request to describe a custom network */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested custom network is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a custom network */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "custom-network-api/DeleteCustomNetwork": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of a custom network
                 * @example n-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request to delete a custom network */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested custom network is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a custom network */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "custom-network-api/UpdateCustomNetwork": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of a custom network
                 * @example n-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "name": "Dev us-east-1"
                 *     } */
                "application/json": components["schemas"]["UpdateCustomNetworkRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CustomNetwork"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested custom network is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a custom network */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "audit-events-api/DeprecatedDescribeAuditEvent": {
        parameters: {
            query?: {
                /**
                 * @description Subscription Id
                 * @example sub-abcd1234
                 */
                subscriptionId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the event
                 * @example event-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeAuditEventResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe event */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "global-api/consumptionServiceHealth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OmnistrateServiceHealthResult"];
                };
            };
        };
    };
    "services-orchestration-api/ListServicesOrchestrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeServicesOrchestrationResult"][];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list resource instances */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "services-orchestration-api/CreateServicesOrchestration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "orchestrationCreateDSL": "Nesciunt harum."
                 *     } */
                "application/json": components["schemas"]["CreateServicesOrchestrationRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServicesOrchestrationResponseBody"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "services-orchestration-api/DescribeServicesOrchestration": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the services orchestration
                 * @example so-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeServicesOrchestrationResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "services-orchestration-api/DeleteServicesOrchestration": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the services orchestration
                 * @example so-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "services-orchestration-api/ModifyServicesOrchestration": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the services orchestration
                 * @example so-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "orchestrationModifyDSL": "Doloremque nobis eveniet animi."
                 *     } */
                "application/json": components["schemas"]["ModifyServicesOrchestrationRequestBody"];
            };
        };
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update a resource instance */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "consumption-user-api/ListAllSubscriptionUsers": {
        parameters: {
            query?: {
                /**
                 * @description The environment type to filter by
                 * @example DEV
                 */
                environmentType?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAllSubscriptionUsersResult"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list all subscription users */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "consumption-user-api/InviteUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The subscription ID
                 * @example sub-abcd1234
                 */
                subscriptionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "abc@gmail.com",
                 *       "roleType": "reader"
                 *     } */
                "application/json": components["schemas"]["InviteUserRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to invite user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "consumption-user-api/RevokeUserRole": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The subscription ID
                 * @example sub-abcd1234
                 */
                subscriptionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "abc@gmail.com",
                 *       "roleType": "reader"
                 *     } */
                "application/json": components["schemas"]["InviteUserRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "consumption-user-api/DescribeUsersBySubscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The subscription ID
                 * @example sub-abcd1234
                 */
                subscriptionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeUsersBySubscriptionResult"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "consumption-user-api/DescribeUserBillingDetails": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example user-abcd1234 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeUserBillingDetailsResult"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "consumption-user-api/Signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsumptionServiceAuthResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to signin */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "global-api/consumptionServiceVersion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OmnistrateServiceVersionResult"];
                };
            };
        };
    };
    "users-api/RevokeUserRole": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "abc@gmail.com",
                 *       "roleType": "reader"
                 *     } */
                "application/json": components["schemas"]["InviteUserRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "saas-portal-api/ListSaaSPortals": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSaaSPortalsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list saas portals */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "saas-portal-api/ListSaaSPortalCustomDomains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSaaSPortalCustomDomainsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list saas portal custom domains */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "saas-portal-api/CreateSaaSPortalCustomDomain": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "customDomain": "mycustomdomain.com",
                 *       "description": "My custom domain description",
                 *       "environmentType": "DEV",
                 *       "name": "MyCustomDomain"
                 *     } */
                "application/json": components["schemas"]["CreateSaaSPortalCustomDomainRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create saas portal custom domain */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "saas-portal-api/DeleteSaaSPortalCustomDomain": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The environment type for the custom domain
                 * @example DEV
                 */
                environmentType: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete saas portal custom domains */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "saas-portal-api/UpdateSaaSPortalCustomDomain": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The environment type for the saas portal custom domain to update
                 * @example DEV
                 */
                environmentType: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "customDomain": "mycustomdomain.com",
                 *       "description": "My custom domain description",
                 *       "name": "MyCustomDomain"
                 *     } */
                "application/json": components["schemas"]["UpdateSaaSPortalCustomDomainRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update saas portal custom domain */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "saas-portal-api/UpdateSaaSPortal": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The environment type for the saas portal custom domain to update
                 * @example DEV
                 */
                environmentType: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "customDomain": "mycustomdomain.com",
                 *       "emailConfig": {
                 *         "smtpFromEmail": "example@gmail.com",
                 *         "smtpHost": "smtp.gmail.com",
                 *         "smtpPassword": "password",
                 *         "smtpPort": 587,
                 *         "smtpUsername": "username"
                 *       },
                 *       "googleAnalyticsTagID": "G-123456789",
                 *       "imageConfig": {
                 *         "imageName": "myimage",
                 *         "imageRegistry": "ghcr.io",
                 *         "imageTag": "latest"
                 *       }
                 *     } */
                "application/json": components["schemas"]["UpdateSaaSPortalRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update saas portal */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api/ListService": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list services */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api/CreateService": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                 *       "name": "MySQL multi-writer service",
                 *       "serviceLogoURL": "http://walter.name/arden"
                 *     } */
                "application/json": components["schemas"]["CreateServiceRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a service */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-offering-api/ListServiceOffering": {
        parameters: {
            query?: {
                /**
                 * @description Org Id
                 * @example org-12345678
                 */
                orgId?: string;
                /**
                 * @description The visibility of service offering
                 * @example PRIVATE
                 */
                visibility?: string;
                /**
                 * @description The environment type to filter by
                 * @example DEV
                 */
                environmentType?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceOfferingsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list service offerings */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-offering-api/DescribeServiceOffering": {
        parameters: {
            query?: {
                /**
                 * @description The visibility of service offering
                 * @example PRIVATE
                 */
                visibility?: string;
                /**
                 * @description The environment type to filter by
                 * @example DEV
                 */
                environmentType?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeServiceOfferingResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a service offering */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-offering-api/DescribeServiceOfferingResource": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The resource ID
                 * @example r-12345678
                 */
                resourceId: string;
                /**
                 * @description The instance ID
                 * @example instance-12345678
                 */
                instanceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeServiceOfferingResourceResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a service offering resource */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api/DescribeService": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID to operate on
                 * @example s-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeServiceResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a service */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api/DeleteService": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID to operate on
                 * @example s-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a service */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api/UpdateService": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID to operate on
                 * @example s-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                 *       "name": "MySQL multi-writer service",
                 *       "serviceLogoURL": "Autem enim dolorum velit ea id."
                 *     } */
                "application/json": components["schemas"]["UpdateServiceRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update a service */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api/ServiceHealth": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service
                 * @example s-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportHealthResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to get service health */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "compute-config-api/ListComputeConfig": {
        parameters: {
            query?: {
                /**
                 * @description Is compute config managed by omnistrate
                 * @example false
                 */
                managed?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list compute configs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "compute-config-api/CreateComputeConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "autoscalingPolicy": {
                 *         "maxReplicas": 4,
                 *         "minReplicas": 1
                 *       },
                 *       "cpuArchitecture": "X86_64|ARM64",
                 *       "description": "my compute config description",
                 *       "name": "my compute config",
                 *       "replicaCount": "3",
                 *       "resources": {
                 *         "limits": {
                 *           "cpu": "1",
                 *           "memory": "500Mi"
                 *         },
                 *         "requests": {
                 *           "cpu": "0.5",
                 *           "memory": "200Mi"
                 *         }
                 *       },
                 *       "rootVolumeSizeGi": 10,
                 *       "warmPoolConfiguration": {
                 *         "minimumNodesInPool": 1
                 *       }
                 *     } */
                "application/json": components["schemas"]["CreateComputeConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create compute config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "compute-config-api/DescribeComputeConfig": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the compute config to describe. If not specified, the latest version is described.
                 * @example Placeat exercitationem sunt incidunt minus at et.
                 */
                ProductTierVersion?: string;
                /**
                 * @description ProductTierId of the compute config to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description ID of the compute config
                 * @example cc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeComputeConfigResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe compute config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "compute-config-api/DeleteComputeConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description ID of the compute config
                 * @example cc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a compute config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "compute-config-api/UpdateComputeConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description ID of the compute config
                 * @example cc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "autoscalingPolicy": {
                 *         "maxReplicas": 4,
                 *         "minReplicas": 1
                 *       },
                 *       "cpuArchitecture": "X86_64|ARM64",
                 *       "description": "my compute config description",
                 *       "name": "my compute config",
                 *       "replicaCount": "3",
                 *       "resources": {
                 *         "limits": {
                 *           "cpu": "1",
                 *           "memory": "500Mi"
                 *         },
                 *         "requests": {
                 *           "cpu": "0.5",
                 *           "memory": "200Mi"
                 *         }
                 *       },
                 *       "rootVolumeSizeGi": 10,
                 *       "warmPoolConfiguration": {
                 *         "minimumNodesInPool": 1
                 *       }
                 *     } */
                "application/json": components["schemas"]["UpdateComputeConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update compute config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "compute-config-api/AddComputeInstanceType": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description ID of the compute config
                 * @example cc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "cloudProviderName": "aws",
                 *       "instanceType": "t3.micro"
                 *     } */
                "application/json": components["schemas"]["AddComputeInstanceTypeRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to add compute instance type */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "compute-config-api/RemoveComputeInstanceType": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description ID of the compute config
                 * @example cc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "cloudProviderName": "aws",
                 *       "instanceType": "t3.micro"
                 *     } */
                "application/json": components["schemas"]["AddComputeInstanceTypeRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to remove compute instance type */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "compute-config-api/ListComputeInstanceTypes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The cloud provider for this compute instance type config
                 * @example aws
                 */
                cloudProviderName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListComputeInstanceTypesResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list compute instance types */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-environment-api/ListServiceEnvironment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service this environment belongs to
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list service environments */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-environment-api/CreateServiceEnvironment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service this environment belongs to
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "autoApproveSubscription": false,
                 *       "deploymentConfigId": "dc-12345678",
                 *       "description": "The production environment for the MySQL multi-writer service",
                 *       "name": "Production",
                 *       "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
                 *       "sourceEnvironmentId": "se-12345678",
                 *       "type": "DEV",
                 *       "visibility": "Itaque beatae placeat in et ea."
                 *     } */
                "application/json": components["schemas"]["CreateServiceEnvironmentRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a service environment */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-environment-api/DescribeServiceEnvironment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service this environment belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the service environment
                 * @example se-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeServiceEnvironmentResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a service environment */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-environment-api/DeleteServiceEnvironment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service this environment belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the service environment
                 * @example se-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a service environment */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-environment-api/UpdateServiceEnvironment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service this environment belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the service environment
                 * @example se-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "autoApproveSubscription": false,
                 *       "deploymentConfigId": "dc-12345678",
                 *       "description": "The production environment for the MySQL multi-writer service",
                 *       "name": "Production",
                 *       "serviceAuthPublicKey": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
                 *       "sourceEnvironmentId": "se-12345678",
                 *       "visibility": "Quisquam et adipisci."
                 *     } */
                "application/json": components["schemas"]["UpdateServiceEnvironmentRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update a service environment */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-environment-api/PromoteServiceEnvironmentStatus": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service this environment belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the service environment
                 * @example se-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EnvironmentPromotionStatus"][];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to get the status of a service environment promotion */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-environment-api/PromoteServiceEnvironment": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service this environment belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the service environment
                 * @example se-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted response. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to promote a service environment */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-plan-api/ListServicePlans": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Service environment ID
                 * @example se-12345678
                 */
                serviceEnvironmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServicePlansResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list product tiers */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-config-api/CreateImageConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID to use for the infra
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "customImageCommandsAndArgs": {
                 *         "args": [
                 *           "-d",
                 *           "mysql"
                 *         ],
                 *         "commands": [
                 *           "echo",
                 *           "Hello, World!"
                 *         ]
                 *       },
                 *       "description": "A image configuration for my new entity",
                 *       "imageName": "mysql",
                 *       "imageRegistryId": "ir-12345678",
                 *       "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
                 *       "imageTag": "latest",
                 *       "serviceEnvironmentId": "se-12345678"
                 *     } */
                "application/json": components["schemas"]["CreateImageConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create the image config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-config-api/DescribeImageConfig": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the image config to describe. If not specified, the latest version is described.
                 * @example Eaque omnis.
                 */
                ProductTierVersion?: string;
                /**
                 * @description ProductTierId of the image config to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The image configuration ID
                 * @example imgc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeImageConfigResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe the image config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-config-api/DeleteImageConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The image configuration ID
                 * @example imgc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete the image config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-config-api/UpdateImageConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The image configuration ID
                 * @example imgc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "customImageCommandsAndArgs": {
                 *         "args": [
                 *           "-d",
                 *           "mysql"
                 *         ],
                 *         "commands": [
                 *           "echo",
                 *           "Hello, World!"
                 *         ]
                 *       },
                 *       "description": "An image configuration for my new entity",
                 *       "imageName": "mysql",
                 *       "imageRegistryId": "ir-12345678",
                 *       "imageSignaturePublicKeyPEM": "-----BEGIN PUBLIC KEY-----\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAExXBS01nPRugGbKCN8m9sSSTkGvPT\n7a1Jn74No2dTkp+tQ+ZyBa7ClKbEXFaR2mzy06q0ivJAxPi1pixofIXE0Q==\n-----END PUBLIC KEY-----\n",
                 *       "imageTag": "v1"
                 *     } */
                "application/json": components["schemas"]["UpdateImageConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update the image config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-config-api/ReleaseImageConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The image configuration ID
                 * @example imgc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "productTierId": "pt-12345678"
                 *     } */
                "application/json": components["schemas"]["ReleaseInfraConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to release the image config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-config-api/RolloutFleetImageStatus": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The image configuration ID
                 * @example imgc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OmnistrateServiceHealthResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to get the fleet image rollout status */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-config-api/RolloutFleetImageConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The image configuration ID
                 * @example imgc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to rollout to the fleet */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/CreateInfraConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "computeConfigId": "cc-12345678",
                 *       "customTag": {
                 *         "key": "customKey",
                 *         "value": "customValue"
                 *       },
                 *       "description": "Infra config used for the base tier MySQL service",
                 *       "name": "MySQL Writer Infra Config",
                 *       "networkConfigId": "nc-12345678",
                 *       "serviceEnvironmentId": "se-12345678",
                 *       "storageConfigId": "sc-12345678"
                 *     } */
                "application/json": components["schemas"]["CreateInfraConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create an infra config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/DescribeInfraConfig": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the infra config to describe. If not specified, the latest version is described.
                 * @example Est sed exercitationem natus doloremque quis dolorem.
                 */
                ProductTierVersion?: string;
                /**
                 * @description ProductTierId of the infra config to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Infra Config ID to operate on
                 * @example ic-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeInfraConfigResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe an infra config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/DeleteInfraConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Infra Config ID to operate on
                 * @example ic-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete an infra config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/UpdateInfraConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Infra Config ID to operate on
                 * @example ic-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "computeConfigId": "cc-12345678",
                 *       "customTag": {
                 *         "key": "customKey",
                 *         "value": "customValue"
                 *       },
                 *       "description": "Infra config used for the base tier MySQL service",
                 *       "name": "MySQL Writer Infra Config",
                 *       "networkConfigId": "nc-12345678",
                 *       "storageConfigId": "sc-12345678"
                 *     } */
                "application/json": components["schemas"]["UpdateInfraConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update an infra config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/ListAssociatedResources": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Infra Config ID to operate on
                 * @example ic-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAssociatedResourcesResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list associated resources */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/DetachComputeConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Infra Config ID to operate on
                 * @example ic-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to detach a compute config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/DetachNetworkConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Infra Config ID to operate on
                 * @example ic-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to detach a network config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/ReleaseInfraConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Infra Config ID to operate on
                 * @example ic-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "productTierId": "pt-12345678"
                 *     } */
                "application/json": components["schemas"]["ReleaseInfraConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to release an infra config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/RolloutFleetInfra": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Infra Config ID to operate on
                 * @example ic-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to rollout to the fleet */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/RolloutFleetInfraStatus": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Infra Config ID to operate on
                 * @example ic-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OmnistrateServiceHealthResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to get the fleet rollout infra status */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/DetachStorageConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Infra Config ID to operate on
                 * @example ic-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to detach a storage config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "input-parameter-api/CreateInputParameter": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service that this output parameter belongs to
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "defaultValue": "default value",
                 *       "dependentResourceId": "r-12345678",
                 *       "description": "Commodi deserunt architecto ut sit ut.",
                 *       "hasOptions": true,
                 *       "isList": false,
                 *       "key": "4u",
                 *       "labeledOptions": {
                 *         "large": "t3.xlarge",
                 *         "medium": "t3.large",
                 *         "small": "t3.medium"
                 *       },
                 *       "limits": {
                 *         "max": "Sit explicabo delectus aut nisi consequuntur.",
                 *         "maxLength": "Sunt amet provident.",
                 *         "min": "Cumque temporibus dolores vitae dolores doloremque illum.",
                 *         "minLength": "Qui odio laudantium illum."
                 *       },
                 *       "modifiable": true,
                 *       "name": "qrn",
                 *       "options": [
                 *         "a",
                 *         "b",
                 *         "c",
                 *         "default value"
                 *       ],
                 *       "required": false,
                 *       "resourceId": "r-12345678",
                 *       "type": "Quis sunt."
                 *     } */
                "application/json": components["schemas"]["CreateInputParameterRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create an input parameter */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "input-parameter-api/DescribeInputParameter": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the instance to describe. If not specified, the latest version is described.
                 * @example Fugiat reiciendis et mollitia.
                 */
                ProductTierVersion?: string;
                /**
                 * @description Product tier id of the instance to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the service that this output parameter belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description ID of the input parameter
                 * @example var-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeInputParameterResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe an input parameter */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "input-parameter-api/DeleteInputParameter": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service that this output parameter belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description ID of the input parameter
                 * @example var-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete an input parameter */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "input-parameter-api/UpdateInputParameter": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service that this output parameter belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description ID of the input parameter
                 * @example var-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "defaultValue": "[\"1\", \"2.8\", \"3\"]",
                 *       "description": "Aut ipsum harum delectus aliquid.",
                 *       "hasOptions": false,
                 *       "labeledOptions": {
                 *         "large": "t3.xlarge",
                 *         "medium": "t3.large",
                 *         "small": "t3.medium"
                 *       },
                 *       "limits": {
                 *         "max": "Sit explicabo delectus aut nisi consequuntur.",
                 *         "maxLength": "Sunt amet provident.",
                 *         "min": "Cumque temporibus dolores vitae dolores doloremque illum.",
                 *         "minLength": "Qui odio laudantium illum."
                 *       },
                 *       "modifiable": true,
                 *       "name": "y",
                 *       "options": [
                 *         "[\"1\", \"2.8\", \"3\"]",
                 *         "[\"3.4\", \"4.5\"]"
                 *       ],
                 *       "required": true
                 *     } */
                "application/json": components["schemas"]["UpdateInputParameterRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update an input parameter */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/CreateServiceModel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service this model is for
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "accountConfigIds": [
                 *         "ac-12345678",
                 *         "ac-23456789"
                 *       ],
                 *       "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                 *       "features": [
                 *         {
                 *           "configuration": {
                 *             "Sapiente ut.": "Ut qui eligendi odit."
                 *           },
                 *           "feature": "Quia quas saepe sequi quidem facere."
                 *         },
                 *         {
                 *           "configuration": {
                 *             "Sapiente ut.": "Ut qui eligendi odit."
                 *           },
                 *           "feature": "Quia quas saepe sequi quidem facere."
                 *         },
                 *         {
                 *           "configuration": {
                 *             "Sapiente ut.": "Ut qui eligendi odit."
                 *           },
                 *           "feature": "Quia quas saepe sequi quidem facere."
                 *         },
                 *         {
                 *           "configuration": {
                 *             "Sapiente ut.": "Ut qui eligendi odit."
                 *           },
                 *           "feature": "Quia quas saepe sequi quidem facere."
                 *         }
                 *       ],
                 *       "modelType": "CUSTOMER_HOSTED",
                 *       "name": "MySQL multi-writer service hosted model",
                 *       "serviceApiId": "sa-12345678"
                 *     } */
                "application/json": components["schemas"]["CreateServiceModelRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a service model */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/DescribeServiceModel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID this model belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service model ID
                 * @example sm-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeServiceModelResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a service model */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/DeleteServiceModel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID this model belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service model ID
                 * @example sm-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a service model */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/UpdateServiceModel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID this model belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service model ID
                 * @example sm-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                 *       "name": "MySQL multi-writer service hosted model"
                 *     } */
                "application/json": components["schemas"]["UpdateServiceModelRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update a service model */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/AddAccountConfigToServiceModel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID this model belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service model ID
                 * @example sm-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "accountConfigId": "ac-12345678"
                 *     } */
                "application/json": components["schemas"]["AddAccountConfigToServiceModelRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to add an account config to a service model */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/RemoveAccountConfigFromServiceModel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID this model belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service model ID
                 * @example sm-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "accountConfigId": "ac-12345678"
                 *     } */
                "application/json": components["schemas"]["AddAccountConfigToServiceModelRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to remove an account config from a service model */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/SetActiveAccountConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID this model belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service model ID
                 * @example sm-12345678
                 */
                id: string;
                /**
                 * @description The infrastructure account configuration ID
                 * @example ac-12345678
                 */
                accountConfigId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to set the active account config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/EnableServiceModelFeature": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID this model belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service model ID
                 * @example sm-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "configuration": {
                 *         "Iste eaque consequuntur architecto minima.": "Natus voluptatum.",
                 *         "Similique temporibus.": "Repellat omnis dolores rem voluptas."
                 *       },
                 *       "feature": "Et nemo alias ad molestias odio."
                 *     } */
                "application/json": components["schemas"]["ServiceModelFeatureDetail"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when the service model feature could not be enabled */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/DisableServiceModelFeature": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID this model belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service model ID
                 * @example sm-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "feature": "Earum eum ab earum sed."
                 *     } */
                "application/json": components["schemas"]["DisableServiceModelFeatureRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when the service model feature could not be disabled */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/ReleaseServiceModelStatus": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID this model belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service model ID
                 * @example sm-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OmnistrateServiceHealthResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to release a service model status */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/ListProductTier": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Service model ID
                 * @example sm-12345678
                 */
                serviceModelId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list product tiers */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "vunit-api/ListVUnits": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID for the VUnit
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Service Model ID for the VUnit
                 * @example sm-12345678
                 */
                serviceModelId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "cloudProvider": "aws",
                 *       "region": "us-west-2"
                 *     } */
                "application/json": components["schemas"]["ListVUnitsRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListVUnitsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list vunits */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/CopyServiceModel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID this model belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The source service model ID
                 * @example sm-12345678
                 */
                sourceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "accountConfigIds": [
                 *         "ac-12345678",
                 *         "ac-23456789"
                 *       ],
                 *       "description": "A MySQL Hosted SaaS specializing in multi-writer clusters for high availability",
                 *       "features": [
                 *         {
                 *           "configuration": {
                 *             "Sapiente ut.": "Ut qui eligendi odit."
                 *           },
                 *           "feature": "Quia quas saepe sequi quidem facere."
                 *         },
                 *         {
                 *           "configuration": {
                 *             "Sapiente ut.": "Ut qui eligendi odit."
                 *           },
                 *           "feature": "Quia quas saepe sequi quidem facere."
                 *         },
                 *         {
                 *           "configuration": {
                 *             "Sapiente ut.": "Ut qui eligendi odit."
                 *           },
                 *           "feature": "Quia quas saepe sequi quidem facere."
                 *         },
                 *         {
                 *           "configuration": {
                 *             "Sapiente ut.": "Ut qui eligendi odit."
                 *           },
                 *           "feature": "Quia quas saepe sequi quidem facere."
                 *         }
                 *       ],
                 *       "name": "MySQL multi-writer service hosted model",
                 *       "targetServiceModelType": "CUSTOMER_HOSTED",
                 *       "targetTierType": "OMNISTRATE_DEDICATED_TENANCY"
                 *     } */
                "application/json": components["schemas"]["CopyServiceModelRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to copy a service model */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "network-config-api/ListNetworkConfig": {
        parameters: {
            query?: {
                /**
                 * @description Is network config managed by omnistrate
                 * @example false
                 */
                managed?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID to list network configs for
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list network configs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "network-config-api/CreateNetworkConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A multi-zone HA network config",
                 *       "endpointPerReplica": true,
                 *       "internal": true,
                 *       "name": "Multi-zone",
                 *       "openPorts": [
                 *         1299,
                 *         3306
                 *       ],
                 *       "privateNetworkingConfiguration": {
                 *         "privateLinkConfiguration": {
                 *           "awsPrivateLinkConfigurations": [
                 *             {
                 *               "port": 80,
                 *               "targetGroupName": "my-target-group"
                 *             },
                 *             {
                 *               "port": 80,
                 *               "targetGroupName": "my-target-group"
                 *             },
                 *             {
                 *               "port": 80,
                 *               "targetGroupName": "my-target-group"
                 *             },
                 *             {
                 *               "port": 80,
                 *               "targetGroupName": "my-target-group"
                 *             }
                 *           ]
                 *         }
                 *       },
                 *       "publicNetworkingConfiguration": {
                 *         "enableClusterLoadBalancer": true,
                 *         "enableNodeLoadBalancer": true
                 *       },
                 *       "stableEgressIP": true,
                 *       "tlsTerminationPort": 443,
                 *       "zoneConfiguration": "Odio assumenda sunt."
                 *     } */
                "application/json": components["schemas"]["CreateNetworkConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create network config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "network-config-api/DescribeNetworkConfig": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the network config to describe. If not specified, the latest version is described.
                 * @example Nihil ad.
                 */
                ProductTierVersion?: string;
                /**
                 * @description ProductTierId of the network config to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the service
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the network config
                 * @example nc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeNetworkConfigResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe network config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "network-config-api/DeleteNetworkConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the network config
                 * @example nc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a network config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "network-config-api/UpdateNetworkConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the network config
                 * @example nc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A multi-zone HA network config",
                 *       "endpointPerReplica": true,
                 *       "internal": true,
                 *       "name": "Multi-zone",
                 *       "openPorts": [
                 *         1299,
                 *         3306
                 *       ],
                 *       "privateNetworkingConfiguration": {
                 *         "privateLinkConfiguration": {
                 *           "awsPrivateLinkConfigurations": [
                 *             {
                 *               "port": 80,
                 *               "targetGroupName": "my-target-group"
                 *             },
                 *             {
                 *               "port": 80,
                 *               "targetGroupName": "my-target-group"
                 *             },
                 *             {
                 *               "port": 80,
                 *               "targetGroupName": "my-target-group"
                 *             },
                 *             {
                 *               "port": 80,
                 *               "targetGroupName": "my-target-group"
                 *             }
                 *           ]
                 *         }
                 *       },
                 *       "publicNetworkingConfiguration": {
                 *         "enableClusterLoadBalancer": true,
                 *         "enableNodeLoadBalancer": true
                 *       },
                 *       "stableEgressIP": true,
                 *       "tlsTerminationPort": 443,
                 *       "zoneConfiguration": "Natus est velit molestiae nisi sequi ipsum."
                 *     } */
                "application/json": components["schemas"]["UpdateNetworkConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update network config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "vunit-api/DescribeNetwork": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID context
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Network to operate on
                 * @example n-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeNetworkResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a network */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "output-parameter-api/CreateOutputParameter": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service that this output parameter belongs to
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "Username of the user created in the target system",
                 *       "key": "username",
                 *       "name": "Username",
                 *       "resourceId": "r-12345678",
                 *       "value": "johndoe",
                 *       "valueRef": "$var.username",
                 *       "valueType": "Omnis molestias accusamus praesentium temporibus cum delectus."
                 *     } */
                "application/json": components["schemas"]["CreateOutputParameterRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create an output parameter */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "output-parameter-api/DescribeOutputParameter": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the resource to describe. If not specified, the latest version is described.
                 * @example Explicabo quaerat a qui nostrum.
                 */
                ProductTierVersion?: string;
                /**
                 * @description ProductTierId of the resource to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the service that this output parameter belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the output parameter
                 * @example op-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeOutputParameterResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe an output parameter */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "output-parameter-api/DeleteOutputParameter": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service that this output parameter belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the output parameter
                 * @example op-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete an output parameter */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "output-parameter-api/UpdateOutputParameter": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service that this output parameter belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the output parameter
                 * @example op-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "Username of the user created in the target system",
                 *       "name": "Username",
                 *       "value": "johndoe",
                 *       "valueRef": "$var.username",
                 *       "valueType": "Maiores temporibus pariatur praesentium expedita."
                 *     } */
                "application/json": components["schemas"]["UpdateOutputParameterRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update an output parameter */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/CreateProductTier": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "autoApproveSubscription": false,
                 *       "awsRegions": [
                 *         "us-east-2",
                 *         "ca-central-1"
                 *       ],
                 *       "description": "A premium product tier",
                 *       "documentation": "Any documentation",
                 *       "gcpRegions": [
                 *         "us-central1"
                 *       ],
                 *       "isDisabled": false,
                 *       "name": "Premium",
                 *       "planDescription": "A premium plan",
                 *       "pricing": {
                 *         "price1": "value1"
                 *       },
                 *       "serviceModelId": "sm-12345678",
                 *       "support": "Any support",
                 *       "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                 *     } */
                "application/json": components["schemas"]["CreateProductTierRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a product tier */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/DescribeProductTier": {
        parameters: {
            query?: {
                /**
                 * @description The version number for the specific version set
                 * @example 3.0
                 */
                version?: string;
            };
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Product tier ID
                 * @example pt-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeProductTierResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a product tier */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/DeleteProductTier": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Product tier ID
                 * @example pt-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a product tier */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/UpdateProductTier": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Product tier ID
                 * @example pt-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "autoApproveSubscription": false,
                 *       "awsRegions": [
                 *         "us-east-2",
                 *         "ca-central-1"
                 *       ],
                 *       "description": "A premium product tier",
                 *       "documentation": "Any documentation",
                 *       "gcpRegions": [
                 *         "us-central1"
                 *       ],
                 *       "isDisabled": false,
                 *       "name": "Premium",
                 *       "planDescription": "A premium plan",
                 *       "pricing": {
                 *         "price1": "value1"
                 *       },
                 *       "support": "Any support",
                 *       "tierType": "OMNISTRATE_DEDICATED_TENANCY"
                 *     } */
                "application/json": components["schemas"]["UpdateProductTierRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update a product tier */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/ListProductTierBillingPlan": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Product tier ID
                 * @example pt-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListProductTierBillingPlanResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when the product tier pricing could not be described */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/CreateProductTierBillingPlan": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Product tier ID
                 * @example pt-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "allowCreatesWhenPaymentNotConfigured": true,
                 *       "maxNumberofInstances": 5,
                 *       "planName": "STARTER",
                 *       "pricing": {
                 *         "cpuCoreHours": "0.001",
                 *         "memoryGiBHours": "0.0001",
                 *         "storageGiBHours": "0.0001"
                 *       }
                 *     } */
                "application/json": components["schemas"]["CreateProductTierBillingPlanRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingPlan"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a product tier pricing */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/EnableProductTierFeature": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Product tier ID
                 * @example pt-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "configuration": {
                 *         "S3BucketArn": "arn:aws:s3:::my_billing_bucket_name"
                 *       },
                 *       "feature": "BILLING",
                 *       "scope": "INTERNAL"
                 *     } */
                "application/json": components["schemas"]["EnableProductTierFeatureRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when the product tier feature could not be enabled */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/DisableProductTierFeature": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Product tier ID
                 * @example pt-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "feature": "BILLING",
                 *       "scope": "INTERNAL"
                 *     } */
                "application/json": components["schemas"]["DisableProductTierFeatureRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when the product tier feature could not be disabled */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/DescribeProductTierBillingPlan": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Product tier ID
                 * @example pt-12345678
                 */
                productTierId: string;
                /**
                 * @description Product tier billing plan ID
                 * @example bp-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingPlan"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when the product tier pricing could not be described */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/DeleteProductTierBillingPlan": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Product tier ID
                 * @example pt-12345678
                 */
                productTierId: string;
                /**
                 * @description Product tier billing plan ID
                 * @example bp-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when the product tier pricing could not be described */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/UpdateProductTierBillingPlan": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Product tier ID
                 * @example pt-12345678
                 */
                productTierId: string;
                /**
                 * @description Product tier billing plan ID
                 * @example bp-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "allowCreatesWhenPaymentNotConfigured": true,
                 *       "maxNumberofInstances": 5,
                 *       "planName": "STARTER",
                 *       "pricing": {
                 *         "cpuCoreHours": "0.001",
                 *         "memoryGBHours": "0.0001"
                 *       }
                 *     } */
                "application/json": components["schemas"]["UpdateProductTierBillingPlanRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingPlan"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update a product tier pricing */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-plan-api/GetServicePlan": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description Product tier ID
                 * @example pt-12345678
                 */
                productTierId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServicePlanResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list product tiers */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "product-tier-api/CopyProductTier": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The source product tier ID
                 * @example pt-12345678
                 */
                sourceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "autoApproveSubscription": false,
                 *       "awsRegions": [
                 *         "us-east-2",
                 *         "ca-central-1"
                 *       ],
                 *       "description": "A premium product tier",
                 *       "documentation": "Any documentation",
                 *       "gcpRegions": [
                 *         "us-central1"
                 *       ],
                 *       "name": "Premium",
                 *       "planDescription": "A premium plan",
                 *       "pricing": {
                 *         "price1": "value1"
                 *       },
                 *       "serviceModelId": "sm-12345678",
                 *       "support": "Any support",
                 *       "targetTierType": "OMNISTRATE_DEDICATED_TENANCY"
                 *     } */
                "application/json": components["schemas"]["CopyProductTierRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a product tier */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "tier-version-set-api/ListTierVersionSets": {
        parameters: {
            query?: {
                /**
                 * @description If true, the latest major version is returned. The parameter needs to be specified in isolation.
                 * @example true
                 */
                latestMajorVersionOnly?: boolean;
                /**
                 * @description Returns the latest incremental version for the given major version. The paramenter needs to be specified in isolation.
                 * @example 3.0
                 */
                latestIncrementalVersionForMajorVersion?: string;
            };
            header?: never;
            path: {
                /**
                 * @description ID of the Service
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The product tier ID that this version set belongs to.
                 * @example Beatae beatae.
                 */
                productTierId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListTierVersionSetsResult"];
                };
            };
            /** @description bad_request: Response used when a bad request is made */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used when authentication fails */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used when authorization fails */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when a failure occurs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "tier-version-set-api/CreateTierVersionSet": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the Service
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The product tier ID that this version set belongs to.
                 * @example Beatae beatae.
                 */
                productTierId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "Praesentium optio nesciunt.",
                 *       "name": "Major version set",
                 *       "parentVersion": "2.0",
                 *       "type": "Major|Incremental|UserDefined"
                 *     } */
                "application/json": components["schemas"]["CreateTierVersionSetRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateTierVersionSetResult"];
                };
            };
            /** @description bad_request: Response used on a bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a version set. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "tier-version-set-api/DescribeTierVersionSet": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the Service
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The product tier ID that this version set belongs to.
                 * @example Beatae beatae.
                 */
                productTierId: string;
                /**
                 * @description The version number for the specific version set.
                 * @example 3.0
                 */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TierVersionSet"];
                };
            };
            /** @description bad_request: Response used when a bad request is made */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used when authentication fails */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used when authorization fails */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when a failure occurs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "tier-version-set-api/DeprecateTierVersionSet": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the Service
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The product tier ID that this version set belongs to.
                 * @example Beatae beatae.
                 */
                productTierId: string;
                /**
                 * @description The version number for the specific version set.
                 * @example 3.0
                 */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TierVersionSet"];
                };
            };
            /** @description bad_request: Response used when a bad request is made */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used when authentication fails */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used when authorization fails */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when a failure occurs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "tier-version-set-api/DiffTierVersionSets": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the Service
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The product tier ID that this version set belongs to.
                 * @example Beatae beatae.
                 */
                productTierId: string;
                /**
                 * @description The version number for the version set.
                 * @example 3.0
                 */
                version: string;
                /**
                 * @description The target version to compare against.
                 * @example 3.1
                 */
                anotherVersion: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiffTierVersionSetsResult"];
                };
            };
            /** @description bad_request: Response used when a bad request is made */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used when authentication fails */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used when authorization fails */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when a failure occurs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "tier-version-set-api/PromoteTierVersionSet": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the Service
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The product tier ID that this version set belongs to.
                 * @example Beatae beatae.
                 */
                productTierId: string;
                /**
                 * @description The version number for the specific version set.
                 * @example 3.0
                 */
                version: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TierVersionSet"];
                };
            };
            /** @description bad_request: Response used when a bad request is made */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used when authentication fails */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used when authorization fails */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used when a failure occurs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "tier-version-set-api/ReleaseTierVersionSet": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description ID of the Service
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The product tier ID that this version set belongs to.
                 * @example Beatae beatae.
                 */
                productTierId: string;
                /**
                 * @description The version number for the specific version set.
                 * @example 3.0
                 */
                version: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "isPreferred": true,
                 *       "name": "Major version set"
                 *     } */
                "application/json": components["schemas"]["ReleaseTierVersionSetRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TierVersionSet"];
                };
            };
            /** @description bad_request: Response used on a bad request. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to release a version set. */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/ListResources": {
        parameters: {
            query?: {
                /**
                 * @description Is resource managed by omnistrate
                 * @example false
                 */
                managed?: boolean;
                /**
                 * @description Product tier version of the instance to describe. If not specified, the latest version is described.
                 * @example Reprehenderit error.
                 */
                ProductTierVersion?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the service to list resources for
                 * @example si-12345678
                 */
                serviceId: string;
                /**
                 * @description The product tier ID
                 * @example pt-12345678
                 */
                productTierId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResourcesResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list resources */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/CreateResource": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "additionalSecurityContext": {
                 *         "AddCapabilities": [
                 *           "CAP_NET_ADMIN",
                 *           "CAP_NET_RAW"
                 *         ],
                 *         "DropCapabilities": [
                 *           "CAP_NET_ADMIN",
                 *           "CAP_NET_RAW"
                 *         ],
                 *         "SupplementalGroupIDs": [
                 *           1001,
                 *           999
                 *         ]
                 *       },
                 *       "backupConfiguration": {
                 *         "backupPeriodInHours": 24,
                 *         "backupRetentionInDays": 7
                 *       },
                 *       "blobStorageConfiguration": {
                 *         "GCSConfiguration": {},
                 *         "S3Configuration": {}
                 *       },
                 *       "customLabels": {
                 *         "key": "value"
                 *       },
                 *       "customSysCTLs": {
                 *         "net.ipv4.tcp_syncookies": "1"
                 *       },
                 *       "customULimits": [
                 *         {
                 *           "ULimitsName": "NoProc",
                 *           "ULimitsType": "Soft",
                 *           "ULimitsValue": 1000
                 *         },
                 *         {
                 *           "ULimitsName": "NoFile",
                 *           "ULimitsType": "Hard",
                 *           "ULimitsValue": 2048
                 *         }
                 *       ],
                 *       "description": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                 *       "environmentVariables": [
                 *         {
                 *           "key": "MYSQL_ROOT_PASSWORD",
                 *           "value": "password"
                 *         }
                 *       ],
                 *       "fileSystemConfiguration": {
                 *         "EFSFileSystemConfiguration": {
                 *           "PerformanceMode": "generalPurpose|maxIO",
                 *           "ProvisionedThroughputInMibps": 125,
                 *           "ThroughputMode": "provisioned|bursting|elastic"
                 *         }
                 *       },
                 *       "helmChartConfiguration": {
                 *         "chartName": "my-chart",
                 *         "chartRepoName": "my-repo",
                 *         "chartRepoUrl": "https://my-repo.com",
                 *         "chartValues": {
                 *           "key1": "value1",
                 *           "key2": 3,
                 *           "key3": {
                 *             "key4": "value4"
                 *           }
                 *         },
                 *         "chartVersion": "1.0.0",
                 *         "endpointConfiguration": {
                 *           "admin": {
                 *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                 *             "networkingType": "PRIVATE",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": false
                 *           },
                 *           "cluster": {
                 *             "host": "https://my-endpoint.com",
                 *             "networkingType": "PUBLIC",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": true
                 *           }
                 *         },
                 *         "password": "my-password",
                 *         "runtimeConfiguration": {
                 *           "disableHooks": true,
                 *           "recreate": true,
                 *           "resetThenReuseValues": true,
                 *           "resetValues": true,
                 *           "reuseValues": true,
                 *           "skipCRDs": true,
                 *           "timeoutNanos": 1000000000,
                 *           "upgradeCRDs": true,
                 *           "wait": true,
                 *           "waitForJobs": true
                 *         },
                 *         "username": "my-user"
                 *       },
                 *       "imageConfigId": "imgc-12345678",
                 *       "infraConfigId": "ic-12345678",
                 *       "internal": false,
                 *       "isProxy": false,
                 *       "key": "galera",
                 *       "kustomizeConfiguration": {
                 *         "endpointConfiguration": {
                 *           "admin": {
                 *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                 *             "networkingType": "PRIVATE",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": false
                 *           },
                 *           "cluster": {
                 *             "host": "https://my-endpoint.com",
                 *             "networkingType": "PUBLIC",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": true
                 *           }
                 *         },
                 *         "gitConfiguration": {
                 *           "accessToken": "my-token",
                 *           "referenceName": "tags/v1.0.0",
                 *           "repositoryUrl": "https://github.com/username/myrepo",
                 *           "userName": "my-user"
                 *         },
                 *         "helmChartDependencies": [
                 *           {
                 *             "chartName": "cert-manager",
                 *             "chartVersion": "v1.5.3"
                 *           },
                 *           {
                 *             "chartName": "nginx-ingress",
                 *             "chartVersion": "v0.48.1"
                 *           },
                 *           {
                 *             "chartName": "external-dns",
                 *             "chartVersion": "v0.7.0"
                 *           },
                 *           {
                 *             "chartName": "cnpg-operator",
                 *             "chartVersion": "v0.23.1"
                 *           }
                 *         ],
                 *         "kustomizePath": "/kustomize"
                 *       },
                 *       "l4LoadBalancerConfiguration": {
                 *         "ingressPortConfiguration": [
                 *           {
                 *             "associatedResourceIDs": [
                 *               "r-12345678",
                 *               "r-abcdef12"
                 *             ],
                 *             "backendPort": 8080,
                 *             "ingressPort": 1234
                 *           },
                 *           {
                 *             "associatedResourceIDs": [
                 *               "r-12345678",
                 *               "r-abcdef12"
                 *             ],
                 *             "backendPort": 8081,
                 *             "ingressPort": 5678
                 *           },
                 *           {
                 *             "associatedResourceIDs": [
                 *               "r-vwxybz12",
                 *               "r-poij122v"
                 *             ],
                 *             "backendPort": 8082,
                 *             "ingressPort": 9012
                 *           }
                 *         ]
                 *       },
                 *       "l7LoadBalancerConfiguration": {
                 *         "paths": [
                 *           {
                 *             "associatedResourceID": "r-12345678",
                 *             "path": "/path",
                 *             "port": 8080
                 *           }
                 *         ]
                 *       },
                 *       "name": "Galera",
                 *       "operatorCRDConfiguration": {
                 *         "endpointConfiguration": {
                 *           "admin": {
                 *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                 *             "networkingType": "PRIVATE",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": false
                 *           },
                 *           "cluster": {
                 *             "host": "https://my-endpoint.com",
                 *             "networkingType": "PUBLIC",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": true
                 *           }
                 *         },
                 *         "helmChartDependencies": [
                 *           {
                 *             "chartName": "cert-manager",
                 *             "chartVersion": "v1.5.3"
                 *           },
                 *           {
                 *             "chartName": "nginx-ingress",
                 *             "chartVersion": "v0.48.1"
                 *           },
                 *           {
                 *             "chartName": "external-dns",
                 *             "chartVersion": "v0.7.0"
                 *           },
                 *           {
                 *             "chartName": "cnpg-operator",
                 *             "chartVersion": "v0.23.1"
                 *           }
                 *         ],
                 *         "outputParameters": {
                 *           "expiresAt": "$out.status.notAfter",
                 *           "issuerName": "letsencrypt-prod"
                 *         },
                 *         "readinessConditions": {
                 *           "$out.status.conditions[?(@.type=='Ready')].status": true
                 *         },
                 *         "supplementalFiles": [
                 *           "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                 *           "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                 *         ],
                 *         "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                 *       },
                 *       "productTierId": "pt-12345678",
                 *       "proxyType": "PortsBasedProxy",
                 *       "resourceDependencies": [
                 *         {
                 *           "parameterMap": {
                 *             "userDatabase": "clusterOrg",
                 *             "writerId": "clusterWriterId"
                 *           },
                 *           "resourceId": "r-12345678"
                 *         },
                 *         {
                 *           "parameterMap": {
                 *             "readerId": "clusterReaderId",
                 *             "userDatabase": "clusterOrg"
                 *           },
                 *           "resourceId": "r-abcdef12"
                 *         }
                 *       ],
                 *       "resourceType": "Generic",
                 *       "terraformConfigurations": {
                 *         "Officiis facilis impedit animi et.": {
                 *           "gitConfiguration": {
                 *             "accessToken": "my-token",
                 *             "referenceName": "tags/v1.0.0",
                 *             "repositoryUrl": "https://github.com/username/myrepo",
                 *             "userName": "my-user"
                 *           },
                 *           "privateModuleGitAccessTokens": {
                 *             "tokenName": "accessToken"
                 *           },
                 *           "requiredOutputKeys": [
                 *             "output1"
                 *           ],
                 *           "requiredOutputs": [
                 *             {
                 *               "exported": true,
                 *               "key": "output1"
                 *             }
                 *           ],
                 *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                 *           "terraformPath": "/project1/tf"
                 *         },
                 *         "Quis exercitationem dolor culpa perferendis et qui.": {
                 *           "gitConfiguration": {
                 *             "accessToken": "my-token",
                 *             "referenceName": "tags/v1.0.0",
                 *             "repositoryUrl": "https://github.com/username/myrepo",
                 *             "userName": "my-user"
                 *           },
                 *           "privateModuleGitAccessTokens": {
                 *             "tokenName": "accessToken"
                 *           },
                 *           "requiredOutputKeys": [
                 *             "output1"
                 *           ],
                 *           "requiredOutputs": [
                 *             {
                 *               "exported": true,
                 *               "key": "output1"
                 *             }
                 *           ],
                 *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                 *           "terraformPath": "/project1/tf"
                 *         },
                 *         "Sunt ea harum eum dignissimos incidunt.": {
                 *           "gitConfiguration": {
                 *             "accessToken": "my-token",
                 *             "referenceName": "tags/v1.0.0",
                 *             "repositoryUrl": "https://github.com/username/myrepo",
                 *             "userName": "my-user"
                 *           },
                 *           "privateModuleGitAccessTokens": {
                 *             "tokenName": "accessToken"
                 *           },
                 *           "requiredOutputKeys": [
                 *             "output1"
                 *           ],
                 *           "requiredOutputs": [
                 *             {
                 *               "exported": true,
                 *               "key": "output1"
                 *             }
                 *           ],
                 *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                 *           "terraformPath": "/project1/tf"
                 *         }
                 *       }
                 *     } */
                "application/json": components["schemas"]["CreateResourceRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create an resource */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/DescribeResource": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the resource to describe. If not specified, the latest version is described.
                 * @example Iure quia qui iure dicta sint fugit.
                 */
                ProductTierVersion?: string;
                /**
                 * @description ProductTierId of the resource to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeResourceResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe an resource */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/DeleteResource": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete an resource */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/UpdateResource": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "additionalSecurityContext": {
                 *         "AddCapabilities": [
                 *           "CAP_NET_ADMIN",
                 *           "CAP_NET_RAW"
                 *         ],
                 *         "DropCapabilities": [
                 *           "CAP_NET_ADMIN",
                 *           "CAP_NET_RAW"
                 *         ],
                 *         "SupplementalGroupIDs": [
                 *           1001,
                 *           999
                 *         ]
                 *       },
                 *       "backupConfiguration": {
                 *         "backupPeriodInHours": 24,
                 *         "backupRetentionInDays": 7
                 *       },
                 *       "customLabels": {
                 *         "key": "value"
                 *       },
                 *       "customSysCTLs": {
                 *         "net.ipv4.tcp_syncookies": "1"
                 *       },
                 *       "customULimits": [
                 *         {
                 *           "ULimitsName": "NoProc",
                 *           "ULimitsType": "Soft",
                 *           "ULimitsValue": 1000
                 *         },
                 *         {
                 *           "ULimitsName": "NoFile",
                 *           "ULimitsType": "Hard",
                 *           "ULimitsValue": 2048
                 *         }
                 *       ],
                 *       "dependencies": [
                 *         {
                 *           "parameterMap": {
                 *             "clusterId": "writerId",
                 *             "clusterOrg": "userDatabase"
                 *           },
                 *           "resourceId": "r-12345678"
                 *         },
                 *         {
                 *           "parameterMap": {
                 *             "clusterId": "readerId",
                 *             "clusterOrg": "userDatabase"
                 *           },
                 *           "resourceId": "r-abcdef12"
                 *         }
                 *       ],
                 *       "description": "A resource to manage a hosted public SaaS offering of a multi-writer MySQL service",
                 *       "environmentVariables": [
                 *         {
                 *           "key": "MYSQL_ROOT_PASSWORD",
                 *           "value": "password"
                 *         }
                 *       ],
                 *       "helmChartConfiguration": {
                 *         "chartName": "my-chart",
                 *         "chartRepoName": "my-repo",
                 *         "chartRepoUrl": "https://my-repo.com",
                 *         "chartValues": {
                 *           "key1": "value1",
                 *           "key2": 3,
                 *           "key3": {
                 *             "key4": "value4"
                 *           }
                 *         },
                 *         "chartVersion": "1.0.0",
                 *         "endpointConfiguration": {
                 *           "admin": {
                 *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                 *             "networkingType": "PRIVATE",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": false
                 *           },
                 *           "cluster": {
                 *             "host": "https://my-endpoint.com",
                 *             "networkingType": "PUBLIC",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": true
                 *           }
                 *         },
                 *         "password": "my-password",
                 *         "runtimeConfiguration": {
                 *           "disableHooks": true,
                 *           "recreate": true,
                 *           "resetThenReuseValues": true,
                 *           "resetValues": true,
                 *           "reuseValues": true,
                 *           "skipCRDs": true,
                 *           "timeoutNanos": 1000000000,
                 *           "upgradeCRDs": true,
                 *           "wait": true,
                 *           "waitForJobs": true
                 *         },
                 *         "username": "my-user"
                 *       },
                 *       "imageConfigId": "imgc-12345678",
                 *       "infraConfigId": "ic-12345678",
                 *       "kustomizeConfiguration": {
                 *         "endpointConfiguration": {
                 *           "admin": {
                 *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                 *             "networkingType": "PRIVATE",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": false
                 *           },
                 *           "cluster": {
                 *             "host": "https://my-endpoint.com",
                 *             "networkingType": "PUBLIC",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": true
                 *           }
                 *         },
                 *         "gitConfiguration": {
                 *           "accessToken": "my-token",
                 *           "referenceName": "tags/v1.0.0",
                 *           "repositoryUrl": "https://github.com/username/myrepo",
                 *           "userName": "my-user"
                 *         },
                 *         "helmChartDependencies": [
                 *           {
                 *             "chartName": "cert-manager",
                 *             "chartVersion": "v1.5.3"
                 *           },
                 *           {
                 *             "chartName": "nginx-ingress",
                 *             "chartVersion": "v0.48.1"
                 *           },
                 *           {
                 *             "chartName": "external-dns",
                 *             "chartVersion": "v0.7.0"
                 *           },
                 *           {
                 *             "chartName": "cnpg-operator",
                 *             "chartVersion": "v0.23.1"
                 *           }
                 *         ],
                 *         "kustomizePath": "/kustomize"
                 *       },
                 *       "l4LoadBalancerConfiguration": {
                 *         "ingressPortConfiguration": [
                 *           {
                 *             "associatedResourceIDs": [
                 *               "r-12345678",
                 *               "r-abcdef12"
                 *             ],
                 *             "backendPort": 8080,
                 *             "ingressPort": 1234
                 *           },
                 *           {
                 *             "associatedResourceIDs": [
                 *               "r-12345678",
                 *               "r-abcdef12"
                 *             ],
                 *             "backendPort": 8081,
                 *             "ingressPort": 5678
                 *           },
                 *           {
                 *             "associatedResourceIDs": [
                 *               "r-vwxybz12",
                 *               "r-poij122v"
                 *             ],
                 *             "backendPort": 8082,
                 *             "ingressPort": 9012
                 *           }
                 *         ]
                 *       },
                 *       "l7LoadBalancerConfiguration": {
                 *         "paths": [
                 *           {
                 *             "associatedResourceID": "r-12345678",
                 *             "path": "/path",
                 *             "port": 8080
                 *           }
                 *         ]
                 *       },
                 *       "name": "Galera",
                 *       "operatorCRDConfiguration": {
                 *         "endpointConfiguration": {
                 *           "admin": {
                 *             "host": "https://{{ $sys.network.externalClusterEndpoint }}/admin",
                 *             "networkingType": "PRIVATE",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": false
                 *           },
                 *           "cluster": {
                 *             "host": "https://my-endpoint.com",
                 *             "networkingType": "PUBLIC",
                 *             "ports": [
                 *               8080,
                 *               8081
                 *             ],
                 *             "primary": true
                 *           }
                 *         },
                 *         "helmChartDependencies": [
                 *           {
                 *             "chartName": "cert-manager",
                 *             "chartVersion": "v1.5.3"
                 *           },
                 *           {
                 *             "chartName": "nginx-ingress",
                 *             "chartVersion": "v0.48.1"
                 *           },
                 *           {
                 *             "chartName": "external-dns",
                 *             "chartVersion": "v0.7.0"
                 *           },
                 *           {
                 *             "chartName": "cnpg-operator",
                 *             "chartVersion": "v0.23.1"
                 *           }
                 *         ],
                 *         "outputParameters": {
                 *           "expiresAt": "$out.status.notAfter",
                 *           "issuerName": "letsencrypt-prod"
                 *         },
                 *         "readinessConditions": {
                 *           "$out.status.conditions[?(@.type=='Ready')].status": true
                 *         },
                 *         "supplementalFiles": [
                 *           "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n",
                 *           "apiVersion: ingress.nginx.io/v1\nkind: IngressClass\nmetadata:\n  name: nginx\nspec:\n  controller: nginx.org/ingress-controller"
                 *         ],
                 *         "template": "apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt-prod\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: test@example.com\n    privateKeySecretRef:\n      name: letsencrypt-prod\n    solvers:\n    - http01:\n        ingress:\n          class: nginx"
                 *       },
                 *       "terraformConfigurations": {
                 *         "Iste praesentium optio consequuntur qui id.": {
                 *           "gitConfiguration": {
                 *             "accessToken": "my-token",
                 *             "referenceName": "tags/v1.0.0",
                 *             "repositoryUrl": "https://github.com/username/myrepo",
                 *             "userName": "my-user"
                 *           },
                 *           "privateModuleGitAccessTokens": {
                 *             "tokenName": "accessToken"
                 *           },
                 *           "requiredOutputKeys": [
                 *             "output1"
                 *           ],
                 *           "requiredOutputs": [
                 *             {
                 *               "exported": true,
                 *               "key": "output1"
                 *             }
                 *           ],
                 *           "terraformExecutionIdentity": "arn:aws:iam::123456789012:role/role-name",
                 *           "terraformPath": "/project1/tf"
                 *         }
                 *       }
                 *     } */
                "application/json": components["schemas"]["UpdateResourceRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update an resource */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/ListActionHooks": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service to which the hook belongs
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource to which the hook belongs
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListActionHooksResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list action hooks */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/RegisterActionHook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service to which the hook belongs
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource to which the hook belongs
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "commandTemplate": "ZWNobyAiaGVsbG8gd29ybGQi",
                 *       "customCommand": [
                 *         "/bin/sh",
                 *         "-c"
                 *       ],
                 *       "customImage": "my-custom-image:latest",
                 *       "scope": "CLUSTER",
                 *       "type": "ADD"
                 *     } */
                "application/json": components["schemas"]["RegisterActionHookRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to register an action hook */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/DeregisterActionHook": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the service to which the hook belongs
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource to which the hook belongs
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "scope": "CLUSTER",
                 *       "type": "ADD"
                 *     } */
                "application/json": components["schemas"]["DeregisterActionHookRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to deregister an action hook */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/ListResourceCapabilities": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the instance to describe. If not specified, the latest version is described.
                 * @example Id veniam voluptas.
                 */
                ProductTierVersion?: string;
                /**
                 * @description Product tier id of the instance to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListResourceCapabilitiesResponse"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to disable resource capabilities */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/EnableResourceCapability": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "capability": "SERVERLESS",
                 *       "configuration": {
                 *         "EnableAutoStop": true,
                 *         "MinimumNodesInPool": 5,
                 *         "PortsMappingProxyConfig": {
                 *           "MaxNumberOfClustersPerProxyInstance": 50,
                 *           "NumberOfPortsPerCluster": 4
                 *         },
                 *         "ReferenceProxyKey": "resource-proxy",
                 *         "TargetPort": 5432
                 *       }
                 *     } */
                "application/json": components["schemas"]["EnableResourceCapabilityRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to enable resource capabilities */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/DisableResourceCapability": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "capability": "SERVERLESS"
                 *     } */
                "application/json": components["schemas"]["DisableResourceCapabilityRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to disable resource capabilities */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/ListDependentResource": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListDependentResourcesResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list resources */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/DeprecateResource": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to deprecate an resource */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/UnsetEnvironmentVariables": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "environmentVariables": [
                 *         {
                 *           "key": "MYSQL_ROOT_PASSWORD",
                 *           "value": "password"
                 *         }
                 *       ]
                 *     } */
                "application/json": components["schemas"]["SetEnvironmentVariablesRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to remove environment variables from a resource */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/SetEnvironmentVariables": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "environmentVariables": [
                 *         {
                 *           "key": "MYSQL_ROOT_PASSWORD",
                 *           "value": "password"
                 *         }
                 *       ]
                 *     } */
                "application/json": components["schemas"]["SetEnvironmentVariablesRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to add environment variables to a resource */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/ListFiles": {
        parameters: {
            query?: {
                /**
                 * @description ProductTierId of the config file to describe
                 * @example pt-12345678
                 */
                productTierId?: string;
                /**
                 * @description Product tier version of the config file to describe. If missing, last version is described
                 * @example 1.0
                 */
                productTierVersion?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFilesResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list files */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/AddFile": {
        parameters: {
            query?: never;
            header: {
                /**
                 * @description Content-Type header, must define value for multipart boundary.
                 * @example multipart/form-data; boundary=boundary
                 */
                "Content-Type"?: string;
                /**
                 * @description The name of the file
                 * @example file.txt
                 */
                Name: string;
                /**
                 * @description The description of the file
                 * @example A file to store the configuration for the resource
                 */
                Description: string;
                /**
                 * @description The type of the file
                 * @example Config
                 */
                FileType: string;
                /**
                 * @description The mount path of the file
                 * @example /etc/config
                 */
                MountPath: string;
            };
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_media_type: Error returned when the Content-Type header does not define a multipart request. */
            415: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/GetFile": {
        parameters: {
            query?: {
                /**
                 * @description Product Tier ID of the config files to list
                 * @example pt-12345678
                 */
                productTierId?: string;
                /**
                 * @description Product Tier version of the config files to list. If missing, last version is used
                 * @example 1.0
                 */
                productTierVersion?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
                /**
                 * @description The ID of the file
                 * @example f-12345678
                 */
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    /**
                     * @description Length is the downloaded content length in bytes.
                     * @example 4194304
                     */
                    "Content-Length"?: number;
                    /**
                     * @description Content-Type header, must define value for multipart boundary.
                     * @example multipart/form-data; boundary=boundary
                     */
                    "Content-Type"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when the requested file is not found */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a file */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/RemoveFile": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
                /**
                 * @description The ID of the file
                 * @example file-12345678
                 */
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when the requested file is not found */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a file */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/UpdateFileContent": {
        parameters: {
            query?: never;
            header?: {
                /**
                 * @description Content-Type header, must define value for multipart boundary.
                 * @example multipart/form-data; boundary=boundary
                 */
                "Content-Type"?: string;
            };
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
                /**
                 * @description The ID of the file
                 * @example f-12345678
                 */
                fileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/UpdateFileMetadata": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
                /**
                 * @description The ID of the file
                 * @example f-12345678
                 */
                fileId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A file to store the configuration for the resource",
                 *       "mountPath": "/etc/config",
                 *       "name": "file.txt"
                 *     } */
                "application/json": components["schemas"]["UpdateFileMetadataRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/DescribeResourceMetricsConfig": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the resource to describe. If not specified, the latest version is described.
                 * @example Deserunt quia praesentium perspiciatis.
                 */
                ProductTierVersion?: string;
                /**
                 * @description ProductTierId of the resource to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Describeresourcemetricsconfigresult"];
                };
            };
            /** @description bad_request: Response on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response on failure to describe resource metrics */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/RegisterResourceMetricsConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "metricEndpoint": "http://localhost:9187/metrics"
                 *     } */
                "application/json": components["schemas"]["RegisterResourceMetricsConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response on failure to register resource metrics */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/DeregisterResourceMetricsConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response on failure to register resource metrics */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/AddResourceDependency": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
                /**
                 * @description The ID of the resource to be added as a dependency
                 * @example r-12345678
                 */
                resourceDependencyId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "parameterMap": {
                 *         "clusterId": "writerId",
                 *         "clusterOrg": "userDatabase"
                 *       }
                 *     } */
                "application/json": components["schemas"]["AddResourceDependencyRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to add a resource dependency to a resource */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "resource-api/RemoveResourceDependency": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource
                 * @example r-12345678
                 */
                id: string;
                /**
                 * @description The ID of the resource dependency to remove
                 * @example r-12345678
                 */
                resourceDependencyId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to remove a resource dependency from a resource */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "input-parameter-api/ListInputParameter": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the instance to describe. If not specified, the latest version is described.
                 * @example Ut voluptas.
                 */
                ProductTierVersion?: string;
                /**
                 * @description Product tier id of the instance to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the service that this output parameter belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource that this input parameter belongs to
                 * @example r-12345678
                 */
                resourceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListInputParametersResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list input parameters */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "output-parameter-api/ListOutputParameter": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the resource to describe. If not specified, the latest version is described.
                 * @example Aut sint ad ut totam quis dolores.
                 */
                ProductTierVersion?: string;
                /**
                 * @description ProductTierId of the resource to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the service that this output parameter belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The ID of the resource that this output parameter belongs to
                 * @example r-12345678
                 */
                resourceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListOutputParametersResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list output parameters */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api-api/CreateServiceAPI": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability",
                 *       "serviceEnvironmentId": "se-12345678"
                 *     } */
                "application/json": components["schemas"]["CreateServiceAPIRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a service API */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api-api/DescribeServiceAPI": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service API ID
                 * @example sa-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeServiceAPIResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a service API */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api-api/DeleteServiceAPI": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service API ID
                 * @example sa-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a service API */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api-api/UpdateServiceAPI": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service API ID
                 * @example sa-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A MySQL SaaS API specializing in multi-writer multi-tenant clusters for high availability"
                 *     } */
                "application/json": components["schemas"]["UpdateServiceAPIRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update a service API */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api-api/DescribePendingChanges": {
        parameters: {
            query?: {
                /**
                 * @description ProductTierID of the resource to describe pending changes forNeeds to specified in combination with the product tier version
                 * @example pt-12345678
                 */
                productTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service API ID
                 * @example sa-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribePendingChangesResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe pending changes to a service API */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api-api/DiscardPendingChanges": {
        parameters: {
            query?: {
                /**
                 * @description ProductTierID of the resource to describe pending changes forNeeds to specified in combination with the product tier version
                 * @example pt-12345678
                 */
                productTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service API ID
                 * @example sa-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe pending changes to a service API */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api-api/DeprecateServiceAPI": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service API ID
                 * @example sa-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to deprecate a service API */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api-api/ReleaseServiceAPI": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service API ID
                 * @example sa-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "isPreferred": true,
                 *       "productTierId": "pt-12345678",
                 *       "versionSetName": "v1",
                 *       "versionSetType": "Major|Incremental|UserDefined"
                 *     } */
                "application/json": components["schemas"]["ReleaseServiceAPIRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to release a service API */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-model-api/ListServiceModel": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service API ID
                 * @example sa-12345678
                 */
                serviceApiId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list service models */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "image-config-api/ListImageConfigs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID to use for the infra
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service environment ID
                 * @example se-12345678
                 */
                serviceEnvironmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list image configs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "infra-config-api/ListInfraConfig": {
        parameters: {
            query?: {
                /**
                 * @description Is infra config managed by omnistrate
                 * @example false
                 */
                managed?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service environment ID
                 * @example se-12345678
                 */
                serviceEnvironmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list infra configs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api-api/ListServiceAPI": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID that this API bundle belongs to
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The service environment ID
                 * @example se-12345678
                 */
                serviceEnvironmentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list service APIs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-config-api/ListStorageConfig": {
        parameters: {
            query?: {
                /**
                 * @description Is storage config managed by omnistrate
                 * @example false
                 */
                managed?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The service id to filter by
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list storage configs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-config-api/CreateStorageConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service to which this storage config belongs
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "my-storage-config-description",
                 *       "name": "my-storage-config"
                 *     } */
                "application/json": components["schemas"]["CreateStorageConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create storage config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-config-api/DescribeStorageConfig": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the storage config to describe. If not specified, the latest version is described.
                 * @example Ducimus voluptatem iusto velit.
                 */
                ProductTierVersion?: string;
                /**
                 * @description ProductTierId of the storage config to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The storage config ID
                 * @example sc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeStorageConfigResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe storage config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-config-api/DeleteStorageConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The storage config ID
                 * @example sc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a storage config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-config-api/UpdateStorageConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The storage config ID
                 * @example sc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "my-storage-config-description",
                 *       "name": "my-storage-config"
                 *     } */
                "application/json": components["schemas"]["UpdateServiceModelRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update storage config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-config-api/AddStorageVolumeConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The storage config ID
                 * @example sc-12345678
                 */
                id: string;
                /**
                 * @description The storage volume config ID
                 * @example svc-12345678
                 */
                storageVolumeConfigId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "mountPath": "/data"
                 *     } */
                "application/json": components["schemas"]["AddStorageVolumeConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to add storage volume config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-config-api/RemoveStorageVolumeConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The storage config ID
                 * @example sc-12345678
                 */
                id: string;
                /**
                 * @description The storage volume config ID
                 * @example svc-12345678
                 */
                storageVolumeConfigId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "mountPath": "/data"
                 *     } */
                "application/json": components["schemas"]["AddStorageVolumeConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to remove storage volume config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-volume-config-api/ListStorageVolumeConfig": {
        parameters: {
            query?: {
                /**
                 * @description Is storage volume config managed by omnistrate
                 * @example false
                 */
                managed?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The service to list storage volume configs for
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListServiceEnvironmentsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list storage volume configs */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-volume-config-api/CreateStorageVolumeConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "clusterStorageType": "S3|$var.storageType|AWS::EFS",
                 *       "description": "A storage volume set to store the MySQL data directory",
                 *       "disableBackup": false,
                 *       "instanceStorageIops": "$var.storageIops",
                 *       "instanceStorageSizeGi": "$var.storage_size",
                 *       "instanceStorageThroughputMiBps": "128",
                 *       "instanceStorageType": "$var.storageType",
                 *       "name": "MySQL Data Volume",
                 *       "storageResourceID": "r-12345678"
                 *     } */
                "application/json": components["schemas"]["CreateStorageVolumeConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create storage volume config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-volume-config-api/DescribeStorageVolumeConfig": {
        parameters: {
            query?: {
                /**
                 * @description Product tier version of the network config to describe. If not specified, the latest version is described.
                 * @example Quas placeat ut esse similique.
                 */
                ProductTierVersion?: string;
                /**
                 * @description ProductTierId of the network config to describe. Needs to specified in combination with the product tier version
                 * @example Beatae beatae.
                 */
                ProductTierId?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The storage volume config ID
                 * @example svc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeStorageVolumeConfigResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe storage volume config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-volume-config-api/DeleteStorageVolumeConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The storage volume config ID
                 * @example svc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a storage volume config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-volume-config-api/UpdateStorageVolumeConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The storage volume config ID
                 * @example svc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A storage volume set to store the MySQL data directory",
                 *       "disableBackup": false,
                 *       "name": "MySQL Data Volume"
                 *     } */
                "application/json": components["schemas"]["UpdateStorageVolumeConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update storage volume config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-volume-config-api/UpdateInstanceStorageVolumeConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The storage volume config ID
                 * @example svc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "instanceStorageIops": "7500",
                 *       "instanceStorageThroughputMiBps": "128",
                 *       "instanceStorageType": "AWS::EBS_GP2"
                 *     } */
                "application/json": components["schemas"]["UpdateInstanceStorageVolumeConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update instance storage volume type config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "storage-volume-config-api/UpdateStorageVolumeSizeConfig": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The service ID
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description The storage volume config ID
                 * @example svc-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "instanceStorageSizeGi": "$var.storage_size"
                 *     } */
                "application/json": components["schemas"]["UpdateStorageVolumeSizeConfigRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update storage volume size config */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "vunit-api/DescribeVUnit": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Service ID for the VUnit
                 * @example s-12345678
                 */
                serviceId: string;
                /**
                 * @description VUnit to operate on
                 * @example vu-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeVUnitResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a vunit */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api/BuildServiceFromComposeSpec": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "configs": {
                 *         "Est aliquam.": "Quae et id qui possimus."
                 *       },
                 *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                 *       "environment": "dev",
                 *       "environmentType": "DEV",
                 *       "fileContent": "Magni eaque dolore et.",
                 *       "name": "MySQL multi-writer service",
                 *       "release": true,
                 *       "releaseAsPreferred": true,
                 *       "releaseVersionName": "mysql",
                 *       "secrets": {
                 *         "Minima magnam occaecati.": "Maxime iusto dolorum odio.",
                 *         "Quae beatae eius.": "Amet doloremque."
                 *       },
                 *       "serviceLogoURL": "http://gusikowski.biz/keeley"
                 *     } */
                "application/json": components["schemas"]["BuildServiceFromComposeSpecRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuildServiceFromServicePlanSpecResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to build a service from compose spec */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api/CreateServiceFromComposeSpec": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                 *       "fileContent": "Sed laudantium quasi accusantium harum sit.",
                 *       "fileFormat": "text/plain",
                 *       "fileName": "mysql.yaml",
                 *       "name": "MySQL multi-writer service",
                 *       "serviceLogoURL": "http://ledner.com/mandy.bechtelar"
                 *     } */
                "application/json": components["schemas"]["CreateServiceFromComposeSpecRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a service */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "service-api/BuildServiceFromServicePlanSpec": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "description": "A MySQL SaaS specializing in multi-writer clusters for high availability",
                 *       "environment": "dev",
                 *       "environmentType": "DEV",
                 *       "fileContent": "Quo harum dolorum consequatur ut.",
                 *       "name": "MySQL multi-writer service",
                 *       "release": true,
                 *       "releaseAsPreferred": true,
                 *       "releaseVersionName": "mysql",
                 *       "serviceLogoURL": "http://morissette.net/webster.grimes"
                 *     } */
                "application/json": components["schemas"]["BuildServiceFromServicePlanSpecRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuildServiceFromServicePlanSpecResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to build a service from compose spec */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "signin-api/Signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "abc@gmail.com",
                 *       "hashedPassword": "deprecated",
                 *       "password": "password"
                 *     } */
                "application/json": components["schemas"]["SigninRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SigninResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to signin */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "signup-api/Signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "companyDescription": "We sell xyz database software",
                 *       "companyUrl": "https://www.mywebsite.com",
                 *       "email": "abc@gmail.com",
                 *       "legalCompanyName": "mywebsite",
                 *       "name": "John Doe",
                 *       "password": "password"
                 *     } */
                "application/json": components["schemas"]["SignupRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to signup */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "subscription-api/ListSubscriptions": {
        parameters: {
            query?: {
                /**
                 * @description Service Id
                 * @example service-12345678
                 */
                serviceId?: string;
                /**
                 * @description The environment type to filter by
                 * @example DEV
                 */
                environmentType?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSubscriptionsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to list subscriptions */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "subscription-api/CreateSubscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "productTierId": "pt-12345678",
                 *       "serviceId": "s-12345678"
                 *     } */
                "application/json": components["schemas"]["CreateSubscriptionRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a subscription */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "subscription-api/DescribeSubscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The subscription ID
                 * @example sub-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeSubscriptionResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a subscription */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "subscription-api/DeleteSubscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The subscription ID
                 * @example sub-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete a subscription */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "subscription-request-api/ListSubscriptionRequests": {
        parameters: {
            query?: {
                /**
                 * @description The status of the subscription request to filter by
                 * @example PENDING
                 */
                status?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSubscriptionRequestsResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a subscription */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "subscription-request-api/CreateSubscriptionRequest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "productTierId": "pt-12345678",
                 *       "serviceId": "s-12345678"
                 *     } */
                "application/json": components["schemas"]["CreateSubscriptionRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a subscription */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "subscription-request-api/DescribeSubscriptionRequest": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The subscription ID
                 * @example subr-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeSubscriptionRequestResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a subscription */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "subscription-request-api/CancelSubscriptionRequest": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The subscription ID
                 * @example subr-12345678
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to create a subscription */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/UpdatePassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "currentPassword": "currentPassword",
                 *       "currentPasswordHash": "currentPasswordHash",
                 *       "password": "password"
                 *     } */
                "application/json": components["schemas"]["UpdatePasswordRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to update password */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "usage-api/GetCurrentPlanUsage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetCurrentUsageResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to get usage */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/DescribeUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DescribeUserResult"];
                };
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/DeleteUser": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to delete user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "users-api/UpdateUser": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The User ID
                 * @example user-abcd1234
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "address": {
                 *         "addressLine1": "1234 Main St",
                 *         "addressLine2": "Apt 123",
                 *         "addressLine3": "Building 123",
                 *         "city": "San Francisco",
                 *         "country": "US",
                 *         "state": "CA",
                 *         "zip": "94123"
                 *       },
                 *       "name": "John Dae",
                 *       "orgDescription": "ACME Inc.",
                 *       "orgFavIconURL": "http://kunze.info/retha",
                 *       "orgLogoURL": "http://fritsch.org/marlene_hand",
                 *       "orgName": "ACME",
                 *       "orgPrivacyPolicy": "Magni qui.",
                 *       "orgSupportEmail": "support@example.com",
                 *       "orgTermsOfUse": "Rerum vel vero aut tempore aut dolor.",
                 *       "orgURL": "something.acme"
                 *     } */
                "application/json": components["schemas"]["UpdateUserRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to describe a user */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "signup-api/RegenerateToken": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @example user-abcd1234 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to regenerate token */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "signup-api/ValidateToken": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                /** @example {
                 *       "email": "abc@gmail.com",
                 *       "token": "fc7b8dea-a50b-4c9a-8864-fc3d845a2be6"
                 *     } */
                "application/json": components["schemas"]["ValidateTokenRequestBody"];
            };
        };
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description bad_request: Response used on a bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description auth_failure: Response used on authentication failure */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description forbidden: Response used on authorization failure */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description not_found: Response used when the requested resource is not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description invalid_state: Response used when requested resource is in an invalid state for this operation */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
            /** @description failed_request: Response used on failure to validate the token */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.goa.error": components["schemas"]["Error"];
                };
            };
        };
    };
    "global-api/registrationServiceVersion": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK response. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OmnistrateServiceVersionResult"];
                };
            };
        };
    };
}
